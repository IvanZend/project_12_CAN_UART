
project_12_FLASH_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000337c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003594  08003594  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800359c  0800359c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080035a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000002c  080035d0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080035d0  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c29a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dd0  00000000  00000000  0002c2f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a58  00000000  00000000  0002e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000960  00000000  00000000  0002eb20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ca92  00000000  00000000  0002f480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e8e  00000000  00000000  0004bf12  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b6c54  00000000  00000000  00054da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010b9f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002924  00000000  00000000  0010ba70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800353c 	.word	0x0800353c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	0800353c 	.word	0x0800353c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fab5 	bl	8000a8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f805 	bl	800052e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8b2 	bl	800068c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f864 	bl	80005f4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x14>

0800052e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b0a4      	sub	sp, #144	; 0x90
 8000532:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000534:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000538:	2238      	movs	r2, #56	; 0x38
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f002 fff5 	bl	800352c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000542:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000552:	463b      	mov	r3, r7
 8000554:	2244      	movs	r2, #68	; 0x44
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f002 ffe7 	bl	800352c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000562:	f000 fefd 	bl	8001360 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000566:	2301      	movs	r3, #1
 8000568:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000574:	2303      	movs	r3, #3
 8000576:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8000578:	2303      	movs	r3, #3
 800057a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 48;
 800057c:	2330      	movs	r3, #48	; 0x30
 800057e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000598:	4618      	mov	r0, r3
 800059a:	f000 ff95 	bl	80014c8 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005a4:	f000 f896 	bl	80006d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2303      	movs	r3, #3
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005c0:	2101      	movs	r1, #1
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fa98 	bl	8001af8 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005ce:	f000 f881 	bl	80006d4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fca7 	bl	8001f30 <HAL_RCCEx_PeriphCLKConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005e8:	f000 f874 	bl	80006d4 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3790      	adds	r7, #144	; 0x90
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <MX_USART2_UART_Init+0x90>)
 80005fa:	4a23      	ldr	r2, [pc, #140]	; (8000688 <MX_USART2_UART_Init+0x94>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_USART2_UART_Init+0x90>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_USART2_UART_Init+0x90>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_USART2_UART_Init+0x90>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_USART2_UART_Init+0x90>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_USART2_UART_Init+0x90>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_USART2_UART_Init+0x90>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_USART2_UART_Init+0x90>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_USART2_UART_Init+0x90>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_USART2_UART_Init+0x90>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_USART2_UART_Init+0x90>)
 8000638:	2200      	movs	r2, #0
 800063a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <MX_USART2_UART_Init+0x90>)
 800063e:	f001 fe67 	bl	8002310 <HAL_UART_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000648:	f000 f844 	bl	80006d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_USART2_UART_Init+0x90>)
 8000650:	f002 fe64 	bl	800331c <HAL_UARTEx_SetTxFifoThreshold>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800065a:	f000 f83b 	bl	80006d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800065e:	2100      	movs	r1, #0
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <MX_USART2_UART_Init+0x90>)
 8000662:	f002 fe99 	bl	8003398 <HAL_UARTEx_SetRxFifoThreshold>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800066c:	f000 f832 	bl	80006d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_USART2_UART_Init+0x90>)
 8000672:	f002 fe1a 	bl	80032aa <HAL_UARTEx_DisableFifoMode>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800067c:	f000 f82a 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000068 	.word	0x20000068
 8000688:	40004400 	.word	0x40004400

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_GPIO_Init+0x44>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <MX_GPIO_Init+0x44>)
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_GPIO_Init+0x44>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0320 	and.w	r3, r3, #32
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_GPIO_Init+0x44>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <MX_GPIO_Init+0x44>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_GPIO_Init+0x44>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x44>)
 80006ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <HAL_MspInit+0x44>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6613      	str	r3, [r2, #96]	; 0x60
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_MspInit+0x44>)
 80006f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_MspInit+0x44>)
 8000704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_MspInit+0x44>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	6593      	str	r3, [r2, #88]	; 0x58
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x44>)
 8000710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800071a:	f000 fec5 	bl	80014a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <HAL_UART_MspInit+0x8c>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d130      	bne.n	80007b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <HAL_UART_MspInit+0x90>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000752:	4a1a      	ldr	r2, [pc, #104]	; (80007bc <HAL_UART_MspInit+0x90>)
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000758:	6593      	str	r3, [r2, #88]	; 0x58
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <HAL_UART_MspInit+0x90>)
 800075c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_UART_MspInit+0x90>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <HAL_UART_MspInit+0x90>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_UART_MspInit+0x90>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800077e:	230c      	movs	r3, #12
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800078e:	2307      	movs	r3, #7
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f000 fc5e 	bl	800105c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2026      	movs	r0, #38	; 0x26
 80007a6:	f000 fabc 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007aa:	2026      	movs	r0, #38	; 0x26
 80007ac:	f000 fad3 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40004400 	.word	0x40004400
 80007bc:	40021000 	.word	0x40021000

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 f98c 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <USART2_IRQHandler+0x14>)
 8000822:	f001 ff2b 	bl	800267c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  UART_message_decode(&huart2);
 8000826:	4802      	ldr	r0, [pc, #8]	; (8000830 <USART2_IRQHandler+0x14>)
 8000828:	f000 f81a 	bl	8000860 <UART_message_decode>
  /* USER CODE END USART2_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000068 	.word	0x20000068

08000834 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <SystemInit+0x28>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a07      	ldr	r2, [pc, #28]	; (800085c <SystemInit+0x28>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <SystemInit+0x28>)
 800084a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800084e:	609a      	str	r2, [r3, #8]
#endif
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <UART_message_decode>:
#define UART_DATA_BYTE						1

#define FLASH_USER_START_ADDR		ADDR_FLASH_PAGE_0

void UART_message_decode(UART_HandleTypeDef *huart_pointer)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(huart_pointer, &UART_rx_buffer[0], (uint16_t)UART_MESSAGE_SIZE, (uint32_t)UART_TIMEOUT);
 8000868:	230a      	movs	r3, #10
 800086a:	2210      	movs	r2, #16
 800086c:	4930      	ldr	r1, [pc, #192]	; (8000930 <UART_message_decode+0xd0>)
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f001 fe34 	bl	80024dc <HAL_UART_Receive>
	switch (UART_rx_buffer[UART_COMMAND_BYTE])
 8000874:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <UART_message_decode+0xd0>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b04      	cmp	r3, #4
 800087a:	d854      	bhi.n	8000926 <UART_message_decode+0xc6>
 800087c:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <UART_message_decode+0x24>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	08000925 	.word	0x08000925
 8000888:	08000899 	.word	0x08000899
 800088c:	080008b3 	.word	0x080008b3
 8000890:	080008cf 	.word	0x080008cf
 8000894:	080008f7 	.word	0x080008f7

		break;
	}
	case WRITE_BYTE:
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, FLASH_USER_START_ADDR, UART_rx_buffer[UART_DATA_BYTE]);
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <UART_message_decode+0xd0>)
 800089a:	785b      	ldrb	r3, [r3, #1]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	f04f 0400 	mov.w	r4, #0
 80008a2:	461a      	mov	r2, r3
 80008a4:	4623      	mov	r3, r4
 80008a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 fad4 	bl	8000e58 <HAL_FLASH_Program>
		break;
 80008b0:	e039      	b.n	8000926 <UART_message_decode+0xc6>
	}
	case WRITE_LONG_VALUE:
	{
		uint64_t long_value = unite_digits_sequence(UART_LONG_VALUE_LENGHT_BYTES, &UART_rx_buffer[UART_DATA_BYTE]);
 80008b2:	4920      	ldr	r1, [pc, #128]	; (8000934 <UART_message_decode+0xd4>)
 80008b4:	2008      	movs	r0, #8
 80008b6:	f000 f843 	bl	8000940 <unite_digits_sequence>
 80008ba:	e9c7 0102 	strd	r0, r1, [r7, #8]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, FLASH_USER_START_ADDR, long_value);
 80008be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80008c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 fac6 	bl	8000e58 <HAL_FLASH_Program>
		break;
 80008cc:	e02b      	b.n	8000926 <UART_message_decode+0xc6>
	}
	case READ_BYTE:
	{
		uint64_t value_from_memory = *(__IO uint64_t *)FLASH_USER_START_ADDR;
 80008ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008d6:	e9c7 3404 	strd	r3, r4, [r7, #16]
		init_array_by_zero(sizeof(UART_tx_buffer), &UART_tx_buffer[0]);
 80008da:	4917      	ldr	r1, [pc, #92]	; (8000938 <UART_message_decode+0xd8>)
 80008dc:	2010      	movs	r0, #16
 80008de:	f000 f890 	bl	8000a02 <init_array_by_zero>
		UART_tx_buffer[0] = value_from_memory;
 80008e2:	7c3a      	ldrb	r2, [r7, #16]
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <UART_message_decode+0xd8>)
 80008e6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, UART_tx_buffer, sizeof(UART_tx_buffer), 10);
 80008e8:	230a      	movs	r3, #10
 80008ea:	2210      	movs	r2, #16
 80008ec:	4912      	ldr	r1, [pc, #72]	; (8000938 <UART_message_decode+0xd8>)
 80008ee:	4813      	ldr	r0, [pc, #76]	; (800093c <UART_message_decode+0xdc>)
 80008f0:	f001 fd5e 	bl	80023b0 <HAL_UART_Transmit>
		break;
 80008f4:	e017      	b.n	8000926 <UART_message_decode+0xc6>
	}
	case READ_LONG_VALUE:
	{
		uint64_t value_from_memory = *(__IO uint64_t *)FLASH_USER_START_ADDR;
 80008f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008fe:	e9c7 3406 	strd	r3, r4, [r7, #24]
		init_array_by_zero(sizeof(UART_tx_buffer), &UART_tx_buffer[0]);
 8000902:	490d      	ldr	r1, [pc, #52]	; (8000938 <UART_message_decode+0xd8>)
 8000904:	2010      	movs	r0, #16
 8000906:	f000 f87c 	bl	8000a02 <init_array_by_zero>
		distrbute_digits_to_bytes(value_from_memory, UART_LONG_VALUE_LENGHT_BYTES, &UART_tx_buffer[0]);
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <UART_message_decode+0xd8>)
 800090c:	2208      	movs	r2, #8
 800090e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000912:	f000 f847 	bl	80009a4 <distrbute_digits_to_bytes>
		HAL_UART_Transmit(&huart2, UART_tx_buffer, sizeof(UART_tx_buffer), 10);
 8000916:	230a      	movs	r3, #10
 8000918:	2210      	movs	r2, #16
 800091a:	4907      	ldr	r1, [pc, #28]	; (8000938 <UART_message_decode+0xd8>)
 800091c:	4807      	ldr	r0, [pc, #28]	; (800093c <UART_message_decode+0xdc>)
 800091e:	f001 fd47 	bl	80023b0 <HAL_UART_Transmit>
		break;
 8000922:	e000      	b.n	8000926 <UART_message_decode+0xc6>
		break;
 8000924:	bf00      	nop
	}
	}
}
 8000926:	bf00      	nop
 8000928:	3724      	adds	r7, #36	; 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	bf00      	nop
 8000930:	20000048 	.word	0x20000048
 8000934:	20000049 	.word	0x20000049
 8000938:	20000058 	.word	0x20000058
 800093c:	20000068 	.word	0x20000068

08000940 <unite_digits_sequence>:

uint64_t unite_digits_sequence(uint8_t number_of_values, uint8_t *byte_array_pointer)
{
 8000940:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8000944:	b087      	sub	sp, #28
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	6039      	str	r1, [r7, #0]
 800094c:	71fb      	strb	r3, [r7, #7]
	uint64_t summary_value = 0;
 800094e:	f04f 0300 	mov.w	r3, #0
 8000952:	f04f 0400 	mov.w	r4, #0
 8000956:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (int i = 8; i <= 0; i--)
 800095a:	2308      	movs	r3, #8
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	e015      	b.n	800098c <unite_digits_sequence+0x4c>
	{
		summary_value = summary_value + ((*(byte_array_pointer + i)) << i);
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	469b      	mov	fp, r3
 8000972:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8000976:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800097a:	eb1b 0301 	adds.w	r3, fp, r1
 800097e:	eb4c 0402 	adc.w	r4, ip, r2
 8000982:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (int i = 8; i <= 0; i--)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3b01      	subs	r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2b00      	cmp	r3, #0
 8000990:	dde6      	ble.n	8000960 <unite_digits_sequence+0x20>
	}
	return summary_value;
 8000992:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8000996:	4618      	mov	r0, r3
 8000998:	4621      	mov	r1, r4
 800099a:	371c      	adds	r7, #28
 800099c:	46bd      	mov	sp, r7
 800099e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80009a2:	4770      	bx	lr

080009a4 <distrbute_digits_to_bytes>:

void distrbute_digits_to_bytes(uint64_t value_to_distribute, uint8_t number_of_values, uint8_t *byte_array_pointer)
{
 80009a4:	b4f0      	push	{r4, r5, r6, r7}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < number_of_values; i++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	e01a      	b.n	80009f0 <distrbute_digits_to_bytes+0x4c>
	{
		*(byte_array_pointer + number_of_values - i) = value_to_distribute >> i;
 80009ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80009be:	6979      	ldr	r1, [r7, #20]
 80009c0:	f1c1 0620 	rsb	r6, r1, #32
 80009c4:	f1a1 0020 	sub.w	r0, r1, #32
 80009c8:	fa22 f401 	lsr.w	r4, r2, r1
 80009cc:	fa03 f606 	lsl.w	r6, r3, r6
 80009d0:	4334      	orrs	r4, r6
 80009d2:	fa23 f000 	lsr.w	r0, r3, r0
 80009d6:	4304      	orrs	r4, r0
 80009d8:	fa23 f501 	lsr.w	r5, r3, r1
 80009dc:	79fa      	ldrb	r2, [r7, #7]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	683a      	ldr	r2, [r7, #0]
 80009e4:	4413      	add	r3, r2
 80009e6:	b2e2      	uxtb	r2, r4
 80009e8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < number_of_values; i++)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	dbe0      	blt.n	80009ba <distrbute_digits_to_bytes+0x16>
	}
}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bcf0      	pop	{r4, r5, r6, r7}
 8000a00:	4770      	bx	lr

08000a02 <init_array_by_zero>:

void init_array_by_zero(uint8_t array_size, uint8_t* array_pointer)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b085      	sub	sp, #20
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	6039      	str	r1, [r7, #0]
 8000a0c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < array_size; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e007      	b.n	8000a24 <init_array_by_zero+0x22>
	{
		*(array_pointer + i) = 0;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < array_size; i++)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3301      	adds	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf3      	blt.n	8000a14 <init_array_by_zero+0x12>
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490e      	ldr	r1, [pc, #56]	; (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0b      	ldr	r4, [pc, #44]	; (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a62:	f7ff fee7 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f002 fd3d 	bl	80034e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6a:	f7ff fd55 	bl	8000518 <main>

08000a6e <LoopForever>:

LoopForever:
    b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   r0, =_estack
 8000a70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000a7c:	080035a4 	.word	0x080035a4
  ldr r2, =_sbss
 8000a80:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000a84:	200000f8 	.word	0x200000f8

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>

08000a8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f939 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 f80e 	bl	8000abc <HAL_InitTick>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	e001      	b.n	8000ab0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aac:	f7ff fe1a 	bl	80006e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_InitTick+0x68>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d022      	beq.n	8000b16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_InitTick+0x6c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_InitTick+0x68>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f944 	bl	8000d72 <HAL_SYSTICK_Config>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10f      	bne.n	8000b10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	d809      	bhi.n	8000b0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af6:	2200      	movs	r2, #0
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	f04f 30ff 	mov.w	r0, #4294967295
 8000afe:	f000 f910 	bl	8000d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_InitTick+0x70>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e007      	b.n	8000b1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e004      	b.n	8000b1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e001      	b.n	8000b1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x20>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b40:	6013      	str	r3, [r2, #0]
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	200000f4 	.word	0x200000f4
 8000b50:	20000008 	.word	0x20000008

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200000f4 	.word	0x200000f4

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff29 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff40 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff90 	bl	8000c60 <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5f 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff33 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffa4 	bl	8000cc8 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d00d      	beq.n	8000dbe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2204      	movs	r2, #4
 8000da6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2201      	movs	r2, #1
 8000dac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e047      	b.n	8000e4e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 020e 	bic.w	r2, r2, #14
 8000dcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0201 	bic.w	r2, r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f003 021f 	and.w	r2, r3, #31
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000e00:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e0a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00c      	beq.n	8000e2e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e2c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	4798      	blx	r3
    }
  }
  return status;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <HAL_FLASH_Program+0xa4>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d101      	bne.n	8000e76 <HAL_FLASH_Program+0x1e>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e03e      	b.n	8000ef4 <HAL_FLASH_Program+0x9c>
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_FLASH_Program+0xa4>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e80:	f000 f840 	bl	8000f04 <FLASH_WaitForLastOperation>
 8000e84:	4603      	mov	r3, r0
 8000e86:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8000e88:	7dfb      	ldrb	r3, [r7, #23]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d12e      	bne.n	8000eec <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_FLASH_Program+0xa4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d107      	bne.n	8000eaa <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e9e:	68b8      	ldr	r0, [r7, #8]
 8000ea0:	f000 f884 	bl	8000fac <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	e010      	b.n	8000ecc <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d002      	beq.n	8000eb6 <HAL_FLASH_Program+0x5e>
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d10a      	bne.n	8000ecc <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	68b8      	ldr	r0, [r7, #8]
 8000ebc:	f000 f89a 	bl	8000ff4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d102      	bne.n	8000ecc <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8000ec6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000eca:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed0:	f000 f818 	bl	8000f04 <FLASH_WaitForLastOperation>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_FLASH_Program+0xa8>)
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4906      	ldr	r1, [pc, #24]	; (8000f00 <HAL_FLASH_Program+0xa8>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_FLASH_Program+0xa4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000000c 	.word	0x2000000c
 8000f00:	40022000 	.word	0x40022000

08000f04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff fe22 	bl	8000b54 <HAL_GetTick>
 8000f10:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000f12:	e009      	b.n	8000f28 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8000f14:	f7ff fe1e 	bl	8000b54 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d201      	bcs.n	8000f28 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e038      	b.n	8000f9a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <FLASH_WaitForLastOperation+0xa0>)
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f34:	d0ee      	beq.n	8000f14 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <FLASH_WaitForLastOperation+0xa0>)
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d01e      	beq.n	8000f86 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <FLASH_WaitForLastOperation+0xa4>)
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <FLASH_WaitForLastOperation+0xa4>)
 8000f52:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d007      	beq.n	8000f6e <FLASH_WaitForLastOperation+0x6a>
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <FLASH_WaitForLastOperation+0xa0>)
 8000f60:	699a      	ldr	r2, [r3, #24]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000f68:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <FLASH_WaitForLastOperation+0xa0>)
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	618b      	str	r3, [r1, #24]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d004      	beq.n	8000f82 <FLASH_WaitForLastOperation+0x7e>
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <FLASH_WaitForLastOperation+0xa0>)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000f80:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e009      	b.n	8000f9a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <FLASH_WaitForLastOperation+0xa0>)
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d102      	bne.n	8000f98 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <FLASH_WaitForLastOperation+0xa0>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40022000 	.word	0x40022000
 8000fa8:	2000000c 	.word	0x2000000c

08000fac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000fac:	b490      	push	{r4, r7}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <FLASH_Program_DoubleWord+0x44>)
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <FLASH_Program_DoubleWord+0x44>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000fca:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8000fce:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	f04f 0400 	mov.w	r4, #0
 8000fda:	0013      	movs	r3, r2
 8000fdc:	2400      	movs	r4, #0
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	3204      	adds	r2, #4
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc90      	pop	{r4, r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40022000 	.word	0x40022000

08000ff4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8000ffe:	2340      	movs	r3, #64	; 0x40
 8001000:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <FLASH_Program_Fast+0x64>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <FLASH_Program_Fast+0x64>)
 8001010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001014:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001016:	f3ef 8310 	mrs	r3, PRIMASK
 800101a:	60fb      	str	r3, [r7, #12]
  return(result);
 800101c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800101e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	3304      	adds	r3, #4
 800102e:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3304      	adds	r3, #4
 8001034:	617b      	str	r3, [r7, #20]
    row_index--;
 8001036:	7ffb      	ldrb	r3, [r7, #31]
 8001038:	3b01      	subs	r3, #1
 800103a:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800103c:	7ffb      	ldrb	r3, [r7, #31]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1ef      	bne.n	8001022 <FLASH_Program_Fast+0x2e>
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800104c:	bf00      	nop
 800104e:	3724      	adds	r7, #36	; 0x24
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	40022000 	.word	0x40022000

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800106a:	e15a      	b.n	8001322 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 814c 	beq.w	800131c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00b      	beq.n	80010a4 <HAL_GPIO_Init+0x48>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d007      	beq.n	80010a4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001098:	2b11      	cmp	r3, #17
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b12      	cmp	r3, #18
 80010a2:	d130      	bne.n	8001106 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010da:	2201      	movs	r2, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	091b      	lsrs	r3, r3, #4
 80010f0:	f003 0201 	and.w	r2, r3, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0xea>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b12      	cmp	r3, #18
 8001144:	d123      	bne.n	800118e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	6939      	ldr	r1, [r7, #16]
 800118a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0203 	and.w	r2, r3, #3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 80a6 	beq.w	800131c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d0:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <HAL_GPIO_Init+0x2e4>)
 80011d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d4:	4a5a      	ldr	r2, [pc, #360]	; (8001340 <HAL_GPIO_Init+0x2e4>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6613      	str	r3, [r2, #96]	; 0x60
 80011dc:	4b58      	ldr	r3, [pc, #352]	; (8001340 <HAL_GPIO_Init+0x2e4>)
 80011de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e8:	4a56      	ldr	r2, [pc, #344]	; (8001344 <HAL_GPIO_Init+0x2e8>)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001212:	d01f      	beq.n	8001254 <HAL_GPIO_Init+0x1f8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a4c      	ldr	r2, [pc, #304]	; (8001348 <HAL_GPIO_Init+0x2ec>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d019      	beq.n	8001250 <HAL_GPIO_Init+0x1f4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a4b      	ldr	r2, [pc, #300]	; (800134c <HAL_GPIO_Init+0x2f0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d013      	beq.n	800124c <HAL_GPIO_Init+0x1f0>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_GPIO_Init+0x2f4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d00d      	beq.n	8001248 <HAL_GPIO_Init+0x1ec>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a49      	ldr	r2, [pc, #292]	; (8001354 <HAL_GPIO_Init+0x2f8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d007      	beq.n	8001244 <HAL_GPIO_Init+0x1e8>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a48      	ldr	r2, [pc, #288]	; (8001358 <HAL_GPIO_Init+0x2fc>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d101      	bne.n	8001240 <HAL_GPIO_Init+0x1e4>
 800123c:	2305      	movs	r3, #5
 800123e:	e00a      	b.n	8001256 <HAL_GPIO_Init+0x1fa>
 8001240:	2306      	movs	r3, #6
 8001242:	e008      	b.n	8001256 <HAL_GPIO_Init+0x1fa>
 8001244:	2304      	movs	r3, #4
 8001246:	e006      	b.n	8001256 <HAL_GPIO_Init+0x1fa>
 8001248:	2303      	movs	r3, #3
 800124a:	e004      	b.n	8001256 <HAL_GPIO_Init+0x1fa>
 800124c:	2302      	movs	r3, #2
 800124e:	e002      	b.n	8001256 <HAL_GPIO_Init+0x1fa>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <HAL_GPIO_Init+0x1fa>
 8001254:	2300      	movs	r3, #0
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	f002 0203 	and.w	r2, r2, #3
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	4093      	lsls	r3, r2
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001266:	4937      	ldr	r1, [pc, #220]	; (8001344 <HAL_GPIO_Init+0x2e8>)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001274:	4b39      	ldr	r3, [pc, #228]	; (800135c <HAL_GPIO_Init+0x300>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001298:	4a30      	ldr	r2, [pc, #192]	; (800135c <HAL_GPIO_Init+0x300>)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <HAL_GPIO_Init+0x300>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012c2:	4a26      	ldr	r2, [pc, #152]	; (800135c <HAL_GPIO_Init+0x300>)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_GPIO_Init+0x300>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ec:	4a1b      	ldr	r2, [pc, #108]	; (800135c <HAL_GPIO_Init+0x300>)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <HAL_GPIO_Init+0x300>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <HAL_GPIO_Init+0x300>)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3301      	adds	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	f47f ae9d 	bne.w	800106c <HAL_GPIO_Init+0x10>
  }
}
 8001332:	bf00      	nop
 8001334:	371c      	adds	r7, #28
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	48000400 	.word	0x48000400
 800134c:	48000800 	.word	0x48000800
 8001350:	48000c00 	.word	0x48000c00
 8001354:	48001000 	.word	0x48001000
 8001358:	48001400 	.word	0x48001400
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d141      	bne.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800136e:	4b4b      	ldr	r3, [pc, #300]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137a:	d131      	bne.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800137c:	4b47      	ldr	r3, [pc, #284]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001382:	4a46      	ldr	r2, [pc, #280]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001388:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800138c:	4b43      	ldr	r3, [pc, #268]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001394:	4a41      	ldr	r2, [pc, #260]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800139c:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2232      	movs	r2, #50	; 0x32
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	0c9b      	lsrs	r3, r3, #18
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b2:	e002      	b.n	80013ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ba:	4b38      	ldr	r3, [pc, #224]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c6:	d102      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f2      	bne.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ce:	4b33      	ldr	r3, [pc, #204]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013da:	d158      	bne.n	800148e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e057      	b.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013e6:	4a2d      	ldr	r2, [pc, #180]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013f0:	e04d      	b.n	800148e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013f8:	d141      	bne.n	800147e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fa:	4b28      	ldr	r3, [pc, #160]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001406:	d131      	bne.n	800146c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800140e:	4a23      	ldr	r2, [pc, #140]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001414:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001418:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001420:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001426:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2232      	movs	r2, #50	; 0x32
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001434:	fba2 2303 	umull	r2, r3, r2, r3
 8001438:	0c9b      	lsrs	r3, r3, #18
 800143a:	3301      	adds	r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800143e:	e002      	b.n	8001446 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3b01      	subs	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001452:	d102      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f2      	bne.n	8001440 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001466:	d112      	bne.n	800148e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e011      	b.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001478:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800147c:	e007      	b.n	800148e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001488:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800148c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40007000 	.word	0x40007000
 80014a0:	20000000 	.word	0x20000000
 80014a4:	431bde83 	.word	0x431bde83

080014a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b6:	6093      	str	r3, [r2, #8]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40007000 	.word	0x40007000

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e308      	b.n	8001aec <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d075      	beq.n	80015d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e6:	4ba3      	ldr	r3, [pc, #652]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f0:	4ba0      	ldr	r3, [pc, #640]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	d102      	bne.n	8001506 <HAL_RCC_OscConfig+0x3e>
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d002      	beq.n	800150c <HAL_RCC_OscConfig+0x44>
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b08      	cmp	r3, #8
 800150a:	d10b      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4b99      	ldr	r3, [pc, #612]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d05b      	beq.n	80015d0 <HAL_RCC_OscConfig+0x108>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d157      	bne.n	80015d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e2e3      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x74>
 800152e:	4b91      	ldr	r3, [pc, #580]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a90      	ldr	r2, [pc, #576]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x98>
 8001546:	4b8b      	ldr	r3, [pc, #556]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a8a      	ldr	r2, [pc, #552]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b88      	ldr	r3, [pc, #544]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a87      	ldr	r2, [pc, #540]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 8001560:	4b84      	ldr	r3, [pc, #528]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a83      	ldr	r2, [pc, #524]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b81      	ldr	r3, [pc, #516]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a80      	ldr	r2, [pc, #512]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fae8 	bl	8000b54 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fae4 	bl	8000b54 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e2a8      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159a:	4b76      	ldr	r3, [pc, #472]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xc0>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fad4 	bl	8000b54 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fad0 	bl	8000b54 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e294      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c2:	4b6c      	ldr	r3, [pc, #432]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0xe8>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d075      	beq.n	80016ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015de:	4b65      	ldr	r3, [pc, #404]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e8:	4b62      	ldr	r3, [pc, #392]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	d102      	bne.n	80015fe <HAL_RCC_OscConfig+0x136>
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d002      	beq.n	8001604 <HAL_RCC_OscConfig+0x13c>
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b04      	cmp	r3, #4
 8001602:	d11f      	bne.n	8001644 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001604:	4b5b      	ldr	r3, [pc, #364]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_OscConfig+0x154>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e267      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b55      	ldr	r3, [pc, #340]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	4952      	ldr	r1, [pc, #328]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001630:	4b51      	ldr	r3, [pc, #324]	; (8001778 <HAL_RCC_OscConfig+0x2b0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fa41 	bl	8000abc <HAL_InitTick>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d043      	beq.n	80016c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e253      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d023      	beq.n	8001694 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164c:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a48      	ldr	r2, [pc, #288]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fa7c 	bl	8000b54 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff fa78 	bl	8000b54 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e23c      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001672:	4b40      	ldr	r3, [pc, #256]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	061b      	lsls	r3, r3, #24
 800168c:	4939      	ldr	r1, [pc, #228]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
 8001692:	e01a      	b.n	80016ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001694:	4b37      	ldr	r3, [pc, #220]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a36      	ldr	r2, [pc, #216]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800169a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800169e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fa58 	bl	8000b54 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff fa54 	bl	8000b54 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e218      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1e0>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d03c      	beq.n	8001750 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d01c      	beq.n	8001718 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e4:	4a23      	ldr	r2, [pc, #140]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff fa31 	bl	8000b54 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff fa2d 	bl	8000b54 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1f1      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800170a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0ef      	beq.n	80016f6 <HAL_RCC_OscConfig+0x22e>
 8001716:	e01b      	b.n	8001750 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800171a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171e:	4a15      	ldr	r2, [pc, #84]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fa14 	bl	8000b54 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff fa10 	bl	8000b54 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1d4      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1ef      	bne.n	8001730 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80ab 	beq.w	80018b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x2b4>
 800176e:	2301      	movs	r3, #1
 8001770:	e005      	b.n	800177e <HAL_RCC_OscConfig+0x2b6>
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	20000004 	.word	0x20000004
 800177c:	2300      	movs	r3, #0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00d      	beq.n	800179e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4baf      	ldr	r3, [pc, #700]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	4aae      	ldr	r2, [pc, #696]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	6593      	str	r3, [r2, #88]	; 0x58
 800178e:	4bac      	ldr	r3, [pc, #688]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800179a:	2301      	movs	r3, #1
 800179c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179e:	4ba9      	ldr	r3, [pc, #676]	; (8001a44 <HAL_RCC_OscConfig+0x57c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d118      	bne.n	80017dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017aa:	4ba6      	ldr	r3, [pc, #664]	; (8001a44 <HAL_RCC_OscConfig+0x57c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4aa5      	ldr	r2, [pc, #660]	; (8001a44 <HAL_RCC_OscConfig+0x57c>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b6:	f7ff f9cd 	bl	8000b54 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017be:	f7ff f9c9 	bl	8000b54 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e18d      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d0:	4b9c      	ldr	r3, [pc, #624]	; (8001a44 <HAL_RCC_OscConfig+0x57c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d108      	bne.n	80017f6 <HAL_RCC_OscConfig+0x32e>
 80017e4:	4b96      	ldr	r3, [pc, #600]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ea:	4a95      	ldr	r2, [pc, #596]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f4:	e024      	b.n	8001840 <HAL_RCC_OscConfig+0x378>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d110      	bne.n	8001820 <HAL_RCC_OscConfig+0x358>
 80017fe:	4b90      	ldr	r3, [pc, #576]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001804:	4a8e      	ldr	r2, [pc, #568]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800180e:	4b8c      	ldr	r3, [pc, #560]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001814:	4a8a      	ldr	r2, [pc, #552]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800181e:	e00f      	b.n	8001840 <HAL_RCC_OscConfig+0x378>
 8001820:	4b87      	ldr	r3, [pc, #540]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001826:	4a86      	ldr	r2, [pc, #536]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001830:	4b83      	ldr	r3, [pc, #524]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001836:	4a82      	ldr	r2, [pc, #520]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d016      	beq.n	8001876 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff f984 	bl	8000b54 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7ff f980 	bl	8000b54 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	; 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e142      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001866:	4b76      	ldr	r3, [pc, #472]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ed      	beq.n	8001850 <HAL_RCC_OscConfig+0x388>
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff f96d 	bl	8000b54 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff f969 	bl	8000b54 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e12b      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001894:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ed      	bne.n	800187e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018a2:	7ffb      	ldrb	r3, [r7, #31]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a8:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a64      	ldr	r2, [pc, #400]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80018ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d03c      	beq.n	800193a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01c      	beq.n	8001902 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018c8:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80018ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ce:	4a5c      	ldr	r2, [pc, #368]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff f93c 	bl	8000b54 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e0:	f7ff f938 	bl	8000b54 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e0fc      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018f2:	4b53      	ldr	r3, [pc, #332]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80018f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ef      	beq.n	80018e0 <HAL_RCC_OscConfig+0x418>
 8001900:	e01b      	b.n	800193a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001902:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001904:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001908:	4a4d      	ldr	r2, [pc, #308]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff f91f 	bl	8000b54 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800191a:	f7ff f91b 	bl	8000b54 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0df      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800192c:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 800192e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ef      	bne.n	800191a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80d3 	beq.w	8001aea <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001944:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b0c      	cmp	r3, #12
 800194e:	f000 808d 	beq.w	8001a6c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d15a      	bne.n	8001a10 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a38      	ldr	r2, [pc, #224]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001960:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff f8f5 	bl	8000b54 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff f8f1 	bl	8000b54 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e0b5      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001980:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198c:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_RCC_OscConfig+0x580>)
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6a11      	ldr	r1, [r2, #32]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800199c:	3a01      	subs	r2, #1
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	4311      	orrs	r1, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80019a6:	0212      	lsls	r2, r2, #8
 80019a8:	4311      	orrs	r1, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019ae:	0852      	lsrs	r2, r2, #1
 80019b0:	3a01      	subs	r2, #1
 80019b2:	0552      	lsls	r2, r2, #21
 80019b4:	4311      	orrs	r1, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019ba:	0852      	lsrs	r2, r2, #1
 80019bc:	3a01      	subs	r2, #1
 80019be:	0652      	lsls	r2, r2, #25
 80019c0:	4311      	orrs	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019c6:	06d2      	lsls	r2, r2, #27
 80019c8:	430a      	orrs	r2, r1
 80019ca:	491d      	ldr	r1, [pc, #116]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff f8b4 	bl	8000b54 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff f8b0 	bl	8000b54 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e074      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x528>
 8001a0e:	e06c      	b.n	8001aea <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001a2e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f88c 	bl	8000b54 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3e:	e00e      	b.n	8001a5e <HAL_RCC_OscConfig+0x596>
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40007000 	.word	0x40007000
 8001a48:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff f882 	bl	8000b54 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e046      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5e:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <HAL_RCC_OscConfig+0x62c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x584>
 8001a6a:	e03e      	b.n	8001aea <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e039      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_RCC_OscConfig+0x62c>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 0203 	and.w	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d12c      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	3b01      	subs	r3, #1
 8001a98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d123      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d11b      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d113      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	085b      	lsrs	r3, r3, #1
 8001aca:	3b01      	subs	r3, #1
 8001acc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000

08001af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e11e      	b.n	8001d4e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b91      	ldr	r3, [pc, #580]	; (8001d58 <HAL_RCC_ClockConfig+0x260>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d910      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b8e      	ldr	r3, [pc, #568]	; (8001d58 <HAL_RCC_ClockConfig+0x260>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 020f 	bic.w	r2, r3, #15
 8001b26:	498c      	ldr	r1, [pc, #560]	; (8001d58 <HAL_RCC_ClockConfig+0x260>)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b8a      	ldr	r3, [pc, #552]	; (8001d58 <HAL_RCC_ClockConfig+0x260>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e106      	b.n	8001d4e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d073      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d129      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b54:	4b81      	ldr	r3, [pc, #516]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0f4      	b.n	8001d4e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b64:	f000 f99e 	bl	8001ea4 <RCC_GetSysClockFreqFromPLLSource>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4a7c      	ldr	r2, [pc, #496]	; (8001d60 <HAL_RCC_ClockConfig+0x268>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d93f      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b72:	4b7a      	ldr	r3, [pc, #488]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d033      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d12f      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b92:	4b72      	ldr	r3, [pc, #456]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b9a:	4a70      	ldr	r2, [pc, #448]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e024      	b.n	8001bf2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb0:	4b6a      	ldr	r3, [pc, #424]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0c6      	b.n	8001d4e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0be      	b.n	8001d4e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bd0:	f000 f8ce 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4a61      	ldr	r2, [pc, #388]	; (8001d60 <HAL_RCC_ClockConfig+0x268>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d909      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bde:	4b5f      	ldr	r3, [pc, #380]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001be6:	4a5d      	ldr	r2, [pc, #372]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f023 0203 	bic.w	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4957      	ldr	r1, [pc, #348]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c04:	f7fe ffa6 	bl	8000b54 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7fe ffa2 	bl	8000b54 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e095      	b.n	8001d4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b4e      	ldr	r3, [pc, #312]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 020c 	and.w	r2, r3, #12
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1eb      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d023      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c4c:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4a42      	ldr	r2, [pc, #264]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001c52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c64:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001c6c:	4a3b      	ldr	r2, [pc, #236]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4936      	ldr	r1, [pc, #216]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b80      	cmp	r3, #128	; 0x80
 8001c8c:	d105      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c8e:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001c94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_RCC_ClockConfig+0x260>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d21d      	bcs.n	8001ce4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <HAL_RCC_ClockConfig+0x260>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 020f 	bic.w	r2, r3, #15
 8001cb0:	4929      	ldr	r1, [pc, #164]	; (8001d58 <HAL_RCC_ClockConfig+0x260>)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cb8:	f7fe ff4c 	bl	8000b54 <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7fe ff48 	bl	8000b54 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e03b      	b.n	8001d4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_RCC_ClockConfig+0x260>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d1ed      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4917      	ldr	r1, [pc, #92]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	490f      	ldr	r1, [pc, #60]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d22:	f000 f825 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d26:	4601      	mov	r1, r0
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_RCC_ClockConfig+0x264>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <HAL_RCC_ClockConfig+0x26c>)
 8001d34:	5cd3      	ldrb	r3, [r2, r3]
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_RCC_ClockConfig+0x270>)
 8001d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_RCC_ClockConfig+0x274>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe feb8 	bl	8000abc <HAL_InitTick>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	04c4b400 	.word	0x04c4b400
 8001d64:	08003564 	.word	0x08003564
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d76:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d82:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	e047      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d102      	bne.n	8001d9a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d94:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	e03e      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d136      	bne.n	8001e14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d10c      	bne.n	8001dde <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc4:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dce:	68d2      	ldr	r2, [r2, #12]
 8001dd0:	0a12      	lsrs	r2, r2, #8
 8001dd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
      break;
 8001ddc:	e00c      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dde:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de8:	68d2      	ldr	r2, [r2, #12]
 8001dea:	0a12      	lsrs	r2, r2, #8
 8001dec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
      break;
 8001df6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0e5b      	lsrs	r3, r3, #25
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	3301      	adds	r3, #1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e001      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e18:	693b      	ldr	r3, [r7, #16]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	371c      	adds	r7, #28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	00f42400 	.word	0x00f42400
 8001e30:	007a1200 	.word	0x007a1200

08001e34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000000 	.word	0x20000000

08001e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e50:	f7ff fff0 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e54:	4601      	mov	r1, r0
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e62:	5cd3      	ldrb	r3, [r2, r3]
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08003574 	.word	0x08003574

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e7c:	f7ff ffda 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e80:	4601      	mov	r1, r0
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0adb      	lsrs	r3, r3, #11
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e8e:	5cd3      	ldrb	r3, [r2, r3]
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	08003574 	.word	0x08003574

08001ea4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d10c      	bne.n	8001ee2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ec8:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ed2:	68d2      	ldr	r2, [r2, #12]
 8001ed4:	0a12      	lsrs	r2, r2, #8
 8001ed6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	617b      	str	r3, [r7, #20]
    break;
 8001ee0:	e00c      	b.n	8001efc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eea:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eec:	68d2      	ldr	r2, [r2, #12]
 8001eee:	0a12      	lsrs	r2, r2, #8
 8001ef0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    break;
 8001efa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0e5b      	lsrs	r3, r3, #25
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	3301      	adds	r3, #1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f16:	687b      	ldr	r3, [r7, #4]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	371c      	adds	r7, #28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	40021000 	.word	0x40021000
 8001f28:	007a1200 	.word	0x007a1200
 8001f2c:	00f42400 	.word	0x00f42400

08001f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f38:	2300      	movs	r3, #0
 8001f3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8098 	beq.w	800207e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f52:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10d      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b40      	ldr	r3, [pc, #256]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	4a3f      	ldr	r2, [pc, #252]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f68:	6593      	str	r3, [r2, #88]	; 0x58
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f76:	2301      	movs	r3, #1
 8001f78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a39      	ldr	r2, [pc, #228]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f86:	f7fe fde5 	bl	8000b54 <HAL_GetTick>
 8001f8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f8c:	e009      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7fe fde1 	bl	8000b54 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d902      	bls.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	74fb      	strb	r3, [r7, #19]
        break;
 8001fa0:	e005      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fa2:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0ef      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001fae:	7cfb      	ldrb	r3, [r7, #19]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d159      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fbe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d01e      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d019      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fdc:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe2:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fec:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ffc:	4a18      	ldr	r2, [pc, #96]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d016      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7fe fda1 	bl	8000b54 <HAL_GetTick>
 8002012:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002014:	e00b      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7fe fd9d 	bl	8000b54 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d902      	bls.n	800202e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	74fb      	strb	r3, [r7, #19]
            break;
 800202c:	e006      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ec      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10b      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4903      	ldr	r1, [pc, #12]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002058:	e008      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800205a:	7cfb      	ldrb	r3, [r7, #19]
 800205c:	74bb      	strb	r3, [r7, #18]
 800205e:	e005      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800206c:	7c7b      	ldrb	r3, [r7, #17]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4ba6      	ldr	r3, [pc, #664]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	4aa5      	ldr	r2, [pc, #660]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800208a:	4ba0      	ldr	r3, [pc, #640]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002090:	f023 0203 	bic.w	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	499c      	ldr	r1, [pc, #624]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ac:	4b97      	ldr	r3, [pc, #604]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f023 020c 	bic.w	r2, r3, #12
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	4994      	ldr	r1, [pc, #592]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ce:	4b8f      	ldr	r3, [pc, #572]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	498b      	ldr	r1, [pc, #556]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020f0:	4b86      	ldr	r3, [pc, #536]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	4983      	ldr	r1, [pc, #524]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002112:	4b7e      	ldr	r3, [pc, #504]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002118:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	497a      	ldr	r1, [pc, #488]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002134:	4b75      	ldr	r3, [pc, #468]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	4972      	ldr	r1, [pc, #456]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002156:	4b6d      	ldr	r3, [pc, #436]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	4969      	ldr	r1, [pc, #420]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002178:	4b64      	ldr	r3, [pc, #400]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4961      	ldr	r1, [pc, #388]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800219a:	4b5c      	ldr	r3, [pc, #368]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	4958      	ldr	r1, [pc, #352]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d015      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021bc:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	4950      	ldr	r1, [pc, #320]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021da:	d105      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021dc:	4b4b      	ldr	r3, [pc, #300]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a4a      	ldr	r2, [pc, #296]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d015      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021f4:	4b45      	ldr	r3, [pc, #276]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	4942      	ldr	r1, [pc, #264]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002212:	d105      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002214:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a3c      	ldr	r2, [pc, #240]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800221e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800222c:	4b37      	ldr	r3, [pc, #220]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4934      	ldr	r1, [pc, #208]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800224a:	d105      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800224c:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a2e      	ldr	r2, [pc, #184]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002256:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d015      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002264:	4b29      	ldr	r3, [pc, #164]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002272:	4926      	ldr	r1, [pc, #152]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002282:	d105      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a20      	ldr	r2, [pc, #128]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800228e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	4918      	ldr	r1, [pc, #96]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ba:	d105      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a12      	ldr	r2, [pc, #72]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d015      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e2:	490a      	ldr	r1, [pc, #40]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022f2:	d105      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002300:	7cbb      	ldrb	r3, [r7, #18]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000

08002310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e042      	b.n	80023a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002328:	2b00      	cmp	r3, #0
 800232a:	d106      	bne.n	800233a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7fe f9f9 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2224      	movs	r2, #36	; 0x24
 800233e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fb26 	bl	80029a4 <UART_SetConfig>
 8002358:	4603      	mov	r3, r0
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e022      	b.n	80023a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fdc2 	bl	8002ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800237e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800238e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fe49 	bl	8003038 <UART_CheckIdleState>
 80023a6:	4603      	mov	r3, r0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	f040 8083 	bne.w	80024d2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <HAL_UART_Transmit+0x28>
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e07b      	b.n	80024d4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Transmit+0x3a>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e074      	b.n	80024d4 <HAL_UART_Transmit+0x124>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2221      	movs	r2, #33	; 0x21
 80023fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002402:	f7fe fba7 	bl	8000b54 <HAL_GetTick>
 8002406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	88fa      	ldrh	r2, [r7, #6]
 800240c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	88fa      	ldrh	r2, [r7, #6]
 8002414:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002420:	d108      	bne.n	8002434 <HAL_UART_Transmit+0x84>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d104      	bne.n	8002434 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	e003      	b.n	800243c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8002444:	e02c      	b.n	80024a0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2200      	movs	r2, #0
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fe39 	bl	80030c8 <UART_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e039      	b.n	80024d4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10b      	bne.n	800247e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002474:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	3302      	adds	r3, #2
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	e007      	b.n	800248e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	3301      	adds	r3, #1
 800248c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1cc      	bne.n	8002446 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2200      	movs	r2, #0
 80024b4:	2140      	movs	r1, #64	; 0x40
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fe06 	bl	80030c8 <UART_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e006      	b.n	80024d4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
  }
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	f040 80bd 	bne.w	8002672 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_UART_Receive+0x28>
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0b5      	b.n	8002674 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_UART_Receive+0x3a>
 8002512:	2302      	movs	r3, #2
 8002514:	e0ae      	b.n	8002674 <HAL_UART_Receive+0x198>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2222      	movs	r2, #34	; 0x22
 800252a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800252e:	f7fe fb11 	bl	8000b54 <HAL_GetTick>
 8002532:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	88fa      	ldrh	r2, [r7, #6]
 8002540:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254c:	d10e      	bne.n	800256c <HAL_UART_Receive+0x90>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d105      	bne.n	8002562 <HAL_UART_Receive+0x86>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f240 12ff 	movw	r2, #511	; 0x1ff
 800255c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002560:	e02d      	b.n	80025be <HAL_UART_Receive+0xe2>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	22ff      	movs	r2, #255	; 0xff
 8002566:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800256a:	e028      	b.n	80025be <HAL_UART_Receive+0xe2>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10d      	bne.n	8002590 <HAL_UART_Receive+0xb4>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d104      	bne.n	8002586 <HAL_UART_Receive+0xaa>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	22ff      	movs	r2, #255	; 0xff
 8002580:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002584:	e01b      	b.n	80025be <HAL_UART_Receive+0xe2>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	227f      	movs	r2, #127	; 0x7f
 800258a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800258e:	e016      	b.n	80025be <HAL_UART_Receive+0xe2>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002598:	d10d      	bne.n	80025b6 <HAL_UART_Receive+0xda>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d104      	bne.n	80025ac <HAL_UART_Receive+0xd0>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	227f      	movs	r2, #127	; 0x7f
 80025a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80025aa:	e008      	b.n	80025be <HAL_UART_Receive+0xe2>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	223f      	movs	r2, #63	; 0x3f
 80025b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80025b4:	e003      	b.n	80025be <HAL_UART_Receive+0xe2>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80025c4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ce:	d108      	bne.n	80025e2 <HAL_UART_Receive+0x106>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d104      	bne.n	80025e2 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	e003      	b.n	80025ea <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80025f2:	e032      	b.n	800265a <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2200      	movs	r2, #0
 80025fc:	2120      	movs	r1, #32
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fd62 	bl	80030c8 <UART_WaitOnFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e032      	b.n	8002674 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10c      	bne.n	800262e <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	b29a      	uxth	r2, r3
 800261c:	8a7b      	ldrh	r3, [r7, #18]
 800261e:	4013      	ands	r3, r2
 8002620:	b29a      	uxth	r2, r3
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	3302      	adds	r3, #2
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	e00c      	b.n	8002648 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	b2da      	uxtb	r2, r3
 8002636:	8a7b      	ldrh	r3, [r7, #18]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4013      	ands	r3, r2
 800263c:	b2da      	uxtb	r2, r3
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1c6      	bne.n	80025f4 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8002672:	2302      	movs	r3, #2
  }
}
 8002674:	4618      	mov	r0, r3
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	f640 030f 	movw	r3, #2063	; 0x80f
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d118      	bne.n	80026de <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d013      	beq.n	80026de <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8145 	beq.w	800295e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
      }
      return;
 80026dc:	e13f      	b.n	800295e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80e8 	beq.w	80028b6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4ba1      	ldr	r3, [pc, #644]	; (8002970 <HAL_UART_IRQHandler+0x2f4>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4ba0      	ldr	r3, [pc, #640]	; (8002974 <HAL_UART_IRQHandler+0x2f8>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80dd 	beq.w	80028b6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d010      	beq.n	8002728 <HAL_UART_IRQHandler+0xac>
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2201      	movs	r2, #1
 8002716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d010      	beq.n	8002754 <HAL_UART_IRQHandler+0xd8>
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00b      	beq.n	8002754 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2202      	movs	r2, #2
 8002742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f043 0204 	orr.w	r2, r3, #4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d010      	beq.n	8002780 <HAL_UART_IRQHandler+0x104>
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00b      	beq.n	8002780 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2204      	movs	r2, #4
 800276e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f043 0202 	orr.w	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d015      	beq.n	80027b6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b00      	cmp	r3, #0
 8002792:	d104      	bne.n	800279e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4b76      	ldr	r3, [pc, #472]	; (8002970 <HAL_UART_IRQHandler+0x2f4>)
 8002798:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2208      	movs	r2, #8
 80027a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f043 0208 	orr.w	r2, r3, #8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d011      	beq.n	80027e4 <HAL_UART_IRQHandler+0x168>
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00c      	beq.n	80027e4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f043 0220 	orr.w	r2, r3, #32
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80b9 	beq.w	8002962 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d011      	beq.n	800281e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d104      	bne.n	800280e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d007      	beq.n	800281e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d004      	beq.n	800283e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800283a:	2b00      	cmp	r3, #0
 800283c:	d031      	beq.n	80028a2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fcc2 	bl	80031c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d123      	bne.n	800289a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002860:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002866:	2b00      	cmp	r3, #0
 8002868:	d013      	beq.n	8002892 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800286e:	4a42      	ldr	r2, [pc, #264]	; (8002978 <HAL_UART_IRQHandler+0x2fc>)
 8002870:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fa87 	bl	8000d8a <HAL_DMA_Abort_IT>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d017      	beq.n	80028b2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800288c:	4610      	mov	r0, r2
 800288e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	e00f      	b.n	80028b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f87c 	bl	8002990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	e00b      	b.n	80028b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f878 	bl	8002990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	e007      	b.n	80028b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f874 	bl	8002990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80028b0:	e057      	b.n	8002962 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b2:	bf00      	nop
    return;
 80028b4:	e055      	b.n	8002962 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <HAL_UART_IRQHandler+0x260>
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fcca 	bl	800326e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80028da:	e045      	b.n	8002968 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d104      	bne.n	80028fa <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d031      	beq.n	8002966 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
    }
    return;
 800290a:	e02c      	b.n	8002966 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_UART_IRQHandler+0x2ac>
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fc8a 	bl	800323a <UART_EndTransmit_IT>
    return;
 8002926:	e01f      	b.n	8002968 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_UART_IRQHandler+0x2c8>
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fcaa 	bl	8003296 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002942:	e011      	b.n	8002968 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00c      	beq.n	8002968 <HAL_UART_IRQHandler+0x2ec>
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2b00      	cmp	r3, #0
 8002952:	da09      	bge.n	8002968 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fc94 	bl	8003282 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800295a:	bf00      	nop
 800295c:	e004      	b.n	8002968 <HAL_UART_IRQHandler+0x2ec>
      return;
 800295e:	bf00      	nop
 8002960:	e002      	b.n	8002968 <HAL_UART_IRQHandler+0x2ec>
    return;
 8002962:	bf00      	nop
 8002964:	e000      	b.n	8002968 <HAL_UART_IRQHandler+0x2ec>
    return;
 8002966:	bf00      	nop
  }
}
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	10000001 	.word	0x10000001
 8002974:	04000120 	.word	0x04000120
 8002978:	0800320f 	.word	0x0800320f

0800297c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80029a8:	b088      	sub	sp, #32
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4bb0      	ldr	r3, [pc, #704]	; (8002c9c <UART_SetConfig+0x2f8>)
 80029dc:	4013      	ands	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	69f9      	ldr	r1, [r7, #28]
 80029e4:	430b      	orrs	r3, r1
 80029e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4aa5      	ldr	r2, [pc, #660]	; (8002ca0 <UART_SetConfig+0x2fc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002a22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	69f9      	ldr	r1, [r7, #28]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	f023 010f 	bic.w	r1, r3, #15
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a96      	ldr	r2, [pc, #600]	; (8002ca4 <UART_SetConfig+0x300>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d121      	bne.n	8002a94 <UART_SetConfig+0xf0>
 8002a50:	4b95      	ldr	r3, [pc, #596]	; (8002ca8 <UART_SetConfig+0x304>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d816      	bhi.n	8002a8c <UART_SetConfig+0xe8>
 8002a5e:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <UART_SetConfig+0xc0>)
 8002a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a64:	08002a75 	.word	0x08002a75
 8002a68:	08002a81 	.word	0x08002a81
 8002a6c:	08002a7b 	.word	0x08002a7b
 8002a70:	08002a87 	.word	0x08002a87
 8002a74:	2301      	movs	r3, #1
 8002a76:	76fb      	strb	r3, [r7, #27]
 8002a78:	e0be      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	76fb      	strb	r3, [r7, #27]
 8002a7e:	e0bb      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002a80:	2304      	movs	r3, #4
 8002a82:	76fb      	strb	r3, [r7, #27]
 8002a84:	e0b8      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002a86:	2308      	movs	r3, #8
 8002a88:	76fb      	strb	r3, [r7, #27]
 8002a8a:	e0b5      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	76fb      	strb	r3, [r7, #27]
 8002a90:	bf00      	nop
 8002a92:	e0b1      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a84      	ldr	r2, [pc, #528]	; (8002cac <UART_SetConfig+0x308>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d134      	bne.n	8002b08 <UART_SetConfig+0x164>
 8002a9e:	4b82      	ldr	r3, [pc, #520]	; (8002ca8 <UART_SetConfig+0x304>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b0c      	cmp	r3, #12
 8002aaa:	d829      	bhi.n	8002b00 <UART_SetConfig+0x15c>
 8002aac:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <UART_SetConfig+0x110>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ae9 	.word	0x08002ae9
 8002ab8:	08002b01 	.word	0x08002b01
 8002abc:	08002b01 	.word	0x08002b01
 8002ac0:	08002b01 	.word	0x08002b01
 8002ac4:	08002af5 	.word	0x08002af5
 8002ac8:	08002b01 	.word	0x08002b01
 8002acc:	08002b01 	.word	0x08002b01
 8002ad0:	08002b01 	.word	0x08002b01
 8002ad4:	08002aef 	.word	0x08002aef
 8002ad8:	08002b01 	.word	0x08002b01
 8002adc:	08002b01 	.word	0x08002b01
 8002ae0:	08002b01 	.word	0x08002b01
 8002ae4:	08002afb 	.word	0x08002afb
 8002ae8:	2300      	movs	r3, #0
 8002aea:	76fb      	strb	r3, [r7, #27]
 8002aec:	e084      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002aee:	2302      	movs	r3, #2
 8002af0:	76fb      	strb	r3, [r7, #27]
 8002af2:	e081      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002af4:	2304      	movs	r3, #4
 8002af6:	76fb      	strb	r3, [r7, #27]
 8002af8:	e07e      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002afa:	2308      	movs	r3, #8
 8002afc:	76fb      	strb	r3, [r7, #27]
 8002afe:	e07b      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002b00:	2310      	movs	r3, #16
 8002b02:	76fb      	strb	r3, [r7, #27]
 8002b04:	bf00      	nop
 8002b06:	e077      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a68      	ldr	r2, [pc, #416]	; (8002cb0 <UART_SetConfig+0x30c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d120      	bne.n	8002b54 <UART_SetConfig+0x1b0>
 8002b12:	4b65      	ldr	r3, [pc, #404]	; (8002ca8 <UART_SetConfig+0x304>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d00f      	beq.n	8002b40 <UART_SetConfig+0x19c>
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	d802      	bhi.n	8002b2a <UART_SetConfig+0x186>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <UART_SetConfig+0x190>
 8002b28:	e010      	b.n	8002b4c <UART_SetConfig+0x1a8>
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d005      	beq.n	8002b3a <UART_SetConfig+0x196>
 8002b2e:	2b30      	cmp	r3, #48	; 0x30
 8002b30:	d009      	beq.n	8002b46 <UART_SetConfig+0x1a2>
 8002b32:	e00b      	b.n	8002b4c <UART_SetConfig+0x1a8>
 8002b34:	2300      	movs	r3, #0
 8002b36:	76fb      	strb	r3, [r7, #27]
 8002b38:	e05e      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	76fb      	strb	r3, [r7, #27]
 8002b3e:	e05b      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002b40:	2304      	movs	r3, #4
 8002b42:	76fb      	strb	r3, [r7, #27]
 8002b44:	e058      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002b46:	2308      	movs	r3, #8
 8002b48:	76fb      	strb	r3, [r7, #27]
 8002b4a:	e055      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002b4c:	2310      	movs	r3, #16
 8002b4e:	76fb      	strb	r3, [r7, #27]
 8002b50:	bf00      	nop
 8002b52:	e051      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a56      	ldr	r2, [pc, #344]	; (8002cb4 <UART_SetConfig+0x310>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d120      	bne.n	8002ba0 <UART_SetConfig+0x1fc>
 8002b5e:	4b52      	ldr	r3, [pc, #328]	; (8002ca8 <UART_SetConfig+0x304>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d00f      	beq.n	8002b8c <UART_SetConfig+0x1e8>
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d802      	bhi.n	8002b76 <UART_SetConfig+0x1d2>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <UART_SetConfig+0x1dc>
 8002b74:	e010      	b.n	8002b98 <UART_SetConfig+0x1f4>
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d005      	beq.n	8002b86 <UART_SetConfig+0x1e2>
 8002b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8002b7c:	d009      	beq.n	8002b92 <UART_SetConfig+0x1ee>
 8002b7e:	e00b      	b.n	8002b98 <UART_SetConfig+0x1f4>
 8002b80:	2300      	movs	r3, #0
 8002b82:	76fb      	strb	r3, [r7, #27]
 8002b84:	e038      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002b86:	2302      	movs	r3, #2
 8002b88:	76fb      	strb	r3, [r7, #27]
 8002b8a:	e035      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	76fb      	strb	r3, [r7, #27]
 8002b90:	e032      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002b92:	2308      	movs	r3, #8
 8002b94:	76fb      	strb	r3, [r7, #27]
 8002b96:	e02f      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002b98:	2310      	movs	r3, #16
 8002b9a:	76fb      	strb	r3, [r7, #27]
 8002b9c:	bf00      	nop
 8002b9e:	e02b      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a3e      	ldr	r2, [pc, #248]	; (8002ca0 <UART_SetConfig+0x2fc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d124      	bne.n	8002bf4 <UART_SetConfig+0x250>
 8002baa:	4b3f      	ldr	r3, [pc, #252]	; (8002ca8 <UART_SetConfig+0x304>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb8:	d012      	beq.n	8002be0 <UART_SetConfig+0x23c>
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d802      	bhi.n	8002bc6 <UART_SetConfig+0x222>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <UART_SetConfig+0x230>
 8002bc4:	e012      	b.n	8002bec <UART_SetConfig+0x248>
 8002bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bca:	d006      	beq.n	8002bda <UART_SetConfig+0x236>
 8002bcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bd0:	d009      	beq.n	8002be6 <UART_SetConfig+0x242>
 8002bd2:	e00b      	b.n	8002bec <UART_SetConfig+0x248>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	76fb      	strb	r3, [r7, #27]
 8002bd8:	e00e      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	76fb      	strb	r3, [r7, #27]
 8002bde:	e00b      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002be0:	2304      	movs	r3, #4
 8002be2:	76fb      	strb	r3, [r7, #27]
 8002be4:	e008      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002be6:	2308      	movs	r3, #8
 8002be8:	76fb      	strb	r3, [r7, #27]
 8002bea:	e005      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002bec:	2310      	movs	r3, #16
 8002bee:	76fb      	strb	r3, [r7, #27]
 8002bf0:	bf00      	nop
 8002bf2:	e001      	b.n	8002bf8 <UART_SetConfig+0x254>
 8002bf4:	2310      	movs	r3, #16
 8002bf6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a28      	ldr	r2, [pc, #160]	; (8002ca0 <UART_SetConfig+0x2fc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	f040 80a1 	bne.w	8002d46 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c04:	7efb      	ldrb	r3, [r7, #27]
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d823      	bhi.n	8002c52 <UART_SetConfig+0x2ae>
 8002c0a:	a201      	add	r2, pc, #4	; (adr r2, 8002c10 <UART_SetConfig+0x26c>)
 8002c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c10:	08002c35 	.word	0x08002c35
 8002c14:	08002c53 	.word	0x08002c53
 8002c18:	08002c3d 	.word	0x08002c3d
 8002c1c:	08002c53 	.word	0x08002c53
 8002c20:	08002c43 	.word	0x08002c43
 8002c24:	08002c53 	.word	0x08002c53
 8002c28:	08002c53 	.word	0x08002c53
 8002c2c:	08002c53 	.word	0x08002c53
 8002c30:	08002c4b 	.word	0x08002c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c34:	f7ff f90a 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 8002c38:	6178      	str	r0, [r7, #20]
        break;
 8002c3a:	e00f      	b.n	8002c5c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <UART_SetConfig+0x314>)
 8002c3e:	617b      	str	r3, [r7, #20]
        break;
 8002c40:	e00c      	b.n	8002c5c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c42:	f7ff f895 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8002c46:	6178      	str	r0, [r7, #20]
        break;
 8002c48:	e008      	b.n	8002c5c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4e:	617b      	str	r3, [r7, #20]
        break;
 8002c50:	e004      	b.n	8002c5c <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	76bb      	strb	r3, [r7, #26]
        break;
 8002c5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8130 	beq.w	8002ec4 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <UART_SetConfig+0x318>)
 8002c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d305      	bcc.n	8002c94 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d915      	bls.n	8002cc0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	76bb      	strb	r3, [r7, #26]
 8002c98:	e114      	b.n	8002ec4 <UART_SetConfig+0x520>
 8002c9a:	bf00      	nop
 8002c9c:	cfff69f3 	.word	0xcfff69f3
 8002ca0:	40008000 	.word	0x40008000
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40004400 	.word	0x40004400
 8002cb0:	40004800 	.word	0x40004800
 8002cb4:	40004c00 	.word	0x40004c00
 8002cb8:	00f42400 	.word	0x00f42400
 8002cbc:	0800357c 	.word	0x0800357c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f04f 0100 	mov.w	r1, #0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	4a87      	ldr	r2, [pc, #540]	; (8002eec <UART_SetConfig+0x548>)
 8002cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f04f 0400 	mov.w	r4, #0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4623      	mov	r3, r4
 8002cdc:	f7fd fa9c 	bl	8000218 <__aeabi_uldivmod>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	f04f 0400 	mov.w	r4, #0
 8002cf0:	0214      	lsls	r4, r2, #8
 8002cf2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002cf6:	020b      	lsls	r3, r1, #8
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6852      	ldr	r2, [r2, #4]
 8002cfc:	0852      	lsrs	r2, r2, #1
 8002cfe:	4611      	mov	r1, r2
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	eb13 0b01 	adds.w	fp, r3, r1
 8002d08:	eb44 0c02 	adc.w	ip, r4, r2
 8002d0c:	4658      	mov	r0, fp
 8002d0e:	4661      	mov	r1, ip
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	f7fd fa7c 	bl	8000218 <__aeabi_uldivmod>
 8002d20:	4603      	mov	r3, r0
 8002d22:	460c      	mov	r4, r1
 8002d24:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d2c:	d308      	bcc.n	8002d40 <UART_SetConfig+0x39c>
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d34:	d204      	bcs.n	8002d40 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	e0c1      	b.n	8002ec4 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	76bb      	strb	r3, [r7, #26]
 8002d44:	e0be      	b.n	8002ec4 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4e:	d164      	bne.n	8002e1a <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8002d50:	7efb      	ldrb	r3, [r7, #27]
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d827      	bhi.n	8002da6 <UART_SetConfig+0x402>
 8002d56:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <UART_SetConfig+0x3b8>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002d81 	.word	0x08002d81
 8002d60:	08002d89 	.word	0x08002d89
 8002d64:	08002d91 	.word	0x08002d91
 8002d68:	08002da7 	.word	0x08002da7
 8002d6c:	08002d97 	.word	0x08002d97
 8002d70:	08002da7 	.word	0x08002da7
 8002d74:	08002da7 	.word	0x08002da7
 8002d78:	08002da7 	.word	0x08002da7
 8002d7c:	08002d9f 	.word	0x08002d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d80:	f7ff f864 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 8002d84:	6178      	str	r0, [r7, #20]
        break;
 8002d86:	e013      	b.n	8002db0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d88:	f7ff f876 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 8002d8c:	6178      	str	r0, [r7, #20]
        break;
 8002d8e:	e00f      	b.n	8002db0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d90:	4b57      	ldr	r3, [pc, #348]	; (8002ef0 <UART_SetConfig+0x54c>)
 8002d92:	617b      	str	r3, [r7, #20]
        break;
 8002d94:	e00c      	b.n	8002db0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d96:	f7fe ffeb 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8002d9a:	6178      	str	r0, [r7, #20]
        break;
 8002d9c:	e008      	b.n	8002db0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002da2:	617b      	str	r3, [r7, #20]
        break;
 8002da4:	e004      	b.n	8002db0 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	76bb      	strb	r3, [r7, #26]
        break;
 8002dae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8086 	beq.w	8002ec4 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	4a4b      	ldr	r2, [pc, #300]	; (8002eec <UART_SetConfig+0x548>)
 8002dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dca:	005a      	lsls	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	441a      	add	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	d916      	bls.n	8002e14 <UART_SetConfig+0x470>
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dec:	d212      	bcs.n	8002e14 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f023 030f 	bic.w	r3, r3, #15
 8002df6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	89fb      	ldrh	r3, [r7, #14]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	89fa      	ldrh	r2, [r7, #14]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	e057      	b.n	8002ec4 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	76bb      	strb	r3, [r7, #26]
 8002e18:	e054      	b.n	8002ec4 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e1a:	7efb      	ldrb	r3, [r7, #27]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d828      	bhi.n	8002e72 <UART_SetConfig+0x4ce>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <UART_SetConfig+0x484>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e4d 	.word	0x08002e4d
 8002e2c:	08002e55 	.word	0x08002e55
 8002e30:	08002e5d 	.word	0x08002e5d
 8002e34:	08002e73 	.word	0x08002e73
 8002e38:	08002e63 	.word	0x08002e63
 8002e3c:	08002e73 	.word	0x08002e73
 8002e40:	08002e73 	.word	0x08002e73
 8002e44:	08002e73 	.word	0x08002e73
 8002e48:	08002e6b 	.word	0x08002e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e4c:	f7fe fffe 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 8002e50:	6178      	str	r0, [r7, #20]
        break;
 8002e52:	e013      	b.n	8002e7c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e54:	f7ff f810 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 8002e58:	6178      	str	r0, [r7, #20]
        break;
 8002e5a:	e00f      	b.n	8002e7c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e5c:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <UART_SetConfig+0x54c>)
 8002e5e:	617b      	str	r3, [r7, #20]
        break;
 8002e60:	e00c      	b.n	8002e7c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e62:	f7fe ff85 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8002e66:	6178      	str	r0, [r7, #20]
        break;
 8002e68:	e008      	b.n	8002e7c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e6e:	617b      	str	r3, [r7, #20]
        break;
 8002e70:	e004      	b.n	8002e7c <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	76bb      	strb	r3, [r7, #26]
        break;
 8002e7a:	bf00      	nop
    }

    if (pclk != 0U)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d020      	beq.n	8002ec4 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	4a19      	ldr	r2, [pc, #100]	; (8002eec <UART_SetConfig+0x548>)
 8002e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	441a      	add	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b0f      	cmp	r3, #15
 8002eac:	d908      	bls.n	8002ec0 <UART_SetConfig+0x51c>
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d204      	bcs.n	8002ec0 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	e001      	b.n	8002ec4 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8002ee0:	7ebb      	ldrb	r3, [r7, #26]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002eec:	0800357c 	.word	0x0800357c
 8002ef0:	00f42400 	.word	0x00f42400

08002ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01a      	beq.n	800300a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff2:	d10a      	bne.n	800300a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
  }
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af02      	add	r7, sp, #8
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003048:	f7fd fd84 	bl	8000b54 <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b08      	cmp	r3, #8
 800305a:	d10e      	bne.n	800307a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800305c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f82c 	bl	80030c8 <UART_WaitOnFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e022      	b.n	80030c0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b04      	cmp	r3, #4
 8003086:	d10e      	bne.n	80030a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f816 	bl	80030c8 <UART_WaitOnFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e00c      	b.n	80030c0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d8:	e062      	b.n	80031a0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d05e      	beq.n	80031a0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7fd fd37 	bl	8000b54 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11d      	bne.n	8003134 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003106:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e045      	b.n	80031c0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d02e      	beq.n	80031a0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003150:	d126      	bne.n	80031a0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800315a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800316a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e00f      	b.n	80031c0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d08d      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031de:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f7ff fbaf 	bl	8002990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003250:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fb8b 	bl	800297c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b085      	sub	sp, #20
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80032bc:	2302      	movs	r3, #2
 80032be:	e027      	b.n	8003310 <HAL_UARTEx_DisableFifoMode+0x66>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80032ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003330:	2302      	movs	r3, #2
 8003332:	e02d      	b.n	8003390 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	; 0x24
 8003340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f84f 	bl	8003414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e02d      	b.n	800340c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	; 0x24
 80033bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f811 	bl	8003414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800341c:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <UARTEx_SetNbDataToProcess+0xc8>)
 800341e:	f107 0314 	add.w	r3, r7, #20
 8003422:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003426:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800342a:	4a2d      	ldr	r2, [pc, #180]	; (80034e0 <UARTEx_SetNbDataToProcess+0xcc>)
 800342c:	f107 030c 	add.w	r3, r7, #12
 8003430:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003434:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003450:	e03d      	b.n	80034ce <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003452:	2308      	movs	r3, #8
 8003454:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003456:	2308      	movs	r3, #8
 8003458:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	0e5b      	lsrs	r3, r3, #25
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	0f5b      	lsrs	r3, r3, #29
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800347a:	7fbb      	ldrb	r3, [r7, #30]
 800347c:	7f3a      	ldrb	r2, [r7, #28]
 800347e:	f107 0120 	add.w	r1, r7, #32
 8003482:	440a      	add	r2, r1
 8003484:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003488:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800348c:	7f3a      	ldrb	r2, [r7, #28]
 800348e:	f107 0120 	add.w	r1, r7, #32
 8003492:	440a      	add	r2, r1
 8003494:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003498:	fb93 f3f2 	sdiv	r3, r3, r2
 800349c:	b29a      	uxth	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034a4:	7ffb      	ldrb	r3, [r7, #31]
 80034a6:	7f7a      	ldrb	r2, [r7, #29]
 80034a8:	f107 0120 	add.w	r1, r7, #32
 80034ac:	440a      	add	r2, r1
 80034ae:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80034b6:	7f7a      	ldrb	r2, [r7, #29]
 80034b8:	f107 0120 	add.w	r1, r7, #32
 80034bc:	440a      	add	r2, r1
 80034be:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80034ce:	bf00      	nop
 80034d0:	3724      	adds	r7, #36	; 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	08003554 	.word	0x08003554
 80034e0:	0800355c 	.word	0x0800355c

080034e4 <__libc_init_array>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	4e0d      	ldr	r6, [pc, #52]	; (800351c <__libc_init_array+0x38>)
 80034e8:	4c0d      	ldr	r4, [pc, #52]	; (8003520 <__libc_init_array+0x3c>)
 80034ea:	1ba4      	subs	r4, r4, r6
 80034ec:	10a4      	asrs	r4, r4, #2
 80034ee:	2500      	movs	r5, #0
 80034f0:	42a5      	cmp	r5, r4
 80034f2:	d109      	bne.n	8003508 <__libc_init_array+0x24>
 80034f4:	4e0b      	ldr	r6, [pc, #44]	; (8003524 <__libc_init_array+0x40>)
 80034f6:	4c0c      	ldr	r4, [pc, #48]	; (8003528 <__libc_init_array+0x44>)
 80034f8:	f000 f820 	bl	800353c <_init>
 80034fc:	1ba4      	subs	r4, r4, r6
 80034fe:	10a4      	asrs	r4, r4, #2
 8003500:	2500      	movs	r5, #0
 8003502:	42a5      	cmp	r5, r4
 8003504:	d105      	bne.n	8003512 <__libc_init_array+0x2e>
 8003506:	bd70      	pop	{r4, r5, r6, pc}
 8003508:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800350c:	4798      	blx	r3
 800350e:	3501      	adds	r5, #1
 8003510:	e7ee      	b.n	80034f0 <__libc_init_array+0xc>
 8003512:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003516:	4798      	blx	r3
 8003518:	3501      	adds	r5, #1
 800351a:	e7f2      	b.n	8003502 <__libc_init_array+0x1e>
 800351c:	0800359c 	.word	0x0800359c
 8003520:	0800359c 	.word	0x0800359c
 8003524:	0800359c 	.word	0x0800359c
 8003528:	080035a0 	.word	0x080035a0

0800352c <memset>:
 800352c:	4402      	add	r2, r0
 800352e:	4603      	mov	r3, r0
 8003530:	4293      	cmp	r3, r2
 8003532:	d100      	bne.n	8003536 <memset+0xa>
 8003534:	4770      	bx	lr
 8003536:	f803 1b01 	strb.w	r1, [r3], #1
 800353a:	e7f9      	b.n	8003530 <memset+0x4>

0800353c <_init>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	bf00      	nop
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr

08003548 <_fini>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	bf00      	nop
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr
