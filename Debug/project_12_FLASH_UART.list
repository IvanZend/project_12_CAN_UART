
project_12_FLASH_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003a8c  08003a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003acc  08003acc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ad4  08003ad4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad8  08003ad8  00013ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003ae8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003ae8  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010934  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ed8  00000000  00000000  00030970  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  00032848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e90  00000000  00000000  000337d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dc38  00000000  00000000  00034660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bfc3  00000000  00000000  00052298  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5e43  00000000  00000000  0005e25b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012409e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f8  00000000  00000000  0012411c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003a74 	.word	0x08003a74

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003a74 	.word	0x08003a74

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fb51 	bl	8000bc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f80c 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f90a 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f8bc 	bl	80006a4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f86c 	bl	8000608 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000530:	4801      	ldr	r0, [pc, #4]	; (8000538 <main+0x20>)
 8000532:	f001 feab 	bl	800228c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000536:	e7fe      	b.n	8000536 <main+0x1e>
 8000538:	20000038 	.word	0x20000038

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b0a4      	sub	sp, #144	; 0x90
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000546:	2238      	movs	r2, #56	; 0x38
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fa8a 	bl	8003a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fa7c 	bl	8003a64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000570:	f000 fe5c 	bl	800122c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2340      	movs	r3, #64	; 0x40
 8000580:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800058a:	2306      	movs	r3, #6
 800058c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 48;
 800058e:	2330      	movs	r3, #48	; 0x30
 8000590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fef2 	bl	8001394 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005b6:	f000 f90d 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005d2:	2101      	movs	r1, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 f9f5 	bl	80019c4 <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005e0:	f000 f8f8 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fc04 	bl	8001dfc <HAL_RCCEx_PeriphCLKConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fa:	f000 f8eb 	bl	80007d4 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3790      	adds	r7, #144	; 0x90
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000628:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800062c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000630:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_TIM2_Init+0x98>)
 800063e:	2264      	movs	r2, #100	; 0x64
 8000640:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_TIM2_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800064e:	4814      	ldr	r0, [pc, #80]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000650:	f001 fdc4 	bl	80021dc <HAL_TIM_Base_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800065a:	f000 f8bb 	bl	80007d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_TIM2_Init+0x98>)
 800066c:	f001 fff8 	bl	8002660 <HAL_TIM_ConfigClockSource>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000676:	f000 f8ad 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800067a:	2320      	movs	r3, #32
 800067c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000688:	f002 fa1a 	bl	8002ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000692:	f000 f89f 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000038 	.word	0x20000038

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006aa:	4a23      	ldr	r2, [pc, #140]	; (8000738 <MX_USART2_UART_Init+0x94>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ec:	4811      	ldr	r0, [pc, #68]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006ee:	f002 faaf 	bl	8002c50 <HAL_UART_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006f8:	f000 f86c 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006fc:	2100      	movs	r1, #0
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_USART2_UART_Init+0x90>)
 8000700:	f003 f8a7 	bl	8003852 <HAL_UARTEx_SetTxFifoThreshold>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800070a:	f000 f863 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070e:	2100      	movs	r1, #0
 8000710:	4808      	ldr	r0, [pc, #32]	; (8000734 <MX_USART2_UART_Init+0x90>)
 8000712:	f003 f8dc 	bl	80038ce <HAL_UARTEx_SetRxFifoThreshold>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800071c:	f000 f85a 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_USART2_UART_Init+0x90>)
 8000722:	f003 f85d 	bl	80037e0 <HAL_UARTEx_DisableFifoMode>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800072c:	f000 f852 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000084 	.word	0x20000084
 8000738:	40004400 	.word	0x40004400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_GPIO_Init+0x90>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <MX_GPIO_Init+0x90>)
 8000758:	f043 0320 	orr.w	r3, r3, #32
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_GPIO_Init+0x90>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0320 	and.w	r3, r3, #32
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_GPIO_Init+0x90>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MX_GPIO_Init+0x90>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_GPIO_Init+0x90>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_GPIO_Init+0x90>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <MX_GPIO_Init+0x90>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_GPIO_Init+0x90>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <MX_GPIO_Init+0x94>)
 80007a2:	f000 fd11 	bl	80011c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_GPIO_Init+0x94>)
 80007c0:	f000 fb80 	bl	8000ec4 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000400 	.word	0x48000400

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x44>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x44>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6613      	str	r3, [r2, #96]	; 0x60
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x44>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x44>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6593      	str	r3, [r2, #88]	; 0x58
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800081a:	f000 fdab 	bl	8001374 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800083c:	d113      	bne.n	8000866 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_TIM_Base_MspInit+0x44>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <HAL_TIM_Base_MspInit+0x44>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6593      	str	r3, [r2, #88]	; 0x58
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_TIM_Base_MspInit+0x44>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	201c      	movs	r0, #28
 800085c:	f000 fafd 	bl	8000e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000860:	201c      	movs	r0, #28
 8000862:	f000 fb14 	bl	8000e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <HAL_UART_MspInit+0x7c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d128      	bne.n	80008e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0x80>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <HAL_UART_MspInit+0x80>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	6593      	str	r3, [r2, #88]	; 0x58
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c6:	230c      	movs	r3, #12
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d6:	2307      	movs	r3, #7
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 faee 	bl	8000ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f98c 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <TIM2_IRQHandler+0x20>)
 800095a:	f001 fd01 	bl	8002360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800095e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <TIM2_IRQHandler+0x24>)
 8000964:	f000 fc48 	bl	80011f8 <HAL_GPIO_TogglePin>
  UART_message_decode(&huart2);
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <TIM2_IRQHandler+0x28>)
 800096a:	f000 f81f 	bl	80009ac <UART_message_decode>
  /* USER CODE END TIM2_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000038 	.word	0x20000038
 8000978:	48000400 	.word	0x48000400
 800097c:	20000084 	.word	0x20000084

08000980 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <SystemInit+0x28>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098a:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <SystemInit+0x28>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <SystemInit+0x28>)
 8000996:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800099a:	609a      	str	r2, [r3, #8]
#endif
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <UART_message_decode>:
#define FLASH_USER_START_ADDR   	ADDR_FLASH_PAGE_4   /* Start @ of user Flash area */
#define FLASH_USER_END_ADDR     	(ADDR_FLASH_PAGE_63 + FLASH_PAGE_SIZE - 1)   /* End @ of user Flash area */
#define DATA_64                     ((uint64_t)0x1)

void UART_message_decode(UART_HandleTypeDef *huart_pointer)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b08b      	sub	sp, #44	; 0x2c
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	init_array_by_zero(sizeof(UART_rx_buffer), &UART_rx_buffer[0]);
 80009b4:	492b      	ldr	r1, [pc, #172]	; (8000a64 <UART_message_decode+0xb8>)
 80009b6:	2008      	movs	r0, #8
 80009b8:	f000 f8bf 	bl	8000b3a <init_array_by_zero>

	HAL_UART_Receive(huart_pointer, UART_rx_buffer, (uint16_t)UART_MESSAGE_SIZE, UART_TIMEOUT);
 80009bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c0:	2208      	movs	r2, #8
 80009c2:	4928      	ldr	r1, [pc, #160]	; (8000a64 <UART_message_decode+0xb8>)
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f002 fa29 	bl	8002e1c <HAL_UART_Receive>
	uint8_t test_value = UART_rx_buffer[1];
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <UART_message_decode+0xb8>)
 80009cc:	785b      	ldrb	r3, [r3, #1]
 80009ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (test_value)
	{

	}

	switch (UART_rx_buffer[UART_COMMAND_BYTE])
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <UART_message_decode+0xb8>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	d840      	bhi.n	8000a5c <UART_message_decode+0xb0>
 80009da:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <UART_message_decode+0x34>)
 80009dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e0:	08000a5b 	.word	0x08000a5b
 80009e4:	08000a5b 	.word	0x08000a5b
 80009e8:	080009f5 	.word	0x080009f5
 80009ec:	08000a03 	.word	0x08000a03
 80009f0:	08000a2f 	.word	0x08000a2f

		break;
	}
	case WRITE_LONG_VALUE:
	{
		uint64_t long_value = unite_digits_sequence(UART_LONG_VALUE_LENGHT_BYTES, &UART_rx_buffer[UART_DATA_BYTE]);
 80009f4:	491c      	ldr	r1, [pc, #112]	; (8000a68 <UART_message_decode+0xbc>)
 80009f6:	2004      	movs	r0, #4
 80009f8:	f000 f83e 	bl	8000a78 <unite_digits_sequence>
 80009fc:	e9c7 0102 	strd	r0, r1, [r7, #8]
		//HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, FLASH_USER_START_ADDR, long_value);
		break;
 8000a00:	e02c      	b.n	8000a5c <UART_message_decode+0xb0>
	}
	case READ_BYTE:
	{
		uint64_t value_from_memory = *(__IO uint64_t *)FLASH_USER_START_ADDR;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <UART_message_decode+0xc0>)
 8000a04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a08:	e9c7 3404 	strd	r3, r4, [r7, #16]
		init_array_by_zero(sizeof(UART_tx_buffer), &UART_tx_buffer[0]);
 8000a0c:	4918      	ldr	r1, [pc, #96]	; (8000a70 <UART_message_decode+0xc4>)
 8000a0e:	2008      	movs	r0, #8
 8000a10:	f000 f893 	bl	8000b3a <init_array_by_zero>
		UART_tx_buffer[0] = value_from_memory;
 8000a14:	7c3a      	ldrb	r2, [r7, #16]
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <UART_message_decode+0xc4>)
 8000a18:	701a      	strb	r2, [r3, #0]
		UART_tx_buffer[1] = 9;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <UART_message_decode+0xc4>)
 8000a1c:	2209      	movs	r2, #9
 8000a1e:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart2, UART_tx_buffer, sizeof(UART_tx_buffer), 10);
 8000a20:	230a      	movs	r3, #10
 8000a22:	2208      	movs	r2, #8
 8000a24:	4912      	ldr	r1, [pc, #72]	; (8000a70 <UART_message_decode+0xc4>)
 8000a26:	4813      	ldr	r0, [pc, #76]	; (8000a74 <UART_message_decode+0xc8>)
 8000a28:	f002 f962 	bl	8002cf0 <HAL_UART_Transmit>
		break;
 8000a2c:	e016      	b.n	8000a5c <UART_message_decode+0xb0>
	}
	case READ_LONG_VALUE:
	{
		uint64_t value_from_memory = *(__IO uint64_t *)FLASH_USER_START_ADDR;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <UART_message_decode+0xc0>)
 8000a30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a34:	e9c7 3406 	strd	r3, r4, [r7, #24]
		init_array_by_zero(sizeof(UART_tx_buffer), &UART_tx_buffer[0]);
 8000a38:	490d      	ldr	r1, [pc, #52]	; (8000a70 <UART_message_decode+0xc4>)
 8000a3a:	2008      	movs	r0, #8
 8000a3c:	f000 f87d 	bl	8000b3a <init_array_by_zero>
		distrbute_digits_to_bytes(value_from_memory, UART_LONG_VALUE_LENGHT_BYTES, &UART_tx_buffer[0]);
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <UART_message_decode+0xc4>)
 8000a42:	2204      	movs	r2, #4
 8000a44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000a48:	f000 f848 	bl	8000adc <distrbute_digits_to_bytes>
		HAL_UART_Transmit(&huart2, UART_tx_buffer, sizeof(UART_tx_buffer), 10);
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	2208      	movs	r2, #8
 8000a50:	4907      	ldr	r1, [pc, #28]	; (8000a70 <UART_message_decode+0xc4>)
 8000a52:	4808      	ldr	r0, [pc, #32]	; (8000a74 <UART_message_decode+0xc8>)
 8000a54:	f002 f94c 	bl	8002cf0 <HAL_UART_Transmit>
		break;
 8000a58:	e000      	b.n	8000a5c <UART_message_decode+0xb0>
		break;
 8000a5a:	bf00      	nop
	}
	}

}
 8000a5c:	bf00      	nop
 8000a5e:	372c      	adds	r7, #44	; 0x2c
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	20000028 	.word	0x20000028
 8000a68:	20000029 	.word	0x20000029
 8000a6c:	08002000 	.word	0x08002000
 8000a70:	20000030 	.word	0x20000030
 8000a74:	20000084 	.word	0x20000084

08000a78 <unite_digits_sequence>:

uint64_t unite_digits_sequence(uint8_t number_of_values, uint8_t *byte_array_pointer)
{
 8000a78:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8000a7c:	b087      	sub	sp, #28
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	6039      	str	r1, [r7, #0]
 8000a84:	71fb      	strb	r3, [r7, #7]
	uint64_t summary_value = 0;
 8000a86:	f04f 0300 	mov.w	r3, #0
 8000a8a:	f04f 0400 	mov.w	r4, #0
 8000a8e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (int i = 8; i <= 0; i--)
 8000a92:	2308      	movs	r3, #8
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	e015      	b.n	8000ac4 <unite_digits_sequence+0x4c>
	{
		summary_value = summary_value + ((*(byte_array_pointer + i)) << i);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	469b      	mov	fp, r3
 8000aaa:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8000aae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000ab2:	eb1b 0301 	adds.w	r3, fp, r1
 8000ab6:	eb4c 0402 	adc.w	r4, ip, r2
 8000aba:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (int i = 8; i <= 0; i--)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	dde6      	ble.n	8000a98 <unite_digits_sequence+0x20>
	}
	return summary_value;
 8000aca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	4621      	mov	r1, r4
 8000ad2:	371c      	adds	r7, #28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8000ada:	4770      	bx	lr

08000adc <distrbute_digits_to_bytes>:

void distrbute_digits_to_bytes(uint64_t value_to_distribute, uint8_t number_of_values, uint8_t *byte_array_pointer)
{
 8000adc:	b4f0      	push	{r4, r5, r6, r7}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < number_of_values; i++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e01a      	b.n	8000b28 <distrbute_digits_to_bytes+0x4c>
	{
		*(byte_array_pointer + number_of_values - i) = value_to_distribute >> i;
 8000af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000af6:	6979      	ldr	r1, [r7, #20]
 8000af8:	f1c1 0620 	rsb	r6, r1, #32
 8000afc:	f1a1 0020 	sub.w	r0, r1, #32
 8000b00:	fa22 f401 	lsr.w	r4, r2, r1
 8000b04:	fa03 f606 	lsl.w	r6, r3, r6
 8000b08:	4334      	orrs	r4, r6
 8000b0a:	fa23 f000 	lsr.w	r0, r3, r0
 8000b0e:	4304      	orrs	r4, r0
 8000b10:	fa23 f501 	lsr.w	r5, r3, r1
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b2e2      	uxtb	r2, r4
 8000b20:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < number_of_values; i++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbe0      	blt.n	8000af2 <distrbute_digits_to_bytes+0x16>
	}
}
 8000b30:	bf00      	nop
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bcf0      	pop	{r4, r5, r6, r7}
 8000b38:	4770      	bx	lr

08000b3a <init_array_by_zero>:

void init_array_by_zero(uint8_t array_size, uint8_t* array_pointer)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b085      	sub	sp, #20
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	6039      	str	r1, [r7, #0]
 8000b44:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < array_size; i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	e007      	b.n	8000b5c <init_array_by_zero+0x22>
	{
		*(array_pointer + i) = 0;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < array_size; i++)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf3      	blt.n	8000b4c <init_array_by_zero+0x12>
	}
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopForever+0x6>)
  ldr r1, =_edata
 8000b76:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <LoopForever+0xe>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b8c:	4c0b      	ldr	r4, [pc, #44]	; (8000bbc <LoopForever+0x16>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b9a:	f7ff fef1 	bl	8000980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f002 ff3d 	bl	8003a1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba2:	f7ff fcb9 	bl	8000518 <main>

08000ba6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba6:	e7fe      	b.n	8000ba6 <LoopForever>
  ldr   r0, =_estack
 8000ba8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bb4:	08003adc 	.word	0x08003adc
  ldr r2, =_sbss
 8000bb8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bbc:	20000114 	.word	0x20000114

08000bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC1_2_IRQHandler>

08000bc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f939 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 f80e 	bl	8000bf4 <HAL_InitTick>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	e001      	b.n	8000be8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be4:	f7ff fdfe 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be8:	79fb      	ldrb	r3, [r7, #7]

}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_InitTick+0x68>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d022      	beq.n	8000c4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_InitTick+0x6c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <HAL_InitTick+0x68>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f944 	bl	8000eaa <HAL_SYSTICK_Config>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10f      	bne.n	8000c48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d809      	bhi.n	8000c42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	f04f 30ff 	mov.w	r0, #4294967295
 8000c36:	f000 f910 	bl	8000e5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_InitTick+0x70>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e004      	b.n	8000c52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e001      	b.n	8000c52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000004 	.word	0x20000004

08000c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x1c>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x20>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <HAL_IncTick+0x1c>)
 8000c78:	6013      	str	r3, [r2, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	20000110 	.word	0x20000110
 8000c88:	20000008 	.word	0x20000008

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000110 	.word	0x20000110

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	; (8000d40 <__NVIC_EnableIRQ+0x38>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	; (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	; (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f7ff ff8e 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff29 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e68:	f7ff ff40 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	6978      	ldr	r0, [r7, #20]
 8000e74:	f7ff ff90 	bl	8000d98 <NVIC_EncodePriority>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff5f 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff33 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffa4 	bl	8000e00 <SysTick_Config>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ed2:	e15a      	b.n	800118a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 814c 	beq.w	8001184 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d00b      	beq.n	8000f0c <HAL_GPIO_Init+0x48>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d007      	beq.n	8000f0c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f00:	2b11      	cmp	r3, #17
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b12      	cmp	r3, #18
 8000f0a:	d130      	bne.n	8000f6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f42:	2201      	movs	r2, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	f003 0201 	and.w	r2, r3, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0xea>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b12      	cmp	r3, #18
 8000fac:	d123      	bne.n	8000ff6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	691a      	ldr	r2, [r3, #16]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	6939      	ldr	r1, [r7, #16]
 8000ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0203 	and.w	r2, r3, #3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 80a6 	beq.w	8001184 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001038:	4b5b      	ldr	r3, [pc, #364]	; (80011a8 <HAL_GPIO_Init+0x2e4>)
 800103a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103c:	4a5a      	ldr	r2, [pc, #360]	; (80011a8 <HAL_GPIO_Init+0x2e4>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6613      	str	r3, [r2, #96]	; 0x60
 8001044:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <HAL_GPIO_Init+0x2e4>)
 8001046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001050:	4a56      	ldr	r2, [pc, #344]	; (80011ac <HAL_GPIO_Init+0x2e8>)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800107a:	d01f      	beq.n	80010bc <HAL_GPIO_Init+0x1f8>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a4c      	ldr	r2, [pc, #304]	; (80011b0 <HAL_GPIO_Init+0x2ec>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d019      	beq.n	80010b8 <HAL_GPIO_Init+0x1f4>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <HAL_GPIO_Init+0x2f0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d013      	beq.n	80010b4 <HAL_GPIO_Init+0x1f0>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4a      	ldr	r2, [pc, #296]	; (80011b8 <HAL_GPIO_Init+0x2f4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d00d      	beq.n	80010b0 <HAL_GPIO_Init+0x1ec>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a49      	ldr	r2, [pc, #292]	; (80011bc <HAL_GPIO_Init+0x2f8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d007      	beq.n	80010ac <HAL_GPIO_Init+0x1e8>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <HAL_GPIO_Init+0x2fc>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d101      	bne.n	80010a8 <HAL_GPIO_Init+0x1e4>
 80010a4:	2305      	movs	r3, #5
 80010a6:	e00a      	b.n	80010be <HAL_GPIO_Init+0x1fa>
 80010a8:	2306      	movs	r3, #6
 80010aa:	e008      	b.n	80010be <HAL_GPIO_Init+0x1fa>
 80010ac:	2304      	movs	r3, #4
 80010ae:	e006      	b.n	80010be <HAL_GPIO_Init+0x1fa>
 80010b0:	2303      	movs	r3, #3
 80010b2:	e004      	b.n	80010be <HAL_GPIO_Init+0x1fa>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e002      	b.n	80010be <HAL_GPIO_Init+0x1fa>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <HAL_GPIO_Init+0x1fa>
 80010bc:	2300      	movs	r3, #0
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	f002 0203 	and.w	r2, r2, #3
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	4093      	lsls	r3, r2
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ce:	4937      	ldr	r1, [pc, #220]	; (80011ac <HAL_GPIO_Init+0x2e8>)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3302      	adds	r3, #2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <HAL_GPIO_Init+0x300>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001100:	4a30      	ldr	r2, [pc, #192]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800112a:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <HAL_GPIO_Init+0x300>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_GPIO_Init+0x300>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800117e:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	f47f ae9d 	bne.w	8000ed4 <HAL_GPIO_Init+0x10>
  }
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000800 	.word	0x48000800
 80011b8:	48000c00 	.word	0x48000c00
 80011bc:	48001000 	.word	0x48001000
 80011c0:	48001400 	.word	0x48001400
 80011c4:	40010400 	.word	0x40010400

080011c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
 80011d4:	4613      	mov	r3, r2
 80011d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4013      	ands	r3, r2
 8001210:	041a      	lsls	r2, r3, #16
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43d9      	mvns	r1, r3
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	400b      	ands	r3, r1
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d141      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001246:	d131      	bne.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001248:	4b47      	ldr	r3, [pc, #284]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800124e:	4a46      	ldr	r2, [pc, #280]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001260:	4a41      	ldr	r2, [pc, #260]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001268:	4b40      	ldr	r3, [pc, #256]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2232      	movs	r2, #50	; 0x32
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	4a3f      	ldr	r2, [pc, #252]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0c9b      	lsrs	r3, r3, #18
 800127a:	3301      	adds	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127e:	e002      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3b01      	subs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001286:	4b38      	ldr	r3, [pc, #224]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001292:	d102      	bne.n	800129a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f2      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129a:	4b33      	ldr	r3, [pc, #204]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a6:	d158      	bne.n	800135a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e057      	b.n	800135c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012b2:	4a2d      	ldr	r2, [pc, #180]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012bc:	e04d      	b.n	800135a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012c4:	d141      	bne.n	800134a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012c6:	4b28      	ldr	r3, [pc, #160]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d2:	d131      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012da:	4a23      	ldr	r2, [pc, #140]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ec:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2232      	movs	r2, #50	; 0x32
 80012fa:	fb02 f303 	mul.w	r3, r2, r3
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0c9b      	lsrs	r3, r3, #18
 8001306:	3301      	adds	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800130a:	e002      	b.n	8001312 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3b01      	subs	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131e:	d102      	bne.n	8001326 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f2      	bne.n	800130c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001332:	d112      	bne.n	800135a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e011      	b.n	800135c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001344:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001348:	e007      	b.n	800135a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001358:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40007000 	.word	0x40007000
 800136c:	20000000 	.word	0x20000000
 8001370:	431bde83 	.word	0x431bde83

08001374 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800137e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001382:	6093      	str	r3, [r2, #8]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40007000 	.word	0x40007000

08001394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e308      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d075      	beq.n	800149e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b2:	4ba3      	ldr	r3, [pc, #652]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013bc:	4ba0      	ldr	r3, [pc, #640]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b0c      	cmp	r3, #12
 80013ca:	d102      	bne.n	80013d2 <HAL_RCC_OscConfig+0x3e>
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d002      	beq.n	80013d8 <HAL_RCC_OscConfig+0x44>
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d10b      	bne.n	80013f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	4b99      	ldr	r3, [pc, #612]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d05b      	beq.n	800149c <HAL_RCC_OscConfig+0x108>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d157      	bne.n	800149c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e2e3      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f8:	d106      	bne.n	8001408 <HAL_RCC_OscConfig+0x74>
 80013fa:	4b91      	ldr	r3, [pc, #580]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a90      	ldr	r2, [pc, #576]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e01d      	b.n	8001444 <HAL_RCC_OscConfig+0xb0>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0x98>
 8001412:	4b8b      	ldr	r3, [pc, #556]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a8a      	ldr	r2, [pc, #552]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a87      	ldr	r2, [pc, #540]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0xb0>
 800142c:	4b84      	ldr	r3, [pc, #528]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a83      	ldr	r2, [pc, #524]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b81      	ldr	r3, [pc, #516]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a80      	ldr	r2, [pc, #512]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800143e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d013      	beq.n	8001474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fc1e 	bl	8000c8c <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fc1a 	bl	8000c8c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e2a8      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001466:	4b76      	ldr	r3, [pc, #472]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0xc0>
 8001472:	e014      	b.n	800149e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fc0a 	bl	8000c8c <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fc06 	bl	8000c8c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e294      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800148e:	4b6c      	ldr	r3, [pc, #432]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0xe8>
 800149a:	e000      	b.n	800149e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d075      	beq.n	8001596 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014aa:	4b65      	ldr	r3, [pc, #404]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b4:	4b62      	ldr	r3, [pc, #392]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2b0c      	cmp	r3, #12
 80014c2:	d102      	bne.n	80014ca <HAL_RCC_OscConfig+0x136>
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d002      	beq.n	80014d0 <HAL_RCC_OscConfig+0x13c>
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d11f      	bne.n	8001510 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d0:	4b5b      	ldr	r3, [pc, #364]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_OscConfig+0x154>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e267      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b55      	ldr	r3, [pc, #340]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	061b      	lsls	r3, r3, #24
 80014f6:	4952      	ldr	r1, [pc, #328]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014fc:	4b51      	ldr	r3, [pc, #324]	; (8001644 <HAL_RCC_OscConfig+0x2b0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fb77 	bl	8000bf4 <HAL_InitTick>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d043      	beq.n	8001594 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e253      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d023      	beq.n	8001560 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001518:	4b49      	ldr	r3, [pc, #292]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a48      	ldr	r2, [pc, #288]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fbb2 	bl	8000c8c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff fbae 	bl	8000c8c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e23c      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153e:	4b40      	ldr	r3, [pc, #256]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	061b      	lsls	r3, r3, #24
 8001558:	4939      	ldr	r1, [pc, #228]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
 800155e:	e01a      	b.n	8001596 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001560:	4b37      	ldr	r3, [pc, #220]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a36      	ldr	r2, [pc, #216]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800156a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fb8e 	bl	8000c8c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fb8a 	bl	8000c8c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e218      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001586:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x1e0>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d03c      	beq.n	800161c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01c      	beq.n	80015e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b0:	4a23      	ldr	r2, [pc, #140]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ba:	f7ff fb67 	bl	8000c8c <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c2:	f7ff fb63 	bl	8000c8c <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e1f1      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0ef      	beq.n	80015c2 <HAL_RCC_OscConfig+0x22e>
 80015e2:	e01b      	b.n	800161c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80015e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff fb4a 	bl	8000c8c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fc:	f7ff fb46 	bl	8000c8c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1d4      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ef      	bne.n	80015fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80ab 	beq.w	8001780 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <HAL_RCC_OscConfig+0x2b4>
 800163a:	2301      	movs	r3, #1
 800163c:	e005      	b.n	800164a <HAL_RCC_OscConfig+0x2b6>
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	20000004 	.word	0x20000004
 8001648:	2300      	movs	r3, #0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00d      	beq.n	800166a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4baf      	ldr	r3, [pc, #700]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	4aae      	ldr	r2, [pc, #696]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6593      	str	r3, [r2, #88]	; 0x58
 800165a:	4bac      	ldr	r3, [pc, #688]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001666:	2301      	movs	r3, #1
 8001668:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166a:	4ba9      	ldr	r3, [pc, #676]	; (8001910 <HAL_RCC_OscConfig+0x57c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d118      	bne.n	80016a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001676:	4ba6      	ldr	r3, [pc, #664]	; (8001910 <HAL_RCC_OscConfig+0x57c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4aa5      	ldr	r2, [pc, #660]	; (8001910 <HAL_RCC_OscConfig+0x57c>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001682:	f7ff fb03 	bl	8000c8c <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168a:	f7ff faff 	bl	8000c8c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e18d      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169c:	4b9c      	ldr	r3, [pc, #624]	; (8001910 <HAL_RCC_OscConfig+0x57c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d108      	bne.n	80016c2 <HAL_RCC_OscConfig+0x32e>
 80016b0:	4b96      	ldr	r3, [pc, #600]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	4a95      	ldr	r2, [pc, #596]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c0:	e024      	b.n	800170c <HAL_RCC_OscConfig+0x378>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d110      	bne.n	80016ec <HAL_RCC_OscConfig+0x358>
 80016ca:	4b90      	ldr	r3, [pc, #576]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d0:	4a8e      	ldr	r2, [pc, #568]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016da:	4b8c      	ldr	r3, [pc, #560]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e0:	4a8a      	ldr	r2, [pc, #552]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ea:	e00f      	b.n	800170c <HAL_RCC_OscConfig+0x378>
 80016ec:	4b87      	ldr	r3, [pc, #540]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f2:	4a86      	ldr	r2, [pc, #536]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016fc:	4b83      	ldr	r3, [pc, #524]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001702:	4a82      	ldr	r2, [pc, #520]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d016      	beq.n	8001742 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff faba 	bl	8000c8c <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171a:	e00a      	b.n	8001732 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171c:	f7ff fab6 	bl	8000c8c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	; 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e142      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001732:	4b76      	ldr	r3, [pc, #472]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ed      	beq.n	800171c <HAL_RCC_OscConfig+0x388>
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001742:	f7ff faa3 	bl	8000c8c <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fa9f 	bl	8000c8c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e12b      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001760:	4b6a      	ldr	r3, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1ed      	bne.n	800174a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800176e:	7ffb      	ldrb	r3, [r7, #31]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001774:	4b65      	ldr	r3, [pc, #404]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	4a64      	ldr	r2, [pc, #400]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800177a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0320 	and.w	r3, r3, #32
 8001788:	2b00      	cmp	r3, #0
 800178a:	d03c      	beq.n	8001806 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d01c      	beq.n	80017ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001794:	4b5d      	ldr	r3, [pc, #372]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800179a:	4a5c      	ldr	r2, [pc, #368]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fa72 	bl	8000c8c <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ac:	f7ff fa6e 	bl	8000c8c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e0fc      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017be:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80017c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0ef      	beq.n	80017ac <HAL_RCC_OscConfig+0x418>
 80017cc:	e01b      	b.n	8001806 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ce:	4b4f      	ldr	r3, [pc, #316]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80017d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017d4:	4a4d      	ldr	r2, [pc, #308]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017de:	f7ff fa55 	bl	8000c8c <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017e6:	f7ff fa51 	bl	8000c8c <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0df      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017f8:	4b44      	ldr	r3, [pc, #272]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80017fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ef      	bne.n	80017e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80d3 	beq.w	80019b6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001810:	4b3e      	ldr	r3, [pc, #248]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b0c      	cmp	r3, #12
 800181a:	f000 808d 	beq.w	8001938 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d15a      	bne.n	80018dc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a38      	ldr	r2, [pc, #224]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800182c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff fa2b 	bl	8000c8c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183a:	f7ff fa27 	bl	8000c8c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e0b5      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001858:	4b2c      	ldr	r3, [pc, #176]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_RCC_OscConfig+0x580>)
 800185e:	4013      	ands	r3, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6a11      	ldr	r1, [r2, #32]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001868:	3a01      	subs	r2, #1
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	4311      	orrs	r1, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001872:	0212      	lsls	r2, r2, #8
 8001874:	4311      	orrs	r1, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800187a:	0852      	lsrs	r2, r2, #1
 800187c:	3a01      	subs	r2, #1
 800187e:	0552      	lsls	r2, r2, #21
 8001880:	4311      	orrs	r1, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001886:	0852      	lsrs	r2, r2, #1
 8001888:	3a01      	subs	r2, #1
 800188a:	0652      	lsls	r2, r2, #25
 800188c:	4311      	orrs	r1, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001892:	06d2      	lsls	r2, r2, #27
 8001894:	430a      	orrs	r2, r1
 8001896:	491d      	ldr	r1, [pc, #116]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001898:	4313      	orrs	r3, r2
 800189a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4a17      	ldr	r2, [pc, #92]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f9ea 	bl	8000c8c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff f9e6 	bl	8000c8c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e074      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x528>
 80018da:	e06c      	b.n	80019b6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0a      	ldr	r2, [pc, #40]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a07      	ldr	r2, [pc, #28]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018ee:	f023 0303 	bic.w	r3, r3, #3
 80018f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f9c2 	bl	8000c8c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190a:	e00e      	b.n	800192a <HAL_RCC_OscConfig+0x596>
 800190c:	40021000 	.word	0x40021000
 8001910:	40007000 	.word	0x40007000
 8001914:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f9b8 	bl	8000c8c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e046      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192a:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_RCC_OscConfig+0x62c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x584>
 8001936:	e03e      	b.n	80019b6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e039      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <HAL_RCC_OscConfig+0x62c>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	429a      	cmp	r2, r3
 8001956:	d12c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	3b01      	subs	r3, #1
 8001964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d123      	bne.n	80019b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d11b      	bne.n	80019b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d113      	bne.n	80019b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	3b01      	subs	r3, #1
 8001998:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d109      	bne.n	80019b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	3b01      	subs	r3, #1
 80019ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e11e      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b91      	ldr	r3, [pc, #580]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d910      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b8e      	ldr	r3, [pc, #568]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 020f 	bic.w	r2, r3, #15
 80019f2:	498c      	ldr	r1, [pc, #560]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b8a      	ldr	r3, [pc, #552]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e106      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d073      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d129      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a20:	4b81      	ldr	r3, [pc, #516]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0f4      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a30:	f000 f99e 	bl	8001d70 <RCC_GetSysClockFreqFromPLLSource>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4a7c      	ldr	r2, [pc, #496]	; (8001c2c <HAL_RCC_ClockConfig+0x268>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d93f      	bls.n	8001abe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a3e:	4b7a      	ldr	r3, [pc, #488]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d033      	beq.n	8001abe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d12f      	bne.n	8001abe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a5e:	4b72      	ldr	r3, [pc, #456]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a66:	4a70      	ldr	r2, [pc, #448]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e024      	b.n	8001abe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7c:	4b6a      	ldr	r3, [pc, #424]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0c6      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8c:	4b66      	ldr	r3, [pc, #408]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0be      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a9c:	f000 f8ce 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4a61      	ldr	r2, [pc, #388]	; (8001c2c <HAL_RCC_ClockConfig+0x268>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d909      	bls.n	8001abe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ab2:	4a5d      	ldr	r2, [pc, #372]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001abe:	4b5a      	ldr	r3, [pc, #360]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f023 0203 	bic.w	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4957      	ldr	r1, [pc, #348]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad0:	f7ff f8dc 	bl	8000c8c <HAL_GetTick>
 8001ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad8:	f7ff f8d8 	bl	8000c8c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e095      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 020c 	and.w	r2, r3, #12
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1eb      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d023      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a42      	ldr	r2, [pc, #264]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b30:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b38:	4a3b      	ldr	r2, [pc, #236]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4936      	ldr	r1, [pc, #216]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b80      	cmp	r3, #128	; 0x80
 8001b58:	d105      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b5a:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	4a32      	ldr	r2, [pc, #200]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d21d      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b74:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 020f 	bic.w	r2, r3, #15
 8001b7c:	4929      	ldr	r1, [pc, #164]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b84:	f7ff f882 	bl	8000c8c <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7ff f87e 	bl	8000c8c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e03b      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1ed      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4917      	ldr	r1, [pc, #92]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	490f      	ldr	r1, [pc, #60]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bee:	f000 f825 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001bf2:	4601      	mov	r1, r0
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <HAL_RCC_ClockConfig+0x26c>)
 8001c00:	5cd3      	ldrb	r3, [r2, r3]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	fa21 f303 	lsr.w	r3, r1, r3
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_RCC_ClockConfig+0x270>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_RCC_ClockConfig+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe ffee 	bl	8000bf4 <HAL_InitTick>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	04c4b400 	.word	0x04c4b400
 8001c30:	08003a9c 	.word	0x08003a9c
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c42:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d102      	bne.n	8001c54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	e047      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d102      	bne.n	8001c66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c60:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e03e      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d136      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3301      	adds	r3, #1
 8001c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d10c      	bne.n	8001caa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c90:	4a1a      	ldr	r2, [pc, #104]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9a:	68d2      	ldr	r2, [r2, #12]
 8001c9c:	0a12      	lsrs	r2, r2, #8
 8001c9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	617b      	str	r3, [r7, #20]
      break;
 8001ca8:	e00c      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001caa:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb4:	68d2      	ldr	r2, [r2, #12]
 8001cb6:	0a12      	lsrs	r2, r2, #8
 8001cb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
      break;
 8001cc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0e5b      	lsrs	r3, r3, #25
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	e001      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ce4:	693b      	ldr	r3, [r7, #16]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	00f42400 	.word	0x00f42400
 8001cfc:	007a1200 	.word	0x007a1200

08001d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000

08001d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d1c:	f7ff fff0 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d20:	4601      	mov	r1, r0
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08003aac 	.word	0x08003aac

08001d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d48:	f7ff ffda 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4601      	mov	r1, r0
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	0adb      	lsrs	r3, r3, #11
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d5a:	5cd3      	ldrb	r3, [r2, r3]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08003aac 	.word	0x08003aac

08001d70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d10c      	bne.n	8001dae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d94:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d9e:	68d2      	ldr	r2, [r2, #12]
 8001da0:	0a12      	lsrs	r2, r2, #8
 8001da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
    break;
 8001dac:	e00c      	b.n	8001dc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001db8:	68d2      	ldr	r2, [r2, #12]
 8001dba:	0a12      	lsrs	r2, r2, #8
 8001dbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
    break;
 8001dc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0e5b      	lsrs	r3, r3, #25
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001de2:	687b      	ldr	r3, [r7, #4]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40021000 	.word	0x40021000
 8001df4:	007a1200 	.word	0x007a1200
 8001df8:	00f42400 	.word	0x00f42400

08001dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e04:	2300      	movs	r3, #0
 8001e06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e08:	2300      	movs	r3, #0
 8001e0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 8098 	beq.w	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1e:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10d      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	4a3f      	ldr	r2, [pc, #252]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6593      	str	r3, [r2, #88]	; 0x58
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e42:	2301      	movs	r3, #1
 8001e44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e46:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a39      	ldr	r2, [pc, #228]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e52:	f7fe ff1b 	bl	8000c8c <HAL_GetTick>
 8001e56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e58:	e009      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5a:	f7fe ff17 	bl	8000c8c <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d902      	bls.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	74fb      	strb	r3, [r7, #19]
        break;
 8001e6c:	e005      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e6e:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0ef      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e7a:	7cfb      	ldrb	r3, [r7, #19]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d159      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01e      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d019      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eae:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebe:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d016      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7fe fed7 	bl	8000c8c <HAL_GetTick>
 8001ede:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee0:	e00b      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7fe fed3 	bl	8000c8c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d902      	bls.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	74fb      	strb	r3, [r7, #19]
            break;
 8001ef8:	e006      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0ec      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10b      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4903      	ldr	r1, [pc, #12]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f24:	e008      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	74bb      	strb	r3, [r7, #18]
 8001f2a:	e005      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f38:	7c7b      	ldrb	r3, [r7, #17]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d105      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3e:	4ba6      	ldr	r3, [pc, #664]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	4aa5      	ldr	r2, [pc, #660]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f56:	4ba0      	ldr	r3, [pc, #640]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5c:	f023 0203 	bic.w	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	499c      	ldr	r1, [pc, #624]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00a      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f78:	4b97      	ldr	r3, [pc, #604]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7e:	f023 020c 	bic.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	4994      	ldr	r1, [pc, #592]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00a      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f9a:	4b8f      	ldr	r3, [pc, #572]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	498b      	ldr	r1, [pc, #556]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00a      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fbc:	4b86      	ldr	r3, [pc, #536]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	4983      	ldr	r1, [pc, #524]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fde:	4b7e      	ldr	r3, [pc, #504]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	497a      	ldr	r1, [pc, #488]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00a      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002000:	4b75      	ldr	r3, [pc, #468]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	4972      	ldr	r1, [pc, #456]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002022:	4b6d      	ldr	r3, [pc, #436]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	4969      	ldr	r1, [pc, #420]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002044:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4961      	ldr	r1, [pc, #388]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002066:	4b5c      	ldr	r3, [pc, #368]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	4958      	ldr	r1, [pc, #352]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d015      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002088:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	4950      	ldr	r1, [pc, #320]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020a6:	d105      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a8:	4b4b      	ldr	r3, [pc, #300]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a4a      	ldr	r2, [pc, #296]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020c0:	4b45      	ldr	r3, [pc, #276]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	4942      	ldr	r1, [pc, #264]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020de:	d105      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e0:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a3c      	ldr	r2, [pc, #240]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020f8:	4b37      	ldr	r3, [pc, #220]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4934      	ldr	r1, [pc, #208]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002116:	d105      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002118:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a2e      	ldr	r2, [pc, #184]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002122:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213e:	4926      	ldr	r1, [pc, #152]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800214e:	d105      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002150:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a20      	ldr	r2, [pc, #128]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	4918      	ldr	r1, [pc, #96]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002186:	d105      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002192:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d015      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	490a      	ldr	r1, [pc, #40]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021be:	d105      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80021cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000

080021dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e049      	b.n	8002282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fb12 	bl	800082c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3304      	adds	r3, #4
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f000 fb24 	bl	8002868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d001      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e04a      	b.n	800233a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a21      	ldr	r2, [pc, #132]	; (8002348 <HAL_TIM_Base_Start_IT+0xbc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d018      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x6c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ce:	d013      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x6c>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_TIM_Base_Start_IT+0xc0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00e      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x6c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_TIM_Base_Start_IT+0xc4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d009      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x6c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <HAL_TIM_Base_Start_IT+0xc8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d004      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x6c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a19      	ldr	r2, [pc, #100]	; (8002358 <HAL_TIM_Base_Start_IT+0xcc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d115      	bne.n	8002324 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_TIM_Base_Start_IT+0xd0>)
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b06      	cmp	r3, #6
 8002308:	d015      	beq.n	8002336 <HAL_TIM_Base_Start_IT+0xaa>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002310:	d011      	beq.n	8002336 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002322:	e008      	b.n	8002336 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e000      	b.n	8002338 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002336:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40012c00 	.word	0x40012c00
 800234c:	40000400 	.word	0x40000400
 8002350:	40000800 	.word	0x40000800
 8002354:	40013400 	.word	0x40013400
 8002358:	40014000 	.word	0x40014000
 800235c:	00010007 	.word	0x00010007

08002360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d122      	bne.n	80023bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b02      	cmp	r3, #2
 8002382:	d11b      	bne.n	80023bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0202 	mvn.w	r2, #2
 800238c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fa42 	bl	800282c <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fa34 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fa45 	bl	8002840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d122      	bne.n	8002410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d11b      	bne.n	8002410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0204 	mvn.w	r2, #4
 80023e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fa18 	bl	800282c <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa0a 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fa1b 	bl	8002840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b08      	cmp	r3, #8
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b08      	cmp	r3, #8
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0208 	mvn.w	r2, #8
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2204      	movs	r2, #4
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f9ee 	bl	800282c <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f9e0 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f9f1 	bl	8002840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b10      	cmp	r3, #16
 8002470:	d122      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b10      	cmp	r3, #16
 800247e:	d11b      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0210 	mvn.w	r2, #16
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2208      	movs	r2, #8
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f9c4 	bl	800282c <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f9b6 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f9c7 	bl	8002840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d10e      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0201 	mvn.w	r2, #1
 80024dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f990 	bl	8002804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ee:	2b80      	cmp	r3, #128	; 0x80
 80024f0:	d10e      	bne.n	8002510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b80      	cmp	r3, #128	; 0x80
 80024fe:	d107      	bne.n	8002510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fb64 	bl	8002bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251e:	d10e      	bne.n	800253e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	2b80      	cmp	r3, #128	; 0x80
 800252c:	d107      	bne.n	800253e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fb57 	bl	8002bec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d10e      	bne.n	800256a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d107      	bne.n	800256a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f975 	bl	8002854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b20      	cmp	r3, #32
 8002576:	d10e      	bne.n	8002596 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b20      	cmp	r3, #32
 8002584:	d107      	bne.n	8002596 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f06f 0220 	mvn.w	r2, #32
 800258e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fb17 	bl	8002bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a4:	d10f      	bne.n	80025c6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025b4:	d107      	bne.n	80025c6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80025be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 fb1d 	bl	8002c00 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025d4:	d10f      	bne.n	80025f6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025e4:	d107      	bne.n	80025f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80025ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fb0f 	bl	8002c14 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002604:	d10f      	bne.n	8002626 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002614:	d107      	bne.n	8002626 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800261e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fb01 	bl	8002c28 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002630:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002634:	d10f      	bne.n	8002656 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002644:	d107      	bne.n	8002656 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800264e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 faf3 	bl	8002c3c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_TIM_ConfigClockSource+0x18>
 8002674:	2302      	movs	r3, #2
 8002676:	e0b9      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x18c>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002696:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800269a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b70      	cmp	r3, #112	; 0x70
 80026b2:	d02e      	beq.n	8002712 <HAL_TIM_ConfigClockSource+0xb2>
 80026b4:	2b70      	cmp	r3, #112	; 0x70
 80026b6:	d812      	bhi.n	80026de <HAL_TIM_ConfigClockSource+0x7e>
 80026b8:	2b30      	cmp	r3, #48	; 0x30
 80026ba:	f000 8084 	beq.w	80027c6 <HAL_TIM_ConfigClockSource+0x166>
 80026be:	2b30      	cmp	r3, #48	; 0x30
 80026c0:	d806      	bhi.n	80026d0 <HAL_TIM_ConfigClockSource+0x70>
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d07f      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x166>
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	d07d      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x166>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d07b      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026ce:	e084      	b.n	80027da <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80026d0:	2b50      	cmp	r3, #80	; 0x50
 80026d2:	d048      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x106>
 80026d4:	2b60      	cmp	r3, #96	; 0x60
 80026d6:	d056      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x126>
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	d064      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x146>
      break;
 80026dc:	e07d      	b.n	80027da <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80026de:	4a45      	ldr	r2, [pc, #276]	; (80027f4 <HAL_TIM_ConfigClockSource+0x194>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d070      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x166>
 80026e4:	4a43      	ldr	r2, [pc, #268]	; (80027f4 <HAL_TIM_ConfigClockSource+0x194>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d809      	bhi.n	80026fe <HAL_TIM_ConfigClockSource+0x9e>
 80026ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ee:	d027      	beq.n	8002740 <HAL_TIM_ConfigClockSource+0xe0>
 80026f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80026f4:	d067      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x166>
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fa:	d06d      	beq.n	80027d8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80026fc:	e06d      	b.n	80027da <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80026fe:	4a3e      	ldr	r2, [pc, #248]	; (80027f8 <HAL_TIM_ConfigClockSource+0x198>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d060      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x166>
 8002704:	4a3d      	ldr	r2, [pc, #244]	; (80027fc <HAL_TIM_ConfigClockSource+0x19c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d05d      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x166>
 800270a:	4a3d      	ldr	r2, [pc, #244]	; (8002800 <HAL_TIM_ConfigClockSource+0x1a0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d05a      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8002710:	e063      	b.n	80027da <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	6899      	ldr	r1, [r3, #8]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f000 f9ad 	bl	8002a80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002734:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	609a      	str	r2, [r3, #8]
      break;
 800273e:	e04c      	b.n	80027da <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6899      	ldr	r1, [r3, #8]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f000 f996 	bl	8002a80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002762:	609a      	str	r2, [r3, #8]
      break;
 8002764:	e039      	b.n	80027da <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	461a      	mov	r2, r3
 8002774:	f000 f908 	bl	8002988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2150      	movs	r1, #80	; 0x50
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f961 	bl	8002a46 <TIM_ITRx_SetConfig>
      break;
 8002784:	e029      	b.n	80027da <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6859      	ldr	r1, [r3, #4]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	461a      	mov	r2, r3
 8002794:	f000 f927 	bl	80029e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2160      	movs	r1, #96	; 0x60
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f951 	bl	8002a46 <TIM_ITRx_SetConfig>
      break;
 80027a4:	e019      	b.n	80027da <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f000 f8e8 	bl	8002988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2140      	movs	r1, #64	; 0x40
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f941 	bl	8002a46 <TIM_ITRx_SetConfig>
      break;
 80027c4:	e009      	b.n	80027da <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	4610      	mov	r0, r2
 80027d2:	f000 f938 	bl	8002a46 <TIM_ITRx_SetConfig>
        break;
 80027d6:	e000      	b.n	80027da <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80027d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	00100020 	.word	0x00100020
 80027f8:	00100040 	.word	0x00100040
 80027fc:	00100070 	.word	0x00100070
 8002800:	00100030 	.word	0x00100030

08002804 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a3c      	ldr	r2, [pc, #240]	; (800296c <TIM_Base_SetConfig+0x104>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00f      	beq.n	80028a0 <TIM_Base_SetConfig+0x38>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002886:	d00b      	beq.n	80028a0 <TIM_Base_SetConfig+0x38>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a39      	ldr	r2, [pc, #228]	; (8002970 <TIM_Base_SetConfig+0x108>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d007      	beq.n	80028a0 <TIM_Base_SetConfig+0x38>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a38      	ldr	r2, [pc, #224]	; (8002974 <TIM_Base_SetConfig+0x10c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d003      	beq.n	80028a0 <TIM_Base_SetConfig+0x38>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a37      	ldr	r2, [pc, #220]	; (8002978 <TIM_Base_SetConfig+0x110>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d108      	bne.n	80028b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a2d      	ldr	r2, [pc, #180]	; (800296c <TIM_Base_SetConfig+0x104>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d01b      	beq.n	80028f2 <TIM_Base_SetConfig+0x8a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c0:	d017      	beq.n	80028f2 <TIM_Base_SetConfig+0x8a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <TIM_Base_SetConfig+0x108>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <TIM_Base_SetConfig+0x8a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a29      	ldr	r2, [pc, #164]	; (8002974 <TIM_Base_SetConfig+0x10c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00f      	beq.n	80028f2 <TIM_Base_SetConfig+0x8a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a28      	ldr	r2, [pc, #160]	; (8002978 <TIM_Base_SetConfig+0x110>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00b      	beq.n	80028f2 <TIM_Base_SetConfig+0x8a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a27      	ldr	r2, [pc, #156]	; (800297c <TIM_Base_SetConfig+0x114>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <TIM_Base_SetConfig+0x8a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a26      	ldr	r2, [pc, #152]	; (8002980 <TIM_Base_SetConfig+0x118>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d003      	beq.n	80028f2 <TIM_Base_SetConfig+0x8a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a25      	ldr	r2, [pc, #148]	; (8002984 <TIM_Base_SetConfig+0x11c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d108      	bne.n	8002904 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a10      	ldr	r2, [pc, #64]	; (800296c <TIM_Base_SetConfig+0x104>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00f      	beq.n	8002950 <TIM_Base_SetConfig+0xe8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a11      	ldr	r2, [pc, #68]	; (8002978 <TIM_Base_SetConfig+0x110>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00b      	beq.n	8002950 <TIM_Base_SetConfig+0xe8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a10      	ldr	r2, [pc, #64]	; (800297c <TIM_Base_SetConfig+0x114>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d007      	beq.n	8002950 <TIM_Base_SetConfig+0xe8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a0f      	ldr	r2, [pc, #60]	; (8002980 <TIM_Base_SetConfig+0x118>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d003      	beq.n	8002950 <TIM_Base_SetConfig+0xe8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <TIM_Base_SetConfig+0x11c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d103      	bne.n	8002958 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	615a      	str	r2, [r3, #20]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40000400 	.word	0x40000400
 8002974:	40000800 	.word	0x40000800
 8002978:	40013400 	.word	0x40013400
 800297c:	40014000 	.word	0x40014000
 8002980:	40014400 	.word	0x40014400
 8002984:	40014800 	.word	0x40014800

08002988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f023 0201 	bic.w	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f023 030a 	bic.w	r3, r3, #10
 80029c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	621a      	str	r2, [r3, #32]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b087      	sub	sp, #28
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f023 0210 	bic.w	r2, r3, #16
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	031b      	lsls	r3, r3, #12
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	621a      	str	r2, [r3, #32]
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f043 0307 	orr.w	r3, r3, #7
 8002a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	609a      	str	r2, [r3, #8]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	021a      	lsls	r2, r3, #8
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	609a      	str	r2, [r3, #8]
}
 8002ab4:	bf00      	nop
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e065      	b.n	8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d004      	beq.n	8002b0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d108      	bne.n	8002b1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1b      	ldr	r2, [pc, #108]	; (8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d018      	beq.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4e:	d013      	beq.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00e      	beq.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a17      	ldr	r2, [pc, #92]	; (8002bbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d009      	beq.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d004      	beq.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d10c      	bne.n	8002b92 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40013400 	.word	0x40013400
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40000800 	.word	0x40000800
 8002bc0:	40014000 	.word	0x40014000

08002bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e042      	b.n	8002ce8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d106      	bne.n	8002c7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7fd fdfd 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2224      	movs	r2, #36	; 0x24
 8002c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0201 	bic.w	r2, r2, #1
 8002c90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f992 	bl	8002fbc <UART_SetConfig>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e022      	b.n	8002ce8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fc2e 	bl	800350c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fcb5 	bl	8003650 <UART_CheckIdleState>
 8002ce6:	4603      	mov	r3, r0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	f040 8083 	bne.w	8002e12 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_UART_Transmit+0x28>
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e07b      	b.n	8002e14 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_UART_Transmit+0x3a>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e074      	b.n	8002e14 <HAL_UART_Transmit+0x124>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2221      	movs	r2, #33	; 0x21
 8002d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d42:	f7fd ffa3 	bl	8000c8c <HAL_GetTick>
 8002d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d108      	bne.n	8002d74 <HAL_UART_Transmit+0x84>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e003      	b.n	8002d7c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8002d84:	e02c      	b.n	8002de0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2180      	movs	r1, #128	; 0x80
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fca5 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e039      	b.n	8002e14 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10b      	bne.n	8002dbe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3302      	adds	r3, #2
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	e007      	b.n	8002dce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1cc      	bne.n	8002d86 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2200      	movs	r2, #0
 8002df4:	2140      	movs	r1, #64	; 0x40
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fc72 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e006      	b.n	8002e14 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
  }
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	f040 80bd 	bne.w	8002fb2 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Receive+0x28>
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0b5      	b.n	8002fb4 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Receive+0x3a>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e0ae      	b.n	8002fb4 <HAL_UART_Receive+0x198>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2222      	movs	r2, #34	; 0x22
 8002e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e6e:	f7fd ff0d 	bl	8000c8c <HAL_GetTick>
 8002e72:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8c:	d10e      	bne.n	8002eac <HAL_UART_Receive+0x90>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_UART_Receive+0x86>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002e9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002ea0:	e02d      	b.n	8002efe <HAL_UART_Receive+0xe2>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	22ff      	movs	r2, #255	; 0xff
 8002ea6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002eaa:	e028      	b.n	8002efe <HAL_UART_Receive+0xe2>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_UART_Receive+0xb4>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <HAL_UART_Receive+0xaa>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	22ff      	movs	r2, #255	; 0xff
 8002ec0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002ec4:	e01b      	b.n	8002efe <HAL_UART_Receive+0xe2>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	227f      	movs	r2, #127	; 0x7f
 8002eca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002ece:	e016      	b.n	8002efe <HAL_UART_Receive+0xe2>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ed8:	d10d      	bne.n	8002ef6 <HAL_UART_Receive+0xda>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <HAL_UART_Receive+0xd0>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	227f      	movs	r2, #127	; 0x7f
 8002ee6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002eea:	e008      	b.n	8002efe <HAL_UART_Receive+0xe2>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	223f      	movs	r2, #63	; 0x3f
 8002ef0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002ef4:	e003      	b.n	8002efe <HAL_UART_Receive+0xe2>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002f04:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0e:	d108      	bne.n	8002f22 <HAL_UART_Receive+0x106>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d104      	bne.n	8002f22 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	e003      	b.n	8002f2a <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f32:	e032      	b.n	8002f9a <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2120      	movs	r1, #32
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fbce 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e032      	b.n	8002fb4 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10c      	bne.n	8002f6e <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	8a7b      	ldrh	r3, [r7, #18]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	3302      	adds	r3, #2
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	e00c      	b.n	8002f88 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	8a7b      	ldrh	r3, [r7, #18]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3301      	adds	r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1c6      	bne.n	8002f34 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e000      	b.n	8002fb4 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
  }
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002fc0:	b088      	sub	sp, #32
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4bb0      	ldr	r3, [pc, #704]	; (80032b4 <UART_SetConfig+0x2f8>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	69f9      	ldr	r1, [r7, #28]
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4aa5      	ldr	r2, [pc, #660]	; (80032b8 <UART_SetConfig+0x2fc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d004      	beq.n	8003030 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	4313      	orrs	r3, r2
 800302e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800303a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	69f9      	ldr	r1, [r7, #28]
 8003044:	430b      	orrs	r3, r1
 8003046:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	f023 010f 	bic.w	r1, r3, #15
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a96      	ldr	r2, [pc, #600]	; (80032bc <UART_SetConfig+0x300>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d121      	bne.n	80030ac <UART_SetConfig+0xf0>
 8003068:	4b95      	ldr	r3, [pc, #596]	; (80032c0 <UART_SetConfig+0x304>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b03      	cmp	r3, #3
 8003074:	d816      	bhi.n	80030a4 <UART_SetConfig+0xe8>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <UART_SetConfig+0xc0>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	0800308d 	.word	0x0800308d
 8003080:	08003099 	.word	0x08003099
 8003084:	08003093 	.word	0x08003093
 8003088:	0800309f 	.word	0x0800309f
 800308c:	2301      	movs	r3, #1
 800308e:	76fb      	strb	r3, [r7, #27]
 8003090:	e0be      	b.n	8003210 <UART_SetConfig+0x254>
 8003092:	2302      	movs	r3, #2
 8003094:	76fb      	strb	r3, [r7, #27]
 8003096:	e0bb      	b.n	8003210 <UART_SetConfig+0x254>
 8003098:	2304      	movs	r3, #4
 800309a:	76fb      	strb	r3, [r7, #27]
 800309c:	e0b8      	b.n	8003210 <UART_SetConfig+0x254>
 800309e:	2308      	movs	r3, #8
 80030a0:	76fb      	strb	r3, [r7, #27]
 80030a2:	e0b5      	b.n	8003210 <UART_SetConfig+0x254>
 80030a4:	2310      	movs	r3, #16
 80030a6:	76fb      	strb	r3, [r7, #27]
 80030a8:	bf00      	nop
 80030aa:	e0b1      	b.n	8003210 <UART_SetConfig+0x254>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a84      	ldr	r2, [pc, #528]	; (80032c4 <UART_SetConfig+0x308>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d134      	bne.n	8003120 <UART_SetConfig+0x164>
 80030b6:	4b82      	ldr	r3, [pc, #520]	; (80032c0 <UART_SetConfig+0x304>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b0c      	cmp	r3, #12
 80030c2:	d829      	bhi.n	8003118 <UART_SetConfig+0x15c>
 80030c4:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <UART_SetConfig+0x110>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	08003101 	.word	0x08003101
 80030d0:	08003119 	.word	0x08003119
 80030d4:	08003119 	.word	0x08003119
 80030d8:	08003119 	.word	0x08003119
 80030dc:	0800310d 	.word	0x0800310d
 80030e0:	08003119 	.word	0x08003119
 80030e4:	08003119 	.word	0x08003119
 80030e8:	08003119 	.word	0x08003119
 80030ec:	08003107 	.word	0x08003107
 80030f0:	08003119 	.word	0x08003119
 80030f4:	08003119 	.word	0x08003119
 80030f8:	08003119 	.word	0x08003119
 80030fc:	08003113 	.word	0x08003113
 8003100:	2300      	movs	r3, #0
 8003102:	76fb      	strb	r3, [r7, #27]
 8003104:	e084      	b.n	8003210 <UART_SetConfig+0x254>
 8003106:	2302      	movs	r3, #2
 8003108:	76fb      	strb	r3, [r7, #27]
 800310a:	e081      	b.n	8003210 <UART_SetConfig+0x254>
 800310c:	2304      	movs	r3, #4
 800310e:	76fb      	strb	r3, [r7, #27]
 8003110:	e07e      	b.n	8003210 <UART_SetConfig+0x254>
 8003112:	2308      	movs	r3, #8
 8003114:	76fb      	strb	r3, [r7, #27]
 8003116:	e07b      	b.n	8003210 <UART_SetConfig+0x254>
 8003118:	2310      	movs	r3, #16
 800311a:	76fb      	strb	r3, [r7, #27]
 800311c:	bf00      	nop
 800311e:	e077      	b.n	8003210 <UART_SetConfig+0x254>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a68      	ldr	r2, [pc, #416]	; (80032c8 <UART_SetConfig+0x30c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d120      	bne.n	800316c <UART_SetConfig+0x1b0>
 800312a:	4b65      	ldr	r3, [pc, #404]	; (80032c0 <UART_SetConfig+0x304>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003134:	2b10      	cmp	r3, #16
 8003136:	d00f      	beq.n	8003158 <UART_SetConfig+0x19c>
 8003138:	2b10      	cmp	r3, #16
 800313a:	d802      	bhi.n	8003142 <UART_SetConfig+0x186>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <UART_SetConfig+0x190>
 8003140:	e010      	b.n	8003164 <UART_SetConfig+0x1a8>
 8003142:	2b20      	cmp	r3, #32
 8003144:	d005      	beq.n	8003152 <UART_SetConfig+0x196>
 8003146:	2b30      	cmp	r3, #48	; 0x30
 8003148:	d009      	beq.n	800315e <UART_SetConfig+0x1a2>
 800314a:	e00b      	b.n	8003164 <UART_SetConfig+0x1a8>
 800314c:	2300      	movs	r3, #0
 800314e:	76fb      	strb	r3, [r7, #27]
 8003150:	e05e      	b.n	8003210 <UART_SetConfig+0x254>
 8003152:	2302      	movs	r3, #2
 8003154:	76fb      	strb	r3, [r7, #27]
 8003156:	e05b      	b.n	8003210 <UART_SetConfig+0x254>
 8003158:	2304      	movs	r3, #4
 800315a:	76fb      	strb	r3, [r7, #27]
 800315c:	e058      	b.n	8003210 <UART_SetConfig+0x254>
 800315e:	2308      	movs	r3, #8
 8003160:	76fb      	strb	r3, [r7, #27]
 8003162:	e055      	b.n	8003210 <UART_SetConfig+0x254>
 8003164:	2310      	movs	r3, #16
 8003166:	76fb      	strb	r3, [r7, #27]
 8003168:	bf00      	nop
 800316a:	e051      	b.n	8003210 <UART_SetConfig+0x254>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a56      	ldr	r2, [pc, #344]	; (80032cc <UART_SetConfig+0x310>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d120      	bne.n	80031b8 <UART_SetConfig+0x1fc>
 8003176:	4b52      	ldr	r3, [pc, #328]	; (80032c0 <UART_SetConfig+0x304>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d00f      	beq.n	80031a4 <UART_SetConfig+0x1e8>
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d802      	bhi.n	800318e <UART_SetConfig+0x1d2>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <UART_SetConfig+0x1dc>
 800318c:	e010      	b.n	80031b0 <UART_SetConfig+0x1f4>
 800318e:	2b80      	cmp	r3, #128	; 0x80
 8003190:	d005      	beq.n	800319e <UART_SetConfig+0x1e2>
 8003192:	2bc0      	cmp	r3, #192	; 0xc0
 8003194:	d009      	beq.n	80031aa <UART_SetConfig+0x1ee>
 8003196:	e00b      	b.n	80031b0 <UART_SetConfig+0x1f4>
 8003198:	2300      	movs	r3, #0
 800319a:	76fb      	strb	r3, [r7, #27]
 800319c:	e038      	b.n	8003210 <UART_SetConfig+0x254>
 800319e:	2302      	movs	r3, #2
 80031a0:	76fb      	strb	r3, [r7, #27]
 80031a2:	e035      	b.n	8003210 <UART_SetConfig+0x254>
 80031a4:	2304      	movs	r3, #4
 80031a6:	76fb      	strb	r3, [r7, #27]
 80031a8:	e032      	b.n	8003210 <UART_SetConfig+0x254>
 80031aa:	2308      	movs	r3, #8
 80031ac:	76fb      	strb	r3, [r7, #27]
 80031ae:	e02f      	b.n	8003210 <UART_SetConfig+0x254>
 80031b0:	2310      	movs	r3, #16
 80031b2:	76fb      	strb	r3, [r7, #27]
 80031b4:	bf00      	nop
 80031b6:	e02b      	b.n	8003210 <UART_SetConfig+0x254>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3e      	ldr	r2, [pc, #248]	; (80032b8 <UART_SetConfig+0x2fc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d124      	bne.n	800320c <UART_SetConfig+0x250>
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <UART_SetConfig+0x304>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d0:	d012      	beq.n	80031f8 <UART_SetConfig+0x23c>
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d6:	d802      	bhi.n	80031de <UART_SetConfig+0x222>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <UART_SetConfig+0x230>
 80031dc:	e012      	b.n	8003204 <UART_SetConfig+0x248>
 80031de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e2:	d006      	beq.n	80031f2 <UART_SetConfig+0x236>
 80031e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031e8:	d009      	beq.n	80031fe <UART_SetConfig+0x242>
 80031ea:	e00b      	b.n	8003204 <UART_SetConfig+0x248>
 80031ec:	2300      	movs	r3, #0
 80031ee:	76fb      	strb	r3, [r7, #27]
 80031f0:	e00e      	b.n	8003210 <UART_SetConfig+0x254>
 80031f2:	2302      	movs	r3, #2
 80031f4:	76fb      	strb	r3, [r7, #27]
 80031f6:	e00b      	b.n	8003210 <UART_SetConfig+0x254>
 80031f8:	2304      	movs	r3, #4
 80031fa:	76fb      	strb	r3, [r7, #27]
 80031fc:	e008      	b.n	8003210 <UART_SetConfig+0x254>
 80031fe:	2308      	movs	r3, #8
 8003200:	76fb      	strb	r3, [r7, #27]
 8003202:	e005      	b.n	8003210 <UART_SetConfig+0x254>
 8003204:	2310      	movs	r3, #16
 8003206:	76fb      	strb	r3, [r7, #27]
 8003208:	bf00      	nop
 800320a:	e001      	b.n	8003210 <UART_SetConfig+0x254>
 800320c:	2310      	movs	r3, #16
 800320e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a28      	ldr	r2, [pc, #160]	; (80032b8 <UART_SetConfig+0x2fc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	f040 80a1 	bne.w	800335e <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800321c:	7efb      	ldrb	r3, [r7, #27]
 800321e:	2b08      	cmp	r3, #8
 8003220:	d823      	bhi.n	800326a <UART_SetConfig+0x2ae>
 8003222:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <UART_SetConfig+0x26c>)
 8003224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003228:	0800324d 	.word	0x0800324d
 800322c:	0800326b 	.word	0x0800326b
 8003230:	08003255 	.word	0x08003255
 8003234:	0800326b 	.word	0x0800326b
 8003238:	0800325b 	.word	0x0800325b
 800323c:	0800326b 	.word	0x0800326b
 8003240:	0800326b 	.word	0x0800326b
 8003244:	0800326b 	.word	0x0800326b
 8003248:	08003263 	.word	0x08003263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800324c:	f7fe fd64 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 8003250:	6178      	str	r0, [r7, #20]
        break;
 8003252:	e00f      	b.n	8003274 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003254:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <UART_SetConfig+0x314>)
 8003256:	617b      	str	r3, [r7, #20]
        break;
 8003258:	e00c      	b.n	8003274 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325a:	f7fe fcef 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 800325e:	6178      	str	r0, [r7, #20]
        break;
 8003260:	e008      	b.n	8003274 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003266:	617b      	str	r3, [r7, #20]
        break;
 8003268:	e004      	b.n	8003274 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	76bb      	strb	r3, [r7, #26]
        break;
 8003272:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8130 	beq.w	80034dc <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <UART_SetConfig+0x318>)
 8003282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003286:	461a      	mov	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	fbb3 f3f2 	udiv	r3, r3, r2
 800328e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	429a      	cmp	r2, r3
 800329e:	d305      	bcc.n	80032ac <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d915      	bls.n	80032d8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	76bb      	strb	r3, [r7, #26]
 80032b0:	e114      	b.n	80034dc <UART_SetConfig+0x520>
 80032b2:	bf00      	nop
 80032b4:	cfff69f3 	.word	0xcfff69f3
 80032b8:	40008000 	.word	0x40008000
 80032bc:	40013800 	.word	0x40013800
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40004400 	.word	0x40004400
 80032c8:	40004800 	.word	0x40004800
 80032cc:	40004c00 	.word	0x40004c00
 80032d0:	00f42400 	.word	0x00f42400
 80032d4:	08003ab4 	.word	0x08003ab4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	4618      	mov	r0, r3
 80032dc:	f04f 0100 	mov.w	r1, #0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	4a87      	ldr	r2, [pc, #540]	; (8003504 <UART_SetConfig+0x548>)
 80032e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f04f 0400 	mov.w	r4, #0
 80032f0:	461a      	mov	r2, r3
 80032f2:	4623      	mov	r3, r4
 80032f4:	f7fc ff90 	bl	8000218 <__aeabi_uldivmod>
 80032f8:	4603      	mov	r3, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	4619      	mov	r1, r3
 80032fe:	4622      	mov	r2, r4
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	f04f 0400 	mov.w	r4, #0
 8003308:	0214      	lsls	r4, r2, #8
 800330a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800330e:	020b      	lsls	r3, r1, #8
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6852      	ldr	r2, [r2, #4]
 8003314:	0852      	lsrs	r2, r2, #1
 8003316:	4611      	mov	r1, r2
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	eb13 0b01 	adds.w	fp, r3, r1
 8003320:	eb44 0c02 	adc.w	ip, r4, r2
 8003324:	4658      	mov	r0, fp
 8003326:	4661      	mov	r1, ip
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f04f 0400 	mov.w	r4, #0
 8003330:	461a      	mov	r2, r3
 8003332:	4623      	mov	r3, r4
 8003334:	f7fc ff70 	bl	8000218 <__aeabi_uldivmod>
 8003338:	4603      	mov	r3, r0
 800333a:	460c      	mov	r4, r1
 800333c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003344:	d308      	bcc.n	8003358 <UART_SetConfig+0x39c>
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800334c:	d204      	bcs.n	8003358 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	e0c1      	b.n	80034dc <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	76bb      	strb	r3, [r7, #26]
 800335c:	e0be      	b.n	80034dc <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003366:	d164      	bne.n	8003432 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8003368:	7efb      	ldrb	r3, [r7, #27]
 800336a:	2b08      	cmp	r3, #8
 800336c:	d827      	bhi.n	80033be <UART_SetConfig+0x402>
 800336e:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <UART_SetConfig+0x3b8>)
 8003370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003374:	08003399 	.word	0x08003399
 8003378:	080033a1 	.word	0x080033a1
 800337c:	080033a9 	.word	0x080033a9
 8003380:	080033bf 	.word	0x080033bf
 8003384:	080033af 	.word	0x080033af
 8003388:	080033bf 	.word	0x080033bf
 800338c:	080033bf 	.word	0x080033bf
 8003390:	080033bf 	.word	0x080033bf
 8003394:	080033b7 	.word	0x080033b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003398:	f7fe fcbe 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 800339c:	6178      	str	r0, [r7, #20]
        break;
 800339e:	e013      	b.n	80033c8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a0:	f7fe fcd0 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 80033a4:	6178      	str	r0, [r7, #20]
        break;
 80033a6:	e00f      	b.n	80033c8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a8:	4b57      	ldr	r3, [pc, #348]	; (8003508 <UART_SetConfig+0x54c>)
 80033aa:	617b      	str	r3, [r7, #20]
        break;
 80033ac:	e00c      	b.n	80033c8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ae:	f7fe fc45 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80033b2:	6178      	str	r0, [r7, #20]
        break;
 80033b4:	e008      	b.n	80033c8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ba:	617b      	str	r3, [r7, #20]
        break;
 80033bc:	e004      	b.n	80033c8 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	76bb      	strb	r3, [r7, #26]
        break;
 80033c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8086 	beq.w	80034dc <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	4a4b      	ldr	r2, [pc, #300]	; (8003504 <UART_SetConfig+0x548>)
 80033d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033da:	461a      	mov	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fbb3 f3f2 	udiv	r3, r3, r2
 80033e2:	005a      	lsls	r2, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	441a      	add	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	d916      	bls.n	800342c <UART_SetConfig+0x470>
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003404:	d212      	bcs.n	800342c <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	b29b      	uxth	r3, r3
 800340a:	f023 030f 	bic.w	r3, r3, #15
 800340e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	b29b      	uxth	r3, r3
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	b29a      	uxth	r2, r3
 800341c:	89fb      	ldrh	r3, [r7, #14]
 800341e:	4313      	orrs	r3, r2
 8003420:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	89fa      	ldrh	r2, [r7, #14]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e057      	b.n	80034dc <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	76bb      	strb	r3, [r7, #26]
 8003430:	e054      	b.n	80034dc <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003432:	7efb      	ldrb	r3, [r7, #27]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d828      	bhi.n	800348a <UART_SetConfig+0x4ce>
 8003438:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <UART_SetConfig+0x484>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003465 	.word	0x08003465
 8003444:	0800346d 	.word	0x0800346d
 8003448:	08003475 	.word	0x08003475
 800344c:	0800348b 	.word	0x0800348b
 8003450:	0800347b 	.word	0x0800347b
 8003454:	0800348b 	.word	0x0800348b
 8003458:	0800348b 	.word	0x0800348b
 800345c:	0800348b 	.word	0x0800348b
 8003460:	08003483 	.word	0x08003483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003464:	f7fe fc58 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 8003468:	6178      	str	r0, [r7, #20]
        break;
 800346a:	e013      	b.n	8003494 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800346c:	f7fe fc6a 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 8003470:	6178      	str	r0, [r7, #20]
        break;
 8003472:	e00f      	b.n	8003494 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003474:	4b24      	ldr	r3, [pc, #144]	; (8003508 <UART_SetConfig+0x54c>)
 8003476:	617b      	str	r3, [r7, #20]
        break;
 8003478:	e00c      	b.n	8003494 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347a:	f7fe fbdf 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 800347e:	6178      	str	r0, [r7, #20]
        break;
 8003480:	e008      	b.n	8003494 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003486:	617b      	str	r3, [r7, #20]
        break;
 8003488:	e004      	b.n	8003494 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	76bb      	strb	r3, [r7, #26]
        break;
 8003492:	bf00      	nop
    }

    if (pclk != 0U)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d020      	beq.n	80034dc <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	4a19      	ldr	r2, [pc, #100]	; (8003504 <UART_SetConfig+0x548>)
 80034a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034a4:	461a      	mov	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	441a      	add	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	b29b      	uxth	r3, r3
 80034be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b0f      	cmp	r3, #15
 80034c4:	d908      	bls.n	80034d8 <UART_SetConfig+0x51c>
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d204      	bcs.n	80034d8 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	e001      	b.n	80034dc <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80034f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003504:	08003ab4 	.word	0x08003ab4
 8003508:	00f42400 	.word	0x00f42400

0800350c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01a      	beq.n	8003622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800360a:	d10a      	bne.n	8003622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]
  }
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af02      	add	r7, sp, #8
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003660:	f7fd fb14 	bl	8000c8c <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b08      	cmp	r3, #8
 8003672:	d10e      	bne.n	8003692 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f82c 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e022      	b.n	80036d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b04      	cmp	r3, #4
 800369e:	d10e      	bne.n	80036be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f816 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e00c      	b.n	80036d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f0:	e062      	b.n	80037b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d05e      	beq.n	80037b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fa:	f7fd fac7 	bl	8000c8c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <UART_WaitOnFlagUntilTimeout+0x30>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d11d      	bne.n	800374c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800371e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e045      	b.n	80037d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d02e      	beq.n	80037b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003768:	d126      	bne.n	80037b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003772:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003782:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e00f      	b.n	80037d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69da      	ldr	r2, [r3, #28]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4013      	ands	r3, r2
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d08d      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e027      	b.n	8003846 <HAL_UARTEx_DisableFifoMode+0x66>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2224      	movs	r2, #36	; 0x24
 8003802:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003824:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003866:	2302      	movs	r3, #2
 8003868:	e02d      	b.n	80038c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2224      	movs	r2, #36	; 0x24
 8003876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f850 	bl	800394c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e02d      	b.n	8003942 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2224      	movs	r2, #36	; 0x24
 80038f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f812 	bl	800394c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800394c:	b480      	push	{r7}
 800394e:	b089      	sub	sp, #36	; 0x24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003954:	4a2f      	ldr	r2, [pc, #188]	; (8003a14 <UARTEx_SetNbDataToProcess+0xc8>)
 8003956:	f107 0314 	add.w	r3, r7, #20
 800395a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800395e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003962:	4a2d      	ldr	r2, [pc, #180]	; (8003a18 <UARTEx_SetNbDataToProcess+0xcc>)
 8003964:	f107 030c 	add.w	r3, r7, #12
 8003968:	e892 0003 	ldmia.w	r2, {r0, r1}
 800396c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003974:	2b00      	cmp	r3, #0
 8003976:	d108      	bne.n	800398a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003988:	e03d      	b.n	8003a06 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800398a:	2308      	movs	r3, #8
 800398c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800398e:	2308      	movs	r3, #8
 8003990:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	0e5b      	lsrs	r3, r3, #25
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	0f5b      	lsrs	r3, r3, #29
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039b2:	7fbb      	ldrb	r3, [r7, #30]
 80039b4:	7f3a      	ldrb	r2, [r7, #28]
 80039b6:	f107 0120 	add.w	r1, r7, #32
 80039ba:	440a      	add	r2, r1
 80039bc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80039c4:	7f3a      	ldrb	r2, [r7, #28]
 80039c6:	f107 0120 	add.w	r1, r7, #32
 80039ca:	440a      	add	r2, r1
 80039cc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039dc:	7ffb      	ldrb	r3, [r7, #31]
 80039de:	7f7a      	ldrb	r2, [r7, #29]
 80039e0:	f107 0120 	add.w	r1, r7, #32
 80039e4:	440a      	add	r2, r1
 80039e6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80039ee:	7f7a      	ldrb	r2, [r7, #29]
 80039f0:	f107 0120 	add.w	r1, r7, #32
 80039f4:	440a      	add	r2, r1
 80039f6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003a06:	bf00      	nop
 8003a08:	3724      	adds	r7, #36	; 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	08003a8c 	.word	0x08003a8c
 8003a18:	08003a94 	.word	0x08003a94

08003a1c <__libc_init_array>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	4e0d      	ldr	r6, [pc, #52]	; (8003a54 <__libc_init_array+0x38>)
 8003a20:	4c0d      	ldr	r4, [pc, #52]	; (8003a58 <__libc_init_array+0x3c>)
 8003a22:	1ba4      	subs	r4, r4, r6
 8003a24:	10a4      	asrs	r4, r4, #2
 8003a26:	2500      	movs	r5, #0
 8003a28:	42a5      	cmp	r5, r4
 8003a2a:	d109      	bne.n	8003a40 <__libc_init_array+0x24>
 8003a2c:	4e0b      	ldr	r6, [pc, #44]	; (8003a5c <__libc_init_array+0x40>)
 8003a2e:	4c0c      	ldr	r4, [pc, #48]	; (8003a60 <__libc_init_array+0x44>)
 8003a30:	f000 f820 	bl	8003a74 <_init>
 8003a34:	1ba4      	subs	r4, r4, r6
 8003a36:	10a4      	asrs	r4, r4, #2
 8003a38:	2500      	movs	r5, #0
 8003a3a:	42a5      	cmp	r5, r4
 8003a3c:	d105      	bne.n	8003a4a <__libc_init_array+0x2e>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a44:	4798      	blx	r3
 8003a46:	3501      	adds	r5, #1
 8003a48:	e7ee      	b.n	8003a28 <__libc_init_array+0xc>
 8003a4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a4e:	4798      	blx	r3
 8003a50:	3501      	adds	r5, #1
 8003a52:	e7f2      	b.n	8003a3a <__libc_init_array+0x1e>
 8003a54:	08003ad4 	.word	0x08003ad4
 8003a58:	08003ad4 	.word	0x08003ad4
 8003a5c:	08003ad4 	.word	0x08003ad4
 8003a60:	08003ad8 	.word	0x08003ad8

08003a64 <memset>:
 8003a64:	4402      	add	r2, r0
 8003a66:	4603      	mov	r3, r0
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <memset+0xa>
 8003a6c:	4770      	bx	lr
 8003a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a72:	e7f9      	b.n	8003a68 <memset+0x4>

08003a74 <_init>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	bf00      	nop
 8003a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7a:	bc08      	pop	{r3}
 8003a7c:	469e      	mov	lr, r3
 8003a7e:	4770      	bx	lr

08003a80 <_fini>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	bf00      	nop
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr
