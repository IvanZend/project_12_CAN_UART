
project_12_FLASH_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004628  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004874  08004874  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800487c  0800487c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000000c  08004890  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004890  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002277  00000000  00000000  0003307f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001060  00000000  00000000  000352f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f58  00000000  00000000  00036358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e3df  00000000  00000000  000372b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ced7  00000000  00000000  0005568f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6402  00000000  00000000  00062566  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128968  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000455c  00000000  00000000  001289e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080047e8 	.word	0x080047e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080047e8 	.word	0x080047e8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_UART_buffers();
 800051c:	f000 fada 	bl	8000ad4 <init_UART_buffers>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fdf3 	bl	800110a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f81c 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f96a 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f91a 	bl	8000764 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000530:	f000 f8ca 	bl	80006c8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000534:	f000 f87a 	bl	800062c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x38>)
 800053a:	f002 f997 	bl	800286c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x3c>)
 8000540:	f002 f994 	bl	800286c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_MESSAGE_SIZE);
 8000544:	2208      	movs	r2, #8
 8000546:	4904      	ldr	r1, [pc, #16]	; (8000558 <main+0x40>)
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <main+0x44>)
 800054a:	f002 ff57 	bl	80033fc <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800054e:	e7fe      	b.n	800054e <main+0x36>
 8000550:	200001b4 	.word	0x200001b4
 8000554:	20000158 	.word	0x20000158
 8000558:	20000028 	.word	0x20000028
 800055c:	20000200 	.word	0x20000200

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b0a4      	sub	sp, #144	; 0x90
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800056a:	2238      	movs	r2, #56	; 0x38
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 f932 	bl	80047d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2244      	movs	r2, #68	; 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 f924 	bl	80047d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000594:	f001 f93a 	bl	800180c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a2:	2340      	movs	r3, #64	; 0x40
 80005a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005aa:	2302      	movs	r3, #2
 80005ac:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005ae:	2306      	movs	r3, #6
 80005b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 48;
 80005b2:	2330      	movs	r3, #48	; 0x30
 80005b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 f9d0 	bl	8001974 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005da:	f000 f95d 	bl	8000898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005f6:	2101      	movs	r1, #1
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fcd3 	bl	8001fa4 <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000604:	f000 f948 	bl	8000898 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000608:	2302      	movs	r3, #2
 800060a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fee2 	bl	80023dc <HAL_RCCEx_PeriphCLKConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061e:	f000 f93b 	bl	8000898 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3790      	adds	r7, #144	; 0x90
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <MX_TIM2_Init+0x98>)
 800064c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000650:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_TIM2_Init+0x98>)
 8000654:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000658:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_TIM2_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_TIM2_Init+0x98>)
 8000662:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000666:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_TIM2_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_TIM2_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000674:	4813      	ldr	r0, [pc, #76]	; (80006c4 <MX_TIM2_Init+0x98>)
 8000676:	f002 f8a1 	bl	80027bc <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000680:	f000 f90a 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <MX_TIM2_Init+0x98>)
 8000692:	f002 fad5 	bl	8002c40 <HAL_TIM_ConfigClockSource>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800069c:	f000 f8fc 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006a0:	2320      	movs	r3, #32
 80006a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_TIM2_Init+0x98>)
 80006ae:	f002 fcf7 	bl	80030a0 <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80006b8:	f000 f8ee 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200001b4 	.word	0x200001b4

080006c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_TIM3_Init+0x94>)
 80006e8:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <MX_TIM3_Init+0x98>)
 80006ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_TIM3_Init+0x94>)
 80006ee:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80006f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_TIM3_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_TIM3_Init+0x94>)
 80006fc:	2263      	movs	r2, #99	; 0x63
 80006fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_TIM3_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_TIM3_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <MX_TIM3_Init+0x94>)
 800070e:	f002 f855 	bl	80027bc <HAL_TIM_Base_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000718:	f000 f8be 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_TIM3_Init+0x94>)
 800072a:	f002 fa89 	bl	8002c40 <HAL_TIM_ConfigClockSource>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000734:	f000 f8b0 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000738:	2320      	movs	r3, #32
 800073a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_TIM3_Init+0x94>)
 8000746:	f002 fcab 	bl	80030a0 <HAL_TIMEx_MasterConfigSynchronization>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000750:	f000 f8a2 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000158 	.word	0x20000158
 8000760:	40000400 	.word	0x40000400

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 800076a:	4a24      	ldr	r2, [pc, #144]	; (80007fc <MX_USART2_UART_Init+0x98>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076e:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 8000796:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800079a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 80007b0:	f002 fd3e 	bl	8003230 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80007ba:	f000 f86d 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007be:	2100      	movs	r1, #0
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 80007c2:	f003 ff00 	bl	80045c6 <HAL_UARTEx_SetTxFifoThreshold>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80007cc:	f000 f864 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 80007d4:	f003 ff35 	bl	8004642 <HAL_UARTEx_SetRxFifoThreshold>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80007de:	f000 f85b 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x94>)
 80007e4:	f003 feb6 	bl	8004554 <HAL_UARTEx_DisableFifoMode>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80007ee:	f000 f853 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000200 	.word	0x20000200
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_GPIO_Init+0x90>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a1d      	ldr	r2, [pc, #116]	; (8000890 <MX_GPIO_Init+0x90>)
 800081c:	f043 0320 	orr.w	r3, r3, #32
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_GPIO_Init+0x90>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0320 	and.w	r3, r3, #32
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_GPIO_Init+0x90>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a17      	ldr	r2, [pc, #92]	; (8000890 <MX_GPIO_Init+0x90>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_GPIO_Init+0x90>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_GPIO_Init+0x90>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a11      	ldr	r2, [pc, #68]	; (8000890 <MX_GPIO_Init+0x90>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_GPIO_Init+0x90>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0x94>)
 8000866:	f000 ffb9 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800086a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800086e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_GPIO_Init+0x94>)
 8000884:	f000 fe28 	bl	80014d8 <HAL_GPIO_Init>

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_MspInit+0x44>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x44>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008de:	f001 f839 	bl	8001954 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000900:	d114      	bne.n	800092c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <HAL_TIM_Base_MspInit+0x78>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	4a18      	ldr	r2, [pc, #96]	; (8000968 <HAL_TIM_Base_MspInit+0x78>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6593      	str	r3, [r2, #88]	; 0x58
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <HAL_TIM_Base_MspInit+0x78>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2102      	movs	r1, #2
 800091e:	201c      	movs	r0, #28
 8000920:	f000 fd3f 	bl	80013a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000924:	201c      	movs	r0, #28
 8000926:	f000 fd56 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800092a:	e018      	b.n	800095e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_TIM_Base_MspInit+0x7c>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d113      	bne.n	800095e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_TIM_Base_MspInit+0x78>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <HAL_TIM_Base_MspInit+0x78>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6593      	str	r3, [r2, #88]	; 0x58
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_TIM_Base_MspInit+0x78>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2103      	movs	r1, #3
 8000952:	201d      	movs	r0, #29
 8000954:	f000 fd25 	bl	80013a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000958:	201d      	movs	r0, #29
 800095a:	f000 fd3c 	bl	80013d6 <HAL_NVIC_EnableIRQ>
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000
 800096c:	40000400 	.word	0x40000400

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <HAL_UART_MspInit+0x8c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d130      	bne.n	80009f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <HAL_UART_MspInit+0x90>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	4a1a      	ldr	r2, [pc, #104]	; (8000a00 <HAL_UART_MspInit+0x90>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	6593      	str	r3, [r2, #88]	; 0x58
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_UART_MspInit+0x90>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_UART_MspInit+0x90>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <HAL_UART_MspInit+0x90>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_UART_MspInit+0x90>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c2:	230c      	movs	r3, #12
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d2:	2307      	movs	r3, #7
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f000 fd7a 	bl	80014d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2101      	movs	r1, #1
 80009e8:	2026      	movs	r0, #38	; 0x26
 80009ea:	f000 fcda 	bl	80013a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009ee:	2026      	movs	r0, #38	; 0x26
 80009f0:	f000 fcf1 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40021000 	.word	0x40021000

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 fbaa 	bl	80011b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a64:	4803      	ldr	r0, [pc, #12]	; (8000a74 <TIM2_IRQHandler+0x14>)
 8000a66:	f001 ff6b 	bl	8002940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  transmit_messages_IT_handler();
 8000a6a:	f000 fa8b 	bl	8000f84 <transmit_messages_IT_handler>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200001b4 	.word	0x200001b4

08000a78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <TIM3_IRQHandler+0x14>)
 8000a7e:	f001 ff5f 	bl	8002940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  parse_RX_message_from_queue();
 8000a82:	f000 f985 	bl	8000d90 <parse_RX_message_from_queue>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000158 	.word	0x20000158

08000a90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <USART2_IRQHandler+0x14>)
 8000a96:	f002 fd89 	bl	80035ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  UART_IT_handler();
 8000a9a:	f000 f8bf 	bl	8000c1c <UART_IT_handler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000200 	.word	0x20000200

08000aa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <SystemInit+0x28>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <SystemInit+0x28>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SystemInit+0x28>)
 8000abe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ac2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <init_UART_buffers>:
 * Парсинг осуществляется по некому событию, независимому от прерываний UART. Событие парсинга имеет низший приоритет, чтобы не мешать приёму/отправке по UART.
 */

// стартовая инициализация счётчиков и буферов UART
void init_UART_buffers(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
	UART_buffer_counter = 0;
 8000ada:	4b34      	ldr	r3, [pc, #208]	; (8000bac <init_UART_buffers+0xd8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
	uart_error_state = NO_ERROR;								// ошибка отсутствует
 8000ae0:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <init_UART_buffers+0xdc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
	message_start_flag = 1;
 8000ae6:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <init_UART_buffers+0xe0>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
	message_end_flag = 1;
 8000aec:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <init_UART_buffers+0xe4>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]

	RX_string_buffer_counter = 1;								// счётчик элемента строки-буфера
 8000af2:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <init_UART_buffers+0xe8>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]

	for (size_t i = 0; i != sizeof(RX_string_buffer); i++)		// буфер для хранения принимаемой строки инициализируем нулями
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e007      	b.n	8000b0e <init_UART_buffers+0x3a>
	{
		RX_string_buffer[i] = 0;
 8000afe:	4a30      	ldr	r2, [pc, #192]	; (8000bc0 <init_UART_buffers+0xec>)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	4413      	add	r3, r2
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i != sizeof(RX_string_buffer); i++)		// буфер для хранения принимаемой строки инициализируем нулями
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	2b20      	cmp	r3, #32
 8000b12:	d1f4      	bne.n	8000afe <init_UART_buffers+0x2a>
	}

	RX_string_buffer[RX_string_buffer_counter] = CHAR_CODE_UART_MESSAGE_END;  // записываем символ окончания строки в [1]-й элемент буфера (для старта без ошибок)
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <init_UART_buffers+0xe8>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <init_UART_buffers+0xec>)
 8000b1c:	210a      	movs	r1, #10
 8000b1e:	5499      	strb	r1, [r3, r2]

	RX_queue_buffer_write_counter = 0;					// обнуляем счётчитк элемента очереди на парсинг, в который ведётся запись
 8000b20:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <init_UART_buffers+0xf0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
	RX_queue_buffer_read_counter = 0;					// обнуляем счётчик элемента очереди на парсинг, из которого ведётся чтение
 8000b26:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <init_UART_buffers+0xf4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(RX_queue_buffer); i++)		// инициализируем нулями массив очереди на парсинг
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	e013      	b.n	8000b5a <init_UART_buffers+0x86>
	{
		for (int ii = 0; i < sizeof(RX_queue_buffer[i]); i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	e00a      	b.n	8000b4e <init_UART_buffers+0x7a>
		{
			RX_queue_buffer[i][ii] = 0;
 8000b38:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <init_UART_buffers+0xf8>)
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	015b      	lsls	r3, r3, #5
 8000b3e:	441a      	add	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
		for (int ii = 0; i < sizeof(RX_queue_buffer[i]); i++)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	2b1f      	cmp	r3, #31
 8000b52:	d9f1      	bls.n	8000b38 <init_UART_buffers+0x64>
	for (int i = 0; i < sizeof(RX_queue_buffer); i++)		// инициализируем нулями массив очереди на парсинг
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	3301      	adds	r3, #1
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b5e:	d9e8      	bls.n	8000b32 <init_UART_buffers+0x5e>
		}
	}

	TX_queue_buffer_write_counter = 0;					// обнуляем счётчик записи в очередь на отправку
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <init_UART_buffers+0xfc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
	TX_queue_buffer_read_counter = 0;					// обнуляем счётчик считывания из очереди на отправку
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <init_UART_buffers+0x100>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(TX_queue_buffer); i++)		// инициализируем нулями массив очереди на отправку
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	e013      	b.n	8000b9a <init_UART_buffers+0xc6>
	{
		for (int ii = 0; i < sizeof(TX_queue_buffer[i]); i++)	//
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	e00a      	b.n	8000b8e <init_UART_buffers+0xba>
		{
			TX_queue_buffer[i][ii] = 0;
 8000b78:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <init_UART_buffers+0x104>)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	015b      	lsls	r3, r3, #5
 8000b7e:	441a      	add	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4413      	add	r3, r2
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
		for (int ii = 0; i < sizeof(TX_queue_buffer[i]); i++)	//
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b1f      	cmp	r3, #31
 8000b92:	d9f1      	bls.n	8000b78 <init_UART_buffers+0xa4>
	for (int i = 0; i < sizeof(TX_queue_buffer); i++)		// инициализируем нулями массив очереди на отправку
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3301      	adds	r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b9e:	d9e8      	bls.n	8000b72 <init_UART_buffers+0x9e>
		}
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	371c      	adds	r7, #28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	2000028e 	.word	0x2000028e
 8000bb0:	2000028d 	.word	0x2000028d
 8000bb4:	20000054 	.word	0x20000054
 8000bb8:	200001b2 	.word	0x200001b2
 8000bbc:	200001a4 	.word	0x200001a4
 8000bc0:	20000034 	.word	0x20000034
 8000bc4:	20000030 	.word	0x20000030
 8000bc8:	2000028c 	.word	0x2000028c
 8000bcc:	20000058 	.word	0x20000058
 8000bd0:	200001b1 	.word	0x200001b1
 8000bd4:	200001b0 	.word	0x200001b0
 8000bd8:	200000d8 	.word	0x200000d8

08000bdc <UART_error_handler>:

// обработчик ошибок UART
void UART_error_handler(UARTErrorCode_EnumTypeDef error_type)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	switch (error_type)
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b05      	cmp	r3, #5
 8000bea:	d810      	bhi.n	8000c0e <UART_error_handler+0x32>
 8000bec:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <UART_error_handler+0x18>)
 8000bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf2:	bf00      	nop
 8000bf4:	08000c0d 	.word	0x08000c0d
 8000bf8:	08000c0d 	.word	0x08000c0d
 8000bfc:	08000c0d 	.word	0x08000c0d
 8000c00:	08000c0d 	.word	0x08000c0d
 8000c04:	08000c0d 	.word	0x08000c0d
 8000c08:	08000c0d 	.word	0x08000c0d
	{
	case NO_ERROR:
	{

		break;
 8000c0c:	bf00      	nop
		}
		break;
	}
	*/
	}
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <UART_IT_handler>:

// обработчик прерывания с UART (приём данных)
void UART_IT_handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	// !!! передать значение принятого байта, освободить принимающий буфер
	add_byte_to_string();
 8000c20:	f000 f81a 	bl	8000c58 <add_byte_to_string>
	UART_buffer_counter++;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <UART_IT_handler+0x30>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <UART_IT_handler+0x30>)
 8000c2e:	701a      	strb	r2, [r3, #0]
	if (UART_buffer_counter >= UART_MESSAGE_SIZE)
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <UART_IT_handler+0x30>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	d902      	bls.n	8000c3e <UART_IT_handler+0x22>
	{
		UART_buffer_counter = 0;
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <UART_IT_handler+0x30>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_MESSAGE_SIZE);
 8000c3e:	2208      	movs	r2, #8
 8000c40:	4903      	ldr	r1, [pc, #12]	; (8000c50 <UART_IT_handler+0x34>)
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <UART_IT_handler+0x38>)
 8000c44:	f002 fbda 	bl	80033fc <HAL_UART_Receive_IT>
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2000028e 	.word	0x2000028e
 8000c50:	20000028 	.word	0x20000028
 8000c54:	20000200 	.word	0x20000200

08000c58 <add_byte_to_string>:

// добавляем принятый байт в строку-буфер
void add_byte_to_string(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

	if (RX_string_buffer_counter >= UART_STRING_MAX_SIZE)								// если достигли максимальной длины строки
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <add_byte_to_string+0xb4>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b1f      	cmp	r3, #31
 8000c62:	d909      	bls.n	8000c78 <add_byte_to_string+0x20>
	{
		UART_error_handler(MAX_MESSAGE_LENGHT_EXCEEDED);								// ошибка: превышена максимальная длина строки
 8000c64:	2005      	movs	r0, #5
 8000c66:	f7ff ffb9 	bl	8000bdc <UART_error_handler>
		init_int_array_by_zero(sizeof(RX_string_buffer), RX_string_buffer);
 8000c6a:	4929      	ldr	r1, [pc, #164]	; (8000d10 <add_byte_to_string+0xb8>)
 8000c6c:	2020      	movs	r0, #32
 8000c6e:	f000 fa07 	bl	8001080 <init_int_array_by_zero>
		RX_string_buffer_counter = 0;
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <add_byte_to_string+0xb4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
	}

	if(UART_rx_buffer[UART_buffer_counter] == CHAR_CODE_UART_MESSAGE_START)				// если приняли стартовый символ
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <add_byte_to_string+0xbc>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <add_byte_to_string+0xc0>)
 8000c80:	5c9b      	ldrb	r3, [r3, r2]
 8000c82:	2b23      	cmp	r3, #35	; 0x23
 8000c84:	d112      	bne.n	8000cac <add_byte_to_string+0x54>
	{
		if (!message_end_flag)															// если ранее не было принято окончание сообщения
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <add_byte_to_string+0xc4>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	f083 0301 	eor.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <add_byte_to_string+0x42>
		{
			UART_error_handler(END_OF_MESSAGE_MISSED);									// ошибка: пропущен конец предыдущего сообщения
 8000c94:	2004      	movs	r0, #4
 8000c96:	f7ff ffa1 	bl	8000bdc <UART_error_handler>
		}
		RX_string_buffer_counter = 0;													// обнуляем счётчик элемента в строке-буфере
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <add_byte_to_string+0xb4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
		message_start_flag = 1;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <add_byte_to_string+0xc8>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
		message_end_flag = 0;
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <add_byte_to_string+0xc4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
	}

	RX_string_buffer[RX_string_buffer_counter] = UART_rx_buffer[UART_buffer_counter];	// записываем принятый байт в текущий элемент строки-буфера
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <add_byte_to_string+0xbc>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <add_byte_to_string+0xb4>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <add_byte_to_string+0xc0>)
 8000cba:	5c59      	ldrb	r1, [r3, r1]
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <add_byte_to_string+0xb8>)
 8000cbe:	5499      	strb	r1, [r3, r2]

	if (RX_string_buffer[RX_string_buffer_counter] == CHAR_CODE_UART_MESSAGE_END)		// если текущий элемент строки-буфера содержит символ конца сообщения
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <add_byte_to_string+0xb4>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <add_byte_to_string+0xb8>)
 8000cc8:	5c9b      	ldrb	r3, [r3, r2]
 8000cca:	2b0a      	cmp	r3, #10
 8000ccc:	d116      	bne.n	8000cfc <add_byte_to_string+0xa4>
	{
		if (message_start_flag)
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <add_byte_to_string+0xc8>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <add_byte_to_string+0x84>
		{
			add_message_to_RX_queue_buffer();												// отправляем сообщение в очередь на парсинг
 8000cd6:	f000 f825 	bl	8000d24 <add_message_to_RX_queue_buffer>
 8000cda:	e002      	b.n	8000ce2 <add_byte_to_string+0x8a>
		}
		else
		{
			UART_error_handler(START_OF_MESSAGE_MISSED);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f7ff ff7d 	bl	8000bdc <UART_error_handler>
		}
		init_int_array_by_zero(sizeof(RX_string_buffer), RX_string_buffer);
 8000ce2:	490b      	ldr	r1, [pc, #44]	; (8000d10 <add_byte_to_string+0xb8>)
 8000ce4:	2020      	movs	r0, #32
 8000ce6:	f000 f9cb 	bl	8001080 <init_int_array_by_zero>
		RX_string_buffer_counter = 0;													// обнуляем счётчик элемента строки-буфера
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <add_byte_to_string+0xb4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
		message_start_flag = 0;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <add_byte_to_string+0xc8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
		message_end_flag = 1;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <add_byte_to_string+0xc4>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
	}

	RX_string_buffer_counter++;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <add_byte_to_string+0xb4>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	4b01      	ldr	r3, [pc, #4]	; (8000d0c <add_byte_to_string+0xb4>)
 8000d06:	701a      	strb	r2, [r3, #0]

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200001a4 	.word	0x200001a4
 8000d10:	20000034 	.word	0x20000034
 8000d14:	2000028e 	.word	0x2000028e
 8000d18:	20000028 	.word	0x20000028
 8000d1c:	200001b2 	.word	0x200001b2
 8000d20:	20000054 	.word	0x20000054

08000d24 <add_message_to_RX_queue_buffer>:

// добавляем сообщение в очередь на парсинг
void add_message_to_RX_queue_buffer(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	for (int i = 0; i <= RX_string_buffer_counter; i++)						//
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	e010      	b.n	8000d52 <add_message_to_RX_queue_buffer+0x2e>
	{
		RX_queue_buffer[RX_queue_buffer_write_counter][i] = RX_string_buffer[i];
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <add_message_to_RX_queue_buffer+0x5c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <add_message_to_RX_queue_buffer+0x60>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	7819      	ldrb	r1, [r3, #0]
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <add_message_to_RX_queue_buffer+0x64>)
 8000d40:	0143      	lsls	r3, r0, #5
 8000d42:	441a      	add	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4413      	add	r3, r2
 8000d48:	460a      	mov	r2, r1
 8000d4a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= RX_string_buffer_counter; i++)						//
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <add_message_to_RX_queue_buffer+0x68>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	dde8      	ble.n	8000d30 <add_message_to_RX_queue_buffer+0xc>
	}

	RX_queue_buffer_write_counter++;										// инкрементируем счётчик элемента буфера-очереди
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <add_message_to_RX_queue_buffer+0x5c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	3301      	adds	r3, #1
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <add_message_to_RX_queue_buffer+0x5c>)
 8000d68:	701a      	strb	r2, [r3, #0]
	if (RX_queue_buffer_write_counter >= RX_QUEUE_BUFFER_SIZE)				// если превысили максимальное количество элементов в буфере-очереди
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <add_message_to_RX_queue_buffer+0x5c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d902      	bls.n	8000d78 <add_message_to_RX_queue_buffer+0x54>
	{
		UART_error_handler(RX_QUEUE_OVERFLOW);								// ошибка: очередь на парсинг переполнена
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff32 	bl	8000bdc <UART_error_handler>
	}
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000030 	.word	0x20000030
 8000d84:	20000034 	.word	0x20000034
 8000d88:	20000058 	.word	0x20000058
 8000d8c:	200001a4 	.word	0x200001a4

08000d90 <parse_RX_message_from_queue>:

// парсим сообщения из буфера-очереди
void parse_RX_message_from_queue(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
	if (RX_queue_buffer[0][0] == CHAR_CODE_UART_MESSAGE_START)				// если в буфере-очереди содержится хотя бы одно сообщение
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <parse_RX_message_from_queue+0x70>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b23      	cmp	r3, #35	; 0x23
 8000d9c:	d12b      	bne.n	8000df6 <parse_RX_message_from_queue+0x66>
	{
		for (int i = 0; i < RX_queue_buffer_write_counter; i++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	e022      	b.n	8000dea <parse_RX_message_from_queue+0x5a>
		{
			parse_UART_message(RX_queue_buffer_read_counter);				// отправляем на парсинг текущее сообщение
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <parse_RX_message_from_queue+0x74>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f82f 	bl	8000e0c <parse_UART_message>
			//!!! не обнулять весь массив, только один сигнальный байт
			init_int_array_by_zero(sizeof(RX_queue_buffer[RX_queue_buffer_read_counter]), \
					RX_queue_buffer[RX_queue_buffer_read_counter]);				// инициализируем нулями отпарсенное сообщение в очереди
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <parse_RX_message_from_queue+0x74>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	015b      	lsls	r3, r3, #5
 8000db4:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <parse_RX_message_from_queue+0x70>)
 8000db6:	4413      	add	r3, r2
			init_int_array_by_zero(sizeof(RX_queue_buffer[RX_queue_buffer_read_counter]), \
 8000db8:	4619      	mov	r1, r3
 8000dba:	2020      	movs	r0, #32
 8000dbc:	f000 f960 	bl	8001080 <init_int_array_by_zero>

			RX_queue_buffer_read_counter++;									// иначе инкрементируем счётчик считывания из буфера-очереди
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <parse_RX_message_from_queue+0x74>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <parse_RX_message_from_queue+0x74>)
 8000dca:	701a      	strb	r2, [r3, #0]

			if (RX_queue_buffer_read_counter >= RX_queue_buffer_write_counter)	// если мы отпарсили все сообщения в очереди
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <parse_RX_message_from_queue+0x74>)
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <parse_RX_message_from_queue+0x78>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d305      	bcc.n	8000de4 <parse_RX_message_from_queue+0x54>
			{
				RX_queue_buffer_write_counter = 0;								// обнуляем счётчик записи в буфер-очередь
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <parse_RX_message_from_queue+0x78>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
				RX_queue_buffer_read_counter = 0;								// обнуляем счётчик считывания из буфера-очереди
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <parse_RX_message_from_queue+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < RX_queue_buffer_write_counter; i++)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3301      	adds	r3, #1
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <parse_RX_message_from_queue+0x78>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4293      	cmp	r3, r2
 8000df4:	dbd6      	blt.n	8000da4 <parse_RX_message_from_queue+0x14>
			}
		}
	}
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000058 	.word	0x20000058
 8000e04:	2000028c 	.word	0x2000028c
 8000e08:	20000030 	.word	0x20000030

08000e0c <parse_UART_message>:

void parse_UART_message(uint8_t buffer_element_counter)
{
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b08e      	sub	sp, #56	; 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	// !!! попробовать STRCMP
	if (compare_int_and_char_arrays(RX_queue_buffer[buffer_element_counter], "V"))		// записывать значение строки сюда
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	015b      	lsls	r3, r3, #5
 8000e1a:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <parse_UART_message+0x84>)
 8000e1c:	4413      	add	r3, r2
 8000e1e:	491d      	ldr	r1, [pc, #116]	; (8000e94 <parse_UART_message+0x88>)
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f83f 	bl	8000ea4 <compare_int_and_char_arrays>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d010      	beq.n	8000e4e <parse_UART_message+0x42>
	{
		char tmp_arr_1[] = "USB-CAN-SI-M Emulator";													// создаём строку, которую отправим в ответ
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <parse_UART_message+0x8c>)
 8000e2e:	f107 0420 	add.w	r4, r7, #32
 8000e32:	461d      	mov	r5, r3
 8000e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e3c:	6020      	str	r0, [r4, #0]
 8000e3e:	3404      	adds	r4, #4
 8000e40:	8021      	strh	r1, [r4, #0]
		add_char_message_to_TX_queue_buffer(sizeof(tmp_arr_1), tmp_arr_1);							// отправляем строку в ответ
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	4619      	mov	r1, r3
 8000e48:	2016      	movs	r0, #22
 8000e4a:	f000 f853 	bl	8000ef4 <add_char_message_to_TX_queue_buffer>
	}

	if (compare_int_and_char_arrays(RX_queue_buffer[buffer_element_counter], "N"))
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	015b      	lsls	r3, r3, #5
 8000e52:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <parse_UART_message+0x84>)
 8000e54:	4413      	add	r3, r2
 8000e56:	4911      	ldr	r1, [pc, #68]	; (8000e9c <parse_UART_message+0x90>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f823 	bl	8000ea4 <compare_int_and_char_arrays>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d011      	beq.n	8000e88 <parse_UART_message+0x7c>
	{
		char tmp_arr_2[] = "Serial number: 0x0";													// создаём строку, которую отправим в ответ
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <parse_UART_message+0x94>)
 8000e66:	f107 040c 	add.w	r4, r7, #12
 8000e6a:	461d      	mov	r5, r3
 8000e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e70:	682b      	ldr	r3, [r5, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	8022      	strh	r2, [r4, #0]
 8000e76:	3402      	adds	r4, #2
 8000e78:	0c1b      	lsrs	r3, r3, #16
 8000e7a:	7023      	strb	r3, [r4, #0]
		add_char_message_to_TX_queue_buffer(sizeof(tmp_arr_2), tmp_arr_2);							// отправляем строку в ответ
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4619      	mov	r1, r3
 8000e82:	2013      	movs	r0, #19
 8000e84:	f000 f836 	bl	8000ef4 <add_char_message_to_TX_queue_buffer>
	}

}
 8000e88:	bf00      	nop
 8000e8a:	3738      	adds	r7, #56	; 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e90:	20000058 	.word	0x20000058
 8000e94:	08004800 	.word	0x08004800
 8000e98:	08004808 	.word	0x08004808
 8000e9c:	08004804 	.word	0x08004804
 8000ea0:	08004820 	.word	0x08004820

08000ea4 <compare_int_and_char_arrays>:

_Bool compare_int_and_char_arrays(uint8_t* int_array_pointer, char* char_array_pointer)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	_Bool arrays_match = 1;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
	int i = 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
	while (int_array_pointer[i] != CHAR_CODE_UART_MESSAGE_END)
 8000eb6:	e00f      	b.n	8000ed8 <compare_int_and_char_arrays+0x34>
	{
		if(int_array_pointer[i] != char_array_pointer[i-1])
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6839      	ldr	r1, [r7, #0]
 8000ec6:	440b      	add	r3, r1
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d001      	beq.n	8000ed2 <compare_int_and_char_arrays+0x2e>
		{
			arrays_match = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
		}
		i++;
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
	while (int_array_pointer[i] != CHAR_CODE_UART_MESSAGE_END)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b0a      	cmp	r3, #10
 8000ee2:	d1e9      	bne.n	8000eb8 <compare_int_and_char_arrays+0x14>
	}

	return arrays_match;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <add_char_message_to_TX_queue_buffer>:

// добавляем сообщение в очередь на отправку
void add_char_message_to_TX_queue_buffer(uint8_t message_to_transmit_size, char* message_to_transmit_pointer)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
	TX_queue_buffer[TX_queue_buffer_write_counter][0] = CHAR_CODE_UART_MESSAGE_START;			// добавляем стартовый символ в начало сообщения
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <add_char_message_to_TX_queue_buffer+0x88>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <add_char_message_to_TX_queue_buffer+0x8c>)
 8000f06:	015b      	lsls	r3, r3, #5
 8000f08:	4413      	add	r3, r2
 8000f0a:	2223      	movs	r2, #35	; 0x23
 8000f0c:	701a      	strb	r2, [r3, #0]
	int i = 1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
	for (i = 1; i <= message_to_transmit_size; i++)								// записываем содержимое отправляемого сообщения
 8000f12:	2301      	movs	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	e011      	b.n	8000f3c <add_char_message_to_TX_queue_buffer+0x48>
	{
		TX_queue_buffer[TX_queue_buffer_write_counter][i] = message_to_transmit_pointer[i - 1];		// посимвольно записываем пришедшее сообщение в очередь на отправку
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <add_char_message_to_TX_queue_buffer+0x88>)
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	4610      	mov	r0, r2
 8000f26:	7819      	ldrb	r1, [r3, #0]
 8000f28:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <add_char_message_to_TX_queue_buffer+0x8c>)
 8000f2a:	0143      	lsls	r3, r0, #5
 8000f2c:	441a      	add	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4413      	add	r3, r2
 8000f32:	460a      	mov	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
	for (i = 1; i <= message_to_transmit_size; i++)								// записываем содержимое отправляемого сообщения
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dde9      	ble.n	8000f18 <add_char_message_to_TX_queue_buffer+0x24>
	}
	TX_queue_buffer[TX_queue_buffer_write_counter][i - 1] = CHAR_CODE_UART_MESSAGE_END;			// добавляем конечный символ в конец сообщения
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <add_char_message_to_TX_queue_buffer+0x88>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	490c      	ldr	r1, [pc, #48]	; (8000f80 <add_char_message_to_TX_queue_buffer+0x8c>)
 8000f50:	0152      	lsls	r2, r2, #5
 8000f52:	440a      	add	r2, r1
 8000f54:	4413      	add	r3, r2
 8000f56:	220a      	movs	r2, #10
 8000f58:	701a      	strb	r2, [r3, #0]
	TX_queue_buffer_write_counter++;									// инкрементируем счётчик записи элемента в очереди на отправку
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <add_char_message_to_TX_queue_buffer+0x88>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <add_char_message_to_TX_queue_buffer+0x88>)
 8000f64:	701a      	strb	r2, [r3, #0]
	if (TX_queue_buffer_write_counter == TX_QUEUE_BUFFER_SIZE)			// если превышен максимальный размер в очереди на отправку
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <add_char_message_to_TX_queue_buffer+0x88>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d102      	bne.n	8000f74 <add_char_message_to_TX_queue_buffer+0x80>
	{
		UART_error_handler(TX_QUEUE_OVERFLOW);							// ошибка: очередь на отправку переполнена
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f7ff fe34 	bl	8000bdc <UART_error_handler>
	}
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200001b1 	.word	0x200001b1
 8000f80:	200000d8 	.word	0x200000d8

08000f84 <transmit_messages_IT_handler>:

// обработчик прерывания для отправки сообщения по UART
void transmit_messages_IT_handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
	if (TX_queue_buffer[0][0] == CHAR_CODE_UART_MESSAGE_START)			// если в очереди на отправку содержится хотя бы одно сообщение
 8000f8a:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <transmit_messages_IT_handler+0xf0>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b23      	cmp	r3, #35	; 0x23
 8000f90:	d16b      	bne.n	800106a <transmit_messages_IT_handler+0xe6>
	{
		for (int i = 0; i < TX_queue_buffer_write_counter; i++)			// до тех пор пока мы не достигнем количества записанных сообщений в очередь
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e05f      	b.n	8001058 <transmit_messages_IT_handler+0xd4>
		{
			int message_chars_counter = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
			while (TX_queue_buffer[i][message_chars_counter] != CHAR_CODE_UART_MESSAGE_END)
 8000f9c:	e002      	b.n	8000fa4 <transmit_messages_IT_handler+0x20>
			{
				message_chars_counter++;
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
			while (TX_queue_buffer[i][message_chars_counter] != CHAR_CODE_UART_MESSAGE_END)
 8000fa4:	4a33      	ldr	r2, [pc, #204]	; (8001074 <transmit_messages_IT_handler+0xf0>)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	015b      	lsls	r3, r3, #5
 8000faa:	441a      	add	r2, r3
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b0a      	cmp	r3, #10
 8000fb4:	d1f3      	bne.n	8000f9e <transmit_messages_IT_handler+0x1a>
			}
			message_chars_counter++;
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	61bb      	str	r3, [r7, #24]

			uint8_t message_parts_counter = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	75fb      	strb	r3, [r7, #23]
			if (message_chars_counter % UART_MESSAGE_SIZE)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d008      	beq.n	8000fdc <transmit_messages_IT_handler+0x58>
			{
				message_parts_counter = (message_chars_counter/UART_MESSAGE_SIZE) + 1;
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	da00      	bge.n	8000fd2 <transmit_messages_IT_handler+0x4e>
 8000fd0:	3307      	adds	r3, #7
 8000fd2:	10db      	asrs	r3, r3, #3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	75fb      	strb	r3, [r7, #23]
 8000fda:	e005      	b.n	8000fe8 <transmit_messages_IT_handler+0x64>
			}
			else
			{
				message_parts_counter = message_chars_counter/UART_MESSAGE_SIZE;
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	da00      	bge.n	8000fe4 <transmit_messages_IT_handler+0x60>
 8000fe2:	3307      	adds	r3, #7
 8000fe4:	10db      	asrs	r3, r3, #3
 8000fe6:	75fb      	strb	r3, [r7, #23]
			}

			for (int ii = 0; ii < message_parts_counter; ii++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	e025      	b.n	800103a <transmit_messages_IT_handler+0xb6>
			{
				uint8_t buffer_to_send[UART_MESSAGE_SIZE];
				init_int_array_by_zero(sizeof(buffer_to_send), buffer_to_send);
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	2008      	movs	r0, #8
 8000ff4:	f000 f844 	bl	8001080 <init_int_array_by_zero>

				for (int iii = 0; iii < UART_MESSAGE_SIZE; iii++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e011      	b.n	8001022 <transmit_messages_IT_handler+0x9e>
				{
					buffer_to_send[iii] = TX_queue_buffer[i][(ii*UART_MESSAGE_SIZE) + iii];
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	00da      	lsls	r2, r3, #3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	491b      	ldr	r1, [pc, #108]	; (8001074 <transmit_messages_IT_handler+0xf0>)
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	0152      	lsls	r2, r2, #5
 800100c:	440a      	add	r2, r1
 800100e:	4413      	add	r3, r2
 8001010:	7819      	ldrb	r1, [r3, #0]
 8001012:	1d3a      	adds	r2, r7, #4
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	460a      	mov	r2, r1
 800101a:	701a      	strb	r2, [r3, #0]
				for (int iii = 0; iii < UART_MESSAGE_SIZE; iii++)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b07      	cmp	r3, #7
 8001026:	ddea      	ble.n	8000ffe <transmit_messages_IT_handler+0x7a>
				}

				HAL_UART_Transmit(&huart2, buffer_to_send, UART_MESSAGE_SIZE, UART_TIMEOUT);
 8001028:	1d39      	adds	r1, r7, #4
 800102a:	2364      	movs	r3, #100	; 0x64
 800102c:	2208      	movs	r2, #8
 800102e:	4812      	ldr	r0, [pc, #72]	; (8001078 <transmit_messages_IT_handler+0xf4>)
 8001030:	f002 f94e 	bl	80032d0 <HAL_UART_Transmit>
			for (int ii = 0; ii < message_parts_counter; ii++)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	3301      	adds	r3, #1
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	429a      	cmp	r2, r3
 8001040:	dbd5      	blt.n	8000fee <transmit_messages_IT_handler+0x6a>
			}

			init_int_array_by_zero(sizeof(TX_queue_buffer[i]), TX_queue_buffer[i]);				// инициализируем нулями отправленную строку в очереди
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	015b      	lsls	r3, r3, #5
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <transmit_messages_IT_handler+0xf0>)
 8001048:	4413      	add	r3, r2
 800104a:	4619      	mov	r1, r3
 800104c:	2020      	movs	r0, #32
 800104e:	f000 f817 	bl	8001080 <init_int_array_by_zero>
		for (int i = 0; i < TX_queue_buffer_write_counter; i++)			// до тех пор пока мы не достигнем количества записанных сообщений в очередь
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <transmit_messages_IT_handler+0xf8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	4293      	cmp	r3, r2
 8001062:	db99      	blt.n	8000f98 <transmit_messages_IT_handler+0x14>
		}
		TX_queue_buffer_write_counter = 0;								// когда отправили все сообщения из очереди, обнуляем счётчик сообщений
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <transmit_messages_IT_handler+0xf8>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
	}
}
 800106a:	bf00      	nop
 800106c:	3720      	adds	r7, #32
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200000d8 	.word	0x200000d8
 8001078:	20000200 	.word	0x20000200
 800107c:	200001b1 	.word	0x200001b1

08001080 <init_int_array_by_zero>:
	}
}

// инициализируем нулями целочисленный массив
void init_int_array_by_zero(uint8_t array_size, uint8_t* array_pointer)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < array_size; i++)
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e007      	b.n	80010a2 <init_int_array_by_zero+0x22>
	{
		*(array_pointer + i) = 0;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	4413      	add	r3, r2
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < array_size; i++)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbf3      	blt.n	8001092 <init_int_array_by_zero+0x12>
	}
}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b8:	480d      	ldr	r0, [pc, #52]	; (80010f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010be:	490e      	ldr	r1, [pc, #56]	; (80010f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c0:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <LoopForever+0xe>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d4:	4c0b      	ldr	r4, [pc, #44]	; (8001104 <LoopForever+0x16>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e2:	f7ff fce1 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e6:	f003 fb53 	bl	8004790 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ea:	f7ff fa15 	bl	8000518 <main>

080010ee <LoopForever>:

LoopForever:
    b LoopForever
 80010ee:	e7fe      	b.n	80010ee <LoopForever>
  ldr   r0, =_estack
 80010f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010fc:	08004884 	.word	0x08004884
  ldr r2, =_sbss
 8001100:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001104:	20000294 	.word	0x20000294

08001108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_2_IRQHandler>

0800110a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 f939 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f80e 	bl	800113c <HAL_InitTick>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	e001      	b.n	8001130 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800112c:	f7ff fbbc 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001130:	79fb      	ldrb	r3, [r7, #7]

}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_InitTick+0x68>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d022      	beq.n	8001196 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_InitTick+0x6c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_InitTick+0x68>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800115c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001160:	fbb2 f3f3 	udiv	r3, r2, r3
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f944 	bl	80013f2 <HAL_SYSTICK_Config>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10f      	bne.n	8001190 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	d809      	bhi.n	800118a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001176:	2200      	movs	r2, #0
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	f000 f910 	bl	80013a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_InitTick+0x70>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	e007      	b.n	800119a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e004      	b.n	800119a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e001      	b.n	800119a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000004 	.word	0x20000004

080011b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_IncTick+0x1c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x20>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4413      	add	r3, r2
 80011be:	4a03      	ldr	r2, [pc, #12]	; (80011cc <HAL_IncTick+0x1c>)
 80011c0:	6013      	str	r3, [r2, #0]
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	20000290 	.word	0x20000290
 80011d0:	20000008 	.word	0x20000008

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000290 	.word	0x20000290

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <__NVIC_EnableIRQ+0x38>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f7ff ff8e 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff29 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff40 	bl	8001234 <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff90 	bl	80012e0 <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5f 	bl	800128c <__NVIC_SetPriority>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff33 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffa4 	bl	8001348 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d00d      	beq.n	800143e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2204      	movs	r2, #4
 8001426:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e047      	b.n	80014ce <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 020e 	bic.w	r2, r2, #14
 800144c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0201 	bic.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800146c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f003 021f 	and.w	r2, r3, #31
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f202 	lsl.w	r2, r1, r2
 8001480:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800148a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00c      	beq.n	80014ae <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	4798      	blx	r3
    }
  }
  return status;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014e6:	e15a      	b.n	800179e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 814c 	beq.w	8001798 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d00b      	beq.n	8001520 <HAL_GPIO_Init+0x48>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d007      	beq.n	8001520 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001514:	2b11      	cmp	r3, #17
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b12      	cmp	r3, #18
 800151e:	d130      	bne.n	8001582 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001556:	2201      	movs	r2, #1
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	f003 0201 	and.w	r2, r3, #1
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0xea>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b12      	cmp	r3, #18
 80015c0:	d123      	bne.n	800160a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	6939      	ldr	r1, [r7, #16]
 8001606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0203 	and.w	r2, r3, #3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80a6 	beq.w	8001798 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164c:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <HAL_GPIO_Init+0x2e4>)
 800164e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001650:	4a5a      	ldr	r2, [pc, #360]	; (80017bc <HAL_GPIO_Init+0x2e4>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6613      	str	r3, [r2, #96]	; 0x60
 8001658:	4b58      	ldr	r3, [pc, #352]	; (80017bc <HAL_GPIO_Init+0x2e4>)
 800165a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001664:	4a56      	ldr	r2, [pc, #344]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800168e:	d01f      	beq.n	80016d0 <HAL_GPIO_Init+0x1f8>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a4c      	ldr	r2, [pc, #304]	; (80017c4 <HAL_GPIO_Init+0x2ec>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d019      	beq.n	80016cc <HAL_GPIO_Init+0x1f4>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a4b      	ldr	r2, [pc, #300]	; (80017c8 <HAL_GPIO_Init+0x2f0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d013      	beq.n	80016c8 <HAL_GPIO_Init+0x1f0>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a4a      	ldr	r2, [pc, #296]	; (80017cc <HAL_GPIO_Init+0x2f4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00d      	beq.n	80016c4 <HAL_GPIO_Init+0x1ec>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a49      	ldr	r2, [pc, #292]	; (80017d0 <HAL_GPIO_Init+0x2f8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d007      	beq.n	80016c0 <HAL_GPIO_Init+0x1e8>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a48      	ldr	r2, [pc, #288]	; (80017d4 <HAL_GPIO_Init+0x2fc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d101      	bne.n	80016bc <HAL_GPIO_Init+0x1e4>
 80016b8:	2305      	movs	r3, #5
 80016ba:	e00a      	b.n	80016d2 <HAL_GPIO_Init+0x1fa>
 80016bc:	2306      	movs	r3, #6
 80016be:	e008      	b.n	80016d2 <HAL_GPIO_Init+0x1fa>
 80016c0:	2304      	movs	r3, #4
 80016c2:	e006      	b.n	80016d2 <HAL_GPIO_Init+0x1fa>
 80016c4:	2303      	movs	r3, #3
 80016c6:	e004      	b.n	80016d2 <HAL_GPIO_Init+0x1fa>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e002      	b.n	80016d2 <HAL_GPIO_Init+0x1fa>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_GPIO_Init+0x1fa>
 80016d0:	2300      	movs	r3, #0
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	f002 0203 	and.w	r2, r2, #3
 80016d8:	0092      	lsls	r2, r2, #2
 80016da:	4093      	lsls	r3, r2
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e2:	4937      	ldr	r1, [pc, #220]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3302      	adds	r3, #2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016f0:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <HAL_GPIO_Init+0x300>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001714:	4a30      	ldr	r2, [pc, #192]	; (80017d8 <HAL_GPIO_Init+0x300>)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800171a:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <HAL_GPIO_Init+0x300>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800173e:	4a26      	ldr	r2, [pc, #152]	; (80017d8 <HAL_GPIO_Init+0x300>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_GPIO_Init+0x300>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001768:	4a1b      	ldr	r2, [pc, #108]	; (80017d8 <HAL_GPIO_Init+0x300>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_GPIO_Init+0x300>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_GPIO_Init+0x300>)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fa22 f303 	lsr.w	r3, r2, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f47f ae9d 	bne.w	80014e8 <HAL_GPIO_Init+0x10>
  }
}
 80017ae:	bf00      	nop
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010000 	.word	0x40010000
 80017c4:	48000400 	.word	0x48000400
 80017c8:	48000800 	.word	0x48000800
 80017cc:	48000c00 	.word	0x48000c00
 80017d0:	48001000 	.word	0x48001000
 80017d4:	48001400 	.word	0x48001400
 80017d8:	40010400 	.word	0x40010400

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d141      	bne.n	800189e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800181a:	4b4b      	ldr	r3, [pc, #300]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001826:	d131      	bne.n	800188c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001828:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001838:	4b43      	ldr	r3, [pc, #268]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001840:	4a41      	ldr	r2, [pc, #260]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001846:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001848:	4b40      	ldr	r3, [pc, #256]	; (800194c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2232      	movs	r2, #50	; 0x32
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	4a3f      	ldr	r2, [pc, #252]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001854:	fba2 2303 	umull	r2, r3, r2, r3
 8001858:	0c9b      	lsrs	r3, r3, #18
 800185a:	3301      	adds	r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800185e:	e002      	b.n	8001866 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3b01      	subs	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001866:	4b38      	ldr	r3, [pc, #224]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001872:	d102      	bne.n	800187a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f2      	bne.n	8001860 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800187a:	4b33      	ldr	r3, [pc, #204]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	d158      	bne.n	800193a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e057      	b.n	800193c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a2d      	ldr	r2, [pc, #180]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800189c:	e04d      	b.n	800193a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a4:	d141      	bne.n	800192a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b2:	d131      	bne.n	8001918 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ba:	4a23      	ldr	r2, [pc, #140]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018cc:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2232      	movs	r2, #50	; 0x32
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	0c9b      	lsrs	r3, r3, #18
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ea:	e002      	b.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fe:	d102      	bne.n	8001906 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f2      	bne.n	80018ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001912:	d112      	bne.n	800193a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e011      	b.n	800193c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001928:	e007      	b.n	800193a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001938:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40007000 	.word	0x40007000
 800194c:	20000000 	.word	0x20000000
 8001950:	431bde83 	.word	0x431bde83

08001954 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800195e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001962:	6093      	str	r3, [r2, #8]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40007000 	.word	0x40007000

08001974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e308      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d075      	beq.n	8001a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001992:	4ba3      	ldr	r3, [pc, #652]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800199c:	4ba0      	ldr	r3, [pc, #640]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d102      	bne.n	80019b2 <HAL_RCC_OscConfig+0x3e>
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_OscConfig+0x44>
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d10b      	bne.n	80019d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	4b99      	ldr	r3, [pc, #612]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d05b      	beq.n	8001a7c <HAL_RCC_OscConfig+0x108>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d157      	bne.n	8001a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e2e3      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d106      	bne.n	80019e8 <HAL_RCC_OscConfig+0x74>
 80019da:	4b91      	ldr	r3, [pc, #580]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a90      	ldr	r2, [pc, #576]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e01d      	b.n	8001a24 <HAL_RCC_OscConfig+0xb0>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x98>
 80019f2:	4b8b      	ldr	r3, [pc, #556]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a8a      	ldr	r2, [pc, #552]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b88      	ldr	r3, [pc, #544]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a87      	ldr	r2, [pc, #540]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0xb0>
 8001a0c:	4b84      	ldr	r3, [pc, #528]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a83      	ldr	r2, [pc, #524]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b81      	ldr	r3, [pc, #516]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a80      	ldr	r2, [pc, #512]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fbd2 	bl	80011d4 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fbce 	bl	80011d4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e2a8      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a46:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0xc0>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fbbe 	bl	80011d4 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fbba 	bl	80011d4 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e294      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6e:	4b6c      	ldr	r3, [pc, #432]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0xe8>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d075      	beq.n	8001b76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8a:	4b65      	ldr	r3, [pc, #404]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a94:	4b62      	ldr	r3, [pc, #392]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b0c      	cmp	r3, #12
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_OscConfig+0x136>
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d002      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x13c>
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d11f      	bne.n	8001af0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab0:	4b5b      	ldr	r3, [pc, #364]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x154>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e267      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b55      	ldr	r3, [pc, #340]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	4952      	ldr	r1, [pc, #328]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001adc:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <HAL_RCC_OscConfig+0x2b0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fb2b 	bl	800113c <HAL_InitTick>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d043      	beq.n	8001b74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e253      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d023      	beq.n	8001b40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b49      	ldr	r3, [pc, #292]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a48      	ldr	r2, [pc, #288]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff fb66 	bl	80011d4 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fb62 	bl	80011d4 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e23c      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1e:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	4939      	ldr	r1, [pc, #228]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
 8001b3e:	e01a      	b.n	8001b76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b40:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a36      	ldr	r2, [pc, #216]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fb42 	bl	80011d4 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff fb3e 	bl	80011d4 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e218      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x1e0>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d03c      	beq.n	8001bfc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8a:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b90:	4a23      	ldr	r2, [pc, #140]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fb1b 	bl	80011d4 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fb17 	bl	80011d4 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1f1      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0ef      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x22e>
 8001bc2:	e01b      	b.n	8001bfc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fafe 	bl	80011d4 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fafa 	bl	80011d4 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1d4      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ef      	bne.n	8001bdc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80ab 	beq.w	8001d60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_RCC_OscConfig+0x2b4>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e005      	b.n	8001c2a <HAL_RCC_OscConfig+0x2b6>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	20000004 	.word	0x20000004
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00d      	beq.n	8001c4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4baf      	ldr	r3, [pc, #700]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	4aae      	ldr	r2, [pc, #696]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3a:	4bac      	ldr	r3, [pc, #688]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	4ba9      	ldr	r3, [pc, #676]	; (8001ef0 <HAL_RCC_OscConfig+0x57c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d118      	bne.n	8001c88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c56:	4ba6      	ldr	r3, [pc, #664]	; (8001ef0 <HAL_RCC_OscConfig+0x57c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4aa5      	ldr	r2, [pc, #660]	; (8001ef0 <HAL_RCC_OscConfig+0x57c>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fab7 	bl	80011d4 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6a:	f7ff fab3 	bl	80011d4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e18d      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7c:	4b9c      	ldr	r3, [pc, #624]	; (8001ef0 <HAL_RCC_OscConfig+0x57c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d108      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x32e>
 8001c90:	4b96      	ldr	r3, [pc, #600]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c96:	4a95      	ldr	r2, [pc, #596]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca0:	e024      	b.n	8001cec <HAL_RCC_OscConfig+0x378>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d110      	bne.n	8001ccc <HAL_RCC_OscConfig+0x358>
 8001caa:	4b90      	ldr	r3, [pc, #576]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb0:	4a8e      	ldr	r2, [pc, #568]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cba:	4b8c      	ldr	r3, [pc, #560]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	4a8a      	ldr	r2, [pc, #552]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cca:	e00f      	b.n	8001cec <HAL_RCC_OscConfig+0x378>
 8001ccc:	4b87      	ldr	r3, [pc, #540]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	4a86      	ldr	r2, [pc, #536]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cdc:	4b83      	ldr	r3, [pc, #524]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce2:	4a82      	ldr	r2, [pc, #520]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d016      	beq.n	8001d22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fa6e 	bl	80011d4 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7ff fa6a 	bl	80011d4 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e142      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d12:	4b76      	ldr	r3, [pc, #472]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ed      	beq.n	8001cfc <HAL_RCC_OscConfig+0x388>
 8001d20:	e015      	b.n	8001d4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d22:	f7ff fa57 	bl	80011d4 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7ff fa53 	bl	80011d4 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e12b      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d40:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1ed      	bne.n	8001d2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d4e:	7ffb      	ldrb	r3, [r7, #31]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d54:	4b65      	ldr	r3, [pc, #404]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	4a64      	ldr	r2, [pc, #400]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d03c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01c      	beq.n	8001dae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d74:	4b5d      	ldr	r3, [pc, #372]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7a:	4a5c      	ldr	r2, [pc, #368]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff fa26 	bl	80011d4 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d8c:	f7ff fa22 	bl	80011d4 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0fc      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d9e:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0ef      	beq.n	8001d8c <HAL_RCC_OscConfig+0x418>
 8001dac:	e01b      	b.n	8001de6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dae:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db4:	4a4d      	ldr	r2, [pc, #308]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fa09 	bl	80011d4 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dc6:	f7ff fa05 	bl	80011d4 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0df      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dd8:	4b44      	ldr	r3, [pc, #272]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1ef      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80d3 	beq.w	8001f96 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001df0:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	f000 808d 	beq.w	8001f18 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d15a      	bne.n	8001ebc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	4b39      	ldr	r3, [pc, #228]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a38      	ldr	r2, [pc, #224]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff f9df 	bl	80011d4 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7ff f9db 	bl	80011d4 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0b5      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e38:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_OscConfig+0x580>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6a11      	ldr	r1, [r2, #32]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e48:	3a01      	subs	r2, #1
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	4311      	orrs	r1, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e52:	0212      	lsls	r2, r2, #8
 8001e54:	4311      	orrs	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e5a:	0852      	lsrs	r2, r2, #1
 8001e5c:	3a01      	subs	r2, #1
 8001e5e:	0552      	lsls	r2, r2, #21
 8001e60:	4311      	orrs	r1, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e66:	0852      	lsrs	r2, r2, #1
 8001e68:	3a01      	subs	r2, #1
 8001e6a:	0652      	lsls	r2, r2, #25
 8001e6c:	4311      	orrs	r1, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e72:	06d2      	lsls	r2, r2, #27
 8001e74:	430a      	orrs	r2, r1
 8001e76:	491d      	ldr	r1, [pc, #116]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1a      	ldr	r2, [pc, #104]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff f99e 	bl	80011d4 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff f99a 	bl	80011d4 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e074      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x528>
 8001eba:	e06c      	b.n	8001f96 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001ece:	f023 0303 	bic.w	r3, r3, #3
 8001ed2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_RCC_OscConfig+0x578>)
 8001eda:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f976 	bl	80011d4 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eea:	e00e      	b.n	8001f0a <HAL_RCC_OscConfig+0x596>
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff f96c 	bl	80011d4 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e046      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0a:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_RCC_OscConfig+0x62c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x584>
 8001f16:	e03e      	b.n	8001f96 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e039      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <HAL_RCC_OscConfig+0x62c>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d12c      	bne.n	8001f92 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	3b01      	subs	r3, #1
 8001f44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d123      	bne.n	8001f92 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d11b      	bne.n	8001f92 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d113      	bne.n	8001f92 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	3b01      	subs	r3, #1
 8001f78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d109      	bne.n	8001f92 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f88:	085b      	lsrs	r3, r3, #1
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e11e      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b91      	ldr	r3, [pc, #580]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d910      	bls.n	8001fec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b8e      	ldr	r3, [pc, #568]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 020f 	bic.w	r2, r3, #15
 8001fd2:	498c      	ldr	r1, [pc, #560]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b8a      	ldr	r3, [pc, #552]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e106      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d073      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d129      	bne.n	8002054 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002000:	4b81      	ldr	r3, [pc, #516]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0f4      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002010:	f000 f99e 	bl	8002350 <RCC_GetSysClockFreqFromPLLSource>
 8002014:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4a7c      	ldr	r2, [pc, #496]	; (800220c <HAL_RCC_ClockConfig+0x268>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d93f      	bls.n	800209e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800201e:	4b7a      	ldr	r3, [pc, #488]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002032:	2b00      	cmp	r3, #0
 8002034:	d033      	beq.n	800209e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800203a:	2b00      	cmp	r3, #0
 800203c:	d12f      	bne.n	800209e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800203e:	4b72      	ldr	r3, [pc, #456]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002046:	4a70      	ldr	r2, [pc, #448]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800204c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e024      	b.n	800209e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d107      	bne.n	800206c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0c6      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0be      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800207c:	f000 f8ce 	bl	800221c <HAL_RCC_GetSysClockFreq>
 8002080:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4a61      	ldr	r2, [pc, #388]	; (800220c <HAL_RCC_ClockConfig+0x268>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d909      	bls.n	800209e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800208a:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002092:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002098:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800209e:	4b5a      	ldr	r3, [pc, #360]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4957      	ldr	r1, [pc, #348]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b0:	f7ff f890 	bl	80011d4 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7ff f88c 	bl	80011d4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e095      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 020c 	and.w	r2, r3, #12
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1eb      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d023      	beq.n	8002134 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a42      	ldr	r2, [pc, #264]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80020fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002102:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002110:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002118:	4a3b      	ldr	r2, [pc, #236]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800211a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800211e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b39      	ldr	r3, [pc, #228]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4936      	ldr	r1, [pc, #216]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
 8002132:	e008      	b.n	8002146 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b80      	cmp	r3, #128	; 0x80
 8002138:	d105      	bne.n	8002146 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800213a:	4b33      	ldr	r3, [pc, #204]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4a32      	ldr	r2, [pc, #200]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 8002140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002144:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d21d      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002154:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 020f 	bic.w	r2, r3, #15
 800215c:	4929      	ldr	r1, [pc, #164]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002164:	f7ff f836 	bl	80011d4 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7ff f832 	bl	80011d4 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e03b      	b.n	80021fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_RCC_ClockConfig+0x260>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d1ed      	bne.n	800216c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4917      	ldr	r1, [pc, #92]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490f      	ldr	r1, [pc, #60]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ce:	f000 f825 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021d2:	4601      	mov	r1, r0
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCC_ClockConfig+0x264>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <HAL_RCC_ClockConfig+0x26c>)
 80021e0:	5cd3      	ldrb	r3, [r2, r3]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	fa21 f303 	lsr.w	r3, r1, r3
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <HAL_RCC_ClockConfig+0x270>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_RCC_ClockConfig+0x274>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe ffa2 	bl	800113c <HAL_InitTick>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
 800220c:	04c4b400 	.word	0x04c4b400
 8002210:	08004844 	.word	0x08004844
 8002214:	20000000 	.word	0x20000000
 8002218:	20000004 	.word	0x20000004

0800221c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d102      	bne.n	8002234 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	e047      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b08      	cmp	r3, #8
 800223e:	d102      	bne.n	8002246 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002240:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	e03e      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d136      	bne.n	80022c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	3301      	adds	r3, #1
 8002268:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d10c      	bne.n	800228a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002270:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	4a16      	ldr	r2, [pc, #88]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800227a:	68d2      	ldr	r2, [r2, #12]
 800227c:	0a12      	lsrs	r2, r2, #8
 800227e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	617b      	str	r3, [r7, #20]
      break;
 8002288:	e00c      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800228a:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002294:	68d2      	ldr	r2, [r2, #12]
 8002296:	0a12      	lsrs	r2, r2, #8
 8002298:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800229c:	fb02 f303 	mul.w	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]
      break;
 80022a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0e5b      	lsrs	r3, r3, #25
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	3301      	adds	r3, #1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	e001      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022c4:	693b      	ldr	r3, [r7, #16]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	00f42400 	.word	0x00f42400
 80022dc:	007a1200 	.word	0x007a1200

080022e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000000 	.word	0x20000000

080022f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022fc:	f7ff fff0 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 8002300:	4601      	mov	r1, r0
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	08004854 	.word	0x08004854

08002324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002328:	f7ff ffda 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 800232c:	4601      	mov	r1, r0
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	0adb      	lsrs	r3, r3, #11
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_RCC_GetPCLK2Freq+0x28>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	08004854 	.word	0x08004854

08002350 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3301      	adds	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d10c      	bne.n	800238e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002374:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800237e:	68d2      	ldr	r2, [r2, #12]
 8002380:	0a12      	lsrs	r2, r2, #8
 8002382:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	617b      	str	r3, [r7, #20]
    break;
 800238c:	e00c      	b.n	80023a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002398:	68d2      	ldr	r2, [r2, #12]
 800239a:	0a12      	lsrs	r2, r2, #8
 800239c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	617b      	str	r3, [r7, #20]
    break;
 80023a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0e5b      	lsrs	r3, r3, #25
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	3301      	adds	r3, #1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80023c2:	687b      	ldr	r3, [r7, #4]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40021000 	.word	0x40021000
 80023d4:	007a1200 	.word	0x007a1200
 80023d8:	00f42400 	.word	0x00f42400

080023dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023e4:	2300      	movs	r3, #0
 80023e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023e8:	2300      	movs	r3, #0
 80023ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8098 	beq.w	800252a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fe:	4b43      	ldr	r3, [pc, #268]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10d      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b40      	ldr	r3, [pc, #256]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	4a3f      	ldr	r2, [pc, #252]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
 8002416:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002422:	2301      	movs	r3, #1
 8002424:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002426:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a39      	ldr	r2, [pc, #228]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002432:	f7fe fecf 	bl	80011d4 <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002438:	e009      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7fe fecb 	bl	80011d4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d902      	bls.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	74fb      	strb	r3, [r7, #19]
        break;
 800244c:	e005      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800244e:	4b30      	ldr	r3, [pc, #192]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0ef      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d159      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01e      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	d019      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002486:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002488:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	4a1f      	ldr	r2, [pc, #124]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002498:	4b1c      	ldr	r3, [pc, #112]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	4a1b      	ldr	r2, [pc, #108]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d016      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fe8b 	bl	80011d4 <HAL_GetTick>
 80024be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c0:	e00b      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe fe87 	bl	80011d4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d902      	bls.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	74fb      	strb	r3, [r7, #19]
            break;
 80024d8:	e006      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ec      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10b      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	4903      	ldr	r1, [pc, #12]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002504:	e008      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002506:	7cfb      	ldrb	r3, [r7, #19]
 8002508:	74bb      	strb	r3, [r7, #18]
 800250a:	e005      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800250c:	40021000 	.word	0x40021000
 8002510:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002518:	7c7b      	ldrb	r3, [r7, #17]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251e:	4ba6      	ldr	r3, [pc, #664]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	4aa5      	ldr	r2, [pc, #660]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002528:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002536:	4ba0      	ldr	r3, [pc, #640]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	f023 0203 	bic.w	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	499c      	ldr	r1, [pc, #624]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002558:	4b97      	ldr	r3, [pc, #604]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	f023 020c 	bic.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4994      	ldr	r1, [pc, #592]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800257a:	4b8f      	ldr	r3, [pc, #572]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	498b      	ldr	r1, [pc, #556]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800259c:	4b86      	ldr	r3, [pc, #536]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	4983      	ldr	r1, [pc, #524]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025be:	4b7e      	ldr	r3, [pc, #504]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	497a      	ldr	r1, [pc, #488]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025e0:	4b75      	ldr	r3, [pc, #468]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	4972      	ldr	r1, [pc, #456]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002602:	4b6d      	ldr	r3, [pc, #436]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002608:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	4969      	ldr	r1, [pc, #420]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002624:	4b64      	ldr	r3, [pc, #400]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4961      	ldr	r1, [pc, #388]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002646:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	4958      	ldr	r1, [pc, #352]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d015      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002668:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	4950      	ldr	r1, [pc, #320]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002686:	d105      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002688:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a4a      	ldr	r2, [pc, #296]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002692:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800269c:	2b00      	cmp	r3, #0
 800269e:	d015      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026a0:	4b45      	ldr	r3, [pc, #276]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	4942      	ldr	r1, [pc, #264]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026be:	d105      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c0:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a3c      	ldr	r2, [pc, #240]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d015      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026d8:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4934      	ldr	r1, [pc, #208]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f6:	d105      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f8:	4b2f      	ldr	r3, [pc, #188]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a2e      	ldr	r2, [pc, #184]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002702:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d015      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002710:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271e:	4926      	ldr	r1, [pc, #152]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272e:	d105      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002730:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800273a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	4918      	ldr	r1, [pc, #96]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002766:	d105      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002772:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002780:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800279e:	d105      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80027ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e049      	b.n	8002862 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe f884 	bl	80008f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	4619      	mov	r1, r3
 80027fa:	4610      	mov	r0, r2
 80027fc:	f000 fb24 	bl	8002e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d001      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e04a      	b.n	800291a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a21      	ldr	r2, [pc, #132]	; (8002928 <HAL_TIM_Base_Start_IT+0xbc>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d018      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x6c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ae:	d013      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x6c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1d      	ldr	r2, [pc, #116]	; (800292c <HAL_TIM_Base_Start_IT+0xc0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00e      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x6c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_TIM_Base_Start_IT+0xc4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d009      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x6c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1a      	ldr	r2, [pc, #104]	; (8002934 <HAL_TIM_Base_Start_IT+0xc8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x6c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a19      	ldr	r2, [pc, #100]	; (8002938 <HAL_TIM_Base_Start_IT+0xcc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d115      	bne.n	8002904 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_TIM_Base_Start_IT+0xd0>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d015      	beq.n	8002916 <HAL_TIM_Base_Start_IT+0xaa>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f0:	d011      	beq.n	8002916 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002902:	e008      	b.n	8002916 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e000      	b.n	8002918 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002916:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400
 8002930:	40000800 	.word	0x40000800
 8002934:	40013400 	.word	0x40013400
 8002938:	40014000 	.word	0x40014000
 800293c:	00010007 	.word	0x00010007

08002940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d122      	bne.n	800299c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d11b      	bne.n	800299c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0202 	mvn.w	r2, #2
 800296c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fa42 	bl	8002e0c <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa34 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fa45 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d122      	bne.n	80029f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d11b      	bne.n	80029f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0204 	mvn.w	r2, #4
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2202      	movs	r2, #2
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fa18 	bl	8002e0c <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fa0a 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fa1b 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d122      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d11b      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0208 	mvn.w	r2, #8
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9ee 	bl	8002e0c <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f9e0 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f9f1 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0210 	mvn.w	r2, #16
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f9c4 	bl	8002e0c <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f9b6 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f9c7 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0201 	mvn.w	r2, #1
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f990 	bl	8002de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d10e      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d107      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fb64 	bl	80031b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afe:	d10e      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b80      	cmp	r3, #128	; 0x80
 8002b0c:	d107      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fb57 	bl	80031cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d10e      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f975 	bl	8002e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d10e      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d107      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f06f 0220 	mvn.w	r2, #32
 8002b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fb17 	bl	80031a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b84:	d10f      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b94:	d107      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fb1d 	bl	80031e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bc4:	d107      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fb0f 	bl	80031f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be4:	d10f      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf4:	d107      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fb01 	bl	8003208 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c14:	d10f      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c24:	d107      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 faf3 	bl	800321c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_TIM_ConfigClockSource+0x18>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e0b9      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x18c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002c76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b70      	cmp	r3, #112	; 0x70
 8002c92:	d02e      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0xb2>
 8002c94:	2b70      	cmp	r3, #112	; 0x70
 8002c96:	d812      	bhi.n	8002cbe <HAL_TIM_ConfigClockSource+0x7e>
 8002c98:	2b30      	cmp	r3, #48	; 0x30
 8002c9a:	f000 8084 	beq.w	8002da6 <HAL_TIM_ConfigClockSource+0x166>
 8002c9e:	2b30      	cmp	r3, #48	; 0x30
 8002ca0:	d806      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x70>
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	d07f      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x166>
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d07d      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x166>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d07b      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002cae:	e084      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8002cb0:	2b50      	cmp	r3, #80	; 0x50
 8002cb2:	d048      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x106>
 8002cb4:	2b60      	cmp	r3, #96	; 0x60
 8002cb6:	d056      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0x126>
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d064      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8002cbc:	e07d      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8002cbe:	4a45      	ldr	r2, [pc, #276]	; (8002dd4 <HAL_TIM_ConfigClockSource+0x194>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d070      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x166>
 8002cc4:	4a43      	ldr	r2, [pc, #268]	; (8002dd4 <HAL_TIM_ConfigClockSource+0x194>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d809      	bhi.n	8002cde <HAL_TIM_ConfigClockSource+0x9e>
 8002cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cce:	d027      	beq.n	8002d20 <HAL_TIM_ConfigClockSource+0xe0>
 8002cd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002cd4:	d067      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x166>
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	d06d      	beq.n	8002db8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002cdc:	e06d      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8002cde:	4a3e      	ldr	r2, [pc, #248]	; (8002dd8 <HAL_TIM_ConfigClockSource+0x198>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d060      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x166>
 8002ce4:	4a3d      	ldr	r2, [pc, #244]	; (8002ddc <HAL_TIM_ConfigClockSource+0x19c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d05d      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x166>
 8002cea:	4a3d      	ldr	r2, [pc, #244]	; (8002de0 <HAL_TIM_ConfigClockSource+0x1a0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d05a      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8002cf0:	e063      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6899      	ldr	r1, [r3, #8]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f000 f9ad 	bl	8003060 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	609a      	str	r2, [r3, #8]
      break;
 8002d1e:	e04c      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6899      	ldr	r1, [r3, #8]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f000 f996 	bl	8003060 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d42:	609a      	str	r2, [r3, #8]
      break;
 8002d44:	e039      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6859      	ldr	r1, [r3, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f000 f908 	bl	8002f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2150      	movs	r1, #80	; 0x50
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f961 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002d64:	e029      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6859      	ldr	r1, [r3, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f000 f927 	bl	8002fc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2160      	movs	r1, #96	; 0x60
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f951 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002d84:	e019      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f000 f8e8 	bl	8002f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2140      	movs	r1, #64	; 0x40
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f941 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002da4:	e009      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4619      	mov	r1, r3
 8002db0:	4610      	mov	r0, r2
 8002db2:	f000 f938 	bl	8003026 <TIM_ITRx_SetConfig>
        break;
 8002db6:	e000      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8002db8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	00100020 	.word	0x00100020
 8002dd8:	00100040 	.word	0x00100040
 8002ddc:	00100070 	.word	0x00100070
 8002de0:	00100030 	.word	0x00100030

08002de4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a3c      	ldr	r2, [pc, #240]	; (8002f4c <TIM_Base_SetConfig+0x104>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00f      	beq.n	8002e80 <TIM_Base_SetConfig+0x38>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e66:	d00b      	beq.n	8002e80 <TIM_Base_SetConfig+0x38>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a39      	ldr	r2, [pc, #228]	; (8002f50 <TIM_Base_SetConfig+0x108>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <TIM_Base_SetConfig+0x38>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a38      	ldr	r2, [pc, #224]	; (8002f54 <TIM_Base_SetConfig+0x10c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d003      	beq.n	8002e80 <TIM_Base_SetConfig+0x38>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a37      	ldr	r2, [pc, #220]	; (8002f58 <TIM_Base_SetConfig+0x110>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d108      	bne.n	8002e92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a2d      	ldr	r2, [pc, #180]	; (8002f4c <TIM_Base_SetConfig+0x104>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01b      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea0:	d017      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <TIM_Base_SetConfig+0x108>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <TIM_Base_SetConfig+0x10c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00f      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a28      	ldr	r2, [pc, #160]	; (8002f58 <TIM_Base_SetConfig+0x110>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00b      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a27      	ldr	r2, [pc, #156]	; (8002f5c <TIM_Base_SetConfig+0x114>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d007      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <TIM_Base_SetConfig+0x118>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d003      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <TIM_Base_SetConfig+0x11c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d108      	bne.n	8002ee4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <TIM_Base_SetConfig+0x104>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00f      	beq.n	8002f30 <TIM_Base_SetConfig+0xe8>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <TIM_Base_SetConfig+0x110>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <TIM_Base_SetConfig+0xe8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a10      	ldr	r2, [pc, #64]	; (8002f5c <TIM_Base_SetConfig+0x114>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d007      	beq.n	8002f30 <TIM_Base_SetConfig+0xe8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a0f      	ldr	r2, [pc, #60]	; (8002f60 <TIM_Base_SetConfig+0x118>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <TIM_Base_SetConfig+0xe8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <TIM_Base_SetConfig+0x11c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d103      	bne.n	8002f38 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	615a      	str	r2, [r3, #20]
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800
 8002f58:	40013400 	.word	0x40013400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800

08002f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f023 0201 	bic.w	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 030a 	bic.w	r3, r3, #10
 8002fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b087      	sub	sp, #28
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f023 0210 	bic.w	r2, r3, #16
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ff0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	031b      	lsls	r3, r3, #12
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003002:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	621a      	str	r2, [r3, #32]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	f043 0307 	orr.w	r3, r3, #7
 800304c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	609a      	str	r2, [r3, #8]
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800307a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	021a      	lsls	r2, r3, #8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	431a      	orrs	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4313      	orrs	r3, r2
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	609a      	str	r2, [r3, #8]
}
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e065      	b.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2c      	ldr	r2, [pc, #176]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2b      	ldr	r2, [pc, #172]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d108      	bne.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80030f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003108:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1b      	ldr	r2, [pc, #108]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d018      	beq.n	8003158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312e:	d013      	beq.n	8003158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a18      	ldr	r2, [pc, #96]	; (8003198 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00e      	beq.n	8003158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d009      	beq.n	8003158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a12      	ldr	r2, [pc, #72]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d004      	beq.n	8003158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a13      	ldr	r2, [pc, #76]	; (80031a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d10c      	bne.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800315e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	4313      	orrs	r3, r2
 8003168:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40012c00 	.word	0x40012c00
 8003194:	40013400 	.word	0x40013400
 8003198:	40000400 	.word	0x40000400
 800319c:	40000800 	.word	0x40000800
 80031a0:	40014000 	.word	0x40014000

080031a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e042      	b.n	80032c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	d106      	bne.n	800325a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7fd fb8b 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2224      	movs	r2, #36	; 0x24
 800325e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fb38 	bl	80038e8 <UART_SetConfig>
 8003278:	4603      	mov	r3, r0
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e022      	b.n	80032c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fdd4 	bl	8003e38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800329e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fe5b 	bl	8003f7c <UART_CheckIdleState>
 80032c6:	4603      	mov	r3, r0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	f040 8083 	bne.w	80033f2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_UART_Transmit+0x28>
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e07b      	b.n	80033f4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_UART_Transmit+0x3a>
 8003306:	2302      	movs	r3, #2
 8003308:	e074      	b.n	80033f4 <HAL_UART_Transmit+0x124>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2221      	movs	r2, #33	; 0x21
 800331e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003322:	f7fd ff57 	bl	80011d4 <HAL_GetTick>
 8003326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	88fa      	ldrh	r2, [r7, #6]
 800332c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	88fa      	ldrh	r2, [r7, #6]
 8003334:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003340:	d108      	bne.n	8003354 <HAL_UART_Transmit+0x84>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	e003      	b.n	800335c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003364:	e02c      	b.n	80033c0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2200      	movs	r2, #0
 800336e:	2180      	movs	r1, #128	; 0x80
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fe4b 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e039      	b.n	80033f4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003394:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	3302      	adds	r3, #2
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	e007      	b.n	80033ae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	3301      	adds	r3, #1
 80033ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1cc      	bne.n	8003366 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2200      	movs	r2, #0
 80033d4:	2140      	movs	r1, #64	; 0x40
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fe18 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e006      	b.n	80033f4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e000      	b.n	80033f4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80033f2:	2302      	movs	r3, #2
  }
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003410:	2b20      	cmp	r3, #32
 8003412:	f040 80bc 	bne.w	800358e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_UART_Receive_IT+0x26>
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e0b4      	b.n	8003590 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_UART_Receive_IT+0x38>
 8003430:	2302      	movs	r3, #2
 8003432:	e0ad      	b.n	8003590 <HAL_UART_Receive_IT+0x194>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	88fa      	ldrh	r2, [r7, #6]
 8003446:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	88fa      	ldrh	r2, [r7, #6]
 800344e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003460:	d10e      	bne.n	8003480 <HAL_UART_Receive_IT+0x84>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <HAL_UART_Receive_IT+0x7a>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003474:	e02d      	b.n	80034d2 <HAL_UART_Receive_IT+0xd6>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	22ff      	movs	r2, #255	; 0xff
 800347a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800347e:	e028      	b.n	80034d2 <HAL_UART_Receive_IT+0xd6>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10d      	bne.n	80034a4 <HAL_UART_Receive_IT+0xa8>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d104      	bne.n	800349a <HAL_UART_Receive_IT+0x9e>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	22ff      	movs	r2, #255	; 0xff
 8003494:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003498:	e01b      	b.n	80034d2 <HAL_UART_Receive_IT+0xd6>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	227f      	movs	r2, #127	; 0x7f
 800349e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80034a2:	e016      	b.n	80034d2 <HAL_UART_Receive_IT+0xd6>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ac:	d10d      	bne.n	80034ca <HAL_UART_Receive_IT+0xce>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d104      	bne.n	80034c0 <HAL_UART_Receive_IT+0xc4>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	227f      	movs	r2, #127	; 0x7f
 80034ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80034be:	e008      	b.n	80034d2 <HAL_UART_Receive_IT+0xd6>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	223f      	movs	r2, #63	; 0x3f
 80034c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80034c8:	e003      	b.n	80034d2 <HAL_UART_Receive_IT+0xd6>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2222      	movs	r2, #34	; 0x22
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034fa:	d12a      	bne.n	8003552 <HAL_UART_Receive_IT+0x156>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	429a      	cmp	r2, r3
 8003506:	d324      	bcc.n	8003552 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d107      	bne.n	8003522 <HAL_UART_Receive_IT+0x126>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d103      	bne.n	8003522 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a1f      	ldr	r2, [pc, #124]	; (800359c <HAL_UART_Receive_IT+0x1a0>)
 800351e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003520:	e002      	b.n	8003528 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a1e      	ldr	r2, [pc, #120]	; (80035a0 <HAL_UART_Receive_IT+0x1a4>)
 8003526:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800353e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	e01b      	b.n	800358a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355a:	d107      	bne.n	800356c <HAL_UART_Receive_IT+0x170>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d103      	bne.n	800356c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a0f      	ldr	r2, [pc, #60]	; (80035a4 <HAL_UART_Receive_IT+0x1a8>)
 8003568:	66da      	str	r2, [r3, #108]	; 0x6c
 800356a:	e002      	b.n	8003572 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a0e      	ldr	r2, [pc, #56]	; (80035a8 <HAL_UART_Receive_IT+0x1ac>)
 8003570:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003588:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e000      	b.n	8003590 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
  }
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	08004411 	.word	0x08004411
 80035a0:	08004309 	.word	0x08004309
 80035a4:	0800425d 	.word	0x0800425d
 80035a8:	080041b3 	.word	0x080041b3

080035ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d118      	bne.n	800360e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d013      	beq.n	800360e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8145 	beq.w	800388e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4798      	blx	r3
      }
      return;
 800360c:	e13f      	b.n	800388e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80e8 	beq.w	80037e6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4ba1      	ldr	r3, [pc, #644]	; (80038a0 <HAL_UART_IRQHandler+0x2f4>)
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d105      	bne.n	800362c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4ba0      	ldr	r3, [pc, #640]	; (80038a4 <HAL_UART_IRQHandler+0x2f8>)
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80dd 	beq.w	80037e6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d010      	beq.n	8003658 <HAL_UART_IRQHandler+0xac>
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2201      	movs	r2, #1
 8003646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d010      	beq.n	8003684 <HAL_UART_IRQHandler+0xd8>
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2202      	movs	r2, #2
 8003672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	f043 0204 	orr.w	r2, r3, #4
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d010      	beq.n	80036b0 <HAL_UART_IRQHandler+0x104>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00b      	beq.n	80036b0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2204      	movs	r2, #4
 800369e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f043 0202 	orr.w	r2, r3, #2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d015      	beq.n	80036e6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4b76      	ldr	r3, [pc, #472]	; (80038a0 <HAL_UART_IRQHandler+0x2f4>)
 80036c8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2208      	movs	r2, #8
 80036d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f043 0208 	orr.w	r2, r3, #8
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d011      	beq.n	8003714 <HAL_UART_IRQHandler+0x168>
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00c      	beq.n	8003714 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80b9 	beq.w	8003892 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d011      	beq.n	800374e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d004      	beq.n	800376e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800376a:	2b00      	cmp	r3, #0
 800376c:	d031      	beq.n	80037d2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fccc 	bl	800410c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d123      	bne.n	80037ca <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003790:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003796:	2b00      	cmp	r3, #0
 8003798:	d013      	beq.n	80037c2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800379e:	4a42      	ldr	r2, [pc, #264]	; (80038a8 <HAL_UART_IRQHandler+0x2fc>)
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fd fe2f 	bl	800140a <HAL_DMA_Abort_IT>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d017      	beq.n	80037e2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80037bc:	4610      	mov	r0, r2
 80037be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	e00f      	b.n	80037e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f886 	bl	80038d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	e00b      	b.n	80037e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f882 	bl	80038d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	e007      	b.n	80037e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f87e 	bl	80038d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80037e0:	e057      	b.n	8003892 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e2:	bf00      	nop
    return;
 80037e4:	e055      	b.n	8003892 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00d      	beq.n	800380c <HAL_UART_IRQHandler+0x260>
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003802:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fe87 	bl	8004518 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800380a:	e045      	b.n	8003898 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003812:	2b00      	cmp	r3, #0
 8003814:	d012      	beq.n	800383c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	2b00      	cmp	r3, #0
 8003830:	d031      	beq.n	8003896 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
    }
    return;
 800383a:	e02c      	b.n	8003896 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_UART_IRQHandler+0x2ac>
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fc94 	bl	800417e <UART_EndTransmit_IT>
    return;
 8003856:	e01f      	b.n	8003898 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_UART_IRQHandler+0x2c8>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fe67 	bl	8004540 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003872:	e011      	b.n	8003898 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00c      	beq.n	8003898 <HAL_UART_IRQHandler+0x2ec>
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	da09      	bge.n	8003898 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fe51 	bl	800452c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800388a:	bf00      	nop
 800388c:	e004      	b.n	8003898 <HAL_UART_IRQHandler+0x2ec>
      return;
 800388e:	bf00      	nop
 8003890:	e002      	b.n	8003898 <HAL_UART_IRQHandler+0x2ec>
    return;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <HAL_UART_IRQHandler+0x2ec>
    return;
 8003896:	bf00      	nop
  }
}
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	10000001 	.word	0x10000001
 80038a4:	04000120 	.word	0x04000120
 80038a8:	08004153 	.word	0x08004153

080038ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80038ec:	b088      	sub	sp, #32
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	4313      	orrs	r3, r2
 800390c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	4313      	orrs	r3, r2
 8003916:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4bb0      	ldr	r3, [pc, #704]	; (8003be0 <UART_SetConfig+0x2f8>)
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	69f9      	ldr	r1, [r7, #28]
 8003928:	430b      	orrs	r3, r1
 800392a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4aa5      	ldr	r2, [pc, #660]	; (8003be4 <UART_SetConfig+0x2fc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	4313      	orrs	r3, r2
 800395a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003966:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	69f9      	ldr	r1, [r7, #28]
 8003970:	430b      	orrs	r3, r1
 8003972:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	f023 010f 	bic.w	r1, r3, #15
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a96      	ldr	r2, [pc, #600]	; (8003be8 <UART_SetConfig+0x300>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d121      	bne.n	80039d8 <UART_SetConfig+0xf0>
 8003994:	4b95      	ldr	r3, [pc, #596]	; (8003bec <UART_SetConfig+0x304>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d816      	bhi.n	80039d0 <UART_SetConfig+0xe8>
 80039a2:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <UART_SetConfig+0xc0>)
 80039a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a8:	080039b9 	.word	0x080039b9
 80039ac:	080039c5 	.word	0x080039c5
 80039b0:	080039bf 	.word	0x080039bf
 80039b4:	080039cb 	.word	0x080039cb
 80039b8:	2301      	movs	r3, #1
 80039ba:	76fb      	strb	r3, [r7, #27]
 80039bc:	e0be      	b.n	8003b3c <UART_SetConfig+0x254>
 80039be:	2302      	movs	r3, #2
 80039c0:	76fb      	strb	r3, [r7, #27]
 80039c2:	e0bb      	b.n	8003b3c <UART_SetConfig+0x254>
 80039c4:	2304      	movs	r3, #4
 80039c6:	76fb      	strb	r3, [r7, #27]
 80039c8:	e0b8      	b.n	8003b3c <UART_SetConfig+0x254>
 80039ca:	2308      	movs	r3, #8
 80039cc:	76fb      	strb	r3, [r7, #27]
 80039ce:	e0b5      	b.n	8003b3c <UART_SetConfig+0x254>
 80039d0:	2310      	movs	r3, #16
 80039d2:	76fb      	strb	r3, [r7, #27]
 80039d4:	bf00      	nop
 80039d6:	e0b1      	b.n	8003b3c <UART_SetConfig+0x254>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a84      	ldr	r2, [pc, #528]	; (8003bf0 <UART_SetConfig+0x308>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d134      	bne.n	8003a4c <UART_SetConfig+0x164>
 80039e2:	4b82      	ldr	r3, [pc, #520]	; (8003bec <UART_SetConfig+0x304>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f003 030c 	and.w	r3, r3, #12
 80039ec:	2b0c      	cmp	r3, #12
 80039ee:	d829      	bhi.n	8003a44 <UART_SetConfig+0x15c>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0x110>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a2d 	.word	0x08003a2d
 80039fc:	08003a45 	.word	0x08003a45
 8003a00:	08003a45 	.word	0x08003a45
 8003a04:	08003a45 	.word	0x08003a45
 8003a08:	08003a39 	.word	0x08003a39
 8003a0c:	08003a45 	.word	0x08003a45
 8003a10:	08003a45 	.word	0x08003a45
 8003a14:	08003a45 	.word	0x08003a45
 8003a18:	08003a33 	.word	0x08003a33
 8003a1c:	08003a45 	.word	0x08003a45
 8003a20:	08003a45 	.word	0x08003a45
 8003a24:	08003a45 	.word	0x08003a45
 8003a28:	08003a3f 	.word	0x08003a3f
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	76fb      	strb	r3, [r7, #27]
 8003a30:	e084      	b.n	8003b3c <UART_SetConfig+0x254>
 8003a32:	2302      	movs	r3, #2
 8003a34:	76fb      	strb	r3, [r7, #27]
 8003a36:	e081      	b.n	8003b3c <UART_SetConfig+0x254>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	76fb      	strb	r3, [r7, #27]
 8003a3c:	e07e      	b.n	8003b3c <UART_SetConfig+0x254>
 8003a3e:	2308      	movs	r3, #8
 8003a40:	76fb      	strb	r3, [r7, #27]
 8003a42:	e07b      	b.n	8003b3c <UART_SetConfig+0x254>
 8003a44:	2310      	movs	r3, #16
 8003a46:	76fb      	strb	r3, [r7, #27]
 8003a48:	bf00      	nop
 8003a4a:	e077      	b.n	8003b3c <UART_SetConfig+0x254>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a68      	ldr	r2, [pc, #416]	; (8003bf4 <UART_SetConfig+0x30c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d120      	bne.n	8003a98 <UART_SetConfig+0x1b0>
 8003a56:	4b65      	ldr	r3, [pc, #404]	; (8003bec <UART_SetConfig+0x304>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d00f      	beq.n	8003a84 <UART_SetConfig+0x19c>
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d802      	bhi.n	8003a6e <UART_SetConfig+0x186>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <UART_SetConfig+0x190>
 8003a6c:	e010      	b.n	8003a90 <UART_SetConfig+0x1a8>
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d005      	beq.n	8003a7e <UART_SetConfig+0x196>
 8003a72:	2b30      	cmp	r3, #48	; 0x30
 8003a74:	d009      	beq.n	8003a8a <UART_SetConfig+0x1a2>
 8003a76:	e00b      	b.n	8003a90 <UART_SetConfig+0x1a8>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	76fb      	strb	r3, [r7, #27]
 8003a7c:	e05e      	b.n	8003b3c <UART_SetConfig+0x254>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	76fb      	strb	r3, [r7, #27]
 8003a82:	e05b      	b.n	8003b3c <UART_SetConfig+0x254>
 8003a84:	2304      	movs	r3, #4
 8003a86:	76fb      	strb	r3, [r7, #27]
 8003a88:	e058      	b.n	8003b3c <UART_SetConfig+0x254>
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	76fb      	strb	r3, [r7, #27]
 8003a8e:	e055      	b.n	8003b3c <UART_SetConfig+0x254>
 8003a90:	2310      	movs	r3, #16
 8003a92:	76fb      	strb	r3, [r7, #27]
 8003a94:	bf00      	nop
 8003a96:	e051      	b.n	8003b3c <UART_SetConfig+0x254>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a56      	ldr	r2, [pc, #344]	; (8003bf8 <UART_SetConfig+0x310>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d120      	bne.n	8003ae4 <UART_SetConfig+0x1fc>
 8003aa2:	4b52      	ldr	r3, [pc, #328]	; (8003bec <UART_SetConfig+0x304>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d00f      	beq.n	8003ad0 <UART_SetConfig+0x1e8>
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d802      	bhi.n	8003aba <UART_SetConfig+0x1d2>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <UART_SetConfig+0x1dc>
 8003ab8:	e010      	b.n	8003adc <UART_SetConfig+0x1f4>
 8003aba:	2b80      	cmp	r3, #128	; 0x80
 8003abc:	d005      	beq.n	8003aca <UART_SetConfig+0x1e2>
 8003abe:	2bc0      	cmp	r3, #192	; 0xc0
 8003ac0:	d009      	beq.n	8003ad6 <UART_SetConfig+0x1ee>
 8003ac2:	e00b      	b.n	8003adc <UART_SetConfig+0x1f4>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	76fb      	strb	r3, [r7, #27]
 8003ac8:	e038      	b.n	8003b3c <UART_SetConfig+0x254>
 8003aca:	2302      	movs	r3, #2
 8003acc:	76fb      	strb	r3, [r7, #27]
 8003ace:	e035      	b.n	8003b3c <UART_SetConfig+0x254>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	76fb      	strb	r3, [r7, #27]
 8003ad4:	e032      	b.n	8003b3c <UART_SetConfig+0x254>
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	76fb      	strb	r3, [r7, #27]
 8003ada:	e02f      	b.n	8003b3c <UART_SetConfig+0x254>
 8003adc:	2310      	movs	r3, #16
 8003ade:	76fb      	strb	r3, [r7, #27]
 8003ae0:	bf00      	nop
 8003ae2:	e02b      	b.n	8003b3c <UART_SetConfig+0x254>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3e      	ldr	r2, [pc, #248]	; (8003be4 <UART_SetConfig+0x2fc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d124      	bne.n	8003b38 <UART_SetConfig+0x250>
 8003aee:	4b3f      	ldr	r3, [pc, #252]	; (8003bec <UART_SetConfig+0x304>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afc:	d012      	beq.n	8003b24 <UART_SetConfig+0x23c>
 8003afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b02:	d802      	bhi.n	8003b0a <UART_SetConfig+0x222>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <UART_SetConfig+0x230>
 8003b08:	e012      	b.n	8003b30 <UART_SetConfig+0x248>
 8003b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0e:	d006      	beq.n	8003b1e <UART_SetConfig+0x236>
 8003b10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b14:	d009      	beq.n	8003b2a <UART_SetConfig+0x242>
 8003b16:	e00b      	b.n	8003b30 <UART_SetConfig+0x248>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	76fb      	strb	r3, [r7, #27]
 8003b1c:	e00e      	b.n	8003b3c <UART_SetConfig+0x254>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	76fb      	strb	r3, [r7, #27]
 8003b22:	e00b      	b.n	8003b3c <UART_SetConfig+0x254>
 8003b24:	2304      	movs	r3, #4
 8003b26:	76fb      	strb	r3, [r7, #27]
 8003b28:	e008      	b.n	8003b3c <UART_SetConfig+0x254>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	76fb      	strb	r3, [r7, #27]
 8003b2e:	e005      	b.n	8003b3c <UART_SetConfig+0x254>
 8003b30:	2310      	movs	r3, #16
 8003b32:	76fb      	strb	r3, [r7, #27]
 8003b34:	bf00      	nop
 8003b36:	e001      	b.n	8003b3c <UART_SetConfig+0x254>
 8003b38:	2310      	movs	r3, #16
 8003b3a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <UART_SetConfig+0x2fc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	f040 80a1 	bne.w	8003c8a <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b48:	7efb      	ldrb	r3, [r7, #27]
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d823      	bhi.n	8003b96 <UART_SetConfig+0x2ae>
 8003b4e:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <UART_SetConfig+0x26c>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003b79 	.word	0x08003b79
 8003b58:	08003b97 	.word	0x08003b97
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b97 	.word	0x08003b97
 8003b64:	08003b87 	.word	0x08003b87
 8003b68:	08003b97 	.word	0x08003b97
 8003b6c:	08003b97 	.word	0x08003b97
 8003b70:	08003b97 	.word	0x08003b97
 8003b74:	08003b8f 	.word	0x08003b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b78:	f7fe fbbe 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8003b7c:	6178      	str	r0, [r7, #20]
        break;
 8003b7e:	e00f      	b.n	8003ba0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b80:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <UART_SetConfig+0x314>)
 8003b82:	617b      	str	r3, [r7, #20]
        break;
 8003b84:	e00c      	b.n	8003ba0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b86:	f7fe fb49 	bl	800221c <HAL_RCC_GetSysClockFreq>
 8003b8a:	6178      	str	r0, [r7, #20]
        break;
 8003b8c:	e008      	b.n	8003ba0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b92:	617b      	str	r3, [r7, #20]
        break;
 8003b94:	e004      	b.n	8003ba0 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	76bb      	strb	r3, [r7, #26]
        break;
 8003b9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8130 	beq.w	8003e08 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	4a14      	ldr	r2, [pc, #80]	; (8003c00 <UART_SetConfig+0x318>)
 8003bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d305      	bcc.n	8003bd8 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d915      	bls.n	8003c04 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	76bb      	strb	r3, [r7, #26]
 8003bdc:	e114      	b.n	8003e08 <UART_SetConfig+0x520>
 8003bde:	bf00      	nop
 8003be0:	cfff69f3 	.word	0xcfff69f3
 8003be4:	40008000 	.word	0x40008000
 8003be8:	40013800 	.word	0x40013800
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40004400 	.word	0x40004400
 8003bf4:	40004800 	.word	0x40004800
 8003bf8:	40004c00 	.word	0x40004c00
 8003bfc:	00f42400 	.word	0x00f42400
 8003c00:	0800485c 	.word	0x0800485c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f04f 0100 	mov.w	r1, #0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	4a87      	ldr	r2, [pc, #540]	; (8003e30 <UART_SetConfig+0x548>)
 8003c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f04f 0400 	mov.w	r4, #0
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	f7fc fafa 	bl	8000218 <__aeabi_uldivmod>
 8003c24:	4603      	mov	r3, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	f04f 0400 	mov.w	r4, #0
 8003c34:	0214      	lsls	r4, r2, #8
 8003c36:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003c3a:	020b      	lsls	r3, r1, #8
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6852      	ldr	r2, [r2, #4]
 8003c40:	0852      	lsrs	r2, r2, #1
 8003c42:	4611      	mov	r1, r2
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	eb13 0b01 	adds.w	fp, r3, r1
 8003c4c:	eb44 0c02 	adc.w	ip, r4, r2
 8003c50:	4658      	mov	r0, fp
 8003c52:	4661      	mov	r1, ip
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f04f 0400 	mov.w	r4, #0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4623      	mov	r3, r4
 8003c60:	f7fc fada 	bl	8000218 <__aeabi_uldivmod>
 8003c64:	4603      	mov	r3, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c70:	d308      	bcc.n	8003c84 <UART_SetConfig+0x39c>
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c78:	d204      	bcs.n	8003c84 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	60da      	str	r2, [r3, #12]
 8003c82:	e0c1      	b.n	8003e08 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	76bb      	strb	r3, [r7, #26]
 8003c88:	e0be      	b.n	8003e08 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c92:	d164      	bne.n	8003d5e <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8003c94:	7efb      	ldrb	r3, [r7, #27]
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d827      	bhi.n	8003cea <UART_SetConfig+0x402>
 8003c9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <UART_SetConfig+0x3b8>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cc5 	.word	0x08003cc5
 8003ca4:	08003ccd 	.word	0x08003ccd
 8003ca8:	08003cd5 	.word	0x08003cd5
 8003cac:	08003ceb 	.word	0x08003ceb
 8003cb0:	08003cdb 	.word	0x08003cdb
 8003cb4:	08003ceb 	.word	0x08003ceb
 8003cb8:	08003ceb 	.word	0x08003ceb
 8003cbc:	08003ceb 	.word	0x08003ceb
 8003cc0:	08003ce3 	.word	0x08003ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f7fe fb18 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8003cc8:	6178      	str	r0, [r7, #20]
        break;
 8003cca:	e013      	b.n	8003cf4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ccc:	f7fe fb2a 	bl	8002324 <HAL_RCC_GetPCLK2Freq>
 8003cd0:	6178      	str	r0, [r7, #20]
        break;
 8003cd2:	e00f      	b.n	8003cf4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd4:	4b57      	ldr	r3, [pc, #348]	; (8003e34 <UART_SetConfig+0x54c>)
 8003cd6:	617b      	str	r3, [r7, #20]
        break;
 8003cd8:	e00c      	b.n	8003cf4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cda:	f7fe fa9f 	bl	800221c <HAL_RCC_GetSysClockFreq>
 8003cde:	6178      	str	r0, [r7, #20]
        break;
 8003ce0:	e008      	b.n	8003cf4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce6:	617b      	str	r3, [r7, #20]
        break;
 8003ce8:	e004      	b.n	8003cf4 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	76bb      	strb	r3, [r7, #26]
        break;
 8003cf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8086 	beq.w	8003e08 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	4a4b      	ldr	r2, [pc, #300]	; (8003e30 <UART_SetConfig+0x548>)
 8003d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d06:	461a      	mov	r2, r3
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d0e:	005a      	lsls	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	441a      	add	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b0f      	cmp	r3, #15
 8003d28:	d916      	bls.n	8003d58 <UART_SetConfig+0x470>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d30:	d212      	bcs.n	8003d58 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f023 030f 	bic.w	r3, r3, #15
 8003d3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	89fb      	ldrh	r3, [r7, #14]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	89fa      	ldrh	r2, [r7, #14]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	e057      	b.n	8003e08 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	76bb      	strb	r3, [r7, #26]
 8003d5c:	e054      	b.n	8003e08 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d5e:	7efb      	ldrb	r3, [r7, #27]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d828      	bhi.n	8003db6 <UART_SetConfig+0x4ce>
 8003d64:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <UART_SetConfig+0x484>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08003d99 	.word	0x08003d99
 8003d74:	08003da1 	.word	0x08003da1
 8003d78:	08003db7 	.word	0x08003db7
 8003d7c:	08003da7 	.word	0x08003da7
 8003d80:	08003db7 	.word	0x08003db7
 8003d84:	08003db7 	.word	0x08003db7
 8003d88:	08003db7 	.word	0x08003db7
 8003d8c:	08003daf 	.word	0x08003daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7fe fab2 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8003d94:	6178      	str	r0, [r7, #20]
        break;
 8003d96:	e013      	b.n	8003dc0 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d98:	f7fe fac4 	bl	8002324 <HAL_RCC_GetPCLK2Freq>
 8003d9c:	6178      	str	r0, [r7, #20]
        break;
 8003d9e:	e00f      	b.n	8003dc0 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da0:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <UART_SetConfig+0x54c>)
 8003da2:	617b      	str	r3, [r7, #20]
        break;
 8003da4:	e00c      	b.n	8003dc0 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da6:	f7fe fa39 	bl	800221c <HAL_RCC_GetSysClockFreq>
 8003daa:	6178      	str	r0, [r7, #20]
        break;
 8003dac:	e008      	b.n	8003dc0 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db2:	617b      	str	r3, [r7, #20]
        break;
 8003db4:	e004      	b.n	8003dc0 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	76bb      	strb	r3, [r7, #26]
        break;
 8003dbe:	bf00      	nop
    }

    if (pclk != 0U)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d020      	beq.n	8003e08 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <UART_SetConfig+0x548>)
 8003dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	441a      	add	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b0f      	cmp	r3, #15
 8003df0:	d908      	bls.n	8003e04 <UART_SetConfig+0x51c>
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df8:	d204      	bcs.n	8003e04 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	60da      	str	r2, [r3, #12]
 8003e02:	e001      	b.n	8003e08 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003e24:	7ebb      	ldrb	r3, [r7, #26]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003e30:	0800485c 	.word	0x0800485c
 8003e34:	00f42400 	.word	0x00f42400

08003e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01a      	beq.n	8003f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f36:	d10a      	bne.n	8003f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f8c:	f7fd f922 	bl	80011d4 <HAL_GetTick>
 8003f90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d10e      	bne.n	8003fbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f82c 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e022      	b.n	8004004 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d10e      	bne.n	8003fea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f816 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e00c      	b.n	8004004 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401c:	e062      	b.n	80040e4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d05e      	beq.n	80040e4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004026:	f7fd f8d5 	bl	80011d4 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	429a      	cmp	r2, r3
 8004034:	d302      	bcc.n	800403c <UART_WaitOnFlagUntilTimeout+0x30>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d11d      	bne.n	8004078 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800404a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e045      	b.n	8004104 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d02e      	beq.n	80040e4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004094:	d126      	bne.n	80040e4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800409e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e00f      	b.n	8004104 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	4013      	ands	r3, r2
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d08d      	beq.n	800401e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004122:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff fbaf 	bl	80038d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004194:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fb81 	bl	80038ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80041c0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c8:	2b22      	cmp	r3, #34	; 0x22
 80041ca:	d13b      	bne.n	8004244 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041d4:	89bb      	ldrh	r3, [r7, #12]
 80041d6:	b2d9      	uxtb	r1, r3
 80041d8:	89fb      	ldrh	r3, [r7, #14]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e0:	400a      	ands	r2, r1
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d122      	bne.n	8004254 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800421c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fb3f 	bl	80038c0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004242:	e007      	b.n	8004254 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0208 	orr.w	r2, r2, #8
 8004252:	619a      	str	r2, [r3, #24]
}
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800426a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004272:	2b22      	cmp	r3, #34	; 0x22
 8004274:	d13b      	bne.n	80042ee <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004284:	89ba      	ldrh	r2, [r7, #12]
 8004286:	89fb      	ldrh	r3, [r7, #14]
 8004288:	4013      	ands	r3, r2
 800428a:	b29a      	uxth	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004294:	1c9a      	adds	r2, r3, #2
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d122      	bne.n	80042fe <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042c6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff faea 	bl	80038c0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042ec:	e007      	b.n	80042fe <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0208 	orr.w	r2, r2, #8
 80042fc:	619a      	str	r2, [r3, #24]
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004316:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800431e:	2b22      	cmp	r3, #34	; 0x22
 8004320:	d168      	bne.n	80043f4 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004328:	81fb      	strh	r3, [r7, #14]
 800432a:	e03f      	b.n	80043ac <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004334:	893b      	ldrh	r3, [r7, #8]
 8004336:	b2d9      	uxtb	r1, r3
 8004338:	89bb      	ldrh	r3, [r7, #12]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	400a      	ands	r2, r1
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d11b      	bne.n	80043a6 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800437c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff fa8d 	bl	80038c0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80043a6:	89fb      	ldrh	r3, [r7, #14]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	81fb      	strh	r3, [r7, #14]
 80043ac:	89fb      	ldrh	r3, [r7, #14]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1bc      	bne.n	800432c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043b8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80043ba:	897b      	ldrh	r3, [r7, #10]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d021      	beq.n	8004404 <UART_RxISR_8BIT_FIFOEN+0xfc>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80043c6:	897a      	ldrh	r2, [r7, #10]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d21b      	bcs.n	8004404 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80043da:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a0b      	ldr	r2, [pc, #44]	; (800440c <UART_RxISR_8BIT_FIFOEN+0x104>)
 80043e0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0220 	orr.w	r2, r2, #32
 80043f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043f2:	e007      	b.n	8004404 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0208 	orr.w	r2, r2, #8
 8004402:	619a      	str	r2, [r3, #24]
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	080041b3 	.word	0x080041b3

08004410 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800441e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004426:	2b22      	cmp	r3, #34	; 0x22
 8004428:	d168      	bne.n	80044fc <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004430:	82fb      	strh	r3, [r7, #22]
 8004432:	e03f      	b.n	80044b4 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8004442:	8a3a      	ldrh	r2, [r7, #16]
 8004444:	8abb      	ldrh	r3, [r7, #20]
 8004446:	4013      	ands	r3, r2
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	1c9a      	adds	r2, r3, #2
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d11b      	bne.n	80044ae <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004484:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fa09 	bl	80038c0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80044ae:	8afb      	ldrh	r3, [r7, #22]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	82fb      	strh	r3, [r7, #22]
 80044b4:	8afb      	ldrh	r3, [r7, #22]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1bc      	bne.n	8004434 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044c0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80044c2:	8a7b      	ldrh	r3, [r7, #18]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d021      	beq.n	800450c <UART_RxISR_16BIT_FIFOEN+0xfc>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80044ce:	8a7a      	ldrh	r2, [r7, #18]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d21b      	bcs.n	800450c <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80044e2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a0b      	ldr	r2, [pc, #44]	; (8004514 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80044e8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0220 	orr.w	r2, r2, #32
 80044f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044fa:	e007      	b.n	800450c <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0208 	orr.w	r2, r2, #8
 800450a:	619a      	str	r2, [r3, #24]
}
 800450c:	bf00      	nop
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	0800425d 	.word	0x0800425d

08004518 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_UARTEx_DisableFifoMode+0x16>
 8004566:	2302      	movs	r3, #2
 8004568:	e027      	b.n	80045ba <HAL_UARTEx_DisableFifoMode+0x66>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2224      	movs	r2, #36	; 0x24
 8004576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004598:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045da:	2302      	movs	r3, #2
 80045dc:	e02d      	b.n	800463a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2224      	movs	r2, #36	; 0x24
 80045ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f850 	bl	80046c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004656:	2302      	movs	r3, #2
 8004658:	e02d      	b.n	80046b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2224      	movs	r2, #36	; 0x24
 8004666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f812 	bl	80046c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80046c8:	4a2f      	ldr	r2, [pc, #188]	; (8004788 <UARTEx_SetNbDataToProcess+0xc8>)
 80046ca:	f107 0314 	add.w	r3, r7, #20
 80046ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046d2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80046d6:	4a2d      	ldr	r2, [pc, #180]	; (800478c <UARTEx_SetNbDataToProcess+0xcc>)
 80046d8:	f107 030c 	add.w	r3, r7, #12
 80046dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046e0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d108      	bne.n	80046fe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046fc:	e03d      	b.n	800477a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046fe:	2308      	movs	r3, #8
 8004700:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004702:	2308      	movs	r3, #8
 8004704:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	0e5b      	lsrs	r3, r3, #25
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	0f5b      	lsrs	r3, r3, #29
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004726:	7fbb      	ldrb	r3, [r7, #30]
 8004728:	7f3a      	ldrb	r2, [r7, #28]
 800472a:	f107 0120 	add.w	r1, r7, #32
 800472e:	440a      	add	r2, r1
 8004730:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004734:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004738:	7f3a      	ldrb	r2, [r7, #28]
 800473a:	f107 0120 	add.w	r1, r7, #32
 800473e:	440a      	add	r2, r1
 8004740:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004744:	fb93 f3f2 	sdiv	r3, r3, r2
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004750:	7ffb      	ldrb	r3, [r7, #31]
 8004752:	7f7a      	ldrb	r2, [r7, #29]
 8004754:	f107 0120 	add.w	r1, r7, #32
 8004758:	440a      	add	r2, r1
 800475a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800475e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004762:	7f7a      	ldrb	r2, [r7, #29]
 8004764:	f107 0120 	add.w	r1, r7, #32
 8004768:	440a      	add	r2, r1
 800476a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800476e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004772:	b29a      	uxth	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800477a:	bf00      	nop
 800477c:	3724      	adds	r7, #36	; 0x24
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	08004834 	.word	0x08004834
 800478c:	0800483c 	.word	0x0800483c

08004790 <__libc_init_array>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	4e0d      	ldr	r6, [pc, #52]	; (80047c8 <__libc_init_array+0x38>)
 8004794:	4c0d      	ldr	r4, [pc, #52]	; (80047cc <__libc_init_array+0x3c>)
 8004796:	1ba4      	subs	r4, r4, r6
 8004798:	10a4      	asrs	r4, r4, #2
 800479a:	2500      	movs	r5, #0
 800479c:	42a5      	cmp	r5, r4
 800479e:	d109      	bne.n	80047b4 <__libc_init_array+0x24>
 80047a0:	4e0b      	ldr	r6, [pc, #44]	; (80047d0 <__libc_init_array+0x40>)
 80047a2:	4c0c      	ldr	r4, [pc, #48]	; (80047d4 <__libc_init_array+0x44>)
 80047a4:	f000 f820 	bl	80047e8 <_init>
 80047a8:	1ba4      	subs	r4, r4, r6
 80047aa:	10a4      	asrs	r4, r4, #2
 80047ac:	2500      	movs	r5, #0
 80047ae:	42a5      	cmp	r5, r4
 80047b0:	d105      	bne.n	80047be <__libc_init_array+0x2e>
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047b8:	4798      	blx	r3
 80047ba:	3501      	adds	r5, #1
 80047bc:	e7ee      	b.n	800479c <__libc_init_array+0xc>
 80047be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047c2:	4798      	blx	r3
 80047c4:	3501      	adds	r5, #1
 80047c6:	e7f2      	b.n	80047ae <__libc_init_array+0x1e>
 80047c8:	0800487c 	.word	0x0800487c
 80047cc:	0800487c 	.word	0x0800487c
 80047d0:	0800487c 	.word	0x0800487c
 80047d4:	08004880 	.word	0x08004880

080047d8 <memset>:
 80047d8:	4402      	add	r2, r0
 80047da:	4603      	mov	r3, r0
 80047dc:	4293      	cmp	r3, r2
 80047de:	d100      	bne.n	80047e2 <memset+0xa>
 80047e0:	4770      	bx	lr
 80047e2:	f803 1b01 	strb.w	r1, [r3], #1
 80047e6:	e7f9      	b.n	80047dc <memset+0x4>

080047e8 <_init>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	bf00      	nop
 80047ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ee:	bc08      	pop	{r3}
 80047f0:	469e      	mov	lr, r3
 80047f2:	4770      	bx	lr

080047f4 <_fini>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	bf00      	nop
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr
