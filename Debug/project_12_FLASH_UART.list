
project_12_FLASH_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f38  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800522c  0800522c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800522c  0800522c  0001522c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005234  08005234  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800523c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000070  080052ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  080052ac  000206d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013aad  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002395  00000000  00000000  00033b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  00035ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f58  00000000  00000000  00036f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e708  00000000  00000000  00037eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d330  00000000  00000000  000565b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6903  00000000  00000000  000638e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012a1eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a0  00000000  00000000  0012a268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005100 	.word	0x08005100

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005100 	.word	0x08005100

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fdf7 	bl	80011d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f81a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f966 	bl	80008bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 f918 	bl	8000824 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005f4:	f000 f87a 	bl	80006ec <MX_TIM2_Init>
  MX_TIM3_Init();
 80005f8:	f000 f8c6 	bl	8000788 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  init_UART_buffers();
 80005fc:	f000 fb04 	bl	8000c08 <init_UART_buffers>
  HAL_TIM_Base_Start_IT(&htim2);
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <main+0x34>)
 8000602:	f002 f9b3 	bl	800296c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_MESSAGE_SIZE);
 8000606:	2201      	movs	r2, #1
 8000608:	4903      	ldr	r1, [pc, #12]	; (8000618 <main+0x38>)
 800060a:	4804      	ldr	r0, [pc, #16]	; (800061c <main+0x3c>)
 800060c:	f002 ff76 	bl	80034fc <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x30>
 8000612:	bf00      	nop
 8000614:	200005f4 	.word	0x200005f4
 8000618:	20000118 	.word	0x20000118
 800061c:	20000640 	.word	0x20000640

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0a4      	sub	sp, #144	; 0x90
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800062a:	2238      	movs	r2, #56	; 0x38
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f004 f958 	bl	80048e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2244      	movs	r2, #68	; 0x44
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 f94a 	bl	80048e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000654:	f001 f95a 	bl	800190c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000660:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000662:	2340      	movs	r3, #64	; 0x40
 8000664:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066a:	2302      	movs	r3, #2
 800066c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800066e:	2306      	movs	r3, #6
 8000670:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000672:	2330      	movs	r3, #48	; 0x30
 8000674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800068e:	4618      	mov	r0, r3
 8000690:	f001 f9f0 	bl	8001a74 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800069a:	f000 f95b 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2303      	movs	r3, #3
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fcf3 	bl	80020a4 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006c4:	f000 f946 	bl	8000954 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 ff02 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 f939 	bl	8000954 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3790      	adds	r7, #144	; 0x90
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_TIM2_Init+0x98>)
 800070c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000710:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_TIM2_Init+0x98>)
 8000714:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000718:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_TIM2_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_TIM2_Init+0x98>)
 8000722:	2263      	movs	r2, #99	; 0x63
 8000724:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_TIM2_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_TIM2_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000732:	4814      	ldr	r0, [pc, #80]	; (8000784 <MX_TIM2_Init+0x98>)
 8000734:	f002 f8c2 	bl	80028bc <HAL_TIM_Base_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800073e:	f000 f909 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000746:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4619      	mov	r1, r3
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <MX_TIM2_Init+0x98>)
 8000750:	f002 faf6 	bl	8002d40 <HAL_TIM_ConfigClockSource>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800075a:	f000 f8fb 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800075e:	2320      	movs	r3, #32
 8000760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_TIM2_Init+0x98>)
 800076c:	f002 fd18 	bl	80031a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000776:	f000 f8ed 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200005f4 	.word	0x200005f4

08000788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_TIM3_Init+0x94>)
 80007a8:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <MX_TIM3_Init+0x98>)
 80007aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_TIM3_Init+0x94>)
 80007ae:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80007b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_TIM3_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_TIM3_Init+0x94>)
 80007bc:	2263      	movs	r2, #99	; 0x63
 80007be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_TIM3_Init+0x94>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_TIM3_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007cc:	4813      	ldr	r0, [pc, #76]	; (800081c <MX_TIM3_Init+0x94>)
 80007ce:	f002 f875 	bl	80028bc <HAL_TIM_Base_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007d8:	f000 f8bc 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_TIM3_Init+0x94>)
 80007ea:	f002 faa9 	bl	8002d40 <HAL_TIM_ConfigClockSource>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007f4:	f000 f8ae 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007f8:	2320      	movs	r3, #32
 80007fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_TIM3_Init+0x94>)
 8000806:	f002 fccb 	bl	80031a0 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000810:	f000 f8a0 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000049c 	.word	0x2000049c
 8000820:	40000400 	.word	0x40000400

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 800082a:	4a23      	ldr	r2, [pc, #140]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086c:	4811      	ldr	r0, [pc, #68]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 800086e:	f002 fd5f 	bl	8003330 <HAL_UART_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000878:	f000 f86c 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000880:	f003 ff21 	bl	80046c6 <HAL_UARTEx_SetTxFifoThreshold>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800088a:	f000 f863 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4808      	ldr	r0, [pc, #32]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000892:	f003 ff56 	bl	8004742 <HAL_UARTEx_SetRxFifoThreshold>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800089c:	f000 f85a 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 80008a2:	f003 fed7 	bl	8004654 <HAL_UARTEx_DisableFifoMode>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 f852 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000640 	.word	0x20000640
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <MX_GPIO_Init+0x90>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a1d      	ldr	r2, [pc, #116]	; (800094c <MX_GPIO_Init+0x90>)
 80008d8:	f043 0320 	orr.w	r3, r3, #32
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_GPIO_Init+0x90>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0320 	and.w	r3, r3, #32
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_GPIO_Init+0x90>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <MX_GPIO_Init+0x90>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_GPIO_Init+0x90>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_GPIO_Init+0x90>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <MX_GPIO_Init+0x90>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_GPIO_Init+0x90>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <MX_GPIO_Init+0x94>)
 8000922:	f000 ffc1 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0x94>)
 8000940:	f000 fe30 	bl	80015a4 <HAL_GPIO_Init>

}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000
 8000950:	48000400 	.word	0x48000400

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x44>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_MspInit+0x44>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6613      	str	r3, [r2, #96]	; 0x60
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x44>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x44>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6593      	str	r3, [r2, #88]	; 0x58
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800099a:	f001 f85b 	bl	8001a54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009bc:	d114      	bne.n	80009e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <HAL_TIM_Base_MspInit+0x78>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <HAL_TIM_Base_MspInit+0x78>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <HAL_TIM_Base_MspInit+0x78>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2103      	movs	r1, #3
 80009da:	201c      	movs	r0, #28
 80009dc:	f000 fd47 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009e0:	201c      	movs	r0, #28
 80009e2:	f000 fd5e 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009e6:	e018      	b.n	8000a1a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_TIM_Base_MspInit+0x7c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d113      	bne.n	8000a1a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_TIM_Base_MspInit+0x78>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <HAL_TIM_Base_MspInit+0x78>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6593      	str	r3, [r2, #88]	; 0x58
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_TIM_Base_MspInit+0x78>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	201d      	movs	r0, #29
 8000a10:	f000 fd2d 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a14:	201d      	movs	r0, #29
 8000a16:	f000 fd44 	bl	80014a2 <HAL_NVIC_EnableIRQ>
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40000400 	.word	0x40000400

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <HAL_UART_MspInit+0x8c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d130      	bne.n	8000ab0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <HAL_UART_MspInit+0x90>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <HAL_UART_MspInit+0x90>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0x90>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0x90>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a14      	ldr	r2, [pc, #80]	; (8000abc <HAL_UART_MspInit+0x90>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_UART_MspInit+0x90>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 fd82 	bl	80015a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	2026      	movs	r0, #38	; 0x26
 8000aa6:	f000 fce2 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aaa:	2026      	movs	r0, #38	; 0x26
 8000aac:	f000 fcf9 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	40021000 	.word	0x40021000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 fbb2 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <TIM2_IRQHandler+0x1c>)
 8000b22:	f001 ff8d 	bl	8002a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <TIM2_IRQHandler+0x20>)
 8000b2c:	f000 fed4 	bl	80018d8 <HAL_GPIO_TogglePin>
  parse_RX_message_from_queue();
 8000b30:	f000 f9d6 	bl	8000ee0 <parse_RX_message_from_queue>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200005f4 	.word	0x200005f4
 8000b3c:	48000400 	.word	0x48000400

08000b40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <TIM3_IRQHandler+0x14>)
 8000b46:	f001 ff7b 	bl	8002a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  transmit_messages_IT_handler();
 8000b4a:	f000 facb 	bl	80010e4 <transmit_messages_IT_handler>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000049c 	.word	0x2000049c

08000b58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <USART2_IRQHandler+0x14>)
 8000b5e:	f002 fda5 	bl	80036ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  UART_IT_handler();
 8000b62:	f000 f933 	bl	8000dcc <UART_IT_handler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000640 	.word	0x20000640

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f003 fe76 	bl	8004890 <__errno>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20008000 	.word	0x20008000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	2000008c 	.word	0x2000008c
 8000bd8:	200006d8 	.word	0x200006d8

08000bdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <SystemInit+0x28>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <SystemInit+0x28>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SystemInit+0x28>)
 8000bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <init_UART_buffers>:
#define FLASH_USER_START_ADDR		ADDR_FLASH_PAGE_4
#define FLASH_USER_END_ADDR     	(ADDR_FLASH_PAGE_63 + FLASH_PAGE_SIZE - 1)   /* End @ of user Flash area */

// стартовая инициализация счётчиков и буферов UART
void init_UART_buffers(void)
{
 8000c08:	b4b0      	push	{r4, r5, r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
	uart_error_state = NO_ERROR;						// ошибка отсутствует
 8000c0e:	4b4c      	ldr	r3, [pc, #304]	; (8000d40 <init_UART_buffers+0x138>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]

	RX_string_buffer_counter = 1;						//
 8000c14:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <init_UART_buffers+0x13c>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < UART_STRING_MAX_SIZE; i++)		// буфер для хранения принятой строки инициализируем нулями
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	e007      	b.n	8000c30 <init_UART_buffers+0x28>
	{
		RX_string_buffer[i] = 0;
 8000c20:	4a49      	ldr	r2, [pc, #292]	; (8000d48 <init_UART_buffers+0x140>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	4413      	add	r3, r2
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < UART_STRING_MAX_SIZE; i++)		// буфер для хранения принятой строки инициализируем нулями
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	2b7f      	cmp	r3, #127	; 0x7f
 8000c34:	ddf4      	ble.n	8000c20 <init_UART_buffers+0x18>
	}
	RX_string_buffer[RX_string_buffer_counter] = CHAR_CODE_UART_MESSAGE_END;	// записываем код окончания строки во ВТОРОЙ элемент буфера (для старта без ошибок)
 8000c36:	4b43      	ldr	r3, [pc, #268]	; (8000d44 <init_UART_buffers+0x13c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <init_UART_buffers+0x140>)
 8000c3e:	210a      	movs	r1, #10
 8000c40:	5499      	strb	r1, [r3, r2]

	RX_queue_buffer_write_counter = 0;					// выставляем в 0 счётчитк элемента буфера, в который ведётся запись
 8000c42:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <init_UART_buffers+0x144>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
	RX_queue_buffer_read_counter = 0;					// выставляем в 0 счётчик элемента буфера, из которого ведётся чтение
 8000c48:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <init_UART_buffers+0x148>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RX_QUEUE_BUFFER_SIZE; i++)		//
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	e012      	b.n	8000c7a <init_UART_buffers+0x72>
	{
		for (int ii = 0; i < UART_MESSAGE_SIZE; i++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	e009      	b.n	8000c6e <init_UART_buffers+0x66>
		{
			RX_queue_buffer[i][ii] = 0;
 8000c5a:	4a3e      	ldr	r2, [pc, #248]	; (8000d54 <init_UART_buffers+0x14c>)
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	441a      	add	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
		for (int ii = 0; i < UART_MESSAGE_SIZE; i++)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	ddf2      	ble.n	8000c5a <init_UART_buffers+0x52>
	for (int i = 0; i < RX_QUEUE_BUFFER_SIZE; i++)		//
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	3301      	adds	r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	2bfe      	cmp	r3, #254	; 0xfe
 8000c7e:	dde9      	ble.n	8000c54 <init_UART_buffers+0x4c>
		}
	}

	TX_queue_buffer_write_counter = 0;
 8000c80:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <init_UART_buffers+0x150>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
	TX_queue_buffer_read_counter = 0;
 8000c86:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <init_UART_buffers+0x154>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < TX_QUEUE_BUFFER_SIZE; i++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	e012      	b.n	8000cb8 <init_UART_buffers+0xb0>
	{
		for (int ii = 0; i < UART_MESSAGE_SIZE; i++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	e009      	b.n	8000cac <init_UART_buffers+0xa4>
		{
			TX_queue_buffer[i][ii] = 0;
 8000c98:	4a31      	ldr	r2, [pc, #196]	; (8000d60 <init_UART_buffers+0x158>)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	441a      	add	r2, r3
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
		for (int ii = 0; i < UART_MESSAGE_SIZE; i++)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	ddf2      	ble.n	8000c98 <init_UART_buffers+0x90>
	for (int i = 0; i < TX_QUEUE_BUFFER_SIZE; i++)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2bfe      	cmp	r3, #254	; 0xfe
 8000cbc:	dde9      	ble.n	8000c92 <init_UART_buffers+0x8a>
		}
	}

	sprintf(UART_string_command_return_test_value, 		"%s", "return_test_value");
 8000cbe:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <init_UART_buffers+0x15c>)
 8000cc0:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <init_UART_buffers+0x160>)
 8000cc2:	4615      	mov	r5, r2
 8000cc4:	461c      	mov	r4, r3
 8000cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc8:	6028      	str	r0, [r5, #0]
 8000cca:	6069      	str	r1, [r5, #4]
 8000ccc:	60aa      	str	r2, [r5, #8]
 8000cce:	60eb      	str	r3, [r5, #12]
 8000cd0:	8823      	ldrh	r3, [r4, #0]
 8000cd2:	822b      	strh	r3, [r5, #16]
	sprintf(UART_string_command_get_firmware_version, 	"%s", "get_firmware_version");
 8000cd4:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <init_UART_buffers+0x164>)
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <init_UART_buffers+0x168>)
 8000cd8:	4615      	mov	r5, r2
 8000cda:	461c      	mov	r4, r3
 8000cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cde:	6028      	str	r0, [r5, #0]
 8000ce0:	6069      	str	r1, [r5, #4]
 8000ce2:	60aa      	str	r2, [r5, #8]
 8000ce4:	60eb      	str	r3, [r5, #12]
 8000ce6:	6820      	ldr	r0, [r4, #0]
 8000ce8:	6128      	str	r0, [r5, #16]
 8000cea:	7923      	ldrb	r3, [r4, #4]
 8000cec:	752b      	strb	r3, [r5, #20]
	sprintf(UART_string_command_get_device_status, 		"%s", "get_device_status");
 8000cee:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <init_UART_buffers+0x16c>)
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <init_UART_buffers+0x170>)
 8000cf2:	4615      	mov	r5, r2
 8000cf4:	461c      	mov	r4, r3
 8000cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf8:	6028      	str	r0, [r5, #0]
 8000cfa:	6069      	str	r1, [r5, #4]
 8000cfc:	60aa      	str	r2, [r5, #8]
 8000cfe:	60eb      	str	r3, [r5, #12]
 8000d00:	8823      	ldrh	r3, [r4, #0]
 8000d02:	822b      	strh	r3, [r5, #16]
	sprintf(UART_string_command_get_grid_state, 		"%s", "get_grid_state");
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <init_UART_buffers+0x174>)
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <init_UART_buffers+0x178>)
 8000d08:	4614      	mov	r4, r2
 8000d0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d0c:	6020      	str	r0, [r4, #0]
 8000d0e:	6061      	str	r1, [r4, #4]
 8000d10:	60a2      	str	r2, [r4, #8]
 8000d12:	881a      	ldrh	r2, [r3, #0]
 8000d14:	789b      	ldrb	r3, [r3, #2]
 8000d16:	81a2      	strh	r2, [r4, #12]
 8000d18:	73a3      	strb	r3, [r4, #14]
	sprintf(UART_string_command_get_movement_speed, 	"%s", "get_movement_speed");
 8000d1a:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <init_UART_buffers+0x17c>)
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <init_UART_buffers+0x180>)
 8000d1e:	4615      	mov	r5, r2
 8000d20:	461c      	mov	r4, r3
 8000d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d24:	6028      	str	r0, [r5, #0]
 8000d26:	6069      	str	r1, [r5, #4]
 8000d28:	60aa      	str	r2, [r5, #8]
 8000d2a:	60eb      	str	r3, [r5, #12]
 8000d2c:	8823      	ldrh	r3, [r4, #0]
 8000d2e:	78a2      	ldrb	r2, [r4, #2]
 8000d30:	822b      	strh	r3, [r5, #16]
 8000d32:	4613      	mov	r3, r2
 8000d34:	74ab      	strb	r3, [r5, #18]
}
 8000d36:	bf00      	nop
 8000d38:	371c      	adds	r7, #28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bcb0      	pop	{r4, r5, r7}
 8000d3e:	4770      	bx	lr
 8000d40:	200006cd 	.word	0x200006cd
 8000d44:	20000568 	.word	0x20000568
 8000d48:	2000019c 	.word	0x2000019c
 8000d4c:	20000119 	.word	0x20000119
 8000d50:	200006cc 	.word	0x200006cc
 8000d54:	2000021c 	.word	0x2000021c
 8000d58:	200005f1 	.word	0x200005f1
 8000d5c:	200005f0 	.word	0x200005f0
 8000d60:	2000039c 	.word	0x2000039c
 8000d64:	20000570 	.word	0x20000570
 8000d68:	08005118 	.word	0x08005118
 8000d6c:	2000011c 	.word	0x2000011c
 8000d70:	0800512c 	.word	0x0800512c
 8000d74:	2000031c 	.word	0x2000031c
 8000d78:	08005144 	.word	0x08005144
 8000d7c:	20000098 	.word	0x20000098
 8000d80:	08005158 	.word	0x08005158
 8000d84:	200004e8 	.word	0x200004e8
 8000d88:	08005168 	.word	0x08005168

08000d8c <UART_error_handler>:

// обработчик ошибок UART
void UART_error_handler(UARTErrorCode_EnumTypeDef error_type)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	switch (error_type)
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b05      	cmp	r3, #5
 8000d9a:	d80f      	bhi.n	8000dbc <UART_error_handler+0x30>
 8000d9c:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <UART_error_handler+0x18>)
 8000d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da2:	bf00      	nop
 8000da4:	08000dbf 	.word	0x08000dbf
 8000da8:	08000dbf 	.word	0x08000dbf
 8000dac:	08000dbf 	.word	0x08000dbf
 8000db0:	08000dbd 	.word	0x08000dbd
 8000db4:	08000dbf 	.word	0x08000dbf
 8000db8:	08000dbf 	.word	0x08000dbf

		break;
	}
	default:
	{
		while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UART_error_handler+0x30>
		break;
 8000dbe:	bf00      	nop
		}
		break;
	}

	}
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <UART_IT_handler>:

// обработчик прерывания с UART (приём данных)
void UART_IT_handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_MESSAGE_SIZE);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4904      	ldr	r1, [pc, #16]	; (8000de4 <UART_IT_handler+0x18>)
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <UART_IT_handler+0x1c>)
 8000dd6:	f002 fb91 	bl	80034fc <HAL_UART_Receive_IT>
	add_byte_to_string();
 8000dda:	f000 f807 	bl	8000dec <add_byte_to_string>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000118 	.word	0x20000118
 8000de8:	20000640 	.word	0x20000640

08000dec <add_byte_to_string>:

// добавляем принятый байт в буферную строку
void add_byte_to_string(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	if(UART_rx_buffer[0] == CHAR_CODE_UART_MESSAGE_START)								// если приняли стартовый символ
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <add_byte_to_string+0x7c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b23      	cmp	r3, #35	; 0x23
 8000df6:	d10c      	bne.n	8000e12 <add_byte_to_string+0x26>
	{
		if (RX_string_buffer[RX_string_buffer_counter] != CHAR_CODE_UART_MESSAGE_END)	// если предыдущий записанный байт не является концом сообщения
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <add_byte_to_string+0x80>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <add_byte_to_string+0x84>)
 8000e00:	5c9b      	ldrb	r3, [r3, r2]
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d002      	beq.n	8000e0c <add_byte_to_string+0x20>
		{
			UART_error_handler(END_OF_MESSAGE_MISSED);									// ошибка: пропущен конец предыдущего сообщения
 8000e06:	2004      	movs	r0, #4
 8000e08:	f7ff ffc0 	bl	8000d8c <UART_error_handler>
		}
		RX_string_buffer_counter = 0;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <add_byte_to_string+0x80>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	}
	RX_string_buffer[RX_string_buffer_counter] = UART_rx_buffer[0];
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <add_byte_to_string+0x80>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <add_byte_to_string+0x7c>)
 8000e1a:	7819      	ldrb	r1, [r3, #0]
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <add_byte_to_string+0x84>)
 8000e1e:	5499      	strb	r1, [r3, r2]
	if (RX_string_buffer[0] != CHAR_CODE_UART_MESSAGE_START)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <add_byte_to_string+0x84>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b23      	cmp	r3, #35	; 0x23
 8000e26:	d002      	beq.n	8000e2e <add_byte_to_string+0x42>
	{
		UART_error_handler(START_OF_MESSAGE_MISSED);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f7ff ffaf 	bl	8000d8c <UART_error_handler>
	}
	if (RX_string_buffer[RX_string_buffer_counter] == CHAR_CODE_UART_MESSAGE_END)
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <add_byte_to_string+0x80>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <add_byte_to_string+0x84>)
 8000e36:	5c9b      	ldrb	r3, [r3, r2]
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	d104      	bne.n	8000e46 <add_byte_to_string+0x5a>
	{
		add_message_to_RX_queue_buffer();
 8000e3c:	f000 f81a 	bl	8000e74 <add_message_to_RX_queue_buffer>
		RX_string_buffer_counter = 0;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <add_byte_to_string+0x80>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
	}
	RX_string_buffer_counter++;
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <add_byte_to_string+0x80>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <add_byte_to_string+0x80>)
 8000e50:	701a      	strb	r2, [r3, #0]
	if (RX_string_buffer_counter >= UART_STRING_MAX_SIZE)
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <add_byte_to_string+0x80>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	da02      	bge.n	8000e62 <add_byte_to_string+0x76>
	{
		UART_error_handler(MAX_MESSAGE_LENGHT_EXCEEDED);
 8000e5c:	2005      	movs	r0, #5
 8000e5e:	f7ff ff95 	bl	8000d8c <UART_error_handler>
	}
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000118 	.word	0x20000118
 8000e6c:	20000568 	.word	0x20000568
 8000e70:	2000019c 	.word	0x2000019c

08000e74 <add_message_to_RX_queue_buffer>:

void add_message_to_RX_queue_buffer(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	for (int i = 0; i < RX_string_buffer_counter; i++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	e00f      	b.n	8000ea0 <add_message_to_RX_queue_buffer+0x2c>
	{
		RX_queue_buffer[RX_queue_buffer_write_counter][i] = UART_rx_buffer[i];
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <add_message_to_RX_queue_buffer+0x5c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <add_message_to_RX_queue_buffer+0x60>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	7819      	ldrb	r1, [r3, #0]
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <add_message_to_RX_queue_buffer+0x64>)
 8000e90:	181a      	adds	r2, r3, r0
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	460a      	mov	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RX_string_buffer_counter; i++)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <add_message_to_RX_queue_buffer+0x68>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	dbe9      	blt.n	8000e80 <add_message_to_RX_queue_buffer+0xc>
	}
	RX_queue_buffer_write_counter++;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <add_message_to_RX_queue_buffer+0x5c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <add_message_to_RX_queue_buffer+0x5c>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	if (RX_queue_buffer_write_counter >= RX_QUEUE_BUFFER_SIZE)
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <add_message_to_RX_queue_buffer+0x5c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2bff      	cmp	r3, #255	; 0xff
 8000ebe:	d102      	bne.n	8000ec6 <add_message_to_RX_queue_buffer+0x52>
	{
		UART_error_handler(RX_QUEUE_OVERFLOW);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff ff63 	bl	8000d8c <UART_error_handler>
	}
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000119 	.word	0x20000119
 8000ed4:	20000118 	.word	0x20000118
 8000ed8:	2000021c 	.word	0x2000021c
 8000edc:	20000568 	.word	0x20000568

08000ee0 <parse_RX_message_from_queue>:

void parse_RX_message_from_queue(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	parse_UART_message(RX_queue_buffer[RX_queue_buffer_read_counter]);
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <parse_RX_message_from_queue+0x40>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <parse_RX_message_from_queue+0x44>)
 8000eec:	4413      	add	r3, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f81c 	bl	8000f2c <parse_UART_message>
	if (RX_queue_buffer_read_counter >= RX_queue_buffer_write_counter)
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <parse_RX_message_from_queue+0x40>)
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <parse_RX_message_from_queue+0x48>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d306      	bcc.n	8000f0e <parse_RX_message_from_queue+0x2e>
	{
		RX_queue_buffer_write_counter = 0;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <parse_RX_message_from_queue+0x48>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
		RX_queue_buffer_read_counter = 0;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <parse_RX_message_from_queue+0x40>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		RX_queue_buffer_read_counter++;
	}
}
 8000f0c:	e005      	b.n	8000f1a <parse_RX_message_from_queue+0x3a>
		RX_queue_buffer_read_counter++;
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <parse_RX_message_from_queue+0x40>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b02      	ldr	r3, [pc, #8]	; (8000f20 <parse_RX_message_from_queue+0x40>)
 8000f18:	701a      	strb	r2, [r3, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200006cc 	.word	0x200006cc
 8000f24:	2000021c 	.word	0x2000021c
 8000f28:	20000119 	.word	0x20000119

08000f2c <parse_UART_message>:

void parse_UART_message(uint8_t* buffer_to_parse_pointer)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b0b5      	sub	sp, #212	; 0xd4
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	char char_message_array[UART_STRING_MAX_SIZE];
	init_char_array_by_zero(sizeof(char_message_array), char_message_array);
 8000f34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f38:	4619      	mov	r1, r3
 8000f3a:	2080      	movs	r0, #128	; 0x80
 8000f3c:	f000 f906 	bl	800114c <init_char_array_by_zero>
	char buff_array[2];
	int i = 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	while (buffer_to_parse_pointer[0] != CHAR_CODE_UART_MESSAGE_END)
 8000f46:	e019      	b.n	8000f7c <parse_UART_message+0x50>
	{
		sprintf(buff_array, "%x", buffer_to_parse_pointer[i]);
 8000f48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f58:	4940      	ldr	r1, [pc, #256]	; (800105c <parse_UART_message+0x130>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fcca 	bl	80048f4 <siprintf>
		char_message_array[i] = buff_array[0];
 8000f60:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8000f64:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000f68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f6c:	4413      	add	r3, r2
 8000f6e:	460a      	mov	r2, r1
 8000f70:	701a      	strb	r2, [r3, #0]
		i++;
 8000f72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f76:	3301      	adds	r3, #1
 8000f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	while (buffer_to_parse_pointer[0] != CHAR_CODE_UART_MESSAGE_END)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b0a      	cmp	r3, #10
 8000f82:	d1e1      	bne.n	8000f48 <parse_UART_message+0x1c>
	}

	if (!strcmp(char_message_array, UART_string_command_return_test_value))
 8000f84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f88:	4935      	ldr	r1, [pc, #212]	; (8001060 <parse_UART_message+0x134>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff f948 	bl	8000220 <strcmp>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d107      	bne.n	8000fa6 <parse_UART_message+0x7a>
	{
		char tmp_arr_1[] = "A";
 8000f96:	2341      	movs	r3, #65	; 0x41
 8000f98:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		add_char_message_to_TX_queue_buffer(tmp_arr_1);
 8000f9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f86f 	bl	8001084 <add_char_message_to_TX_queue_buffer>
	}
	if (!strcmp(char_message_array, UART_string_command_get_firmware_version))
 8000fa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000faa:	492e      	ldr	r1, [pc, #184]	; (8001064 <parse_UART_message+0x138>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f937 	bl	8000220 <strcmp>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10d      	bne.n	8000fd4 <parse_UART_message+0xa8>
	{
		char tmp_arr_2[] = "Alpha v1.0";
 8000fb8:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <parse_UART_message+0x13c>)
 8000fba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fc0:	c303      	stmia	r3!, {r0, r1}
 8000fc2:	801a      	strh	r2, [r3, #0]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	0c12      	lsrs	r2, r2, #16
 8000fc8:	701a      	strb	r2, [r3, #0]
		add_char_message_to_TX_queue_buffer(tmp_arr_2);
 8000fca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f858 	bl	8001084 <add_char_message_to_TX_queue_buffer>
	}
	if (!strcmp(char_message_array, UART_string_command_get_device_status))
 8000fd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fd8:	4924      	ldr	r1, [pc, #144]	; (800106c <parse_UART_message+0x140>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f920 	bl	8000220 <strcmp>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10d      	bne.n	8001002 <parse_UART_message+0xd6>
	{
		char tmp_arr_3[] = "DEVICE_STANDBY";
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <parse_UART_message+0x144>)
 8000fe8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fee:	c407      	stmia	r4!, {r0, r1, r2}
 8000ff0:	8023      	strh	r3, [r4, #0]
 8000ff2:	3402      	adds	r4, #2
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	7023      	strb	r3, [r4, #0]
		add_char_message_to_TX_queue_buffer(tmp_arr_3);
 8000ff8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f841 	bl	8001084 <add_char_message_to_TX_queue_buffer>
	}
	if (!strcmp(char_message_array, UART_string_command_get_grid_state))
 8001002:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001006:	491b      	ldr	r1, [pc, #108]	; (8001074 <parse_UART_message+0x148>)
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f909 	bl	8000220 <strcmp>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10a      	bne.n	800102a <parse_UART_message+0xfe>
	{
		char tmp_arr_4[] = "GRID_120";
 8001014:	4a18      	ldr	r2, [pc, #96]	; (8001078 <parse_UART_message+0x14c>)
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	ca07      	ldmia	r2, {r0, r1, r2}
 800101c:	c303      	stmia	r3!, {r0, r1}
 800101e:	701a      	strb	r2, [r3, #0]
		add_char_message_to_TX_queue_buffer(tmp_arr_4);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f82d 	bl	8001084 <add_char_message_to_TX_queue_buffer>
	}
	if (!strcmp(char_message_array, UART_string_command_get_movement_speed))
 800102a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800102e:	4913      	ldr	r1, [pc, #76]	; (800107c <parse_UART_message+0x150>)
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8f5 	bl	8000220 <strcmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10a      	bne.n	8001052 <parse_UART_message+0x126>
	{
		char tmp_arr_5[] = "3400 step/sec";
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <parse_UART_message+0x154>)
 800103e:	f107 040c 	add.w	r4, r7, #12
 8001042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001044:	c407      	stmia	r4!, {r0, r1, r2}
 8001046:	8023      	strh	r3, [r4, #0]
		add_char_message_to_TX_queue_buffer(tmp_arr_5);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f819 	bl	8001084 <add_char_message_to_TX_queue_buffer>
	}
}
 8001052:	bf00      	nop
 8001054:	37d4      	adds	r7, #212	; 0xd4
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	bf00      	nop
 800105c:	0800517c 	.word	0x0800517c
 8001060:	20000570 	.word	0x20000570
 8001064:	2000011c 	.word	0x2000011c
 8001068:	08005180 	.word	0x08005180
 800106c:	2000031c 	.word	0x2000031c
 8001070:	0800518c 	.word	0x0800518c
 8001074:	20000098 	.word	0x20000098
 8001078:	0800519c 	.word	0x0800519c
 800107c:	200004e8 	.word	0x200004e8
 8001080:	080051a8 	.word	0x080051a8

08001084 <add_char_message_to_TX_queue_buffer>:

void add_char_message_to_TX_queue_buffer(char* message_to_transmit_pointer)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(message_to_transmit_pointer); i++)
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e00e      	b.n	80010b0 <add_char_message_to_TX_queue_buffer+0x2c>
	{
		TX_queue_buffer[TX_queue_buffer_write_counter][i] = message_to_transmit_pointer[i];
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	4a10      	ldr	r2, [pc, #64]	; (80010dc <add_char_message_to_TX_queue_buffer+0x58>)
 800109a:	7812      	ldrb	r2, [r2, #0]
 800109c:	7819      	ldrb	r1, [r3, #0]
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <add_char_message_to_TX_queue_buffer+0x5c>)
 80010a0:	441a      	add	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	460a      	mov	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(message_to_transmit_pointer); i++)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d9ed      	bls.n	8001092 <add_char_message_to_TX_queue_buffer+0xe>
	}
	if (TX_queue_buffer_write_counter == TX_QUEUE_BUFFER_SIZE)
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <add_char_message_to_TX_queue_buffer+0x58>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2bff      	cmp	r3, #255	; 0xff
 80010bc:	d103      	bne.n	80010c6 <add_char_message_to_TX_queue_buffer+0x42>
	{
		UART_error_handler(TX_QUEUE_OVERFLOW);
 80010be:	2002      	movs	r0, #2
 80010c0:	f7ff fe64 	bl	8000d8c <UART_error_handler>
	}
	else
	{
		TX_queue_buffer_write_counter++;
	}
}
 80010c4:	e005      	b.n	80010d2 <add_char_message_to_TX_queue_buffer+0x4e>
		TX_queue_buffer_write_counter++;
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <add_char_message_to_TX_queue_buffer+0x58>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b03      	ldr	r3, [pc, #12]	; (80010dc <add_char_message_to_TX_queue_buffer+0x58>)
 80010d0:	701a      	strb	r2, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200005f1 	.word	0x200005f1
 80010e0:	2000039c 	.word	0x2000039c

080010e4 <transmit_messages_IT_handler>:

void transmit_messages_IT_handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	if (TX_queue_buffer_write_counter > 0)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <transmit_messages_IT_handler+0x5c>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d021      	beq.n	8001136 <transmit_messages_IT_handler+0x52>
	{
		for (int i = 0; i < TX_queue_buffer_write_counter; i++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	e015      	b.n	8001124 <transmit_messages_IT_handler+0x40>
		{
			for (int ii = 0; ii < UART_STRING_MAX_SIZE; ii++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	e00c      	b.n	8001118 <transmit_messages_IT_handler+0x34>
			{
				HAL_UART_Transmit(&huart2, &TX_queue_buffer[i][ii], UART_MESSAGE_SIZE, UART_TIMEOUT);
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <transmit_messages_IT_handler+0x60>)
 8001106:	1899      	adds	r1, r3, r2
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	2201      	movs	r2, #1
 800110c:	480e      	ldr	r0, [pc, #56]	; (8001148 <transmit_messages_IT_handler+0x64>)
 800110e:	f002 f95f 	bl	80033d0 <HAL_UART_Transmit>
			for (int ii = 0; ii < UART_STRING_MAX_SIZE; ii++)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b7f      	cmp	r3, #127	; 0x7f
 800111c:	ddef      	ble.n	80010fe <transmit_messages_IT_handler+0x1a>
		for (int i = 0; i < TX_queue_buffer_write_counter; i++)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3301      	adds	r3, #1
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <transmit_messages_IT_handler+0x5c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4293      	cmp	r3, r2
 800112e:	dbe3      	blt.n	80010f8 <transmit_messages_IT_handler+0x14>
			}
		}
		TX_queue_buffer_write_counter = 0;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <transmit_messages_IT_handler+0x5c>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
	}
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200005f1 	.word	0x200005f1
 8001144:	2000039c 	.word	0x2000039c
 8001148:	20000640 	.word	0x20000640

0800114c <init_char_array_by_zero>:

void init_char_array_by_zero(uint8_t array_size, char* array_pointer)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < array_size; i++)
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e007      	b.n	800116e <init_char_array_by_zero+0x22>
	{
		*(array_pointer + i) = '0';
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	2230      	movs	r2, #48	; 0x30
 8001166:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < array_size; i++)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	429a      	cmp	r2, r3
 8001174:	dbf3      	blt.n	800115e <init_char_array_by_zero+0x12>
	}
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001186:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800118a:	490e      	ldr	r1, [pc, #56]	; (80011c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800118c:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <LoopForever+0xe>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a0:	4c0b      	ldr	r4, [pc, #44]	; (80011d0 <LoopForever+0x16>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ae:	f7ff fd15 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b2:	f003 fb73 	bl	800489c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b6:	f7ff fa13 	bl	80005e0 <main>

080011ba <LoopForever>:

LoopForever:
    b LoopForever
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
  ldr   r0, =_estack
 80011bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011c8:	0800523c 	.word	0x0800523c
  ldr r2, =_sbss
 80011cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011d0:	200006d8 	.word	0x200006d8

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>

080011d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f939 	bl	8001458 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f80e 	bl	8001208 <HAL_InitTick>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e001      	b.n	80011fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f8:	f7ff fbb4 	bl	8000964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011fc:	79fb      	ldrb	r3, [r7, #7]

}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_InitTick+0x68>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d022      	beq.n	8001262 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_InitTick+0x6c>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <HAL_InitTick+0x68>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001228:	fbb1 f3f3 	udiv	r3, r1, r3
 800122c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f944 	bl	80014be <HAL_SYSTICK_Config>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10f      	bne.n	800125c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b0f      	cmp	r3, #15
 8001240:	d809      	bhi.n	8001256 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001242:	2200      	movs	r2, #0
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	f04f 30ff 	mov.w	r0, #4294967295
 800124a:	f000 f910 	bl	800146e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <HAL_InitTick+0x70>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e007      	b.n	8001266 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	e004      	b.n	8001266 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e001      	b.n	8001266 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000008 	.word	0x20000008
 8001274:	20000000 	.word	0x20000000
 8001278:	20000004 	.word	0x20000004

0800127c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_IncTick+0x1c>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x20>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4413      	add	r3, r2
 800128a:	4a03      	ldr	r2, [pc, #12]	; (8001298 <HAL_IncTick+0x1c>)
 800128c:	6013      	str	r3, [r2, #0]
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	200006d0 	.word	0x200006d0
 800129c:	20000008 	.word	0x20000008

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	200006d0 	.word	0x200006d0

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db0b      	blt.n	8001346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f003 021f 	and.w	r2, r3, #31
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <__NVIC_EnableIRQ+0x38>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	2001      	movs	r0, #1
 800133e:	fa00 f202 	lsl.w	r2, r0, r2
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	; (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001424:	d301      	bcc.n	800142a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001426:	2301      	movs	r3, #1
 8001428:	e00f      	b.n	800144a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <SysTick_Config+0x40>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001432:	210f      	movs	r1, #15
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f7ff ff8e 	bl	8001358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SysTick_Config+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <SysTick_Config+0x40>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff29 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800147c:	f7ff ff40 	bl	8001300 <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff90 	bl	80013ac <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5f 	bl	8001358 <__NVIC_SetPriority>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff33 	bl	800131c <__NVIC_EnableIRQ>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffa4 	bl	8001414 <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d00d      	beq.n	800150a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2204      	movs	r2, #4
 80014f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e047      	b.n	800159a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 020e 	bic.w	r2, r2, #14
 8001518:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0201 	bic.w	r2, r2, #1
 8001528:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001538:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f003 021f 	and.w	r2, r3, #31
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	2101      	movs	r1, #1
 8001548:	fa01 f202 	lsl.w	r2, r1, r2
 800154c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001556:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00c      	beq.n	800157a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800156e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001578:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	4798      	blx	r3
    }
  }
  return status;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015b2:	e15a      	b.n	800186a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2101      	movs	r1, #1
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	4013      	ands	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 814c 	beq.w	8001864 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d00b      	beq.n	80015ec <HAL_GPIO_Init+0x48>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d007      	beq.n	80015ec <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015e0:	2b11      	cmp	r3, #17
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b12      	cmp	r3, #18
 80015ea:	d130      	bne.n	800164e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001622:	2201      	movs	r2, #1
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	f003 0201 	and.w	r2, r3, #1
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0xea>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b12      	cmp	r3, #18
 800168c:	d123      	bne.n	80016d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	220f      	movs	r2, #15
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	6939      	ldr	r1, [r7, #16]
 80016d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0203 	and.w	r2, r3, #3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 80a6 	beq.w	8001864 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001718:	4b5b      	ldr	r3, [pc, #364]	; (8001888 <HAL_GPIO_Init+0x2e4>)
 800171a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171c:	4a5a      	ldr	r2, [pc, #360]	; (8001888 <HAL_GPIO_Init+0x2e4>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6613      	str	r3, [r2, #96]	; 0x60
 8001724:	4b58      	ldr	r3, [pc, #352]	; (8001888 <HAL_GPIO_Init+0x2e4>)
 8001726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001730:	4a56      	ldr	r2, [pc, #344]	; (800188c <HAL_GPIO_Init+0x2e8>)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800175a:	d01f      	beq.n	800179c <HAL_GPIO_Init+0x1f8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a4c      	ldr	r2, [pc, #304]	; (8001890 <HAL_GPIO_Init+0x2ec>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d019      	beq.n	8001798 <HAL_GPIO_Init+0x1f4>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a4b      	ldr	r2, [pc, #300]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d013      	beq.n	8001794 <HAL_GPIO_Init+0x1f0>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a4a      	ldr	r2, [pc, #296]	; (8001898 <HAL_GPIO_Init+0x2f4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d00d      	beq.n	8001790 <HAL_GPIO_Init+0x1ec>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a49      	ldr	r2, [pc, #292]	; (800189c <HAL_GPIO_Init+0x2f8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d007      	beq.n	800178c <HAL_GPIO_Init+0x1e8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a48      	ldr	r2, [pc, #288]	; (80018a0 <HAL_GPIO_Init+0x2fc>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d101      	bne.n	8001788 <HAL_GPIO_Init+0x1e4>
 8001784:	2305      	movs	r3, #5
 8001786:	e00a      	b.n	800179e <HAL_GPIO_Init+0x1fa>
 8001788:	2306      	movs	r3, #6
 800178a:	e008      	b.n	800179e <HAL_GPIO_Init+0x1fa>
 800178c:	2304      	movs	r3, #4
 800178e:	e006      	b.n	800179e <HAL_GPIO_Init+0x1fa>
 8001790:	2303      	movs	r3, #3
 8001792:	e004      	b.n	800179e <HAL_GPIO_Init+0x1fa>
 8001794:	2302      	movs	r3, #2
 8001796:	e002      	b.n	800179e <HAL_GPIO_Init+0x1fa>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_GPIO_Init+0x1fa>
 800179c:	2300      	movs	r3, #0
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	f002 0203 	and.w	r2, r2, #3
 80017a4:	0092      	lsls	r2, r2, #2
 80017a6:	4093      	lsls	r3, r2
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ae:	4937      	ldr	r1, [pc, #220]	; (800188c <HAL_GPIO_Init+0x2e8>)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_GPIO_Init+0x300>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017e0:	4a30      	ldr	r2, [pc, #192]	; (80018a4 <HAL_GPIO_Init+0x300>)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_GPIO_Init+0x300>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800180a:	4a26      	ldr	r2, [pc, #152]	; (80018a4 <HAL_GPIO_Init+0x300>)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_GPIO_Init+0x300>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001834:	4a1b      	ldr	r2, [pc, #108]	; (80018a4 <HAL_GPIO_Init+0x300>)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_GPIO_Init+0x300>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_GPIO_Init+0x300>)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	f47f ae9d 	bne.w	80015b4 <HAL_GPIO_Init+0x10>
  }
}
 800187a:	bf00      	nop
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	40010000 	.word	0x40010000
 8001890:	48000400 	.word	0x48000400
 8001894:	48000800 	.word	0x48000800
 8001898:	48000c00 	.word	0x48000c00
 800189c:	48001000 	.word	0x48001000
 80018a0:	48001400 	.word	0x48001400
 80018a4:	40010400 	.word	0x40010400

080018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	43d9      	mvns	r1, r3
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	400b      	ands	r3, r1
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	619a      	str	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d141      	bne.n	800199e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800191a:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001926:	d131      	bne.n	800198c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001928:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800192e:	4a46      	ldr	r2, [pc, #280]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001934:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001938:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001940:	4a41      	ldr	r2, [pc, #260]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001946:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001948:	4b40      	ldr	r3, [pc, #256]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2232      	movs	r2, #50	; 0x32
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	4a3f      	ldr	r2, [pc, #252]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	0c9b      	lsrs	r3, r3, #18
 800195a:	3301      	adds	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800195e:	e002      	b.n	8001966 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3b01      	subs	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001972:	d102      	bne.n	800197a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f2      	bne.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800197a:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001986:	d158      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e057      	b.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001992:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001998:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800199c:	e04d      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a4:	d141      	bne.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b2:	d131      	bne.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ba:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019cc:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2232      	movs	r2, #50	; 0x32
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	0c9b      	lsrs	r3, r3, #18
 80019e6:	3301      	adds	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ea:	e002      	b.n	80019f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fe:	d102      	bne.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f2      	bne.n	80019ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a12:	d112      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e011      	b.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a28:	e007      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	431bde83 	.word	0x431bde83

08001a54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a62:	6093      	str	r3, [r2, #8]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40007000 	.word	0x40007000

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e308      	b.n	8002098 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d075      	beq.n	8001b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a92:	4ba3      	ldr	r3, [pc, #652]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a9c:	4ba0      	ldr	r3, [pc, #640]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3e>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x44>
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	4b99      	ldr	r3, [pc, #612]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d05b      	beq.n	8001b7c <HAL_RCC_OscConfig+0x108>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d157      	bne.n	8001b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e2e3      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad8:	d106      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x74>
 8001ada:	4b91      	ldr	r3, [pc, #580]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a90      	ldr	r2, [pc, #576]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e01d      	b.n	8001b24 <HAL_RCC_OscConfig+0xb0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x98>
 8001af2:	4b8b      	ldr	r3, [pc, #556]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a8a      	ldr	r2, [pc, #552]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b88      	ldr	r3, [pc, #544]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a87      	ldr	r2, [pc, #540]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0xb0>
 8001b0c:	4b84      	ldr	r3, [pc, #528]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a83      	ldr	r2, [pc, #524]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b81      	ldr	r3, [pc, #516]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a80      	ldr	r2, [pc, #512]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fbb8 	bl	80012a0 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fbb4 	bl	80012a0 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e2a8      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b46:	4b76      	ldr	r3, [pc, #472]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0xc0>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff fba4 	bl	80012a0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fba0 	bl	80012a0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e294      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6e:	4b6c      	ldr	r3, [pc, #432]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0xe8>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d075      	beq.n	8001c76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8a:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b94:	4b62      	ldr	r3, [pc, #392]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_OscConfig+0x136>
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x13c>
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11f      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb0:	4b5b      	ldr	r3, [pc, #364]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x154>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e267      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b55      	ldr	r3, [pc, #340]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	4952      	ldr	r1, [pc, #328]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bdc:	4b51      	ldr	r3, [pc, #324]	; (8001d24 <HAL_RCC_OscConfig+0x2b0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fb11 	bl	8001208 <HAL_InitTick>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d043      	beq.n	8001c74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e253      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a48      	ldr	r2, [pc, #288]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff fb4c 	bl	80012a0 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fb48 	bl	80012a0 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e23c      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1e:	4b40      	ldr	r3, [pc, #256]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	061b      	lsls	r3, r3, #24
 8001c38:	4939      	ldr	r1, [pc, #228]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
 8001c3e:	e01a      	b.n	8001c76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c40:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a36      	ldr	r2, [pc, #216]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb28 	bl	80012a0 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff fb24 	bl	80012a0 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e218      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c66:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x1e0>
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d03c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c90:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff fb01 	bl	80012a0 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fafd 	bl	80012a0 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1f1      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ef      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x22e>
 8001cc2:	e01b      	b.n	8001cfc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fae4 	bl	80012a0 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fae0 	bl	80012a0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1d4      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ef      	bne.n	8001cdc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80ab 	beq.w	8001e60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e005      	b.n	8001d2a <HAL_RCC_OscConfig+0x2b6>
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	20000004 	.word	0x20000004
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4baf      	ldr	r3, [pc, #700]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	4aae      	ldr	r2, [pc, #696]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	6593      	str	r3, [r2, #88]	; 0x58
 8001d3a:	4bac      	ldr	r3, [pc, #688]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d46:	2301      	movs	r3, #1
 8001d48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4a:	4ba9      	ldr	r3, [pc, #676]	; (8001ff0 <HAL_RCC_OscConfig+0x57c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d118      	bne.n	8001d88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d56:	4ba6      	ldr	r3, [pc, #664]	; (8001ff0 <HAL_RCC_OscConfig+0x57c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4aa5      	ldr	r2, [pc, #660]	; (8001ff0 <HAL_RCC_OscConfig+0x57c>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d62:	f7ff fa9d 	bl	80012a0 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6a:	f7ff fa99 	bl	80012a0 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e18d      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7c:	4b9c      	ldr	r3, [pc, #624]	; (8001ff0 <HAL_RCC_OscConfig+0x57c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <HAL_RCC_OscConfig+0x32e>
 8001d90:	4b96      	ldr	r3, [pc, #600]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	4a95      	ldr	r2, [pc, #596]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da0:	e024      	b.n	8001dec <HAL_RCC_OscConfig+0x378>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b05      	cmp	r3, #5
 8001da8:	d110      	bne.n	8001dcc <HAL_RCC_OscConfig+0x358>
 8001daa:	4b90      	ldr	r3, [pc, #576]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db0:	4a8e      	ldr	r2, [pc, #568]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dba:	4b8c      	ldr	r3, [pc, #560]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc0:	4a8a      	ldr	r2, [pc, #552]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dca:	e00f      	b.n	8001dec <HAL_RCC_OscConfig+0x378>
 8001dcc:	4b87      	ldr	r3, [pc, #540]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	4a86      	ldr	r2, [pc, #536]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ddc:	4b83      	ldr	r3, [pc, #524]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	4a82      	ldr	r2, [pc, #520]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d016      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7ff fa54 	bl	80012a0 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fa50 	bl	80012a0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e142      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e12:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ed      	beq.n	8001dfc <HAL_RCC_OscConfig+0x388>
 8001e20:	e015      	b.n	8001e4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff fa3d 	bl	80012a0 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7ff fa39 	bl	80012a0 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e12b      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ed      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e4e:	7ffb      	ldrb	r3, [r7, #31]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b65      	ldr	r3, [pc, #404]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	4a64      	ldr	r2, [pc, #400]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d03c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01c      	beq.n	8001eae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e74:	4b5d      	ldr	r3, [pc, #372]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e7a:	4a5c      	ldr	r2, [pc, #368]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff fa0c 	bl	80012a0 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e8c:	f7ff fa08 	bl	80012a0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e0fc      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e9e:	4b53      	ldr	r3, [pc, #332]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ef      	beq.n	8001e8c <HAL_RCC_OscConfig+0x418>
 8001eac:	e01b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eae:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eb4:	4a4d      	ldr	r2, [pc, #308]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f9ef 	bl	80012a0 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ec6:	f7ff f9eb 	bl	80012a0 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0df      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ed8:	4b44      	ldr	r3, [pc, #272]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ef      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80d3 	beq.w	8002096 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef0:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	f000 808d 	beq.w	8002018 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d15a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b39      	ldr	r3, [pc, #228]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a38      	ldr	r2, [pc, #224]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7ff f9c5 	bl	80012a0 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff f9c1 	bl	80012a0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0b5      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f38:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCC_OscConfig+0x580>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6a11      	ldr	r1, [r2, #32]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f48:	3a01      	subs	r2, #1
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	4311      	orrs	r1, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f52:	0212      	lsls	r2, r2, #8
 8001f54:	4311      	orrs	r1, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f5a:	0852      	lsrs	r2, r2, #1
 8001f5c:	3a01      	subs	r2, #1
 8001f5e:	0552      	lsls	r2, r2, #21
 8001f60:	4311      	orrs	r1, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f66:	0852      	lsrs	r2, r2, #1
 8001f68:	3a01      	subs	r2, #1
 8001f6a:	0652      	lsls	r2, r2, #25
 8001f6c:	4311      	orrs	r1, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f72:	06d2      	lsls	r2, r2, #27
 8001f74:	430a      	orrs	r2, r1
 8001f76:	491d      	ldr	r1, [pc, #116]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a17      	ldr	r2, [pc, #92]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff f984 	bl	80012a0 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff f980 	bl	80012a0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e074      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x528>
 8001fba:	e06c      	b.n	8002096 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fc6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fce:	f023 0303 	bic.w	r3, r3, #3
 8001fd2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fda:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff f95c 	bl	80012a0 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fea:	e00e      	b.n	800200a <HAL_RCC_OscConfig+0x596>
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff f952 	bl	80012a0 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e046      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_RCC_OscConfig+0x62c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x584>
 8002016:	e03e      	b.n	8002096 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e039      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_RCC_OscConfig+0x62c>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	429a      	cmp	r2, r3
 8002036:	d12c      	bne.n	8002092 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	3b01      	subs	r3, #1
 8002044:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d123      	bne.n	8002092 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d11b      	bne.n	8002092 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d113      	bne.n	8002092 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	3b01      	subs	r3, #1
 8002078:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d109      	bne.n	8002092 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	3b01      	subs	r3, #1
 800208c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e11e      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b91      	ldr	r3, [pc, #580]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d910      	bls.n	80020ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b8e      	ldr	r3, [pc, #568]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 020f 	bic.w	r2, r3, #15
 80020d2:	498c      	ldr	r1, [pc, #560]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b8a      	ldr	r3, [pc, #552]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e106      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d073      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d129      	bne.n	8002154 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002100:	4b81      	ldr	r3, [pc, #516]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0f4      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002110:	f000 f99e 	bl	8002450 <RCC_GetSysClockFreqFromPLLSource>
 8002114:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4a7c      	ldr	r2, [pc, #496]	; (800230c <HAL_RCC_ClockConfig+0x268>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d93f      	bls.n	800219e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800211e:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002132:	2b00      	cmp	r3, #0
 8002134:	d033      	beq.n	800219e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800213a:	2b00      	cmp	r3, #0
 800213c:	d12f      	bne.n	800219e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800213e:	4b72      	ldr	r3, [pc, #456]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002146:	4a70      	ldr	r2, [pc, #448]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e024      	b.n	800219e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d107      	bne.n	800216c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800215c:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0c6      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216c:	4b66      	ldr	r3, [pc, #408]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0be      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800217c:	f000 f8ce 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8002180:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4a61      	ldr	r2, [pc, #388]	; (800230c <HAL_RCC_ClockConfig+0x268>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d909      	bls.n	800219e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800218a:	4b5f      	ldr	r3, [pc, #380]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002192:	4a5d      	ldr	r2, [pc, #372]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002198:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b5a      	ldr	r3, [pc, #360]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4957      	ldr	r1, [pc, #348]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b0:	f7ff f876 	bl	80012a0 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff f872 	bl	80012a0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e095      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d023      	beq.n	8002234 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f8:	4b43      	ldr	r3, [pc, #268]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a42      	ldr	r2, [pc, #264]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002202:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002218:	4a3b      	ldr	r2, [pc, #236]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800221a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800221e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b39      	ldr	r3, [pc, #228]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4936      	ldr	r1, [pc, #216]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800222e:	4313      	orrs	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
 8002232:	e008      	b.n	8002246 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b80      	cmp	r3, #128	; 0x80
 8002238:	d105      	bne.n	8002246 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4a32      	ldr	r2, [pc, #200]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002244:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002246:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d21d      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 020f 	bic.w	r2, r3, #15
 800225c:	4929      	ldr	r1, [pc, #164]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002264:	f7ff f81c 	bl	80012a0 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7ff f818 	bl	80012a0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e03b      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d1ed      	bne.n	800226c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4917      	ldr	r1, [pc, #92]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	490f      	ldr	r1, [pc, #60]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ce:	f000 f825 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022d2:	4601      	mov	r1, r0
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_RCC_ClockConfig+0x26c>)
 80022e0:	5cd3      	ldrb	r3, [r2, r3]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_RCC_ClockConfig+0x270>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x274>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe ff88 	bl	8001208 <HAL_InitTick>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40022000 	.word	0x40022000
 8002308:	40021000 	.word	0x40021000
 800230c:	04c4b400 	.word	0x04c4b400
 8002310:	080051c8 	.word	0x080051c8
 8002314:	20000000 	.word	0x20000000
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b04      	cmp	r3, #4
 800232c:	d102      	bne.n	8002334 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800232e:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	e047      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d102      	bne.n	8002346 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e03e      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b0c      	cmp	r3, #12
 8002350:	d136      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3301      	adds	r3, #1
 8002368:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d10c      	bne.n	800238a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	4a16      	ldr	r2, [pc, #88]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800237a:	68d2      	ldr	r2, [r2, #12]
 800237c:	0a12      	lsrs	r2, r2, #8
 800237e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	617b      	str	r3, [r7, #20]
      break;
 8002388:	e00c      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002394:	68d2      	ldr	r2, [r2, #12]
 8002396:	0a12      	lsrs	r2, r2, #8
 8002398:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
      break;
 80023a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0e5b      	lsrs	r3, r3, #25
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	3301      	adds	r3, #1
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e001      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023c4:	693b      	ldr	r3, [r7, #16]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	00f42400 	.word	0x00f42400
 80023dc:	007a1200 	.word	0x007a1200

080023e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000000 	.word	0x20000000

080023f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023fc:	f7ff fff0 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002400:	4601      	mov	r1, r0
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	080051d8 	.word	0x080051d8

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002428:	f7ff ffda 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 800242c:	4601      	mov	r1, r0
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0adb      	lsrs	r3, r3, #11
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_RCC_GetPCLK2Freq+0x28>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	080051d8 	.word	0x080051d8

08002450 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3301      	adds	r3, #1
 800246c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d10c      	bne.n	800248e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002474:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800247e:	68d2      	ldr	r2, [r2, #12]
 8002480:	0a12      	lsrs	r2, r2, #8
 8002482:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
    break;
 800248c:	e00c      	b.n	80024a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800248e:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002498:	68d2      	ldr	r2, [r2, #12]
 800249a:	0a12      	lsrs	r2, r2, #8
 800249c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024a0:	fb02 f303 	mul.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    break;
 80024a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0e5b      	lsrs	r3, r3, #25
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	3301      	adds	r3, #1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024c2:	687b      	ldr	r3, [r7, #4]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40021000 	.word	0x40021000
 80024d4:	007a1200 	.word	0x007a1200
 80024d8:	00f42400 	.word	0x00f42400

080024dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024e4:	2300      	movs	r3, #0
 80024e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e8:	2300      	movs	r3, #0
 80024ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8098 	beq.w	800262a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fe:	4b43      	ldr	r3, [pc, #268]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10d      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	4a3f      	ldr	r2, [pc, #252]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6593      	str	r3, [r2, #88]	; 0x58
 8002516:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002526:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a39      	ldr	r2, [pc, #228]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002532:	f7fe feb5 	bl	80012a0 <HAL_GetTick>
 8002536:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002538:	e009      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253a:	f7fe feb1 	bl	80012a0 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d902      	bls.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	74fb      	strb	r3, [r7, #19]
        break;
 800254c:	e005      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0ef      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d159      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01e      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	d019      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002586:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002588:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	4a1b      	ldr	r2, [pc, #108]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025a8:	4a18      	ldr	r2, [pc, #96]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fe71 	bl	80012a0 <HAL_GetTick>
 80025be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c0:	e00b      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe fe6d 	bl	80012a0 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d902      	bls.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	74fb      	strb	r3, [r7, #19]
            break;
 80025d8:	e006      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ec      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10b      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002604:	e008      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	74bb      	strb	r3, [r7, #18]
 800260a:	e005      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800260c:	40021000 	.word	0x40021000
 8002610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002618:	7c7b      	ldrb	r3, [r7, #17]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4ba6      	ldr	r3, [pc, #664]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	4aa5      	ldr	r2, [pc, #660]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002636:	4ba0      	ldr	r3, [pc, #640]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f023 0203 	bic.w	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	499c      	ldr	r1, [pc, #624]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002658:	4b97      	ldr	r3, [pc, #604]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f023 020c 	bic.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4994      	ldr	r1, [pc, #592]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800267a:	4b8f      	ldr	r3, [pc, #572]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	498b      	ldr	r1, [pc, #556]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800269c:	4b86      	ldr	r3, [pc, #536]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	4983      	ldr	r1, [pc, #524]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026be:	4b7e      	ldr	r3, [pc, #504]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	497a      	ldr	r1, [pc, #488]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e0:	4b75      	ldr	r3, [pc, #468]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	4972      	ldr	r1, [pc, #456]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002702:	4b6d      	ldr	r3, [pc, #436]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	4969      	ldr	r1, [pc, #420]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002724:	4b64      	ldr	r3, [pc, #400]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4961      	ldr	r1, [pc, #388]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002746:	4b5c      	ldr	r3, [pc, #368]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	4958      	ldr	r1, [pc, #352]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002768:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	4950      	ldr	r1, [pc, #320]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002786:	d105      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002792:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027a0:	4b45      	ldr	r3, [pc, #276]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	4942      	ldr	r1, [pc, #264]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027be:	d105      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c0:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a3c      	ldr	r2, [pc, #240]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027d8:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4934      	ldr	r1, [pc, #208]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f6:	d105      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f8:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a2e      	ldr	r2, [pc, #184]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002802:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d015      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281e:	4926      	ldr	r1, [pc, #152]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800282e:	d105      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a20      	ldr	r2, [pc, #128]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	4918      	ldr	r1, [pc, #96]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002866:	d105      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002872:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002880:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	490a      	ldr	r1, [pc, #40]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800289e:	d105      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e049      	b.n	8002962 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe f862 	bl	80009ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 fb24 	bl	8002f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d001      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e04a      	b.n	8002a1a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a21      	ldr	r2, [pc, #132]	; (8002a28 <HAL_TIM_Base_Start_IT+0xbc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d018      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x6c>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ae:	d013      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x6c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_TIM_Base_Start_IT+0xc0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00e      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x6c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <HAL_TIM_Base_Start_IT+0xc4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d009      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x6c>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_TIM_Base_Start_IT+0xc8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x6c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a19      	ldr	r2, [pc, #100]	; (8002a38 <HAL_TIM_Base_Start_IT+0xcc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d115      	bne.n	8002a04 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <HAL_TIM_Base_Start_IT+0xd0>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d015      	beq.n	8002a16 <HAL_TIM_Base_Start_IT+0xaa>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d011      	beq.n	8002a16 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0201 	orr.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a02:	e008      	b.n	8002a16 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e000      	b.n	8002a18 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40000800 	.word	0x40000800
 8002a34:	40013400 	.word	0x40013400
 8002a38:	40014000 	.word	0x40014000
 8002a3c:	00010007 	.word	0x00010007

08002a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d122      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d11b      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0202 	mvn.w	r2, #2
 8002a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa42 	bl	8002f0c <HAL_TIM_IC_CaptureCallback>
 8002a88:	e005      	b.n	8002a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa34 	bl	8002ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fa45 	bl	8002f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0204 	mvn.w	r2, #4
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fa18 	bl	8002f0c <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa0a 	bl	8002ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fa1b 	bl	8002f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0208 	mvn.w	r2, #8
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2204      	movs	r2, #4
 8002b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f9ee 	bl	8002f0c <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f9e0 	bl	8002ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f9f1 	bl	8002f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b10      	cmp	r3, #16
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0210 	mvn.w	r2, #16
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f9c4 	bl	8002f0c <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f9b6 	bl	8002ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f9c7 	bl	8002f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0201 	mvn.w	r2, #1
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f990 	bl	8002ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bce:	2b80      	cmp	r3, #128	; 0x80
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d107      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fb64 	bl	80032b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfe:	d10e      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b80      	cmp	r3, #128	; 0x80
 8002c0c:	d107      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fb57 	bl	80032cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	d10e      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d107      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f975 	bl	8002f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d10e      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d107      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0220 	mvn.w	r2, #32
 8002c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fb17 	bl	80032a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c84:	d10f      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c94:	d107      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fb1d 	bl	80032e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc4:	d107      	bne.n	8002cd6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fb0f 	bl	80032f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce4:	d10f      	bne.n	8002d06 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf4:	d107      	bne.n	8002d06 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fb01 	bl	8003308 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d14:	d10f      	bne.n	8002d36 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d24:	d107      	bne.n	8002d36 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 faf3 	bl	800331c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_TIM_ConfigClockSource+0x18>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e0b9      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x18c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002d76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b70      	cmp	r3, #112	; 0x70
 8002d92:	d02e      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xb2>
 8002d94:	2b70      	cmp	r3, #112	; 0x70
 8002d96:	d812      	bhi.n	8002dbe <HAL_TIM_ConfigClockSource+0x7e>
 8002d98:	2b30      	cmp	r3, #48	; 0x30
 8002d9a:	f000 8084 	beq.w	8002ea6 <HAL_TIM_ConfigClockSource+0x166>
 8002d9e:	2b30      	cmp	r3, #48	; 0x30
 8002da0:	d806      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x70>
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d07f      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x166>
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d07d      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x166>
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d07b      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002dae:	e084      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8002db0:	2b50      	cmp	r3, #80	; 0x50
 8002db2:	d048      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x106>
 8002db4:	2b60      	cmp	r3, #96	; 0x60
 8002db6:	d056      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x126>
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d064      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8002dbc:	e07d      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8002dbe:	4a45      	ldr	r2, [pc, #276]	; (8002ed4 <HAL_TIM_ConfigClockSource+0x194>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d070      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x166>
 8002dc4:	4a43      	ldr	r2, [pc, #268]	; (8002ed4 <HAL_TIM_ConfigClockSource+0x194>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d809      	bhi.n	8002dde <HAL_TIM_ConfigClockSource+0x9e>
 8002dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dce:	d027      	beq.n	8002e20 <HAL_TIM_ConfigClockSource+0xe0>
 8002dd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002dd4:	d067      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x166>
 8002dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dda:	d06d      	beq.n	8002eb8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002ddc:	e06d      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8002dde:	4a3e      	ldr	r2, [pc, #248]	; (8002ed8 <HAL_TIM_ConfigClockSource+0x198>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d060      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x166>
 8002de4:	4a3d      	ldr	r2, [pc, #244]	; (8002edc <HAL_TIM_ConfigClockSource+0x19c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d05d      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x166>
 8002dea:	4a3d      	ldr	r2, [pc, #244]	; (8002ee0 <HAL_TIM_ConfigClockSource+0x1a0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d05a      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8002df0:	e063      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f000 f9ad 	bl	8003160 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	609a      	str	r2, [r3, #8]
      break;
 8002e1e:	e04c      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6899      	ldr	r1, [r3, #8]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f000 f996 	bl	8003160 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e42:	609a      	str	r2, [r3, #8]
      break;
 8002e44:	e039      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	461a      	mov	r2, r3
 8002e54:	f000 f908 	bl	8003068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2150      	movs	r1, #80	; 0x50
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f961 	bl	8003126 <TIM_ITRx_SetConfig>
      break;
 8002e64:	e029      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f000 f927 	bl	80030c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2160      	movs	r1, #96	; 0x60
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f951 	bl	8003126 <TIM_ITRx_SetConfig>
      break;
 8002e84:	e019      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f000 f8e8 	bl	8003068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2140      	movs	r1, #64	; 0x40
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f941 	bl	8003126 <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e009      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f000 f938 	bl	8003126 <TIM_ITRx_SetConfig>
        break;
 8002eb6:	e000      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8002eb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	00100020 	.word	0x00100020
 8002ed8:	00100040 	.word	0x00100040
 8002edc:	00100070 	.word	0x00100070
 8002ee0:	00100030 	.word	0x00100030

08002ee4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a3c      	ldr	r2, [pc, #240]	; (800304c <TIM_Base_SetConfig+0x104>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00f      	beq.n	8002f80 <TIM_Base_SetConfig+0x38>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f66:	d00b      	beq.n	8002f80 <TIM_Base_SetConfig+0x38>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a39      	ldr	r2, [pc, #228]	; (8003050 <TIM_Base_SetConfig+0x108>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d007      	beq.n	8002f80 <TIM_Base_SetConfig+0x38>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a38      	ldr	r2, [pc, #224]	; (8003054 <TIM_Base_SetConfig+0x10c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d003      	beq.n	8002f80 <TIM_Base_SetConfig+0x38>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a37      	ldr	r2, [pc, #220]	; (8003058 <TIM_Base_SetConfig+0x110>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d108      	bne.n	8002f92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a2d      	ldr	r2, [pc, #180]	; (800304c <TIM_Base_SetConfig+0x104>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01b      	beq.n	8002fd2 <TIM_Base_SetConfig+0x8a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa0:	d017      	beq.n	8002fd2 <TIM_Base_SetConfig+0x8a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <TIM_Base_SetConfig+0x108>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <TIM_Base_SetConfig+0x8a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a29      	ldr	r2, [pc, #164]	; (8003054 <TIM_Base_SetConfig+0x10c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00f      	beq.n	8002fd2 <TIM_Base_SetConfig+0x8a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a28      	ldr	r2, [pc, #160]	; (8003058 <TIM_Base_SetConfig+0x110>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <TIM_Base_SetConfig+0x8a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a27      	ldr	r2, [pc, #156]	; (800305c <TIM_Base_SetConfig+0x114>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <TIM_Base_SetConfig+0x8a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a26      	ldr	r2, [pc, #152]	; (8003060 <TIM_Base_SetConfig+0x118>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_Base_SetConfig+0x8a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a25      	ldr	r2, [pc, #148]	; (8003064 <TIM_Base_SetConfig+0x11c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <TIM_Base_SetConfig+0x104>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00f      	beq.n	8003030 <TIM_Base_SetConfig+0xe8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a11      	ldr	r2, [pc, #68]	; (8003058 <TIM_Base_SetConfig+0x110>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00b      	beq.n	8003030 <TIM_Base_SetConfig+0xe8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a10      	ldr	r2, [pc, #64]	; (800305c <TIM_Base_SetConfig+0x114>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d007      	beq.n	8003030 <TIM_Base_SetConfig+0xe8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a0f      	ldr	r2, [pc, #60]	; (8003060 <TIM_Base_SetConfig+0x118>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d003      	beq.n	8003030 <TIM_Base_SetConfig+0xe8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <TIM_Base_SetConfig+0x11c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d103      	bne.n	8003038 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	615a      	str	r2, [r3, #20]
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40012c00 	.word	0x40012c00
 8003050:	40000400 	.word	0x40000400
 8003054:	40000800 	.word	0x40000800
 8003058:	40013400 	.word	0x40013400
 800305c:	40014000 	.word	0x40014000
 8003060:	40014400 	.word	0x40014400
 8003064:	40014800 	.word	0x40014800

08003068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f023 0201 	bic.w	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f023 030a 	bic.w	r3, r3, #10
 80030a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b087      	sub	sp, #28
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f023 0210 	bic.w	r2, r3, #16
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	031b      	lsls	r3, r3, #12
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003126:	b480      	push	{r7}
 8003128:	b085      	sub	sp, #20
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800313c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	f043 0307 	orr.w	r3, r3, #7
 800314c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	609a      	str	r2, [r3, #8]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800317a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	021a      	lsls	r2, r3, #8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	431a      	orrs	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4313      	orrs	r3, r2
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	609a      	str	r2, [r3, #8]
}
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e065      	b.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a2c      	ldr	r2, [pc, #176]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a2b      	ldr	r2, [pc, #172]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d108      	bne.n	80031fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003208:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d018      	beq.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322e:	d013      	beq.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a18      	ldr	r2, [pc, #96]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00e      	beq.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d009      	beq.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a12      	ldr	r2, [pc, #72]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d004      	beq.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d10c      	bne.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800325e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	4313      	orrs	r3, r2
 8003268:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40012c00 	.word	0x40012c00
 8003294:	40013400 	.word	0x40013400
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800
 80032a0:	40014000 	.word	0x40014000

080032a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e042      	b.n	80033c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fd fb69 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2224      	movs	r2, #36	; 0x24
 800335e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fb38 	bl	80039e8 <UART_SetConfig>
 8003378:	4603      	mov	r3, r0
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e022      	b.n	80033c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fdd4 	bl	8003f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800339e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fe5b 	bl	800407c <UART_CheckIdleState>
 80033c6:	4603      	mov	r3, r0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	f040 8083 	bne.w	80034f2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_UART_Transmit+0x28>
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e07b      	b.n	80034f4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_UART_Transmit+0x3a>
 8003406:	2302      	movs	r3, #2
 8003408:	e074      	b.n	80034f4 <HAL_UART_Transmit+0x124>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2221      	movs	r2, #33	; 0x21
 800341e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003422:	f7fd ff3d 	bl	80012a0 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	88fa      	ldrh	r2, [r7, #6]
 800342c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003440:	d108      	bne.n	8003454 <HAL_UART_Transmit+0x84>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	e003      	b.n	800345c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003464:	e02c      	b.n	80034c0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 fe4b 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e039      	b.n	80034f4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003494:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3302      	adds	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e007      	b.n	80034ae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1cc      	bne.n	8003466 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	2140      	movs	r1, #64	; 0x40
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 fe18 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e006      	b.n	80034f4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003510:	2b20      	cmp	r3, #32
 8003512:	f040 80bc 	bne.w	800368e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_UART_Receive_IT+0x26>
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0b4      	b.n	8003690 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_UART_Receive_IT+0x38>
 8003530:	2302      	movs	r3, #2
 8003532:	e0ad      	b.n	8003690 <HAL_UART_Receive_IT+0x194>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	88fa      	ldrh	r2, [r7, #6]
 800354e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003560:	d10e      	bne.n	8003580 <HAL_UART_Receive_IT+0x84>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d105      	bne.n	8003576 <HAL_UART_Receive_IT+0x7a>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003570:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003574:	e02d      	b.n	80035d2 <HAL_UART_Receive_IT+0xd6>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800357e:	e028      	b.n	80035d2 <HAL_UART_Receive_IT+0xd6>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10d      	bne.n	80035a4 <HAL_UART_Receive_IT+0xa8>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <HAL_UART_Receive_IT+0x9e>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	22ff      	movs	r2, #255	; 0xff
 8003594:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003598:	e01b      	b.n	80035d2 <HAL_UART_Receive_IT+0xd6>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	227f      	movs	r2, #127	; 0x7f
 800359e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035a2:	e016      	b.n	80035d2 <HAL_UART_Receive_IT+0xd6>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ac:	d10d      	bne.n	80035ca <HAL_UART_Receive_IT+0xce>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <HAL_UART_Receive_IT+0xc4>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	227f      	movs	r2, #127	; 0x7f
 80035ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035be:	e008      	b.n	80035d2 <HAL_UART_Receive_IT+0xd6>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	223f      	movs	r2, #63	; 0x3f
 80035c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035c8:	e003      	b.n	80035d2 <HAL_UART_Receive_IT+0xd6>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2222      	movs	r2, #34	; 0x22
 80035de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035fa:	d12a      	bne.n	8003652 <HAL_UART_Receive_IT+0x156>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003602:	88fa      	ldrh	r2, [r7, #6]
 8003604:	429a      	cmp	r2, r3
 8003606:	d324      	bcc.n	8003652 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003610:	d107      	bne.n	8003622 <HAL_UART_Receive_IT+0x126>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d103      	bne.n	8003622 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a1f      	ldr	r2, [pc, #124]	; (800369c <HAL_UART_Receive_IT+0x1a0>)
 800361e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003620:	e002      	b.n	8003628 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <HAL_UART_Receive_IT+0x1a4>)
 8003626:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	e01b      	b.n	800368a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365a:	d107      	bne.n	800366c <HAL_UART_Receive_IT+0x170>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d103      	bne.n	800366c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a0f      	ldr	r2, [pc, #60]	; (80036a4 <HAL_UART_Receive_IT+0x1a8>)
 8003668:	66da      	str	r2, [r3, #108]	; 0x6c
 800366a:	e002      	b.n	8003672 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a0e      	ldr	r2, [pc, #56]	; (80036a8 <HAL_UART_Receive_IT+0x1ac>)
 8003670:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003688:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	08004511 	.word	0x08004511
 80036a0:	08004409 	.word	0x08004409
 80036a4:	0800435d 	.word	0x0800435d
 80036a8:	080042b3 	.word	0x080042b3

080036ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d118      	bne.n	800370e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d013      	beq.n	800370e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d104      	bne.n	80036fa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8145 	beq.w	800398e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
      }
      return;
 800370c:	e13f      	b.n	800398e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80e8 	beq.w	80038e6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4ba1      	ldr	r3, [pc, #644]	; (80039a0 <HAL_UART_IRQHandler+0x2f4>)
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4ba0      	ldr	r3, [pc, #640]	; (80039a4 <HAL_UART_IRQHandler+0x2f8>)
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80dd 	beq.w	80038e6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d010      	beq.n	8003758 <HAL_UART_IRQHandler+0xac>
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2201      	movs	r2, #1
 8003746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d010      	beq.n	8003784 <HAL_UART_IRQHandler+0xd8>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00b      	beq.n	8003784 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2202      	movs	r2, #2
 8003772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f043 0204 	orr.w	r2, r3, #4
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d010      	beq.n	80037b0 <HAL_UART_IRQHandler+0x104>
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2204      	movs	r2, #4
 800379e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a6:	f043 0202 	orr.w	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d015      	beq.n	80037e6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d104      	bne.n	80037ce <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4b76      	ldr	r3, [pc, #472]	; (80039a0 <HAL_UART_IRQHandler+0x2f4>)
 80037c8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2208      	movs	r2, #8
 80037d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f043 0208 	orr.w	r2, r3, #8
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d011      	beq.n	8003814 <HAL_UART_IRQHandler+0x168>
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00c      	beq.n	8003814 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80b9 	beq.w	8003992 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d011      	beq.n	800384e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d104      	bne.n	800383e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b40      	cmp	r3, #64	; 0x40
 8003862:	d004      	beq.n	800386e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800386a:	2b00      	cmp	r3, #0
 800386c:	d031      	beq.n	80038d2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fccc 	bl	800420c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	d123      	bne.n	80038ca <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003890:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003896:	2b00      	cmp	r3, #0
 8003898:	d013      	beq.n	80038c2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800389e:	4a42      	ldr	r2, [pc, #264]	; (80039a8 <HAL_UART_IRQHandler+0x2fc>)
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fe15 	bl	80014d6 <HAL_DMA_Abort_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d017      	beq.n	80038e2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80038bc:	4610      	mov	r0, r2
 80038be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e00f      	b.n	80038e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f886 	bl	80039d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e00b      	b.n	80038e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f882 	bl	80039d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	e007      	b.n	80038e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f87e 	bl	80039d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80038e0:	e057      	b.n	8003992 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e2:	bf00      	nop
    return;
 80038e4:	e055      	b.n	8003992 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <HAL_UART_IRQHandler+0x260>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003902:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fe87 	bl	8004618 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800390a:	e045      	b.n	8003998 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d012      	beq.n	800393c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	2b00      	cmp	r3, #0
 8003930:	d031      	beq.n	8003996 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
    }
    return;
 800393a:	e02c      	b.n	8003996 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_UART_IRQHandler+0x2ac>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fc94 	bl	800427e <UART_EndTransmit_IT>
    return;
 8003956:	e01f      	b.n	8003998 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_UART_IRQHandler+0x2c8>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fe67 	bl	8004640 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003972:	e011      	b.n	8003998 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00c      	beq.n	8003998 <HAL_UART_IRQHandler+0x2ec>
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	da09      	bge.n	8003998 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fe51 	bl	800462c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800398a:	bf00      	nop
 800398c:	e004      	b.n	8003998 <HAL_UART_IRQHandler+0x2ec>
      return;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <HAL_UART_IRQHandler+0x2ec>
    return;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <HAL_UART_IRQHandler+0x2ec>
    return;
 8003996:	bf00      	nop
  }
}
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	10000001 	.word	0x10000001
 80039a4:	04000120 	.word	0x04000120
 80039a8:	08004253 	.word	0x08004253

080039ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80039ec:	b088      	sub	sp, #32
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4bb0      	ldr	r3, [pc, #704]	; (8003ce0 <UART_SetConfig+0x2f8>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6812      	ldr	r2, [r2, #0]
 8003a26:	69f9      	ldr	r1, [r7, #28]
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4aa5      	ldr	r2, [pc, #660]	; (8003ce4 <UART_SetConfig+0x2fc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	69f9      	ldr	r1, [r7, #28]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	f023 010f 	bic.w	r1, r3, #15
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a96      	ldr	r2, [pc, #600]	; (8003ce8 <UART_SetConfig+0x300>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d121      	bne.n	8003ad8 <UART_SetConfig+0xf0>
 8003a94:	4b95      	ldr	r3, [pc, #596]	; (8003cec <UART_SetConfig+0x304>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d816      	bhi.n	8003ad0 <UART_SetConfig+0xe8>
 8003aa2:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <UART_SetConfig+0xc0>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003ac5 	.word	0x08003ac5
 8003ab0:	08003abf 	.word	0x08003abf
 8003ab4:	08003acb 	.word	0x08003acb
 8003ab8:	2301      	movs	r3, #1
 8003aba:	76fb      	strb	r3, [r7, #27]
 8003abc:	e0be      	b.n	8003c3c <UART_SetConfig+0x254>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	76fb      	strb	r3, [r7, #27]
 8003ac2:	e0bb      	b.n	8003c3c <UART_SetConfig+0x254>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	76fb      	strb	r3, [r7, #27]
 8003ac8:	e0b8      	b.n	8003c3c <UART_SetConfig+0x254>
 8003aca:	2308      	movs	r3, #8
 8003acc:	76fb      	strb	r3, [r7, #27]
 8003ace:	e0b5      	b.n	8003c3c <UART_SetConfig+0x254>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	76fb      	strb	r3, [r7, #27]
 8003ad4:	bf00      	nop
 8003ad6:	e0b1      	b.n	8003c3c <UART_SetConfig+0x254>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a84      	ldr	r2, [pc, #528]	; (8003cf0 <UART_SetConfig+0x308>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d134      	bne.n	8003b4c <UART_SetConfig+0x164>
 8003ae2:	4b82      	ldr	r3, [pc, #520]	; (8003cec <UART_SetConfig+0x304>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b0c      	cmp	r3, #12
 8003aee:	d829      	bhi.n	8003b44 <UART_SetConfig+0x15c>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <UART_SetConfig+0x110>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b2d 	.word	0x08003b2d
 8003afc:	08003b45 	.word	0x08003b45
 8003b00:	08003b45 	.word	0x08003b45
 8003b04:	08003b45 	.word	0x08003b45
 8003b08:	08003b39 	.word	0x08003b39
 8003b0c:	08003b45 	.word	0x08003b45
 8003b10:	08003b45 	.word	0x08003b45
 8003b14:	08003b45 	.word	0x08003b45
 8003b18:	08003b33 	.word	0x08003b33
 8003b1c:	08003b45 	.word	0x08003b45
 8003b20:	08003b45 	.word	0x08003b45
 8003b24:	08003b45 	.word	0x08003b45
 8003b28:	08003b3f 	.word	0x08003b3f
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	76fb      	strb	r3, [r7, #27]
 8003b30:	e084      	b.n	8003c3c <UART_SetConfig+0x254>
 8003b32:	2302      	movs	r3, #2
 8003b34:	76fb      	strb	r3, [r7, #27]
 8003b36:	e081      	b.n	8003c3c <UART_SetConfig+0x254>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	76fb      	strb	r3, [r7, #27]
 8003b3c:	e07e      	b.n	8003c3c <UART_SetConfig+0x254>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	76fb      	strb	r3, [r7, #27]
 8003b42:	e07b      	b.n	8003c3c <UART_SetConfig+0x254>
 8003b44:	2310      	movs	r3, #16
 8003b46:	76fb      	strb	r3, [r7, #27]
 8003b48:	bf00      	nop
 8003b4a:	e077      	b.n	8003c3c <UART_SetConfig+0x254>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a68      	ldr	r2, [pc, #416]	; (8003cf4 <UART_SetConfig+0x30c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d120      	bne.n	8003b98 <UART_SetConfig+0x1b0>
 8003b56:	4b65      	ldr	r3, [pc, #404]	; (8003cec <UART_SetConfig+0x304>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d00f      	beq.n	8003b84 <UART_SetConfig+0x19c>
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d802      	bhi.n	8003b6e <UART_SetConfig+0x186>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <UART_SetConfig+0x190>
 8003b6c:	e010      	b.n	8003b90 <UART_SetConfig+0x1a8>
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d005      	beq.n	8003b7e <UART_SetConfig+0x196>
 8003b72:	2b30      	cmp	r3, #48	; 0x30
 8003b74:	d009      	beq.n	8003b8a <UART_SetConfig+0x1a2>
 8003b76:	e00b      	b.n	8003b90 <UART_SetConfig+0x1a8>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	76fb      	strb	r3, [r7, #27]
 8003b7c:	e05e      	b.n	8003c3c <UART_SetConfig+0x254>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	76fb      	strb	r3, [r7, #27]
 8003b82:	e05b      	b.n	8003c3c <UART_SetConfig+0x254>
 8003b84:	2304      	movs	r3, #4
 8003b86:	76fb      	strb	r3, [r7, #27]
 8003b88:	e058      	b.n	8003c3c <UART_SetConfig+0x254>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	76fb      	strb	r3, [r7, #27]
 8003b8e:	e055      	b.n	8003c3c <UART_SetConfig+0x254>
 8003b90:	2310      	movs	r3, #16
 8003b92:	76fb      	strb	r3, [r7, #27]
 8003b94:	bf00      	nop
 8003b96:	e051      	b.n	8003c3c <UART_SetConfig+0x254>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a56      	ldr	r2, [pc, #344]	; (8003cf8 <UART_SetConfig+0x310>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d120      	bne.n	8003be4 <UART_SetConfig+0x1fc>
 8003ba2:	4b52      	ldr	r3, [pc, #328]	; (8003cec <UART_SetConfig+0x304>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d00f      	beq.n	8003bd0 <UART_SetConfig+0x1e8>
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d802      	bhi.n	8003bba <UART_SetConfig+0x1d2>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <UART_SetConfig+0x1dc>
 8003bb8:	e010      	b.n	8003bdc <UART_SetConfig+0x1f4>
 8003bba:	2b80      	cmp	r3, #128	; 0x80
 8003bbc:	d005      	beq.n	8003bca <UART_SetConfig+0x1e2>
 8003bbe:	2bc0      	cmp	r3, #192	; 0xc0
 8003bc0:	d009      	beq.n	8003bd6 <UART_SetConfig+0x1ee>
 8003bc2:	e00b      	b.n	8003bdc <UART_SetConfig+0x1f4>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	76fb      	strb	r3, [r7, #27]
 8003bc8:	e038      	b.n	8003c3c <UART_SetConfig+0x254>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	76fb      	strb	r3, [r7, #27]
 8003bce:	e035      	b.n	8003c3c <UART_SetConfig+0x254>
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	76fb      	strb	r3, [r7, #27]
 8003bd4:	e032      	b.n	8003c3c <UART_SetConfig+0x254>
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	76fb      	strb	r3, [r7, #27]
 8003bda:	e02f      	b.n	8003c3c <UART_SetConfig+0x254>
 8003bdc:	2310      	movs	r3, #16
 8003bde:	76fb      	strb	r3, [r7, #27]
 8003be0:	bf00      	nop
 8003be2:	e02b      	b.n	8003c3c <UART_SetConfig+0x254>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a3e      	ldr	r2, [pc, #248]	; (8003ce4 <UART_SetConfig+0x2fc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d124      	bne.n	8003c38 <UART_SetConfig+0x250>
 8003bee:	4b3f      	ldr	r3, [pc, #252]	; (8003cec <UART_SetConfig+0x304>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfc:	d012      	beq.n	8003c24 <UART_SetConfig+0x23c>
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c02:	d802      	bhi.n	8003c0a <UART_SetConfig+0x222>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <UART_SetConfig+0x230>
 8003c08:	e012      	b.n	8003c30 <UART_SetConfig+0x248>
 8003c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c0e:	d006      	beq.n	8003c1e <UART_SetConfig+0x236>
 8003c10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c14:	d009      	beq.n	8003c2a <UART_SetConfig+0x242>
 8003c16:	e00b      	b.n	8003c30 <UART_SetConfig+0x248>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	76fb      	strb	r3, [r7, #27]
 8003c1c:	e00e      	b.n	8003c3c <UART_SetConfig+0x254>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	76fb      	strb	r3, [r7, #27]
 8003c22:	e00b      	b.n	8003c3c <UART_SetConfig+0x254>
 8003c24:	2304      	movs	r3, #4
 8003c26:	76fb      	strb	r3, [r7, #27]
 8003c28:	e008      	b.n	8003c3c <UART_SetConfig+0x254>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	76fb      	strb	r3, [r7, #27]
 8003c2e:	e005      	b.n	8003c3c <UART_SetConfig+0x254>
 8003c30:	2310      	movs	r3, #16
 8003c32:	76fb      	strb	r3, [r7, #27]
 8003c34:	bf00      	nop
 8003c36:	e001      	b.n	8003c3c <UART_SetConfig+0x254>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <UART_SetConfig+0x2fc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	f040 80a1 	bne.w	8003d8a <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c48:	7efb      	ldrb	r3, [r7, #27]
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d823      	bhi.n	8003c96 <UART_SetConfig+0x2ae>
 8003c4e:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <UART_SetConfig+0x26c>)
 8003c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c54:	08003c79 	.word	0x08003c79
 8003c58:	08003c97 	.word	0x08003c97
 8003c5c:	08003c81 	.word	0x08003c81
 8003c60:	08003c97 	.word	0x08003c97
 8003c64:	08003c87 	.word	0x08003c87
 8003c68:	08003c97 	.word	0x08003c97
 8003c6c:	08003c97 	.word	0x08003c97
 8003c70:	08003c97 	.word	0x08003c97
 8003c74:	08003c8f 	.word	0x08003c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c78:	f7fe fbbe 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8003c7c:	6178      	str	r0, [r7, #20]
        break;
 8003c7e:	e00f      	b.n	8003ca0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c80:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <UART_SetConfig+0x314>)
 8003c82:	617b      	str	r3, [r7, #20]
        break;
 8003c84:	e00c      	b.n	8003ca0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c86:	f7fe fb49 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003c8a:	6178      	str	r0, [r7, #20]
        break;
 8003c8c:	e008      	b.n	8003ca0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c92:	617b      	str	r3, [r7, #20]
        break;
 8003c94:	e004      	b.n	8003ca0 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	76bb      	strb	r3, [r7, #26]
        break;
 8003c9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8130 	beq.w	8003f08 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <UART_SetConfig+0x318>)
 8003cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d305      	bcc.n	8003cd8 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d915      	bls.n	8003d04 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	76bb      	strb	r3, [r7, #26]
 8003cdc:	e114      	b.n	8003f08 <UART_SetConfig+0x520>
 8003cde:	bf00      	nop
 8003ce0:	cfff69f3 	.word	0xcfff69f3
 8003ce4:	40008000 	.word	0x40008000
 8003ce8:	40013800 	.word	0x40013800
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40004400 	.word	0x40004400
 8003cf4:	40004800 	.word	0x40004800
 8003cf8:	40004c00 	.word	0x40004c00
 8003cfc:	00f42400 	.word	0x00f42400
 8003d00:	080051e0 	.word	0x080051e0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f04f 0100 	mov.w	r1, #0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	4a87      	ldr	r2, [pc, #540]	; (8003f30 <UART_SetConfig+0x548>)
 8003d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f04f 0400 	mov.w	r4, #0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4623      	mov	r3, r4
 8003d20:	f7fc fade 	bl	80002e0 <__aeabi_uldivmod>
 8003d24:	4603      	mov	r3, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4622      	mov	r2, r4
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	f04f 0400 	mov.w	r4, #0
 8003d34:	0214      	lsls	r4, r2, #8
 8003d36:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d3a:	020b      	lsls	r3, r1, #8
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6852      	ldr	r2, [r2, #4]
 8003d40:	0852      	lsrs	r2, r2, #1
 8003d42:	4611      	mov	r1, r2
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	eb13 0b01 	adds.w	fp, r3, r1
 8003d4c:	eb44 0c02 	adc.w	ip, r4, r2
 8003d50:	4658      	mov	r0, fp
 8003d52:	4661      	mov	r1, ip
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f04f 0400 	mov.w	r4, #0
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4623      	mov	r3, r4
 8003d60:	f7fc fabe 	bl	80002e0 <__aeabi_uldivmod>
 8003d64:	4603      	mov	r3, r0
 8003d66:	460c      	mov	r4, r1
 8003d68:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d70:	d308      	bcc.n	8003d84 <UART_SetConfig+0x39c>
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d78:	d204      	bcs.n	8003d84 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	e0c1      	b.n	8003f08 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	76bb      	strb	r3, [r7, #26]
 8003d88:	e0be      	b.n	8003f08 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d92:	d164      	bne.n	8003e5e <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8003d94:	7efb      	ldrb	r3, [r7, #27]
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d827      	bhi.n	8003dea <UART_SetConfig+0x402>
 8003d9a:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <UART_SetConfig+0x3b8>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003dc5 	.word	0x08003dc5
 8003da4:	08003dcd 	.word	0x08003dcd
 8003da8:	08003dd5 	.word	0x08003dd5
 8003dac:	08003deb 	.word	0x08003deb
 8003db0:	08003ddb 	.word	0x08003ddb
 8003db4:	08003deb 	.word	0x08003deb
 8003db8:	08003deb 	.word	0x08003deb
 8003dbc:	08003deb 	.word	0x08003deb
 8003dc0:	08003de3 	.word	0x08003de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f7fe fb18 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8003dc8:	6178      	str	r0, [r7, #20]
        break;
 8003dca:	e013      	b.n	8003df4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dcc:	f7fe fb2a 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8003dd0:	6178      	str	r0, [r7, #20]
        break;
 8003dd2:	e00f      	b.n	8003df4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd4:	4b57      	ldr	r3, [pc, #348]	; (8003f34 <UART_SetConfig+0x54c>)
 8003dd6:	617b      	str	r3, [r7, #20]
        break;
 8003dd8:	e00c      	b.n	8003df4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dda:	f7fe fa9f 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003dde:	6178      	str	r0, [r7, #20]
        break;
 8003de0:	e008      	b.n	8003df4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de6:	617b      	str	r3, [r7, #20]
        break;
 8003de8:	e004      	b.n	8003df4 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	76bb      	strb	r3, [r7, #26]
        break;
 8003df2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 8086 	beq.w	8003f08 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	4a4b      	ldr	r2, [pc, #300]	; (8003f30 <UART_SetConfig+0x548>)
 8003e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e06:	461a      	mov	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e0e:	005a      	lsls	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	085b      	lsrs	r3, r3, #1
 8003e16:	441a      	add	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	2b0f      	cmp	r3, #15
 8003e28:	d916      	bls.n	8003e58 <UART_SetConfig+0x470>
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e30:	d212      	bcs.n	8003e58 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f023 030f 	bic.w	r3, r3, #15
 8003e3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	085b      	lsrs	r3, r3, #1
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	89fb      	ldrh	r3, [r7, #14]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	89fa      	ldrh	r2, [r7, #14]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	e057      	b.n	8003f08 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	76bb      	strb	r3, [r7, #26]
 8003e5c:	e054      	b.n	8003f08 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e5e:	7efb      	ldrb	r3, [r7, #27]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d828      	bhi.n	8003eb6 <UART_SetConfig+0x4ce>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <UART_SetConfig+0x484>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003e99 	.word	0x08003e99
 8003e74:	08003ea1 	.word	0x08003ea1
 8003e78:	08003eb7 	.word	0x08003eb7
 8003e7c:	08003ea7 	.word	0x08003ea7
 8003e80:	08003eb7 	.word	0x08003eb7
 8003e84:	08003eb7 	.word	0x08003eb7
 8003e88:	08003eb7 	.word	0x08003eb7
 8003e8c:	08003eaf 	.word	0x08003eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e90:	f7fe fab2 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8003e94:	6178      	str	r0, [r7, #20]
        break;
 8003e96:	e013      	b.n	8003ec0 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e98:	f7fe fac4 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8003e9c:	6178      	str	r0, [r7, #20]
        break;
 8003e9e:	e00f      	b.n	8003ec0 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea0:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <UART_SetConfig+0x54c>)
 8003ea2:	617b      	str	r3, [r7, #20]
        break;
 8003ea4:	e00c      	b.n	8003ec0 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea6:	f7fe fa39 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003eaa:	6178      	str	r0, [r7, #20]
        break;
 8003eac:	e008      	b.n	8003ec0 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb2:	617b      	str	r3, [r7, #20]
        break;
 8003eb4:	e004      	b.n	8003ec0 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	76bb      	strb	r3, [r7, #26]
        break;
 8003ebe:	bf00      	nop
    }

    if (pclk != 0U)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d020      	beq.n	8003f08 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	4a19      	ldr	r2, [pc, #100]	; (8003f30 <UART_SetConfig+0x548>)
 8003ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	441a      	add	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b0f      	cmp	r3, #15
 8003ef0:	d908      	bls.n	8003f04 <UART_SetConfig+0x51c>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef8:	d204      	bcs.n	8003f04 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	e001      	b.n	8003f08 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003f24:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003f30:	080051e0 	.word	0x080051e0
 8003f34:	00f42400 	.word	0x00f42400

08003f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01a      	beq.n	800404e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004036:	d10a      	bne.n	800404e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
  }
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af02      	add	r7, sp, #8
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800408c:	f7fd f908 	bl	80012a0 <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b08      	cmp	r3, #8
 800409e:	d10e      	bne.n	80040be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f82c 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e022      	b.n	8004104 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d10e      	bne.n	80040ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f816 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e00c      	b.n	8004104 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411c:	e062      	b.n	80041e4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d05e      	beq.n	80041e4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7fd f8bb 	bl	80012a0 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <UART_WaitOnFlagUntilTimeout+0x30>
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d11d      	bne.n	8004178 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800414a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e045      	b.n	8004204 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d02e      	beq.n	80041e4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004194:	d126      	bne.n	80041e4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800419e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e00f      	b.n	8004204 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d08d      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004222:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7ff fbaf 	bl	80039d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004294:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff fb81 	bl	80039ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80042c0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c8:	2b22      	cmp	r3, #34	; 0x22
 80042ca:	d13b      	bne.n	8004344 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042d4:	89bb      	ldrh	r3, [r7, #12]
 80042d6:	b2d9      	uxtb	r1, r3
 80042d8:	89fb      	ldrh	r3, [r7, #14]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e0:	400a      	ands	r2, r1
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d122      	bne.n	8004354 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800431c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff fb3f 	bl	80039c0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004342:	e007      	b.n	8004354 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699a      	ldr	r2, [r3, #24]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0208 	orr.w	r2, r2, #8
 8004352:	619a      	str	r2, [r3, #24]
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800436a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004372:	2b22      	cmp	r3, #34	; 0x22
 8004374:	d13b      	bne.n	80043ee <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004382:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004384:	89ba      	ldrh	r2, [r7, #12]
 8004386:	89fb      	ldrh	r3, [r7, #14]
 8004388:	4013      	ands	r3, r2
 800438a:	b29a      	uxth	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004394:	1c9a      	adds	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d122      	bne.n	80043fe <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043c6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff faea 	bl	80039c0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043ec:	e007      	b.n	80043fe <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0208 	orr.w	r2, r2, #8
 80043fc:	619a      	str	r2, [r3, #24]
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004416:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441e:	2b22      	cmp	r3, #34	; 0x22
 8004420:	d168      	bne.n	80044f4 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004428:	81fb      	strh	r3, [r7, #14]
 800442a:	e03f      	b.n	80044ac <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004434:	893b      	ldrh	r3, [r7, #8]
 8004436:	b2d9      	uxtb	r1, r3
 8004438:	89bb      	ldrh	r3, [r7, #12]
 800443a:	b2da      	uxtb	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	400a      	ands	r2, r1
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d11b      	bne.n	80044a6 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800447c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fa8d 	bl	80039c0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80044a6:	89fb      	ldrh	r3, [r7, #14]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	81fb      	strh	r3, [r7, #14]
 80044ac:	89fb      	ldrh	r3, [r7, #14]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1bc      	bne.n	800442c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044b8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80044ba:	897b      	ldrh	r3, [r7, #10]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d021      	beq.n	8004504 <UART_RxISR_8BIT_FIFOEN+0xfc>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80044c6:	897a      	ldrh	r2, [r7, #10]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d21b      	bcs.n	8004504 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80044da:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a0b      	ldr	r2, [pc, #44]	; (800450c <UART_RxISR_8BIT_FIFOEN+0x104>)
 80044e0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0220 	orr.w	r2, r2, #32
 80044f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044f2:	e007      	b.n	8004504 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0208 	orr.w	r2, r2, #8
 8004502:	619a      	str	r2, [r3, #24]
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	080042b3 	.word	0x080042b3

08004510 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800451e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004526:	2b22      	cmp	r3, #34	; 0x22
 8004528:	d168      	bne.n	80045fc <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004530:	82fb      	strh	r3, [r7, #22]
 8004532:	e03f      	b.n	80045b4 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004540:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8004542:	8a3a      	ldrh	r2, [r7, #16]
 8004544:	8abb      	ldrh	r3, [r7, #20]
 8004546:	4013      	ands	r3, r2
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	1c9a      	adds	r2, r3, #2
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d11b      	bne.n	80045ae <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004584:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff fa09 	bl	80039c0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80045ae:	8afb      	ldrh	r3, [r7, #22]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	82fb      	strh	r3, [r7, #22]
 80045b4:	8afb      	ldrh	r3, [r7, #22]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1bc      	bne.n	8004534 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045c0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80045c2:	8a7b      	ldrh	r3, [r7, #18]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d021      	beq.n	800460c <UART_RxISR_16BIT_FIFOEN+0xfc>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80045ce:	8a7a      	ldrh	r2, [r7, #18]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d21b      	bcs.n	800460c <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80045e2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a0b      	ldr	r2, [pc, #44]	; (8004614 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80045e8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0220 	orr.w	r2, r2, #32
 80045f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045fa:	e007      	b.n	800460c <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0208 	orr.w	r2, r2, #8
 800460a:	619a      	str	r2, [r3, #24]
}
 800460c:	bf00      	nop
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	0800435d 	.word	0x0800435d

08004618 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_UARTEx_DisableFifoMode+0x16>
 8004666:	2302      	movs	r3, #2
 8004668:	e027      	b.n	80046ba <HAL_UARTEx_DisableFifoMode+0x66>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2224      	movs	r2, #36	; 0x24
 8004676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0201 	bic.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004698:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046da:	2302      	movs	r3, #2
 80046dc:	e02d      	b.n	800473a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2224      	movs	r2, #36	; 0x24
 80046ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f850 	bl	80047c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004756:	2302      	movs	r3, #2
 8004758:	e02d      	b.n	80047b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2224      	movs	r2, #36	; 0x24
 8004766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f812 	bl	80047c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	; 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80047c8:	4a2f      	ldr	r2, [pc, #188]	; (8004888 <UARTEx_SetNbDataToProcess+0xc8>)
 80047ca:	f107 0314 	add.w	r3, r7, #20
 80047ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047d2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80047d6:	4a2d      	ldr	r2, [pc, #180]	; (800488c <UARTEx_SetNbDataToProcess+0xcc>)
 80047d8:	f107 030c 	add.w	r3, r7, #12
 80047dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047e0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d108      	bne.n	80047fe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047fc:	e03d      	b.n	800487a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047fe:	2308      	movs	r3, #8
 8004800:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004802:	2308      	movs	r3, #8
 8004804:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	0e5b      	lsrs	r3, r3, #25
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	0f5b      	lsrs	r3, r3, #29
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004826:	7fbb      	ldrb	r3, [r7, #30]
 8004828:	7f3a      	ldrb	r2, [r7, #28]
 800482a:	f107 0120 	add.w	r1, r7, #32
 800482e:	440a      	add	r2, r1
 8004830:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004834:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004838:	7f3a      	ldrb	r2, [r7, #28]
 800483a:	f107 0120 	add.w	r1, r7, #32
 800483e:	440a      	add	r2, r1
 8004840:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004844:	fb93 f3f2 	sdiv	r3, r3, r2
 8004848:	b29a      	uxth	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004850:	7ffb      	ldrb	r3, [r7, #31]
 8004852:	7f7a      	ldrb	r2, [r7, #29]
 8004854:	f107 0120 	add.w	r1, r7, #32
 8004858:	440a      	add	r2, r1
 800485a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800485e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004862:	7f7a      	ldrb	r2, [r7, #29]
 8004864:	f107 0120 	add.w	r1, r7, #32
 8004868:	440a      	add	r2, r1
 800486a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800486e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004872:	b29a      	uxth	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800487a:	bf00      	nop
 800487c:	3724      	adds	r7, #36	; 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	080051b8 	.word	0x080051b8
 800488c:	080051c0 	.word	0x080051c0

08004890 <__errno>:
 8004890:	4b01      	ldr	r3, [pc, #4]	; (8004898 <__errno+0x8>)
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	2000000c 	.word	0x2000000c

0800489c <__libc_init_array>:
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	4e0d      	ldr	r6, [pc, #52]	; (80048d4 <__libc_init_array+0x38>)
 80048a0:	4c0d      	ldr	r4, [pc, #52]	; (80048d8 <__libc_init_array+0x3c>)
 80048a2:	1ba4      	subs	r4, r4, r6
 80048a4:	10a4      	asrs	r4, r4, #2
 80048a6:	2500      	movs	r5, #0
 80048a8:	42a5      	cmp	r5, r4
 80048aa:	d109      	bne.n	80048c0 <__libc_init_array+0x24>
 80048ac:	4e0b      	ldr	r6, [pc, #44]	; (80048dc <__libc_init_array+0x40>)
 80048ae:	4c0c      	ldr	r4, [pc, #48]	; (80048e0 <__libc_init_array+0x44>)
 80048b0:	f000 fc26 	bl	8005100 <_init>
 80048b4:	1ba4      	subs	r4, r4, r6
 80048b6:	10a4      	asrs	r4, r4, #2
 80048b8:	2500      	movs	r5, #0
 80048ba:	42a5      	cmp	r5, r4
 80048bc:	d105      	bne.n	80048ca <__libc_init_array+0x2e>
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048c4:	4798      	blx	r3
 80048c6:	3501      	adds	r5, #1
 80048c8:	e7ee      	b.n	80048a8 <__libc_init_array+0xc>
 80048ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048ce:	4798      	blx	r3
 80048d0:	3501      	adds	r5, #1
 80048d2:	e7f2      	b.n	80048ba <__libc_init_array+0x1e>
 80048d4:	08005234 	.word	0x08005234
 80048d8:	08005234 	.word	0x08005234
 80048dc:	08005234 	.word	0x08005234
 80048e0:	08005238 	.word	0x08005238

080048e4 <memset>:
 80048e4:	4402      	add	r2, r0
 80048e6:	4603      	mov	r3, r0
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d100      	bne.n	80048ee <memset+0xa>
 80048ec:	4770      	bx	lr
 80048ee:	f803 1b01 	strb.w	r1, [r3], #1
 80048f2:	e7f9      	b.n	80048e8 <memset+0x4>

080048f4 <siprintf>:
 80048f4:	b40e      	push	{r1, r2, r3}
 80048f6:	b500      	push	{lr}
 80048f8:	b09c      	sub	sp, #112	; 0x70
 80048fa:	ab1d      	add	r3, sp, #116	; 0x74
 80048fc:	9002      	str	r0, [sp, #8]
 80048fe:	9006      	str	r0, [sp, #24]
 8004900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004904:	4809      	ldr	r0, [pc, #36]	; (800492c <siprintf+0x38>)
 8004906:	9107      	str	r1, [sp, #28]
 8004908:	9104      	str	r1, [sp, #16]
 800490a:	4909      	ldr	r1, [pc, #36]	; (8004930 <siprintf+0x3c>)
 800490c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004910:	9105      	str	r1, [sp, #20]
 8004912:	6800      	ldr	r0, [r0, #0]
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	a902      	add	r1, sp, #8
 8004918:	f000 f866 	bl	80049e8 <_svfiprintf_r>
 800491c:	9b02      	ldr	r3, [sp, #8]
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	b01c      	add	sp, #112	; 0x70
 8004924:	f85d eb04 	ldr.w	lr, [sp], #4
 8004928:	b003      	add	sp, #12
 800492a:	4770      	bx	lr
 800492c:	2000000c 	.word	0x2000000c
 8004930:	ffff0208 	.word	0xffff0208

08004934 <__ssputs_r>:
 8004934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004938:	688e      	ldr	r6, [r1, #8]
 800493a:	429e      	cmp	r6, r3
 800493c:	4682      	mov	sl, r0
 800493e:	460c      	mov	r4, r1
 8004940:	4690      	mov	r8, r2
 8004942:	4699      	mov	r9, r3
 8004944:	d837      	bhi.n	80049b6 <__ssputs_r+0x82>
 8004946:	898a      	ldrh	r2, [r1, #12]
 8004948:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800494c:	d031      	beq.n	80049b2 <__ssputs_r+0x7e>
 800494e:	6825      	ldr	r5, [r4, #0]
 8004950:	6909      	ldr	r1, [r1, #16]
 8004952:	1a6f      	subs	r7, r5, r1
 8004954:	6965      	ldr	r5, [r4, #20]
 8004956:	2302      	movs	r3, #2
 8004958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800495c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004960:	f109 0301 	add.w	r3, r9, #1
 8004964:	443b      	add	r3, r7
 8004966:	429d      	cmp	r5, r3
 8004968:	bf38      	it	cc
 800496a:	461d      	movcc	r5, r3
 800496c:	0553      	lsls	r3, r2, #21
 800496e:	d530      	bpl.n	80049d2 <__ssputs_r+0x9e>
 8004970:	4629      	mov	r1, r5
 8004972:	f000 fb2b 	bl	8004fcc <_malloc_r>
 8004976:	4606      	mov	r6, r0
 8004978:	b950      	cbnz	r0, 8004990 <__ssputs_r+0x5c>
 800497a:	230c      	movs	r3, #12
 800497c:	f8ca 3000 	str.w	r3, [sl]
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004986:	81a3      	strh	r3, [r4, #12]
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004990:	463a      	mov	r2, r7
 8004992:	6921      	ldr	r1, [r4, #16]
 8004994:	f000 faa8 	bl	8004ee8 <memcpy>
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800499e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a2:	81a3      	strh	r3, [r4, #12]
 80049a4:	6126      	str	r6, [r4, #16]
 80049a6:	6165      	str	r5, [r4, #20]
 80049a8:	443e      	add	r6, r7
 80049aa:	1bed      	subs	r5, r5, r7
 80049ac:	6026      	str	r6, [r4, #0]
 80049ae:	60a5      	str	r5, [r4, #8]
 80049b0:	464e      	mov	r6, r9
 80049b2:	454e      	cmp	r6, r9
 80049b4:	d900      	bls.n	80049b8 <__ssputs_r+0x84>
 80049b6:	464e      	mov	r6, r9
 80049b8:	4632      	mov	r2, r6
 80049ba:	4641      	mov	r1, r8
 80049bc:	6820      	ldr	r0, [r4, #0]
 80049be:	f000 fa9e 	bl	8004efe <memmove>
 80049c2:	68a3      	ldr	r3, [r4, #8]
 80049c4:	1b9b      	subs	r3, r3, r6
 80049c6:	60a3      	str	r3, [r4, #8]
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	441e      	add	r6, r3
 80049cc:	6026      	str	r6, [r4, #0]
 80049ce:	2000      	movs	r0, #0
 80049d0:	e7dc      	b.n	800498c <__ssputs_r+0x58>
 80049d2:	462a      	mov	r2, r5
 80049d4:	f000 fb54 	bl	8005080 <_realloc_r>
 80049d8:	4606      	mov	r6, r0
 80049da:	2800      	cmp	r0, #0
 80049dc:	d1e2      	bne.n	80049a4 <__ssputs_r+0x70>
 80049de:	6921      	ldr	r1, [r4, #16]
 80049e0:	4650      	mov	r0, sl
 80049e2:	f000 faa5 	bl	8004f30 <_free_r>
 80049e6:	e7c8      	b.n	800497a <__ssputs_r+0x46>

080049e8 <_svfiprintf_r>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	461d      	mov	r5, r3
 80049ee:	898b      	ldrh	r3, [r1, #12]
 80049f0:	061f      	lsls	r7, r3, #24
 80049f2:	b09d      	sub	sp, #116	; 0x74
 80049f4:	4680      	mov	r8, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	4616      	mov	r6, r2
 80049fa:	d50f      	bpl.n	8004a1c <_svfiprintf_r+0x34>
 80049fc:	690b      	ldr	r3, [r1, #16]
 80049fe:	b96b      	cbnz	r3, 8004a1c <_svfiprintf_r+0x34>
 8004a00:	2140      	movs	r1, #64	; 0x40
 8004a02:	f000 fae3 	bl	8004fcc <_malloc_r>
 8004a06:	6020      	str	r0, [r4, #0]
 8004a08:	6120      	str	r0, [r4, #16]
 8004a0a:	b928      	cbnz	r0, 8004a18 <_svfiprintf_r+0x30>
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	f8c8 3000 	str.w	r3, [r8]
 8004a12:	f04f 30ff 	mov.w	r0, #4294967295
 8004a16:	e0c8      	b.n	8004baa <_svfiprintf_r+0x1c2>
 8004a18:	2340      	movs	r3, #64	; 0x40
 8004a1a:	6163      	str	r3, [r4, #20]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a20:	2320      	movs	r3, #32
 8004a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a26:	2330      	movs	r3, #48	; 0x30
 8004a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a2c:	9503      	str	r5, [sp, #12]
 8004a2e:	f04f 0b01 	mov.w	fp, #1
 8004a32:	4637      	mov	r7, r6
 8004a34:	463d      	mov	r5, r7
 8004a36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a3a:	b10b      	cbz	r3, 8004a40 <_svfiprintf_r+0x58>
 8004a3c:	2b25      	cmp	r3, #37	; 0x25
 8004a3e:	d13e      	bne.n	8004abe <_svfiprintf_r+0xd6>
 8004a40:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a44:	d00b      	beq.n	8004a5e <_svfiprintf_r+0x76>
 8004a46:	4653      	mov	r3, sl
 8004a48:	4632      	mov	r2, r6
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	f7ff ff71 	bl	8004934 <__ssputs_r>
 8004a52:	3001      	adds	r0, #1
 8004a54:	f000 80a4 	beq.w	8004ba0 <_svfiprintf_r+0x1b8>
 8004a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a5a:	4453      	add	r3, sl
 8004a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a5e:	783b      	ldrb	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 809d 	beq.w	8004ba0 <_svfiprintf_r+0x1b8>
 8004a66:	2300      	movs	r3, #0
 8004a68:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a70:	9304      	str	r3, [sp, #16]
 8004a72:	9307      	str	r3, [sp, #28]
 8004a74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a78:	931a      	str	r3, [sp, #104]	; 0x68
 8004a7a:	462f      	mov	r7, r5
 8004a7c:	2205      	movs	r2, #5
 8004a7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004a82:	4850      	ldr	r0, [pc, #320]	; (8004bc4 <_svfiprintf_r+0x1dc>)
 8004a84:	f7fb fbdc 	bl	8000240 <memchr>
 8004a88:	9b04      	ldr	r3, [sp, #16]
 8004a8a:	b9d0      	cbnz	r0, 8004ac2 <_svfiprintf_r+0xda>
 8004a8c:	06d9      	lsls	r1, r3, #27
 8004a8e:	bf44      	itt	mi
 8004a90:	2220      	movmi	r2, #32
 8004a92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a96:	071a      	lsls	r2, r3, #28
 8004a98:	bf44      	itt	mi
 8004a9a:	222b      	movmi	r2, #43	; 0x2b
 8004a9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004aa0:	782a      	ldrb	r2, [r5, #0]
 8004aa2:	2a2a      	cmp	r2, #42	; 0x2a
 8004aa4:	d015      	beq.n	8004ad2 <_svfiprintf_r+0xea>
 8004aa6:	9a07      	ldr	r2, [sp, #28]
 8004aa8:	462f      	mov	r7, r5
 8004aaa:	2000      	movs	r0, #0
 8004aac:	250a      	movs	r5, #10
 8004aae:	4639      	mov	r1, r7
 8004ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ab4:	3b30      	subs	r3, #48	; 0x30
 8004ab6:	2b09      	cmp	r3, #9
 8004ab8:	d94d      	bls.n	8004b56 <_svfiprintf_r+0x16e>
 8004aba:	b1b8      	cbz	r0, 8004aec <_svfiprintf_r+0x104>
 8004abc:	e00f      	b.n	8004ade <_svfiprintf_r+0xf6>
 8004abe:	462f      	mov	r7, r5
 8004ac0:	e7b8      	b.n	8004a34 <_svfiprintf_r+0x4c>
 8004ac2:	4a40      	ldr	r2, [pc, #256]	; (8004bc4 <_svfiprintf_r+0x1dc>)
 8004ac4:	1a80      	subs	r0, r0, r2
 8004ac6:	fa0b f000 	lsl.w	r0, fp, r0
 8004aca:	4318      	orrs	r0, r3
 8004acc:	9004      	str	r0, [sp, #16]
 8004ace:	463d      	mov	r5, r7
 8004ad0:	e7d3      	b.n	8004a7a <_svfiprintf_r+0x92>
 8004ad2:	9a03      	ldr	r2, [sp, #12]
 8004ad4:	1d11      	adds	r1, r2, #4
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	9103      	str	r1, [sp, #12]
 8004ada:	2a00      	cmp	r2, #0
 8004adc:	db01      	blt.n	8004ae2 <_svfiprintf_r+0xfa>
 8004ade:	9207      	str	r2, [sp, #28]
 8004ae0:	e004      	b.n	8004aec <_svfiprintf_r+0x104>
 8004ae2:	4252      	negs	r2, r2
 8004ae4:	f043 0302 	orr.w	r3, r3, #2
 8004ae8:	9207      	str	r2, [sp, #28]
 8004aea:	9304      	str	r3, [sp, #16]
 8004aec:	783b      	ldrb	r3, [r7, #0]
 8004aee:	2b2e      	cmp	r3, #46	; 0x2e
 8004af0:	d10c      	bne.n	8004b0c <_svfiprintf_r+0x124>
 8004af2:	787b      	ldrb	r3, [r7, #1]
 8004af4:	2b2a      	cmp	r3, #42	; 0x2a
 8004af6:	d133      	bne.n	8004b60 <_svfiprintf_r+0x178>
 8004af8:	9b03      	ldr	r3, [sp, #12]
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	9203      	str	r2, [sp, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bfb8      	it	lt
 8004b04:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b08:	3702      	adds	r7, #2
 8004b0a:	9305      	str	r3, [sp, #20]
 8004b0c:	4d2e      	ldr	r5, [pc, #184]	; (8004bc8 <_svfiprintf_r+0x1e0>)
 8004b0e:	7839      	ldrb	r1, [r7, #0]
 8004b10:	2203      	movs	r2, #3
 8004b12:	4628      	mov	r0, r5
 8004b14:	f7fb fb94 	bl	8000240 <memchr>
 8004b18:	b138      	cbz	r0, 8004b2a <_svfiprintf_r+0x142>
 8004b1a:	2340      	movs	r3, #64	; 0x40
 8004b1c:	1b40      	subs	r0, r0, r5
 8004b1e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b22:	9b04      	ldr	r3, [sp, #16]
 8004b24:	4303      	orrs	r3, r0
 8004b26:	3701      	adds	r7, #1
 8004b28:	9304      	str	r3, [sp, #16]
 8004b2a:	7839      	ldrb	r1, [r7, #0]
 8004b2c:	4827      	ldr	r0, [pc, #156]	; (8004bcc <_svfiprintf_r+0x1e4>)
 8004b2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b32:	2206      	movs	r2, #6
 8004b34:	1c7e      	adds	r6, r7, #1
 8004b36:	f7fb fb83 	bl	8000240 <memchr>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d038      	beq.n	8004bb0 <_svfiprintf_r+0x1c8>
 8004b3e:	4b24      	ldr	r3, [pc, #144]	; (8004bd0 <_svfiprintf_r+0x1e8>)
 8004b40:	bb13      	cbnz	r3, 8004b88 <_svfiprintf_r+0x1a0>
 8004b42:	9b03      	ldr	r3, [sp, #12]
 8004b44:	3307      	adds	r3, #7
 8004b46:	f023 0307 	bic.w	r3, r3, #7
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	9303      	str	r3, [sp, #12]
 8004b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b50:	444b      	add	r3, r9
 8004b52:	9309      	str	r3, [sp, #36]	; 0x24
 8004b54:	e76d      	b.n	8004a32 <_svfiprintf_r+0x4a>
 8004b56:	fb05 3202 	mla	r2, r5, r2, r3
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	460f      	mov	r7, r1
 8004b5e:	e7a6      	b.n	8004aae <_svfiprintf_r+0xc6>
 8004b60:	2300      	movs	r3, #0
 8004b62:	3701      	adds	r7, #1
 8004b64:	9305      	str	r3, [sp, #20]
 8004b66:	4619      	mov	r1, r3
 8004b68:	250a      	movs	r5, #10
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b70:	3a30      	subs	r2, #48	; 0x30
 8004b72:	2a09      	cmp	r2, #9
 8004b74:	d903      	bls.n	8004b7e <_svfiprintf_r+0x196>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0c8      	beq.n	8004b0c <_svfiprintf_r+0x124>
 8004b7a:	9105      	str	r1, [sp, #20]
 8004b7c:	e7c6      	b.n	8004b0c <_svfiprintf_r+0x124>
 8004b7e:	fb05 2101 	mla	r1, r5, r1, r2
 8004b82:	2301      	movs	r3, #1
 8004b84:	4607      	mov	r7, r0
 8004b86:	e7f0      	b.n	8004b6a <_svfiprintf_r+0x182>
 8004b88:	ab03      	add	r3, sp, #12
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <_svfiprintf_r+0x1ec>)
 8004b90:	a904      	add	r1, sp, #16
 8004b92:	4640      	mov	r0, r8
 8004b94:	f3af 8000 	nop.w
 8004b98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b9c:	4681      	mov	r9, r0
 8004b9e:	d1d6      	bne.n	8004b4e <_svfiprintf_r+0x166>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	065b      	lsls	r3, r3, #25
 8004ba4:	f53f af35 	bmi.w	8004a12 <_svfiprintf_r+0x2a>
 8004ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004baa:	b01d      	add	sp, #116	; 0x74
 8004bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb0:	ab03      	add	r3, sp, #12
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <_svfiprintf_r+0x1ec>)
 8004bb8:	a904      	add	r1, sp, #16
 8004bba:	4640      	mov	r0, r8
 8004bbc:	f000 f882 	bl	8004cc4 <_printf_i>
 8004bc0:	e7ea      	b.n	8004b98 <_svfiprintf_r+0x1b0>
 8004bc2:	bf00      	nop
 8004bc4:	080051f8 	.word	0x080051f8
 8004bc8:	080051fe 	.word	0x080051fe
 8004bcc:	08005202 	.word	0x08005202
 8004bd0:	00000000 	.word	0x00000000
 8004bd4:	08004935 	.word	0x08004935

08004bd8 <_printf_common>:
 8004bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bdc:	4691      	mov	r9, r2
 8004bde:	461f      	mov	r7, r3
 8004be0:	688a      	ldr	r2, [r1, #8]
 8004be2:	690b      	ldr	r3, [r1, #16]
 8004be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004be8:	4293      	cmp	r3, r2
 8004bea:	bfb8      	it	lt
 8004bec:	4613      	movlt	r3, r2
 8004bee:	f8c9 3000 	str.w	r3, [r9]
 8004bf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	b112      	cbz	r2, 8004c02 <_printf_common+0x2a>
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	f8c9 3000 	str.w	r3, [r9]
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	0699      	lsls	r1, r3, #26
 8004c06:	bf42      	ittt	mi
 8004c08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c0c:	3302      	addmi	r3, #2
 8004c0e:	f8c9 3000 	strmi.w	r3, [r9]
 8004c12:	6825      	ldr	r5, [r4, #0]
 8004c14:	f015 0506 	ands.w	r5, r5, #6
 8004c18:	d107      	bne.n	8004c2a <_printf_common+0x52>
 8004c1a:	f104 0a19 	add.w	sl, r4, #25
 8004c1e:	68e3      	ldr	r3, [r4, #12]
 8004c20:	f8d9 2000 	ldr.w	r2, [r9]
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	42ab      	cmp	r3, r5
 8004c28:	dc28      	bgt.n	8004c7c <_printf_common+0xa4>
 8004c2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c2e:	6822      	ldr	r2, [r4, #0]
 8004c30:	3300      	adds	r3, #0
 8004c32:	bf18      	it	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	0692      	lsls	r2, r2, #26
 8004c38:	d42d      	bmi.n	8004c96 <_printf_common+0xbe>
 8004c3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c3e:	4639      	mov	r1, r7
 8004c40:	4630      	mov	r0, r6
 8004c42:	47c0      	blx	r8
 8004c44:	3001      	adds	r0, #1
 8004c46:	d020      	beq.n	8004c8a <_printf_common+0xb2>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	68e5      	ldr	r5, [r4, #12]
 8004c4c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c50:	f003 0306 	and.w	r3, r3, #6
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	bf08      	it	eq
 8004c58:	1aad      	subeq	r5, r5, r2
 8004c5a:	68a3      	ldr	r3, [r4, #8]
 8004c5c:	6922      	ldr	r2, [r4, #16]
 8004c5e:	bf0c      	ite	eq
 8004c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c64:	2500      	movne	r5, #0
 8004c66:	4293      	cmp	r3, r2
 8004c68:	bfc4      	itt	gt
 8004c6a:	1a9b      	subgt	r3, r3, r2
 8004c6c:	18ed      	addgt	r5, r5, r3
 8004c6e:	f04f 0900 	mov.w	r9, #0
 8004c72:	341a      	adds	r4, #26
 8004c74:	454d      	cmp	r5, r9
 8004c76:	d11a      	bne.n	8004cae <_printf_common+0xd6>
 8004c78:	2000      	movs	r0, #0
 8004c7a:	e008      	b.n	8004c8e <_printf_common+0xb6>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	4652      	mov	r2, sl
 8004c80:	4639      	mov	r1, r7
 8004c82:	4630      	mov	r0, r6
 8004c84:	47c0      	blx	r8
 8004c86:	3001      	adds	r0, #1
 8004c88:	d103      	bne.n	8004c92 <_printf_common+0xba>
 8004c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c92:	3501      	adds	r5, #1
 8004c94:	e7c3      	b.n	8004c1e <_printf_common+0x46>
 8004c96:	18e1      	adds	r1, r4, r3
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	2030      	movs	r0, #48	; 0x30
 8004c9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ca0:	4422      	add	r2, r4
 8004ca2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ca6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004caa:	3302      	adds	r3, #2
 8004cac:	e7c5      	b.n	8004c3a <_printf_common+0x62>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	4639      	mov	r1, r7
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	47c0      	blx	r8
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d0e6      	beq.n	8004c8a <_printf_common+0xb2>
 8004cbc:	f109 0901 	add.w	r9, r9, #1
 8004cc0:	e7d8      	b.n	8004c74 <_printf_common+0x9c>
	...

08004cc4 <_printf_i>:
 8004cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ccc:	460c      	mov	r4, r1
 8004cce:	7e09      	ldrb	r1, [r1, #24]
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	296e      	cmp	r1, #110	; 0x6e
 8004cd4:	4617      	mov	r7, r2
 8004cd6:	4606      	mov	r6, r0
 8004cd8:	4698      	mov	r8, r3
 8004cda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cdc:	f000 80b3 	beq.w	8004e46 <_printf_i+0x182>
 8004ce0:	d822      	bhi.n	8004d28 <_printf_i+0x64>
 8004ce2:	2963      	cmp	r1, #99	; 0x63
 8004ce4:	d036      	beq.n	8004d54 <_printf_i+0x90>
 8004ce6:	d80a      	bhi.n	8004cfe <_printf_i+0x3a>
 8004ce8:	2900      	cmp	r1, #0
 8004cea:	f000 80b9 	beq.w	8004e60 <_printf_i+0x19c>
 8004cee:	2958      	cmp	r1, #88	; 0x58
 8004cf0:	f000 8083 	beq.w	8004dfa <_printf_i+0x136>
 8004cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cf8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004cfc:	e032      	b.n	8004d64 <_printf_i+0xa0>
 8004cfe:	2964      	cmp	r1, #100	; 0x64
 8004d00:	d001      	beq.n	8004d06 <_printf_i+0x42>
 8004d02:	2969      	cmp	r1, #105	; 0x69
 8004d04:	d1f6      	bne.n	8004cf4 <_printf_i+0x30>
 8004d06:	6820      	ldr	r0, [r4, #0]
 8004d08:	6813      	ldr	r3, [r2, #0]
 8004d0a:	0605      	lsls	r5, r0, #24
 8004d0c:	f103 0104 	add.w	r1, r3, #4
 8004d10:	d52a      	bpl.n	8004d68 <_printf_i+0xa4>
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6011      	str	r1, [r2, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	da03      	bge.n	8004d22 <_printf_i+0x5e>
 8004d1a:	222d      	movs	r2, #45	; 0x2d
 8004d1c:	425b      	negs	r3, r3
 8004d1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d22:	486f      	ldr	r0, [pc, #444]	; (8004ee0 <_printf_i+0x21c>)
 8004d24:	220a      	movs	r2, #10
 8004d26:	e039      	b.n	8004d9c <_printf_i+0xd8>
 8004d28:	2973      	cmp	r1, #115	; 0x73
 8004d2a:	f000 809d 	beq.w	8004e68 <_printf_i+0x1a4>
 8004d2e:	d808      	bhi.n	8004d42 <_printf_i+0x7e>
 8004d30:	296f      	cmp	r1, #111	; 0x6f
 8004d32:	d020      	beq.n	8004d76 <_printf_i+0xb2>
 8004d34:	2970      	cmp	r1, #112	; 0x70
 8004d36:	d1dd      	bne.n	8004cf4 <_printf_i+0x30>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	f043 0320 	orr.w	r3, r3, #32
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	e003      	b.n	8004d4a <_printf_i+0x86>
 8004d42:	2975      	cmp	r1, #117	; 0x75
 8004d44:	d017      	beq.n	8004d76 <_printf_i+0xb2>
 8004d46:	2978      	cmp	r1, #120	; 0x78
 8004d48:	d1d4      	bne.n	8004cf4 <_printf_i+0x30>
 8004d4a:	2378      	movs	r3, #120	; 0x78
 8004d4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d50:	4864      	ldr	r0, [pc, #400]	; (8004ee4 <_printf_i+0x220>)
 8004d52:	e055      	b.n	8004e00 <_printf_i+0x13c>
 8004d54:	6813      	ldr	r3, [r2, #0]
 8004d56:	1d19      	adds	r1, r3, #4
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6011      	str	r1, [r2, #0]
 8004d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d64:	2301      	movs	r3, #1
 8004d66:	e08c      	b.n	8004e82 <_printf_i+0x1be>
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6011      	str	r1, [r2, #0]
 8004d6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d70:	bf18      	it	ne
 8004d72:	b21b      	sxthne	r3, r3
 8004d74:	e7cf      	b.n	8004d16 <_printf_i+0x52>
 8004d76:	6813      	ldr	r3, [r2, #0]
 8004d78:	6825      	ldr	r5, [r4, #0]
 8004d7a:	1d18      	adds	r0, r3, #4
 8004d7c:	6010      	str	r0, [r2, #0]
 8004d7e:	0628      	lsls	r0, r5, #24
 8004d80:	d501      	bpl.n	8004d86 <_printf_i+0xc2>
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	e002      	b.n	8004d8c <_printf_i+0xc8>
 8004d86:	0668      	lsls	r0, r5, #25
 8004d88:	d5fb      	bpl.n	8004d82 <_printf_i+0xbe>
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	4854      	ldr	r0, [pc, #336]	; (8004ee0 <_printf_i+0x21c>)
 8004d8e:	296f      	cmp	r1, #111	; 0x6f
 8004d90:	bf14      	ite	ne
 8004d92:	220a      	movne	r2, #10
 8004d94:	2208      	moveq	r2, #8
 8004d96:	2100      	movs	r1, #0
 8004d98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d9c:	6865      	ldr	r5, [r4, #4]
 8004d9e:	60a5      	str	r5, [r4, #8]
 8004da0:	2d00      	cmp	r5, #0
 8004da2:	f2c0 8095 	blt.w	8004ed0 <_printf_i+0x20c>
 8004da6:	6821      	ldr	r1, [r4, #0]
 8004da8:	f021 0104 	bic.w	r1, r1, #4
 8004dac:	6021      	str	r1, [r4, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d13d      	bne.n	8004e2e <_printf_i+0x16a>
 8004db2:	2d00      	cmp	r5, #0
 8004db4:	f040 808e 	bne.w	8004ed4 <_printf_i+0x210>
 8004db8:	4665      	mov	r5, ip
 8004dba:	2a08      	cmp	r2, #8
 8004dbc:	d10b      	bne.n	8004dd6 <_printf_i+0x112>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	07db      	lsls	r3, r3, #31
 8004dc2:	d508      	bpl.n	8004dd6 <_printf_i+0x112>
 8004dc4:	6923      	ldr	r3, [r4, #16]
 8004dc6:	6862      	ldr	r2, [r4, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	bfde      	ittt	le
 8004dcc:	2330      	movle	r3, #48	; 0x30
 8004dce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dd6:	ebac 0305 	sub.w	r3, ip, r5
 8004dda:	6123      	str	r3, [r4, #16]
 8004ddc:	f8cd 8000 	str.w	r8, [sp]
 8004de0:	463b      	mov	r3, r7
 8004de2:	aa03      	add	r2, sp, #12
 8004de4:	4621      	mov	r1, r4
 8004de6:	4630      	mov	r0, r6
 8004de8:	f7ff fef6 	bl	8004bd8 <_printf_common>
 8004dec:	3001      	adds	r0, #1
 8004dee:	d14d      	bne.n	8004e8c <_printf_i+0x1c8>
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	b005      	add	sp, #20
 8004df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dfa:	4839      	ldr	r0, [pc, #228]	; (8004ee0 <_printf_i+0x21c>)
 8004dfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e00:	6813      	ldr	r3, [r2, #0]
 8004e02:	6821      	ldr	r1, [r4, #0]
 8004e04:	1d1d      	adds	r5, r3, #4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6015      	str	r5, [r2, #0]
 8004e0a:	060a      	lsls	r2, r1, #24
 8004e0c:	d50b      	bpl.n	8004e26 <_printf_i+0x162>
 8004e0e:	07ca      	lsls	r2, r1, #31
 8004e10:	bf44      	itt	mi
 8004e12:	f041 0120 	orrmi.w	r1, r1, #32
 8004e16:	6021      	strmi	r1, [r4, #0]
 8004e18:	b91b      	cbnz	r3, 8004e22 <_printf_i+0x15e>
 8004e1a:	6822      	ldr	r2, [r4, #0]
 8004e1c:	f022 0220 	bic.w	r2, r2, #32
 8004e20:	6022      	str	r2, [r4, #0]
 8004e22:	2210      	movs	r2, #16
 8004e24:	e7b7      	b.n	8004d96 <_printf_i+0xd2>
 8004e26:	064d      	lsls	r5, r1, #25
 8004e28:	bf48      	it	mi
 8004e2a:	b29b      	uxthmi	r3, r3
 8004e2c:	e7ef      	b.n	8004e0e <_printf_i+0x14a>
 8004e2e:	4665      	mov	r5, ip
 8004e30:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e34:	fb02 3311 	mls	r3, r2, r1, r3
 8004e38:	5cc3      	ldrb	r3, [r0, r3]
 8004e3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e3e:	460b      	mov	r3, r1
 8004e40:	2900      	cmp	r1, #0
 8004e42:	d1f5      	bne.n	8004e30 <_printf_i+0x16c>
 8004e44:	e7b9      	b.n	8004dba <_printf_i+0xf6>
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	6825      	ldr	r5, [r4, #0]
 8004e4a:	6961      	ldr	r1, [r4, #20]
 8004e4c:	1d18      	adds	r0, r3, #4
 8004e4e:	6010      	str	r0, [r2, #0]
 8004e50:	0628      	lsls	r0, r5, #24
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	d501      	bpl.n	8004e5a <_printf_i+0x196>
 8004e56:	6019      	str	r1, [r3, #0]
 8004e58:	e002      	b.n	8004e60 <_printf_i+0x19c>
 8004e5a:	066a      	lsls	r2, r5, #25
 8004e5c:	d5fb      	bpl.n	8004e56 <_printf_i+0x192>
 8004e5e:	8019      	strh	r1, [r3, #0]
 8004e60:	2300      	movs	r3, #0
 8004e62:	6123      	str	r3, [r4, #16]
 8004e64:	4665      	mov	r5, ip
 8004e66:	e7b9      	b.n	8004ddc <_printf_i+0x118>
 8004e68:	6813      	ldr	r3, [r2, #0]
 8004e6a:	1d19      	adds	r1, r3, #4
 8004e6c:	6011      	str	r1, [r2, #0]
 8004e6e:	681d      	ldr	r5, [r3, #0]
 8004e70:	6862      	ldr	r2, [r4, #4]
 8004e72:	2100      	movs	r1, #0
 8004e74:	4628      	mov	r0, r5
 8004e76:	f7fb f9e3 	bl	8000240 <memchr>
 8004e7a:	b108      	cbz	r0, 8004e80 <_printf_i+0x1bc>
 8004e7c:	1b40      	subs	r0, r0, r5
 8004e7e:	6060      	str	r0, [r4, #4]
 8004e80:	6863      	ldr	r3, [r4, #4]
 8004e82:	6123      	str	r3, [r4, #16]
 8004e84:	2300      	movs	r3, #0
 8004e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e8a:	e7a7      	b.n	8004ddc <_printf_i+0x118>
 8004e8c:	6923      	ldr	r3, [r4, #16]
 8004e8e:	462a      	mov	r2, r5
 8004e90:	4639      	mov	r1, r7
 8004e92:	4630      	mov	r0, r6
 8004e94:	47c0      	blx	r8
 8004e96:	3001      	adds	r0, #1
 8004e98:	d0aa      	beq.n	8004df0 <_printf_i+0x12c>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	079b      	lsls	r3, r3, #30
 8004e9e:	d413      	bmi.n	8004ec8 <_printf_i+0x204>
 8004ea0:	68e0      	ldr	r0, [r4, #12]
 8004ea2:	9b03      	ldr	r3, [sp, #12]
 8004ea4:	4298      	cmp	r0, r3
 8004ea6:	bfb8      	it	lt
 8004ea8:	4618      	movlt	r0, r3
 8004eaa:	e7a3      	b.n	8004df4 <_printf_i+0x130>
 8004eac:	2301      	movs	r3, #1
 8004eae:	464a      	mov	r2, r9
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	47c0      	blx	r8
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d09a      	beq.n	8004df0 <_printf_i+0x12c>
 8004eba:	3501      	adds	r5, #1
 8004ebc:	68e3      	ldr	r3, [r4, #12]
 8004ebe:	9a03      	ldr	r2, [sp, #12]
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	42ab      	cmp	r3, r5
 8004ec4:	dcf2      	bgt.n	8004eac <_printf_i+0x1e8>
 8004ec6:	e7eb      	b.n	8004ea0 <_printf_i+0x1dc>
 8004ec8:	2500      	movs	r5, #0
 8004eca:	f104 0919 	add.w	r9, r4, #25
 8004ece:	e7f5      	b.n	8004ebc <_printf_i+0x1f8>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ac      	bne.n	8004e2e <_printf_i+0x16a>
 8004ed4:	7803      	ldrb	r3, [r0, #0]
 8004ed6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ede:	e76c      	b.n	8004dba <_printf_i+0xf6>
 8004ee0:	08005209 	.word	0x08005209
 8004ee4:	0800521a 	.word	0x0800521a

08004ee8 <memcpy>:
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	1e43      	subs	r3, r0, #1
 8004eec:	440a      	add	r2, r1
 8004eee:	4291      	cmp	r1, r2
 8004ef0:	d100      	bne.n	8004ef4 <memcpy+0xc>
 8004ef2:	bd10      	pop	{r4, pc}
 8004ef4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ef8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004efc:	e7f7      	b.n	8004eee <memcpy+0x6>

08004efe <memmove>:
 8004efe:	4288      	cmp	r0, r1
 8004f00:	b510      	push	{r4, lr}
 8004f02:	eb01 0302 	add.w	r3, r1, r2
 8004f06:	d807      	bhi.n	8004f18 <memmove+0x1a>
 8004f08:	1e42      	subs	r2, r0, #1
 8004f0a:	4299      	cmp	r1, r3
 8004f0c:	d00a      	beq.n	8004f24 <memmove+0x26>
 8004f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f12:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004f16:	e7f8      	b.n	8004f0a <memmove+0xc>
 8004f18:	4283      	cmp	r3, r0
 8004f1a:	d9f5      	bls.n	8004f08 <memmove+0xa>
 8004f1c:	1881      	adds	r1, r0, r2
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	42d3      	cmn	r3, r2
 8004f22:	d100      	bne.n	8004f26 <memmove+0x28>
 8004f24:	bd10      	pop	{r4, pc}
 8004f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f2a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004f2e:	e7f7      	b.n	8004f20 <memmove+0x22>

08004f30 <_free_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4605      	mov	r5, r0
 8004f34:	2900      	cmp	r1, #0
 8004f36:	d045      	beq.n	8004fc4 <_free_r+0x94>
 8004f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f3c:	1f0c      	subs	r4, r1, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bfb8      	it	lt
 8004f42:	18e4      	addlt	r4, r4, r3
 8004f44:	f000 f8d2 	bl	80050ec <__malloc_lock>
 8004f48:	4a1f      	ldr	r2, [pc, #124]	; (8004fc8 <_free_r+0x98>)
 8004f4a:	6813      	ldr	r3, [r2, #0]
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	b933      	cbnz	r3, 8004f5e <_free_r+0x2e>
 8004f50:	6063      	str	r3, [r4, #4]
 8004f52:	6014      	str	r4, [r2, #0]
 8004f54:	4628      	mov	r0, r5
 8004f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f5a:	f000 b8c8 	b.w	80050ee <__malloc_unlock>
 8004f5e:	42a3      	cmp	r3, r4
 8004f60:	d90c      	bls.n	8004f7c <_free_r+0x4c>
 8004f62:	6821      	ldr	r1, [r4, #0]
 8004f64:	1862      	adds	r2, r4, r1
 8004f66:	4293      	cmp	r3, r2
 8004f68:	bf04      	itt	eq
 8004f6a:	681a      	ldreq	r2, [r3, #0]
 8004f6c:	685b      	ldreq	r3, [r3, #4]
 8004f6e:	6063      	str	r3, [r4, #4]
 8004f70:	bf04      	itt	eq
 8004f72:	1852      	addeq	r2, r2, r1
 8004f74:	6022      	streq	r2, [r4, #0]
 8004f76:	6004      	str	r4, [r0, #0]
 8004f78:	e7ec      	b.n	8004f54 <_free_r+0x24>
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	b10a      	cbz	r2, 8004f84 <_free_r+0x54>
 8004f80:	42a2      	cmp	r2, r4
 8004f82:	d9fa      	bls.n	8004f7a <_free_r+0x4a>
 8004f84:	6819      	ldr	r1, [r3, #0]
 8004f86:	1858      	adds	r0, r3, r1
 8004f88:	42a0      	cmp	r0, r4
 8004f8a:	d10b      	bne.n	8004fa4 <_free_r+0x74>
 8004f8c:	6820      	ldr	r0, [r4, #0]
 8004f8e:	4401      	add	r1, r0
 8004f90:	1858      	adds	r0, r3, r1
 8004f92:	4282      	cmp	r2, r0
 8004f94:	6019      	str	r1, [r3, #0]
 8004f96:	d1dd      	bne.n	8004f54 <_free_r+0x24>
 8004f98:	6810      	ldr	r0, [r2, #0]
 8004f9a:	6852      	ldr	r2, [r2, #4]
 8004f9c:	605a      	str	r2, [r3, #4]
 8004f9e:	4401      	add	r1, r0
 8004fa0:	6019      	str	r1, [r3, #0]
 8004fa2:	e7d7      	b.n	8004f54 <_free_r+0x24>
 8004fa4:	d902      	bls.n	8004fac <_free_r+0x7c>
 8004fa6:	230c      	movs	r3, #12
 8004fa8:	602b      	str	r3, [r5, #0]
 8004faa:	e7d3      	b.n	8004f54 <_free_r+0x24>
 8004fac:	6820      	ldr	r0, [r4, #0]
 8004fae:	1821      	adds	r1, r4, r0
 8004fb0:	428a      	cmp	r2, r1
 8004fb2:	bf04      	itt	eq
 8004fb4:	6811      	ldreq	r1, [r2, #0]
 8004fb6:	6852      	ldreq	r2, [r2, #4]
 8004fb8:	6062      	str	r2, [r4, #4]
 8004fba:	bf04      	itt	eq
 8004fbc:	1809      	addeq	r1, r1, r0
 8004fbe:	6021      	streq	r1, [r4, #0]
 8004fc0:	605c      	str	r4, [r3, #4]
 8004fc2:	e7c7      	b.n	8004f54 <_free_r+0x24>
 8004fc4:	bd38      	pop	{r3, r4, r5, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000090 	.word	0x20000090

08004fcc <_malloc_r>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	1ccd      	adds	r5, r1, #3
 8004fd0:	f025 0503 	bic.w	r5, r5, #3
 8004fd4:	3508      	adds	r5, #8
 8004fd6:	2d0c      	cmp	r5, #12
 8004fd8:	bf38      	it	cc
 8004fda:	250c      	movcc	r5, #12
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	4606      	mov	r6, r0
 8004fe0:	db01      	blt.n	8004fe6 <_malloc_r+0x1a>
 8004fe2:	42a9      	cmp	r1, r5
 8004fe4:	d903      	bls.n	8004fee <_malloc_r+0x22>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	6033      	str	r3, [r6, #0]
 8004fea:	2000      	movs	r0, #0
 8004fec:	bd70      	pop	{r4, r5, r6, pc}
 8004fee:	f000 f87d 	bl	80050ec <__malloc_lock>
 8004ff2:	4a21      	ldr	r2, [pc, #132]	; (8005078 <_malloc_r+0xac>)
 8004ff4:	6814      	ldr	r4, [r2, #0]
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	b991      	cbnz	r1, 8005020 <_malloc_r+0x54>
 8004ffa:	4c20      	ldr	r4, [pc, #128]	; (800507c <_malloc_r+0xb0>)
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	b91b      	cbnz	r3, 8005008 <_malloc_r+0x3c>
 8005000:	4630      	mov	r0, r6
 8005002:	f000 f863 	bl	80050cc <_sbrk_r>
 8005006:	6020      	str	r0, [r4, #0]
 8005008:	4629      	mov	r1, r5
 800500a:	4630      	mov	r0, r6
 800500c:	f000 f85e 	bl	80050cc <_sbrk_r>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d124      	bne.n	800505e <_malloc_r+0x92>
 8005014:	230c      	movs	r3, #12
 8005016:	6033      	str	r3, [r6, #0]
 8005018:	4630      	mov	r0, r6
 800501a:	f000 f868 	bl	80050ee <__malloc_unlock>
 800501e:	e7e4      	b.n	8004fea <_malloc_r+0x1e>
 8005020:	680b      	ldr	r3, [r1, #0]
 8005022:	1b5b      	subs	r3, r3, r5
 8005024:	d418      	bmi.n	8005058 <_malloc_r+0x8c>
 8005026:	2b0b      	cmp	r3, #11
 8005028:	d90f      	bls.n	800504a <_malloc_r+0x7e>
 800502a:	600b      	str	r3, [r1, #0]
 800502c:	50cd      	str	r5, [r1, r3]
 800502e:	18cc      	adds	r4, r1, r3
 8005030:	4630      	mov	r0, r6
 8005032:	f000 f85c 	bl	80050ee <__malloc_unlock>
 8005036:	f104 000b 	add.w	r0, r4, #11
 800503a:	1d23      	adds	r3, r4, #4
 800503c:	f020 0007 	bic.w	r0, r0, #7
 8005040:	1ac3      	subs	r3, r0, r3
 8005042:	d0d3      	beq.n	8004fec <_malloc_r+0x20>
 8005044:	425a      	negs	r2, r3
 8005046:	50e2      	str	r2, [r4, r3]
 8005048:	e7d0      	b.n	8004fec <_malloc_r+0x20>
 800504a:	428c      	cmp	r4, r1
 800504c:	684b      	ldr	r3, [r1, #4]
 800504e:	bf16      	itet	ne
 8005050:	6063      	strne	r3, [r4, #4]
 8005052:	6013      	streq	r3, [r2, #0]
 8005054:	460c      	movne	r4, r1
 8005056:	e7eb      	b.n	8005030 <_malloc_r+0x64>
 8005058:	460c      	mov	r4, r1
 800505a:	6849      	ldr	r1, [r1, #4]
 800505c:	e7cc      	b.n	8004ff8 <_malloc_r+0x2c>
 800505e:	1cc4      	adds	r4, r0, #3
 8005060:	f024 0403 	bic.w	r4, r4, #3
 8005064:	42a0      	cmp	r0, r4
 8005066:	d005      	beq.n	8005074 <_malloc_r+0xa8>
 8005068:	1a21      	subs	r1, r4, r0
 800506a:	4630      	mov	r0, r6
 800506c:	f000 f82e 	bl	80050cc <_sbrk_r>
 8005070:	3001      	adds	r0, #1
 8005072:	d0cf      	beq.n	8005014 <_malloc_r+0x48>
 8005074:	6025      	str	r5, [r4, #0]
 8005076:	e7db      	b.n	8005030 <_malloc_r+0x64>
 8005078:	20000090 	.word	0x20000090
 800507c:	20000094 	.word	0x20000094

08005080 <_realloc_r>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	4607      	mov	r7, r0
 8005084:	4614      	mov	r4, r2
 8005086:	460e      	mov	r6, r1
 8005088:	b921      	cbnz	r1, 8005094 <_realloc_r+0x14>
 800508a:	4611      	mov	r1, r2
 800508c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005090:	f7ff bf9c 	b.w	8004fcc <_malloc_r>
 8005094:	b922      	cbnz	r2, 80050a0 <_realloc_r+0x20>
 8005096:	f7ff ff4b 	bl	8004f30 <_free_r>
 800509a:	4625      	mov	r5, r4
 800509c:	4628      	mov	r0, r5
 800509e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050a0:	f000 f826 	bl	80050f0 <_malloc_usable_size_r>
 80050a4:	42a0      	cmp	r0, r4
 80050a6:	d20f      	bcs.n	80050c8 <_realloc_r+0x48>
 80050a8:	4621      	mov	r1, r4
 80050aa:	4638      	mov	r0, r7
 80050ac:	f7ff ff8e 	bl	8004fcc <_malloc_r>
 80050b0:	4605      	mov	r5, r0
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d0f2      	beq.n	800509c <_realloc_r+0x1c>
 80050b6:	4631      	mov	r1, r6
 80050b8:	4622      	mov	r2, r4
 80050ba:	f7ff ff15 	bl	8004ee8 <memcpy>
 80050be:	4631      	mov	r1, r6
 80050c0:	4638      	mov	r0, r7
 80050c2:	f7ff ff35 	bl	8004f30 <_free_r>
 80050c6:	e7e9      	b.n	800509c <_realloc_r+0x1c>
 80050c8:	4635      	mov	r5, r6
 80050ca:	e7e7      	b.n	800509c <_realloc_r+0x1c>

080050cc <_sbrk_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4c06      	ldr	r4, [pc, #24]	; (80050e8 <_sbrk_r+0x1c>)
 80050d0:	2300      	movs	r3, #0
 80050d2:	4605      	mov	r5, r0
 80050d4:	4608      	mov	r0, r1
 80050d6:	6023      	str	r3, [r4, #0]
 80050d8:	f7fb fd4a 	bl	8000b70 <_sbrk>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_sbrk_r+0x1a>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_sbrk_r+0x1a>
 80050e4:	602b      	str	r3, [r5, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	200006d4 	.word	0x200006d4

080050ec <__malloc_lock>:
 80050ec:	4770      	bx	lr

080050ee <__malloc_unlock>:
 80050ee:	4770      	bx	lr

080050f0 <_malloc_usable_size_r>:
 80050f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f4:	1f18      	subs	r0, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	bfbc      	itt	lt
 80050fa:	580b      	ldrlt	r3, [r1, r0]
 80050fc:	18c0      	addlt	r0, r0, r3
 80050fe:	4770      	bx	lr

08005100 <_init>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	bf00      	nop
 8005104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005106:	bc08      	pop	{r3}
 8005108:	469e      	mov	lr, r3
 800510a:	4770      	bx	lr

0800510c <_fini>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr
