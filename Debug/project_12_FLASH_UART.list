
project_12_FLASH_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce8  08003ce8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cf0  08003cf0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf4  08003cf4  00013cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000002c  08003d24  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003d24  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010efa  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000218e  00000000  00000000  00030f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001000  00000000  00000000  000330e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef8  00000000  00000000  000340e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001de00  00000000  00000000  00034fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c892  00000000  00000000  00052de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5f91  00000000  00000000  0005f672  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125603  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c4  00000000  00000000  00125680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003c90 	.word	0x08003c90

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	08003c90 	.word	0x08003c90

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fb5d 	bl	8000bda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f80c 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f90a 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f8bc 	bl	80006a4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f86c 	bl	8000608 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000530:	4801      	ldr	r0, [pc, #4]	; (8000538 <main+0x20>)
 8000532:	f001 ffb9 	bl	80024a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000536:	e7fe      	b.n	8000536 <main+0x1e>
 8000538:	20000058 	.word	0x20000058

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b0a4      	sub	sp, #144	; 0x90
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000546:	2238      	movs	r2, #56	; 0x38
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fb98 	bl	8003c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fb8a 	bl	8003c80 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000570:	f000 ff6a 	bl	8001448 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2340      	movs	r3, #64	; 0x40
 8000580:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800058a:	2306      	movs	r3, #6
 800058c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 48;
 800058e:	2330      	movs	r3, #48	; 0x30
 8000590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f800 	bl	80015b0 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005b6:	f000 f90d 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005d2:	2101      	movs	r1, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fb03 	bl	8001be0 <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005e0:	f000 f8f8 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fd12 	bl	8002018 <HAL_RCCEx_PeriphCLKConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fa:	f000 f8eb 	bl	80007d4 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3790      	adds	r7, #144	; 0x90
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000628:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800062c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000630:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_TIM2_Init+0x98>)
 800063e:	2264      	movs	r2, #100	; 0x64
 8000640:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_TIM2_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800064e:	4814      	ldr	r0, [pc, #80]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000650:	f001 fed2 	bl	80023f8 <HAL_TIM_Base_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800065a:	f000 f8bb 	bl	80007d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_TIM2_Init+0x98>)
 800066c:	f002 f906 	bl	800287c <HAL_TIM_ConfigClockSource>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000676:	f000 f8ad 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800067a:	2320      	movs	r3, #32
 800067c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000688:	f002 fb28 	bl	8002cdc <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000692:	f000 f89f 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000058 	.word	0x20000058

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006aa:	4a23      	ldr	r2, [pc, #140]	; (8000738 <MX_USART2_UART_Init+0x94>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ec:	4811      	ldr	r0, [pc, #68]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006ee:	f002 fbbd 	bl	8002e6c <HAL_UART_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006f8:	f000 f86c 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006fc:	2100      	movs	r1, #0
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_USART2_UART_Init+0x90>)
 8000700:	f003 f9b5 	bl	8003a6e <HAL_UARTEx_SetTxFifoThreshold>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800070a:	f000 f863 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070e:	2100      	movs	r1, #0
 8000710:	4808      	ldr	r0, [pc, #32]	; (8000734 <MX_USART2_UART_Init+0x90>)
 8000712:	f003 f9ea 	bl	8003aea <HAL_UARTEx_SetRxFifoThreshold>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800071c:	f000 f85a 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_USART2_UART_Init+0x90>)
 8000722:	f003 f96b 	bl	80039fc <HAL_UARTEx_DisableFifoMode>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800072c:	f000 f852 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000a4 	.word	0x200000a4
 8000738:	40004400 	.word	0x40004400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_GPIO_Init+0x90>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <MX_GPIO_Init+0x90>)
 8000758:	f043 0320 	orr.w	r3, r3, #32
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_GPIO_Init+0x90>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0320 	and.w	r3, r3, #32
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_GPIO_Init+0x90>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MX_GPIO_Init+0x90>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_GPIO_Init+0x90>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_GPIO_Init+0x90>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <MX_GPIO_Init+0x90>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_GPIO_Init+0x90>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <MX_GPIO_Init+0x94>)
 80007a2:	f000 fe1f 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_GPIO_Init+0x94>)
 80007c0:	f000 fc8e 	bl	80010e0 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000400 	.word	0x48000400

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x44>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x44>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6613      	str	r3, [r2, #96]	; 0x60
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x44>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x44>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6593      	str	r3, [r2, #88]	; 0x58
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800081a:	f000 feb9 	bl	8001590 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800083c:	d113      	bne.n	8000866 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_TIM_Base_MspInit+0x44>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <HAL_TIM_Base_MspInit+0x44>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6593      	str	r3, [r2, #88]	; 0x58
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_TIM_Base_MspInit+0x44>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	201c      	movs	r0, #28
 800085c:	f000 fb09 	bl	8000e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000860:	201c      	movs	r0, #28
 8000862:	f000 fb20 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <HAL_UART_MspInit+0x7c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d128      	bne.n	80008e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0x80>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <HAL_UART_MspInit+0x80>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	6593      	str	r3, [r2, #88]	; 0x58
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c6:	230c      	movs	r3, #12
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d6:	2307      	movs	r3, #7
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 fbfc 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f998 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <TIM2_IRQHandler+0x20>)
 800095a:	f001 fe0f 	bl	800257c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800095e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <TIM2_IRQHandler+0x24>)
 8000964:	f000 fd56 	bl	8001414 <HAL_GPIO_TogglePin>
  UART_message_decode(&huart2);
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <TIM2_IRQHandler+0x28>)
 800096a:	f000 f81f 	bl	80009ac <UART_message_decode>
  /* USER CODE END TIM2_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000058 	.word	0x20000058
 8000978:	48000400 	.word	0x48000400
 800097c:	200000a4 	.word	0x200000a4

08000980 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <SystemInit+0x28>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098a:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <SystemInit+0x28>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <SystemInit+0x28>)
 8000996:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800099a:	609a      	str	r2, [r3, #8]
#endif
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <UART_message_decode>:
#define UART_DATA_BYTE						1

#define FLASH_USER_START_ADDR		ADDR_FLASH_PAGE_0

void UART_message_decode(UART_HandleTypeDef *huart_pointer)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b08b      	sub	sp, #44	; 0x2c
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(huart_pointer, &UART_rx_buffer[0], (uint16_t)UART_MESSAGE_SIZE, (uint32_t)UART_TIMEOUT);
 80009b4:	2300      	movs	r3, #0
 80009b6:	2208      	movs	r2, #8
 80009b8:	4931      	ldr	r1, [pc, #196]	; (8000a80 <UART_message_decode+0xd4>)
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f002 fb3c 	bl	8003038 <HAL_UART_Receive>
	switch (UART_rx_buffer[UART_COMMAND_BYTE])
 80009c0:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <UART_message_decode+0xd4>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d857      	bhi.n	8000a78 <UART_message_decode+0xcc>
 80009c8:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <UART_message_decode+0x24>)
 80009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ce:	bf00      	nop
 80009d0:	080009e5 	.word	0x080009e5
 80009d4:	080009ed 	.word	0x080009ed
 80009d8:	08000a07 	.word	0x08000a07
 80009dc:	08000a23 	.word	0x08000a23
 80009e0:	08000a4b 	.word	0x08000a4b
	{
	case VOID_COMMAND:
	{
		uint8_t test_value = UART_rx_buffer[UART_DATA_BYTE];
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <UART_message_decode+0xd4>)
 80009e6:	785b      	ldrb	r3, [r3, #1]
 80009e8:	73fb      	strb	r3, [r7, #15]

		break;
 80009ea:	e045      	b.n	8000a78 <UART_message_decode+0xcc>
	}
	case WRITE_BYTE:
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, FLASH_USER_START_ADDR, UART_rx_buffer[UART_DATA_BYTE]);
 80009ec:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <UART_message_decode+0xd4>)
 80009ee:	785b      	ldrb	r3, [r3, #1]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f04f 0400 	mov.w	r4, #0
 80009f6:	461a      	mov	r2, r3
 80009f8:	4623      	mov	r3, r4
 80009fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 fa6c 	bl	8000edc <HAL_FLASH_Program>
		break;
 8000a04:	e038      	b.n	8000a78 <UART_message_decode+0xcc>
	}
	case WRITE_LONG_VALUE:
	{
		uint64_t long_value = unite_digits_sequence(UART_LONG_VALUE_LENGHT_BYTES, &UART_rx_buffer[UART_DATA_BYTE]);
 8000a06:	491f      	ldr	r1, [pc, #124]	; (8000a84 <UART_message_decode+0xd8>)
 8000a08:	2004      	movs	r0, #4
 8000a0a:	f000 f841 	bl	8000a90 <unite_digits_sequence>
 8000a0e:	e9c7 0104 	strd	r0, r1, [r7, #16]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, FLASH_USER_START_ADDR, long_value);
 8000a12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a16:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 fa5e 	bl	8000edc <HAL_FLASH_Program>
		break;
 8000a20:	e02a      	b.n	8000a78 <UART_message_decode+0xcc>
	}
	case READ_BYTE:
	{
		uint64_t value_from_memory = *(__IO uint64_t *)FLASH_USER_START_ADDR;
 8000a22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a2a:	e9c7 3406 	strd	r3, r4, [r7, #24]
		init_array_by_zero(sizeof(UART_tx_buffer), &UART_tx_buffer[0]);
 8000a2e:	4916      	ldr	r1, [pc, #88]	; (8000a88 <UART_message_decode+0xdc>)
 8000a30:	2008      	movs	r0, #8
 8000a32:	f000 f88e 	bl	8000b52 <init_array_by_zero>
		UART_tx_buffer[0] = value_from_memory;
 8000a36:	7e3a      	ldrb	r2, [r7, #24]
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <UART_message_decode+0xdc>)
 8000a3a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, UART_tx_buffer, sizeof(UART_tx_buffer), 10);
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	2208      	movs	r2, #8
 8000a40:	4911      	ldr	r1, [pc, #68]	; (8000a88 <UART_message_decode+0xdc>)
 8000a42:	4812      	ldr	r0, [pc, #72]	; (8000a8c <UART_message_decode+0xe0>)
 8000a44:	f002 fa62 	bl	8002f0c <HAL_UART_Transmit>
		break;
 8000a48:	e016      	b.n	8000a78 <UART_message_decode+0xcc>
	}
	case READ_LONG_VALUE:
	{
		uint64_t value_from_memory = *(__IO uint64_t *)FLASH_USER_START_ADDR;
 8000a4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a52:	e9c7 3408 	strd	r3, r4, [r7, #32]
		init_array_by_zero(sizeof(UART_tx_buffer), &UART_tx_buffer[0]);
 8000a56:	490c      	ldr	r1, [pc, #48]	; (8000a88 <UART_message_decode+0xdc>)
 8000a58:	2008      	movs	r0, #8
 8000a5a:	f000 f87a 	bl	8000b52 <init_array_by_zero>
		distrbute_digits_to_bytes(value_from_memory, UART_LONG_VALUE_LENGHT_BYTES, &UART_tx_buffer[0]);
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <UART_message_decode+0xdc>)
 8000a60:	2204      	movs	r2, #4
 8000a62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000a66:	f000 f845 	bl	8000af4 <distrbute_digits_to_bytes>
		HAL_UART_Transmit(&huart2, UART_tx_buffer, sizeof(UART_tx_buffer), 10);
 8000a6a:	230a      	movs	r3, #10
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	4906      	ldr	r1, [pc, #24]	; (8000a88 <UART_message_decode+0xdc>)
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <UART_message_decode+0xe0>)
 8000a72:	f002 fa4b 	bl	8002f0c <HAL_UART_Transmit>
		break;
 8000a76:	bf00      	nop
	}
	}
}
 8000a78:	bf00      	nop
 8000a7a:	372c      	adds	r7, #44	; 0x2c
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd90      	pop	{r4, r7, pc}
 8000a80:	20000048 	.word	0x20000048
 8000a84:	20000049 	.word	0x20000049
 8000a88:	20000050 	.word	0x20000050
 8000a8c:	200000a4 	.word	0x200000a4

08000a90 <unite_digits_sequence>:

uint64_t unite_digits_sequence(uint8_t number_of_values, uint8_t *byte_array_pointer)
{
 8000a90:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8000a94:	b087      	sub	sp, #28
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	6039      	str	r1, [r7, #0]
 8000a9c:	71fb      	strb	r3, [r7, #7]
	uint64_t summary_value = 0;
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	f04f 0400 	mov.w	r4, #0
 8000aa6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (int i = 8; i <= 0; i--)
 8000aaa:	2308      	movs	r3, #8
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	e015      	b.n	8000adc <unite_digits_sequence+0x4c>
	{
		summary_value = summary_value + ((*(byte_array_pointer + i)) << i);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	469b      	mov	fp, r3
 8000ac2:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8000ac6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000aca:	eb1b 0301 	adds.w	r3, fp, r1
 8000ace:	eb4c 0402 	adc.w	r4, ip, r2
 8000ad2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (int i = 8; i <= 0; i--)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	dde6      	ble.n	8000ab0 <unite_digits_sequence+0x20>
	}
	return summary_value;
 8000ae2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	4621      	mov	r1, r4
 8000aea:	371c      	adds	r7, #28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8000af2:	4770      	bx	lr

08000af4 <distrbute_digits_to_bytes>:

void distrbute_digits_to_bytes(uint64_t value_to_distribute, uint8_t number_of_values, uint8_t *byte_array_pointer)
{
 8000af4:	b4f0      	push	{r4, r5, r6, r7}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < number_of_values; i++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e01a      	b.n	8000b40 <distrbute_digits_to_bytes+0x4c>
	{
		*(byte_array_pointer + number_of_values - i) = value_to_distribute >> i;
 8000b0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b0e:	6979      	ldr	r1, [r7, #20]
 8000b10:	f1c1 0620 	rsb	r6, r1, #32
 8000b14:	f1a1 0020 	sub.w	r0, r1, #32
 8000b18:	fa22 f401 	lsr.w	r4, r2, r1
 8000b1c:	fa03 f606 	lsl.w	r6, r3, r6
 8000b20:	4334      	orrs	r4, r6
 8000b22:	fa23 f000 	lsr.w	r0, r3, r0
 8000b26:	4304      	orrs	r4, r0
 8000b28:	fa23 f501 	lsr.w	r5, r3, r1
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	4413      	add	r3, r2
 8000b36:	b2e2      	uxtb	r2, r4
 8000b38:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < number_of_values; i++)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbe0      	blt.n	8000b0a <distrbute_digits_to_bytes+0x16>
	}
}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bcf0      	pop	{r4, r5, r6, r7}
 8000b50:	4770      	bx	lr

08000b52 <init_array_by_zero>:

void init_array_by_zero(uint8_t array_size, uint8_t* array_pointer)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	6039      	str	r1, [r7, #0]
 8000b5c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < array_size; i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	e007      	b.n	8000b74 <init_array_by_zero+0x22>
	{
		*(array_pointer + i) = 0;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	4413      	add	r3, r2
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < array_size; i++)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	3301      	adds	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf3      	blt.n	8000b64 <init_array_by_zero+0x12>
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb2:	f7ff fee5 	bl	8000980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f003 f83f 	bl	8003c38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fcad 	bl	8000518 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000bcc:	08003cf8 	.word	0x08003cf8
  ldr r2, =_sbss
 8000bd0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000bd4:	20000134 	.word	0x20000134

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>

08000bda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f939 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f80e 	bl	8000c0c <HAL_InitTick>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	e001      	b.n	8000c00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfc:	f7ff fdf2 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c00:	79fb      	ldrb	r3, [r7, #7]

}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_InitTick+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d022      	beq.n	8000c66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_InitTick+0x6c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_InitTick+0x68>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f944 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10f      	bne.n	8000c60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	d809      	bhi.n	8000c5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c46:	2200      	movs	r2, #0
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4e:	f000 f910 	bl	8000e72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_InitTick+0x70>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e007      	b.n	8000c6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e004      	b.n	8000c6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e001      	b.n	8000c6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_IncTick+0x1c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a03      	ldr	r2, [pc, #12]	; (8000c9c <HAL_IncTick+0x1c>)
 8000c90:	6013      	str	r3, [r2, #0]
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	20000130 	.word	0x20000130
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000130 	.word	0x20000130

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <__NVIC_EnableIRQ+0x38>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff29 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff40 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff90 	bl	8000db0 <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5f 	bl	8000d5c <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff33 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffa4 	bl	8000e18 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000eee:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <HAL_FLASH_Program+0xa4>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d101      	bne.n	8000efa <HAL_FLASH_Program+0x1e>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e03e      	b.n	8000f78 <HAL_FLASH_Program+0x9c>
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_FLASH_Program+0xa4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f04:	f000 f840 	bl	8000f88 <FLASH_WaitForLastOperation>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d12e      	bne.n	8000f70 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_FLASH_Program+0xa4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d107      	bne.n	8000f2e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000f1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f22:	68b8      	ldr	r0, [r7, #8]
 8000f24:	f000 f884 	bl	8001030 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	e010      	b.n	8000f50 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d002      	beq.n	8000f3a <HAL_FLASH_Program+0x5e>
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d10a      	bne.n	8000f50 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	68b8      	ldr	r0, [r7, #8]
 8000f40:	f000 f89a 	bl	8001078 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d102      	bne.n	8000f50 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8000f4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f4e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f54:	f000 f818 	bl	8000f88 <FLASH_WaitForLastOperation>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_FLASH_Program+0xa8>)
 8000f64:	695a      	ldr	r2, [r3, #20]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	4906      	ldr	r1, [pc, #24]	; (8000f84 <HAL_FLASH_Program+0xa8>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_FLASH_Program+0xa4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000000c 	.word	0x2000000c
 8000f84:	40022000 	.word	0x40022000

08000f88 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff fe88 	bl	8000ca4 <HAL_GetTick>
 8000f94:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000f96:	e009      	b.n	8000fac <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8000f98:	f7ff fe84 	bl	8000ca4 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d201      	bcs.n	8000fac <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e038      	b.n	800101e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <FLASH_WaitForLastOperation+0xa0>)
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb8:	d0ee      	beq.n	8000f98 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <FLASH_WaitForLastOperation+0xa0>)
 8000fbc:	691a      	ldr	r2, [r3, #16]
 8000fbe:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d01e      	beq.n	800100a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <FLASH_WaitForLastOperation+0xa4>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	4a15      	ldr	r2, [pc, #84]	; (800102c <FLASH_WaitForLastOperation+0xa4>)
 8000fd6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <FLASH_WaitForLastOperation+0x6a>
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <FLASH_WaitForLastOperation+0xa0>)
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000fec:	490e      	ldr	r1, [pc, #56]	; (8001028 <FLASH_WaitForLastOperation+0xa0>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	618b      	str	r3, [r1, #24]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d004      	beq.n	8001006 <FLASH_WaitForLastOperation+0x7e>
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <FLASH_WaitForLastOperation+0xa0>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001004:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e009      	b.n	800101e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <FLASH_WaitForLastOperation+0xa0>)
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b01      	cmp	r3, #1
 8001014:	d102      	bne.n	800101c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <FLASH_WaitForLastOperation+0xa0>)
 8001018:	2201      	movs	r2, #1
 800101a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40022000 	.word	0x40022000
 800102c:	2000000c 	.word	0x2000000c

08001030 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001030:	b490      	push	{r4, r7}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <FLASH_Program_DoubleWord+0x44>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <FLASH_Program_DoubleWord+0x44>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800104e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001052:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	f04f 0400 	mov.w	r4, #0
 800105e:	0013      	movs	r3, r2
 8001060:	2400      	movs	r4, #0
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	3204      	adds	r2, #4
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bc90      	pop	{r4, r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40022000 	.word	0x40022000

08001078 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001082:	2340      	movs	r3, #64	; 0x40
 8001084:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <FLASH_Program_Fast+0x64>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <FLASH_Program_Fast+0x64>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001098:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800109a:	f3ef 8310 	mrs	r3, PRIMASK
 800109e:	60fb      	str	r3, [r7, #12]
  return(result);
 80010a0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80010a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	3304      	adds	r3, #4
 80010b2:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3304      	adds	r3, #4
 80010b8:	617b      	str	r3, [r7, #20]
    row_index--;
 80010ba:	7ffb      	ldrb	r3, [r7, #31]
 80010bc:	3b01      	subs	r3, #1
 80010be:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80010c0:	7ffb      	ldrb	r3, [r7, #31]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1ef      	bne.n	80010a6 <FLASH_Program_Fast+0x2e>
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80010d0:	bf00      	nop
 80010d2:	3724      	adds	r7, #36	; 0x24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40022000 	.word	0x40022000

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010ee:	e15a      	b.n	80013a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	4013      	ands	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 814c 	beq.w	80013a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d00b      	beq.n	8001128 <HAL_GPIO_Init+0x48>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d007      	beq.n	8001128 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800111c:	2b11      	cmp	r3, #17
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b12      	cmp	r3, #18
 8001126:	d130      	bne.n	800118a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800115e:	2201      	movs	r2, #1
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	f003 0201 	and.w	r2, r3, #1
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0xea>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b12      	cmp	r3, #18
 80011c8:	d123      	bne.n	8001212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	6939      	ldr	r1, [r7, #16]
 800120e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0203 	and.w	r2, r3, #3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80a6 	beq.w	80013a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001254:	4b5b      	ldr	r3, [pc, #364]	; (80013c4 <HAL_GPIO_Init+0x2e4>)
 8001256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001258:	4a5a      	ldr	r2, [pc, #360]	; (80013c4 <HAL_GPIO_Init+0x2e4>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6613      	str	r3, [r2, #96]	; 0x60
 8001260:	4b58      	ldr	r3, [pc, #352]	; (80013c4 <HAL_GPIO_Init+0x2e4>)
 8001262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126c:	4a56      	ldr	r2, [pc, #344]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001296:	d01f      	beq.n	80012d8 <HAL_GPIO_Init+0x1f8>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a4c      	ldr	r2, [pc, #304]	; (80013cc <HAL_GPIO_Init+0x2ec>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d019      	beq.n	80012d4 <HAL_GPIO_Init+0x1f4>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a4b      	ldr	r2, [pc, #300]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d013      	beq.n	80012d0 <HAL_GPIO_Init+0x1f0>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a4a      	ldr	r2, [pc, #296]	; (80013d4 <HAL_GPIO_Init+0x2f4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d00d      	beq.n	80012cc <HAL_GPIO_Init+0x1ec>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a49      	ldr	r2, [pc, #292]	; (80013d8 <HAL_GPIO_Init+0x2f8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d007      	beq.n	80012c8 <HAL_GPIO_Init+0x1e8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a48      	ldr	r2, [pc, #288]	; (80013dc <HAL_GPIO_Init+0x2fc>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d101      	bne.n	80012c4 <HAL_GPIO_Init+0x1e4>
 80012c0:	2305      	movs	r3, #5
 80012c2:	e00a      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012c4:	2306      	movs	r3, #6
 80012c6:	e008      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012c8:	2304      	movs	r3, #4
 80012ca:	e006      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012cc:	2303      	movs	r3, #3
 80012ce:	e004      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e002      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012d8:	2300      	movs	r3, #0
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	f002 0203 	and.w	r2, r2, #3
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	4093      	lsls	r3, r2
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ea:	4937      	ldr	r1, [pc, #220]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012f8:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <HAL_GPIO_Init+0x300>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800131c:	4a30      	ldr	r2, [pc, #192]	; (80013e0 <HAL_GPIO_Init+0x300>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_GPIO_Init+0x300>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001346:	4a26      	ldr	r2, [pc, #152]	; (80013e0 <HAL_GPIO_Init+0x300>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_GPIO_Init+0x300>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001370:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <HAL_GPIO_Init+0x300>)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_GPIO_Init+0x300>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <HAL_GPIO_Init+0x300>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3301      	adds	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f47f ae9d 	bne.w	80010f0 <HAL_GPIO_Init+0x10>
  }
}
 80013b6:	bf00      	nop
 80013b8:	371c      	adds	r7, #28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	48000800 	.word	0x48000800
 80013d4:	48000c00 	.word	0x48000c00
 80013d8:	48001000 	.word	0x48001000
 80013dc:	48001400 	.word	0x48001400
 80013e0:	40010400 	.word	0x40010400

080013e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
 80013f0:	4613      	mov	r3, r2
 80013f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f4:	787b      	ldrb	r3, [r7, #1]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001400:	e002      	b.n	8001408 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4013      	ands	r3, r2
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43d9      	mvns	r1, r3
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	400b      	ands	r3, r1
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d141      	bne.n	80014da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001456:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800145e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001462:	d131      	bne.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001464:	4b47      	ldr	r3, [pc, #284]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800146a:	4a46      	ldr	r2, [pc, #280]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001470:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001474:	4b43      	ldr	r3, [pc, #268]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800147c:	4a41      	ldr	r2, [pc, #260]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001482:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001484:	4b40      	ldr	r3, [pc, #256]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2232      	movs	r2, #50	; 0x32
 800148a:	fb02 f303 	mul.w	r3, r2, r3
 800148e:	4a3f      	ldr	r2, [pc, #252]	; (800158c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001490:	fba2 2303 	umull	r2, r3, r2, r3
 8001494:	0c9b      	lsrs	r3, r3, #18
 8001496:	3301      	adds	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800149a:	e002      	b.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3b01      	subs	r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a2:	4b38      	ldr	r3, [pc, #224]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ae:	d102      	bne.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f2      	bne.n	800149c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c2:	d158      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e057      	b.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ce:	4a2d      	ldr	r2, [pc, #180]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014d8:	e04d      	b.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014e0:	d141      	bne.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ee:	d131      	bne.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014f6:	4a23      	ldr	r2, [pc, #140]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001508:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2232      	movs	r2, #50	; 0x32
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9b      	lsrs	r3, r3, #18
 8001522:	3301      	adds	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001526:	e002      	b.n	800152e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3b01      	subs	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153a:	d102      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f2      	bne.n	8001528 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154e:	d112      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e011      	b.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001564:	e007      	b.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001570:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001574:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40007000 	.word	0x40007000
 8001588:	20000000 	.word	0x20000000
 800158c:	431bde83 	.word	0x431bde83

08001590 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800159a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159e:	6093      	str	r3, [r2, #8]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40007000 	.word	0x40007000

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e308      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d075      	beq.n	80016ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ce:	4ba3      	ldr	r3, [pc, #652]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d8:	4ba0      	ldr	r3, [pc, #640]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	2b0c      	cmp	r3, #12
 80015e6:	d102      	bne.n	80015ee <HAL_RCC_OscConfig+0x3e>
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d002      	beq.n	80015f4 <HAL_RCC_OscConfig+0x44>
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d10b      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	4b99      	ldr	r3, [pc, #612]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d05b      	beq.n	80016b8 <HAL_RCC_OscConfig+0x108>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d157      	bne.n	80016b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e2e3      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x74>
 8001616:	4b91      	ldr	r3, [pc, #580]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a90      	ldr	r2, [pc, #576]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e01d      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x98>
 800162e:	4b8b      	ldr	r3, [pc, #556]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a8a      	ldr	r2, [pc, #552]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b88      	ldr	r3, [pc, #544]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a87      	ldr	r2, [pc, #540]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001648:	4b84      	ldr	r3, [pc, #528]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a83      	ldr	r2, [pc, #524]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b81      	ldr	r3, [pc, #516]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a80      	ldr	r2, [pc, #512]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fb1c 	bl	8000ca4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fb18 	bl	8000ca4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e2a8      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001682:	4b76      	ldr	r3, [pc, #472]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0xc0>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fb08 	bl	8000ca4 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fb04 	bl	8000ca4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e294      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016aa:	4b6c      	ldr	r3, [pc, #432]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0xe8>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d075      	beq.n	80017b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c6:	4b65      	ldr	r3, [pc, #404]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d0:	4b62      	ldr	r3, [pc, #392]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b0c      	cmp	r3, #12
 80016de:	d102      	bne.n	80016e6 <HAL_RCC_OscConfig+0x136>
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d002      	beq.n	80016ec <HAL_RCC_OscConfig+0x13c>
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d11f      	bne.n	800172c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ec:	4b5b      	ldr	r3, [pc, #364]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_OscConfig+0x154>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e267      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b55      	ldr	r3, [pc, #340]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	4952      	ldr	r1, [pc, #328]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001718:	4b51      	ldr	r3, [pc, #324]	; (8001860 <HAL_RCC_OscConfig+0x2b0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fa75 	bl	8000c0c <HAL_InitTick>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d043      	beq.n	80017b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e253      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d023      	beq.n	800177c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001734:	4b49      	ldr	r3, [pc, #292]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a48      	ldr	r2, [pc, #288]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff fab0 	bl	8000ca4 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff faac 	bl	8000ca4 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e23c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800175a:	4b40      	ldr	r3, [pc, #256]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	061b      	lsls	r3, r3, #24
 8001774:	4939      	ldr	r1, [pc, #228]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001776:	4313      	orrs	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
 800177a:	e01a      	b.n	80017b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177c:	4b37      	ldr	r3, [pc, #220]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a36      	ldr	r2, [pc, #216]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001782:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fa8c 	bl	8000ca4 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001790:	f7ff fa88 	bl	8000ca4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e218      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a2:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x1e0>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d03c      	beq.n	8001838 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d01c      	beq.n	8001800 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017cc:	4a23      	ldr	r2, [pc, #140]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d6:	f7ff fa65 	bl	8000ca4 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fa61 	bl	8000ca4 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1f1      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0ef      	beq.n	80017de <HAL_RCC_OscConfig+0x22e>
 80017fe:	e01b      	b.n	8001838 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001810:	f7ff fa48 	bl	8000ca4 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001818:	f7ff fa44 	bl	8000ca4 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e1d4      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ef      	bne.n	8001818 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80ab 	beq.w	800199c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <HAL_RCC_OscConfig+0x2ac>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <HAL_RCC_OscConfig+0x2b4>
 8001856:	2301      	movs	r3, #1
 8001858:	e005      	b.n	8001866 <HAL_RCC_OscConfig+0x2b6>
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	20000004 	.word	0x20000004
 8001864:	2300      	movs	r3, #0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00d      	beq.n	8001886 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4baf      	ldr	r3, [pc, #700]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	4aae      	ldr	r2, [pc, #696]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
 8001876:	4bac      	ldr	r3, [pc, #688]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001886:	4ba9      	ldr	r3, [pc, #676]	; (8001b2c <HAL_RCC_OscConfig+0x57c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d118      	bne.n	80018c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001892:	4ba6      	ldr	r3, [pc, #664]	; (8001b2c <HAL_RCC_OscConfig+0x57c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4aa5      	ldr	r2, [pc, #660]	; (8001b2c <HAL_RCC_OscConfig+0x57c>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7ff fa01 	bl	8000ca4 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7ff f9fd 	bl	8000ca4 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e18d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b8:	4b9c      	ldr	r3, [pc, #624]	; (8001b2c <HAL_RCC_OscConfig+0x57c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d108      	bne.n	80018de <HAL_RCC_OscConfig+0x32e>
 80018cc:	4b96      	ldr	r3, [pc, #600]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	4a95      	ldr	r2, [pc, #596]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018dc:	e024      	b.n	8001928 <HAL_RCC_OscConfig+0x378>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d110      	bne.n	8001908 <HAL_RCC_OscConfig+0x358>
 80018e6:	4b90      	ldr	r3, [pc, #576]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ec:	4a8e      	ldr	r2, [pc, #568]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f6:	4b8c      	ldr	r3, [pc, #560]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fc:	4a8a      	ldr	r2, [pc, #552]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001906:	e00f      	b.n	8001928 <HAL_RCC_OscConfig+0x378>
 8001908:	4b87      	ldr	r3, [pc, #540]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190e:	4a86      	ldr	r2, [pc, #536]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001918:	4b83      	ldr	r3, [pc, #524]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	4a82      	ldr	r2, [pc, #520]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001920:	f023 0304 	bic.w	r3, r3, #4
 8001924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d016      	beq.n	800195e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001930:	f7ff f9b8 	bl	8000ca4 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001936:	e00a      	b.n	800194e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001938:	f7ff f9b4 	bl	8000ca4 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e142      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800194e:	4b76      	ldr	r3, [pc, #472]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0ed      	beq.n	8001938 <HAL_RCC_OscConfig+0x388>
 800195c:	e015      	b.n	800198a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195e:	f7ff f9a1 	bl	8000ca4 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff f99d 	bl	8000ca4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	; 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e12b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800197c:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1ed      	bne.n	8001966 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800198a:	7ffb      	ldrb	r3, [r7, #31]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001990:	4b65      	ldr	r3, [pc, #404]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	4a64      	ldr	r2, [pc, #400]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d03c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d01c      	beq.n	80019ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019b0:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b6:	4a5c      	ldr	r2, [pc, #368]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff f970 	bl	8000ca4 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c8:	f7ff f96c 	bl	8000ca4 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0fc      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019da:	4b53      	ldr	r3, [pc, #332]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0ef      	beq.n	80019c8 <HAL_RCC_OscConfig+0x418>
 80019e8:	e01b      	b.n	8001a22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ea:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019f0:	4a4d      	ldr	r2, [pc, #308]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7ff f953 	bl	8000ca4 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a02:	f7ff f94f 	bl	8000ca4 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0df      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a14:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ef      	bne.n	8001a02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 80d3 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b0c      	cmp	r3, #12
 8001a36:	f000 808d 	beq.w	8001b54 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d15a      	bne.n	8001af8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a38      	ldr	r2, [pc, #224]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f929 	bl	8000ca4 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a56:	f7ff f925 	bl	8000ca4 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0b5      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_RCC_OscConfig+0x580>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6a11      	ldr	r1, [r2, #32]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a84:	3a01      	subs	r2, #1
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a8e:	0212      	lsls	r2, r2, #8
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a96:	0852      	lsrs	r2, r2, #1
 8001a98:	3a01      	subs	r2, #1
 8001a9a:	0552      	lsls	r2, r2, #21
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aa2:	0852      	lsrs	r2, r2, #1
 8001aa4:	3a01      	subs	r2, #1
 8001aa6:	0652      	lsls	r2, r2, #25
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001aae:	06d2      	lsls	r2, r2, #27
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	491d      	ldr	r1, [pc, #116]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ace:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f8e8 	bl	8000ca4 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f8e4 	bl	8000ca4 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e074      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x528>
 8001af6:	e06c      	b.n	8001bd2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b02:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001b16:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f8c0 	bl	8000ca4 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b26:	e00e      	b.n	8001b46 <HAL_RCC_OscConfig+0x596>
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40007000 	.word	0x40007000
 8001b30:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b34:	f7ff f8b6 	bl	8000ca4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e046      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b46:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <HAL_RCC_OscConfig+0x62c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x584>
 8001b52:	e03e      	b.n	8001bd2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e039      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <HAL_RCC_OscConfig+0x62c>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d12c      	bne.n	8001bce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d123      	bne.n	8001bce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d11b      	bne.n	8001bce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d113      	bne.n	8001bce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d109      	bne.n	8001bce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc4:	085b      	lsrs	r3, r3, #1
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e11e      	b.n	8001e36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b91      	ldr	r3, [pc, #580]	; (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d910      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b8e      	ldr	r3, [pc, #568]	; (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 020f 	bic.w	r2, r3, #15
 8001c0e:	498c      	ldr	r1, [pc, #560]	; (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b8a      	ldr	r3, [pc, #552]	; (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e106      	b.n	8001e36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d073      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d129      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3c:	4b81      	ldr	r3, [pc, #516]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0f4      	b.n	8001e36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c4c:	f000 f99e 	bl	8001f8c <RCC_GetSysClockFreqFromPLLSource>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4a7c      	ldr	r2, [pc, #496]	; (8001e48 <HAL_RCC_ClockConfig+0x268>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d93f      	bls.n	8001cda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c5a:	4b7a      	ldr	r3, [pc, #488]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d033      	beq.n	8001cda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d12f      	bne.n	8001cda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c7a:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c82:	4a70      	ldr	r2, [pc, #448]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e024      	b.n	8001cda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c98:	4b6a      	ldr	r3, [pc, #424]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0c6      	b.n	8001e36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca8:	4b66      	ldr	r3, [pc, #408]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0be      	b.n	8001e36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001cb8:	f000 f8ce 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4a61      	ldr	r2, [pc, #388]	; (8001e48 <HAL_RCC_ClockConfig+0x268>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d909      	bls.n	8001cda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cc6:	4b5f      	ldr	r3, [pc, #380]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cce:	4a5d      	ldr	r2, [pc, #372]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b5a      	ldr	r3, [pc, #360]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4957      	ldr	r1, [pc, #348]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cec:	f7fe ffda 	bl	8000ca4 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7fe ffd6 	bl	8000ca4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e095      	b.n	8001e36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b4e      	ldr	r3, [pc, #312]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d023      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a42      	ldr	r2, [pc, #264]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d54:	4a3b      	ldr	r2, [pc, #236]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5c:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4936      	ldr	r1, [pc, #216]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b80      	cmp	r3, #128	; 0x80
 8001d74:	d105      	bne.n	8001d82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d76:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001d7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d21d      	bcs.n	8001dcc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 020f 	bic.w	r2, r3, #15
 8001d98:	4929      	ldr	r1, [pc, #164]	; (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001da0:	f7fe ff80 	bl	8000ca4 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7fe ff7c 	bl	8000ca4 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e03b      	b.n	8001e36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d1ed      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4917      	ldr	r1, [pc, #92]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	490f      	ldr	r1, [pc, #60]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e0a:	f000 f825 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 8001e0e:	4601      	mov	r1, r0
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_RCC_ClockConfig+0x26c>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	fa21 f303 	lsr.w	r3, r1, r3
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <HAL_RCC_ClockConfig+0x270>)
 8001e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_RCC_ClockConfig+0x274>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe feec 	bl	8000c0c <HAL_InitTick>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000
 8001e44:	40021000 	.word	0x40021000
 8001e48:	04c4b400 	.word	0x04c4b400
 8001e4c:	08003cb8 	.word	0x08003cb8
 8001e50:	20000000 	.word	0x20000000
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d102      	bne.n	8001e70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	e047      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d102      	bne.n	8001e82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e7c:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e03e      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e82:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d136      	bne.n	8001efc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d10c      	bne.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eac:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb6:	68d2      	ldr	r2, [r2, #12]
 8001eb8:	0a12      	lsrs	r2, r2, #8
 8001eba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	617b      	str	r3, [r7, #20]
      break;
 8001ec4:	e00c      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ec6:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	4a10      	ldr	r2, [pc, #64]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed0:	68d2      	ldr	r2, [r2, #12]
 8001ed2:	0a12      	lsrs	r2, r2, #8
 8001ed4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
      break;
 8001ede:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0e5b      	lsrs	r3, r3, #25
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	3301      	adds	r3, #1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	e001      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f00:	693b      	ldr	r3, [r7, #16]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	00f42400 	.word	0x00f42400
 8001f18:	007a1200 	.word	0x007a1200

08001f1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000000 	.word	0x20000000

08001f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f38:	f7ff fff0 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f3c:	4601      	mov	r1, r0
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f4a:	5cd3      	ldrb	r3, [r2, r3]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08003cc8 	.word	0x08003cc8

08001f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f64:	f7ff ffda 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f68:	4601      	mov	r1, r0
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	0adb      	lsrs	r3, r3, #11
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f76:	5cd3      	ldrb	r3, [r2, r3]
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08003cc8 	.word	0x08003cc8

08001f8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d10c      	bne.n	8001fca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fba:	68d2      	ldr	r2, [r2, #12]
 8001fbc:	0a12      	lsrs	r2, r2, #8
 8001fbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	617b      	str	r3, [r7, #20]
    break;
 8001fc8:	e00c      	b.n	8001fe4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fd4:	68d2      	ldr	r2, [r2, #12]
 8001fd6:	0a12      	lsrs	r2, r2, #8
 8001fd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
    break;
 8001fe2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0e5b      	lsrs	r3, r3, #25
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001ffe:	687b      	ldr	r3, [r7, #4]
}
 8002000:	4618      	mov	r0, r3
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40021000 	.word	0x40021000
 8002010:	007a1200 	.word	0x007a1200
 8002014:	00f42400 	.word	0x00f42400

08002018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002020:	2300      	movs	r3, #0
 8002022:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002024:	2300      	movs	r3, #0
 8002026:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8098 	beq.w	8002166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203a:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	4b40      	ldr	r3, [pc, #256]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	4a3f      	ldr	r2, [pc, #252]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6593      	str	r3, [r2, #88]	; 0x58
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002062:	4b3a      	ldr	r3, [pc, #232]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a39      	ldr	r2, [pc, #228]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800206e:	f7fe fe19 	bl	8000ca4 <HAL_GetTick>
 8002072:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002074:	e009      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002076:	f7fe fe15 	bl	8000ca4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d902      	bls.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	74fb      	strb	r3, [r7, #19]
        break;
 8002088:	e005      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0ef      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d159      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01e      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d019      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020b8:	4b23      	ldr	r3, [pc, #140]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ca:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020e4:	4a18      	ldr	r2, [pc, #96]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d016      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7fe fdd5 	bl	8000ca4 <HAL_GetTick>
 80020fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fc:	e00b      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7fe fdd1 	bl	8000ca4 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	; 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d902      	bls.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	74fb      	strb	r3, [r7, #19]
            break;
 8002114:	e006      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ec      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10b      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	4903      	ldr	r1, [pc, #12]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002140:	e008      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	74bb      	strb	r3, [r7, #18]
 8002146:	e005      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002148:	40021000 	.word	0x40021000
 800214c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002154:	7c7b      	ldrb	r3, [r7, #17]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4ba6      	ldr	r3, [pc, #664]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	4aa5      	ldr	r2, [pc, #660]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002172:	4ba0      	ldr	r3, [pc, #640]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	f023 0203 	bic.w	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	499c      	ldr	r1, [pc, #624]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002194:	4b97      	ldr	r3, [pc, #604]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	f023 020c 	bic.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4994      	ldr	r1, [pc, #592]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021b6:	4b8f      	ldr	r3, [pc, #572]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	498b      	ldr	r1, [pc, #556]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021d8:	4b86      	ldr	r3, [pc, #536]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	4983      	ldr	r1, [pc, #524]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021fa:	4b7e      	ldr	r3, [pc, #504]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	497a      	ldr	r1, [pc, #488]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800221c:	4b75      	ldr	r3, [pc, #468]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	4972      	ldr	r1, [pc, #456]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800223e:	4b6d      	ldr	r3, [pc, #436]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	4969      	ldr	r1, [pc, #420]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002260:	4b64      	ldr	r3, [pc, #400]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4961      	ldr	r1, [pc, #388]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002282:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	4958      	ldr	r1, [pc, #352]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d015      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022a4:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	4950      	ldr	r1, [pc, #320]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022c2:	d105      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c4:	4b4b      	ldr	r3, [pc, #300]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a4a      	ldr	r2, [pc, #296]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d015      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022dc:	4b45      	ldr	r3, [pc, #276]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	4942      	ldr	r1, [pc, #264]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fa:	d105      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fc:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a3c      	ldr	r2, [pc, #240]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002306:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d015      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002314:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4934      	ldr	r1, [pc, #208]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002332:	d105      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002334:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a2e      	ldr	r2, [pc, #184]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800233e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d015      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800234c:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235a:	4926      	ldr	r1, [pc, #152]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800236a:	d105      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002376:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d015      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	4918      	ldr	r1, [pc, #96]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a2:	d105      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d015      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023bc:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	490a      	ldr	r1, [pc, #40]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023da:	d105      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80023e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000

080023f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e049      	b.n	800249e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fa04 	bl	800082c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3304      	adds	r3, #4
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f000 fb24 	bl	8002a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d001      	beq.n	80024c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e04a      	b.n	8002556 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a21      	ldr	r2, [pc, #132]	; (8002564 <HAL_TIM_Base_Start_IT+0xbc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d018      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x6c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ea:	d013      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x6c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_TIM_Base_Start_IT+0xc0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00e      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x6c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1c      	ldr	r2, [pc, #112]	; (800256c <HAL_TIM_Base_Start_IT+0xc4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d009      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x6c>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <HAL_TIM_Base_Start_IT+0xc8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x6c>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_TIM_Base_Start_IT+0xcc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d115      	bne.n	8002540 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <HAL_TIM_Base_Start_IT+0xd0>)
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b06      	cmp	r3, #6
 8002524:	d015      	beq.n	8002552 <HAL_TIM_Base_Start_IT+0xaa>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d011      	beq.n	8002552 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253e:	e008      	b.n	8002552 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e000      	b.n	8002554 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40012c00 	.word	0x40012c00
 8002568:	40000400 	.word	0x40000400
 800256c:	40000800 	.word	0x40000800
 8002570:	40013400 	.word	0x40013400
 8002574:	40014000 	.word	0x40014000
 8002578:	00010007 	.word	0x00010007

0800257c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b02      	cmp	r3, #2
 8002590:	d122      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b02      	cmp	r3, #2
 800259e:	d11b      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0202 	mvn.w	r2, #2
 80025a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fa42 	bl	8002a48 <HAL_TIM_IC_CaptureCallback>
 80025c4:	e005      	b.n	80025d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fa34 	bl	8002a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fa45 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d122      	bne.n	800262c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d11b      	bne.n	800262c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0204 	mvn.w	r2, #4
 80025fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2202      	movs	r2, #2
 8002602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa18 	bl	8002a48 <HAL_TIM_IC_CaptureCallback>
 8002618:	e005      	b.n	8002626 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fa0a 	bl	8002a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fa1b 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b08      	cmp	r3, #8
 8002638:	d122      	bne.n	8002680 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b08      	cmp	r3, #8
 8002646:	d11b      	bne.n	8002680 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0208 	mvn.w	r2, #8
 8002650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2204      	movs	r2, #4
 8002656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f9ee 	bl	8002a48 <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f9e0 	bl	8002a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f9f1 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b10      	cmp	r3, #16
 800268c:	d122      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b10      	cmp	r3, #16
 800269a:	d11b      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0210 	mvn.w	r2, #16
 80026a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2208      	movs	r2, #8
 80026aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f9c4 	bl	8002a48 <HAL_TIM_IC_CaptureCallback>
 80026c0:	e005      	b.n	80026ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f9b6 	bl	8002a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f9c7 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d10e      	bne.n	8002700 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d107      	bne.n	8002700 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0201 	mvn.w	r2, #1
 80026f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f990 	bl	8002a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	2b80      	cmp	r3, #128	; 0x80
 800270c:	d10e      	bne.n	800272c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002718:	2b80      	cmp	r3, #128	; 0x80
 800271a:	d107      	bne.n	800272c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fb64 	bl	8002df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800273a:	d10e      	bne.n	800275a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b80      	cmp	r3, #128	; 0x80
 8002748:	d107      	bne.n	800275a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fb57 	bl	8002e08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d10e      	bne.n	8002786 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d107      	bne.n	8002786 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800277e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f975 	bl	8002a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b20      	cmp	r3, #32
 8002792:	d10e      	bne.n	80027b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d107      	bne.n	80027b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f06f 0220 	mvn.w	r2, #32
 80027aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fb17 	bl	8002de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027c0:	d10f      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d0:	d107      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80027da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fb1d 	bl	8002e1c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027f0:	d10f      	bne.n	8002812 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002800:	d107      	bne.n	8002812 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800280a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fb0f 	bl	8002e30 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002820:	d10f      	bne.n	8002842 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002830:	d107      	bne.n	8002842 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800283a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fb01 	bl	8002e44 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800284c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002850:	d10f      	bne.n	8002872 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800285c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002860:	d107      	bne.n	8002872 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800286a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 faf3 	bl	8002e58 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_TIM_ConfigClockSource+0x18>
 8002890:	2302      	movs	r3, #2
 8002892:	e0b9      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x18c>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80028b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b70      	cmp	r3, #112	; 0x70
 80028ce:	d02e      	beq.n	800292e <HAL_TIM_ConfigClockSource+0xb2>
 80028d0:	2b70      	cmp	r3, #112	; 0x70
 80028d2:	d812      	bhi.n	80028fa <HAL_TIM_ConfigClockSource+0x7e>
 80028d4:	2b30      	cmp	r3, #48	; 0x30
 80028d6:	f000 8084 	beq.w	80029e2 <HAL_TIM_ConfigClockSource+0x166>
 80028da:	2b30      	cmp	r3, #48	; 0x30
 80028dc:	d806      	bhi.n	80028ec <HAL_TIM_ConfigClockSource+0x70>
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d07f      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x166>
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d07d      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x166>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d07b      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028ea:	e084      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80028ec:	2b50      	cmp	r3, #80	; 0x50
 80028ee:	d048      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x106>
 80028f0:	2b60      	cmp	r3, #96	; 0x60
 80028f2:	d056      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x126>
 80028f4:	2b40      	cmp	r3, #64	; 0x40
 80028f6:	d064      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x146>
      break;
 80028f8:	e07d      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80028fa:	4a45      	ldr	r2, [pc, #276]	; (8002a10 <HAL_TIM_ConfigClockSource+0x194>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d070      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x166>
 8002900:	4a43      	ldr	r2, [pc, #268]	; (8002a10 <HAL_TIM_ConfigClockSource+0x194>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d809      	bhi.n	800291a <HAL_TIM_ConfigClockSource+0x9e>
 8002906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290a:	d027      	beq.n	800295c <HAL_TIM_ConfigClockSource+0xe0>
 800290c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002910:	d067      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x166>
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002916:	d06d      	beq.n	80029f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002918:	e06d      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800291a:	4a3e      	ldr	r2, [pc, #248]	; (8002a14 <HAL_TIM_ConfigClockSource+0x198>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d060      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x166>
 8002920:	4a3d      	ldr	r2, [pc, #244]	; (8002a18 <HAL_TIM_ConfigClockSource+0x19c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d05d      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x166>
 8002926:	4a3d      	ldr	r2, [pc, #244]	; (8002a1c <HAL_TIM_ConfigClockSource+0x1a0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d05a      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x166>
      break;
 800292c:	e063      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f000 f9ad 	bl	8002c9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002950:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	609a      	str	r2, [r3, #8]
      break;
 800295a:	e04c      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f000 f996 	bl	8002c9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800297e:	609a      	str	r2, [r3, #8]
      break;
 8002980:	e039      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	461a      	mov	r2, r3
 8002990:	f000 f908 	bl	8002ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2150      	movs	r1, #80	; 0x50
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f961 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 80029a0:	e029      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f000 f927 	bl	8002c02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2160      	movs	r1, #96	; 0x60
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f951 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 80029c0:	e019      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f000 f8e8 	bl	8002ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2140      	movs	r1, #64	; 0x40
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f941 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 80029e0:	e009      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f000 f938 	bl	8002c62 <TIM_ITRx_SetConfig>
        break;
 80029f2:	e000      	b.n	80029f6 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80029f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	00100020 	.word	0x00100020
 8002a14:	00100040 	.word	0x00100040
 8002a18:	00100070 	.word	0x00100070
 8002a1c:	00100030 	.word	0x00100030

08002a20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a3c      	ldr	r2, [pc, #240]	; (8002b88 <TIM_Base_SetConfig+0x104>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00f      	beq.n	8002abc <TIM_Base_SetConfig+0x38>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa2:	d00b      	beq.n	8002abc <TIM_Base_SetConfig+0x38>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a39      	ldr	r2, [pc, #228]	; (8002b8c <TIM_Base_SetConfig+0x108>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d007      	beq.n	8002abc <TIM_Base_SetConfig+0x38>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a38      	ldr	r2, [pc, #224]	; (8002b90 <TIM_Base_SetConfig+0x10c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_Base_SetConfig+0x38>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a37      	ldr	r2, [pc, #220]	; (8002b94 <TIM_Base_SetConfig+0x110>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d108      	bne.n	8002ace <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	; (8002b88 <TIM_Base_SetConfig+0x104>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01b      	beq.n	8002b0e <TIM_Base_SetConfig+0x8a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d017      	beq.n	8002b0e <TIM_Base_SetConfig+0x8a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2a      	ldr	r2, [pc, #168]	; (8002b8c <TIM_Base_SetConfig+0x108>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <TIM_Base_SetConfig+0x8a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a29      	ldr	r2, [pc, #164]	; (8002b90 <TIM_Base_SetConfig+0x10c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00f      	beq.n	8002b0e <TIM_Base_SetConfig+0x8a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a28      	ldr	r2, [pc, #160]	; (8002b94 <TIM_Base_SetConfig+0x110>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00b      	beq.n	8002b0e <TIM_Base_SetConfig+0x8a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <TIM_Base_SetConfig+0x114>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <TIM_Base_SetConfig+0x8a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a26      	ldr	r2, [pc, #152]	; (8002b9c <TIM_Base_SetConfig+0x118>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d003      	beq.n	8002b0e <TIM_Base_SetConfig+0x8a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <TIM_Base_SetConfig+0x11c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d108      	bne.n	8002b20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <TIM_Base_SetConfig+0x104>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00f      	beq.n	8002b6c <TIM_Base_SetConfig+0xe8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a11      	ldr	r2, [pc, #68]	; (8002b94 <TIM_Base_SetConfig+0x110>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00b      	beq.n	8002b6c <TIM_Base_SetConfig+0xe8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <TIM_Base_SetConfig+0x114>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d007      	beq.n	8002b6c <TIM_Base_SetConfig+0xe8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a0f      	ldr	r2, [pc, #60]	; (8002b9c <TIM_Base_SetConfig+0x118>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d003      	beq.n	8002b6c <TIM_Base_SetConfig+0xe8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <TIM_Base_SetConfig+0x11c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d103      	bne.n	8002b74 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	615a      	str	r2, [r3, #20]
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000800 	.word	0x40000800
 8002b94:	40013400 	.word	0x40013400
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	40014400 	.word	0x40014400
 8002ba0:	40014800 	.word	0x40014800

08002ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f023 0201 	bic.w	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f023 030a 	bic.w	r3, r3, #10
 8002be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	621a      	str	r2, [r3, #32]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b087      	sub	sp, #28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f023 0210 	bic.w	r2, r3, #16
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	031b      	lsls	r3, r3, #12
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f043 0307 	orr.w	r3, r3, #7
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	021a      	lsls	r2, r3, #8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	609a      	str	r2, [r3, #8]
}
 8002cd0:	bf00      	nop
 8002cd2:	371c      	adds	r7, #28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e065      	b.n	8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2c      	ldr	r2, [pc, #176]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d108      	bne.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1b      	ldr	r2, [pc, #108]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d018      	beq.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6a:	d013      	beq.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00e      	beq.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a13      	ldr	r2, [pc, #76]	; (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d10c      	bne.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	40013400 	.word	0x40013400
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800
 8002ddc:	40014000 	.word	0x40014000

08002de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e042      	b.n	8002f04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fd fcef 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2224      	movs	r2, #36	; 0x24
 8002e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f992 	bl	80031d8 <UART_SetConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e022      	b.n	8002f04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fc2e 	bl	8003728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fcb5 	bl	800386c <UART_CheckIdleState>
 8002f02:	4603      	mov	r3, r0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	f040 8083 	bne.w	800302e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_UART_Transmit+0x28>
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e07b      	b.n	8003030 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Transmit+0x3a>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e074      	b.n	8003030 <HAL_UART_Transmit+0x124>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2221      	movs	r2, #33	; 0x21
 8002f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f5e:	f7fd fea1 	bl	8000ca4 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	88fa      	ldrh	r2, [r7, #6]
 8002f68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	88fa      	ldrh	r2, [r7, #6]
 8002f70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7c:	d108      	bne.n	8002f90 <HAL_UART_Transmit+0x84>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d104      	bne.n	8002f90 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	e003      	b.n	8002f98 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8002fa0:	e02c      	b.n	8002ffc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fca5 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e039      	b.n	8003030 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	e007      	b.n	8002fea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1cc      	bne.n	8002fa2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	2140      	movs	r1, #64	; 0x40
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fc72 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e006      	b.n	8003030 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
  }
}
 8003030:	4618      	mov	r0, r3
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800304e:	2b20      	cmp	r3, #32
 8003050:	f040 80bd 	bne.w	80031ce <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_UART_Receive+0x28>
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b5      	b.n	80031d0 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_UART_Receive+0x3a>
 800306e:	2302      	movs	r3, #2
 8003070:	e0ae      	b.n	80031d0 <HAL_UART_Receive+0x198>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2222      	movs	r2, #34	; 0x22
 8003086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800308a:	f7fd fe0b 	bl	8000ca4 <HAL_GetTick>
 800308e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	88fa      	ldrh	r2, [r7, #6]
 8003094:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	88fa      	ldrh	r2, [r7, #6]
 800309c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a8:	d10e      	bne.n	80030c8 <HAL_UART_Receive+0x90>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_UART_Receive+0x86>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80030b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80030bc:	e02d      	b.n	800311a <HAL_UART_Receive+0xe2>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	22ff      	movs	r2, #255	; 0xff
 80030c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80030c6:	e028      	b.n	800311a <HAL_UART_Receive+0xe2>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10d      	bne.n	80030ec <HAL_UART_Receive+0xb4>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <HAL_UART_Receive+0xaa>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	22ff      	movs	r2, #255	; 0xff
 80030dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80030e0:	e01b      	b.n	800311a <HAL_UART_Receive+0xe2>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	227f      	movs	r2, #127	; 0x7f
 80030e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80030ea:	e016      	b.n	800311a <HAL_UART_Receive+0xe2>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030f4:	d10d      	bne.n	8003112 <HAL_UART_Receive+0xda>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d104      	bne.n	8003108 <HAL_UART_Receive+0xd0>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	227f      	movs	r2, #127	; 0x7f
 8003102:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003106:	e008      	b.n	800311a <HAL_UART_Receive+0xe2>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	223f      	movs	r2, #63	; 0x3f
 800310c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003110:	e003      	b.n	800311a <HAL_UART_Receive+0xe2>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003120:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312a:	d108      	bne.n	800313e <HAL_UART_Receive+0x106>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d104      	bne.n	800313e <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	61bb      	str	r3, [r7, #24]
 800313c:	e003      	b.n	8003146 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800314e:	e032      	b.n	80031b6 <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2200      	movs	r2, #0
 8003158:	2120      	movs	r1, #32
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fbce 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e032      	b.n	80031d0 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10c      	bne.n	800318a <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	b29a      	uxth	r2, r3
 8003178:	8a7b      	ldrh	r3, [r7, #18]
 800317a:	4013      	ands	r3, r2
 800317c:	b29a      	uxth	r2, r3
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	3302      	adds	r3, #2
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	e00c      	b.n	80031a4 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	b2da      	uxtb	r2, r3
 8003192:	8a7b      	ldrh	r3, [r7, #18]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	4013      	ands	r3, r2
 8003198:	b2da      	uxtb	r2, r3
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3301      	adds	r3, #1
 80031a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1c6      	bne.n	8003150 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3720      	adds	r7, #32
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80031dc:	b088      	sub	sp, #32
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	4313      	orrs	r3, r2
 8003206:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4bb0      	ldr	r3, [pc, #704]	; (80034d0 <UART_SetConfig+0x2f8>)
 8003210:	4013      	ands	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	69f9      	ldr	r1, [r7, #28]
 8003218:	430b      	orrs	r3, r1
 800321a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4aa5      	ldr	r2, [pc, #660]	; (80034d4 <UART_SetConfig+0x2fc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	4313      	orrs	r3, r2
 800324a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003256:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	69f9      	ldr	r1, [r7, #28]
 8003260:	430b      	orrs	r3, r1
 8003262:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f023 010f 	bic.w	r1, r3, #15
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a96      	ldr	r2, [pc, #600]	; (80034d8 <UART_SetConfig+0x300>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d121      	bne.n	80032c8 <UART_SetConfig+0xf0>
 8003284:	4b95      	ldr	r3, [pc, #596]	; (80034dc <UART_SetConfig+0x304>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b03      	cmp	r3, #3
 8003290:	d816      	bhi.n	80032c0 <UART_SetConfig+0xe8>
 8003292:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <UART_SetConfig+0xc0>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032b5 	.word	0x080032b5
 80032a0:	080032af 	.word	0x080032af
 80032a4:	080032bb 	.word	0x080032bb
 80032a8:	2301      	movs	r3, #1
 80032aa:	76fb      	strb	r3, [r7, #27]
 80032ac:	e0be      	b.n	800342c <UART_SetConfig+0x254>
 80032ae:	2302      	movs	r3, #2
 80032b0:	76fb      	strb	r3, [r7, #27]
 80032b2:	e0bb      	b.n	800342c <UART_SetConfig+0x254>
 80032b4:	2304      	movs	r3, #4
 80032b6:	76fb      	strb	r3, [r7, #27]
 80032b8:	e0b8      	b.n	800342c <UART_SetConfig+0x254>
 80032ba:	2308      	movs	r3, #8
 80032bc:	76fb      	strb	r3, [r7, #27]
 80032be:	e0b5      	b.n	800342c <UART_SetConfig+0x254>
 80032c0:	2310      	movs	r3, #16
 80032c2:	76fb      	strb	r3, [r7, #27]
 80032c4:	bf00      	nop
 80032c6:	e0b1      	b.n	800342c <UART_SetConfig+0x254>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a84      	ldr	r2, [pc, #528]	; (80034e0 <UART_SetConfig+0x308>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d134      	bne.n	800333c <UART_SetConfig+0x164>
 80032d2:	4b82      	ldr	r3, [pc, #520]	; (80034dc <UART_SetConfig+0x304>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	d829      	bhi.n	8003334 <UART_SetConfig+0x15c>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <UART_SetConfig+0x110>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	0800331d 	.word	0x0800331d
 80032ec:	08003335 	.word	0x08003335
 80032f0:	08003335 	.word	0x08003335
 80032f4:	08003335 	.word	0x08003335
 80032f8:	08003329 	.word	0x08003329
 80032fc:	08003335 	.word	0x08003335
 8003300:	08003335 	.word	0x08003335
 8003304:	08003335 	.word	0x08003335
 8003308:	08003323 	.word	0x08003323
 800330c:	08003335 	.word	0x08003335
 8003310:	08003335 	.word	0x08003335
 8003314:	08003335 	.word	0x08003335
 8003318:	0800332f 	.word	0x0800332f
 800331c:	2300      	movs	r3, #0
 800331e:	76fb      	strb	r3, [r7, #27]
 8003320:	e084      	b.n	800342c <UART_SetConfig+0x254>
 8003322:	2302      	movs	r3, #2
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e081      	b.n	800342c <UART_SetConfig+0x254>
 8003328:	2304      	movs	r3, #4
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e07e      	b.n	800342c <UART_SetConfig+0x254>
 800332e:	2308      	movs	r3, #8
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e07b      	b.n	800342c <UART_SetConfig+0x254>
 8003334:	2310      	movs	r3, #16
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	bf00      	nop
 800333a:	e077      	b.n	800342c <UART_SetConfig+0x254>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a68      	ldr	r2, [pc, #416]	; (80034e4 <UART_SetConfig+0x30c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d120      	bne.n	8003388 <UART_SetConfig+0x1b0>
 8003346:	4b65      	ldr	r3, [pc, #404]	; (80034dc <UART_SetConfig+0x304>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003350:	2b10      	cmp	r3, #16
 8003352:	d00f      	beq.n	8003374 <UART_SetConfig+0x19c>
 8003354:	2b10      	cmp	r3, #16
 8003356:	d802      	bhi.n	800335e <UART_SetConfig+0x186>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <UART_SetConfig+0x190>
 800335c:	e010      	b.n	8003380 <UART_SetConfig+0x1a8>
 800335e:	2b20      	cmp	r3, #32
 8003360:	d005      	beq.n	800336e <UART_SetConfig+0x196>
 8003362:	2b30      	cmp	r3, #48	; 0x30
 8003364:	d009      	beq.n	800337a <UART_SetConfig+0x1a2>
 8003366:	e00b      	b.n	8003380 <UART_SetConfig+0x1a8>
 8003368:	2300      	movs	r3, #0
 800336a:	76fb      	strb	r3, [r7, #27]
 800336c:	e05e      	b.n	800342c <UART_SetConfig+0x254>
 800336e:	2302      	movs	r3, #2
 8003370:	76fb      	strb	r3, [r7, #27]
 8003372:	e05b      	b.n	800342c <UART_SetConfig+0x254>
 8003374:	2304      	movs	r3, #4
 8003376:	76fb      	strb	r3, [r7, #27]
 8003378:	e058      	b.n	800342c <UART_SetConfig+0x254>
 800337a:	2308      	movs	r3, #8
 800337c:	76fb      	strb	r3, [r7, #27]
 800337e:	e055      	b.n	800342c <UART_SetConfig+0x254>
 8003380:	2310      	movs	r3, #16
 8003382:	76fb      	strb	r3, [r7, #27]
 8003384:	bf00      	nop
 8003386:	e051      	b.n	800342c <UART_SetConfig+0x254>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a56      	ldr	r2, [pc, #344]	; (80034e8 <UART_SetConfig+0x310>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d120      	bne.n	80033d4 <UART_SetConfig+0x1fc>
 8003392:	4b52      	ldr	r3, [pc, #328]	; (80034dc <UART_SetConfig+0x304>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d00f      	beq.n	80033c0 <UART_SetConfig+0x1e8>
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	d802      	bhi.n	80033aa <UART_SetConfig+0x1d2>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <UART_SetConfig+0x1dc>
 80033a8:	e010      	b.n	80033cc <UART_SetConfig+0x1f4>
 80033aa:	2b80      	cmp	r3, #128	; 0x80
 80033ac:	d005      	beq.n	80033ba <UART_SetConfig+0x1e2>
 80033ae:	2bc0      	cmp	r3, #192	; 0xc0
 80033b0:	d009      	beq.n	80033c6 <UART_SetConfig+0x1ee>
 80033b2:	e00b      	b.n	80033cc <UART_SetConfig+0x1f4>
 80033b4:	2300      	movs	r3, #0
 80033b6:	76fb      	strb	r3, [r7, #27]
 80033b8:	e038      	b.n	800342c <UART_SetConfig+0x254>
 80033ba:	2302      	movs	r3, #2
 80033bc:	76fb      	strb	r3, [r7, #27]
 80033be:	e035      	b.n	800342c <UART_SetConfig+0x254>
 80033c0:	2304      	movs	r3, #4
 80033c2:	76fb      	strb	r3, [r7, #27]
 80033c4:	e032      	b.n	800342c <UART_SetConfig+0x254>
 80033c6:	2308      	movs	r3, #8
 80033c8:	76fb      	strb	r3, [r7, #27]
 80033ca:	e02f      	b.n	800342c <UART_SetConfig+0x254>
 80033cc:	2310      	movs	r3, #16
 80033ce:	76fb      	strb	r3, [r7, #27]
 80033d0:	bf00      	nop
 80033d2:	e02b      	b.n	800342c <UART_SetConfig+0x254>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a3e      	ldr	r2, [pc, #248]	; (80034d4 <UART_SetConfig+0x2fc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d124      	bne.n	8003428 <UART_SetConfig+0x250>
 80033de:	4b3f      	ldr	r3, [pc, #252]	; (80034dc <UART_SetConfig+0x304>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ec:	d012      	beq.n	8003414 <UART_SetConfig+0x23c>
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f2:	d802      	bhi.n	80033fa <UART_SetConfig+0x222>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <UART_SetConfig+0x230>
 80033f8:	e012      	b.n	8003420 <UART_SetConfig+0x248>
 80033fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033fe:	d006      	beq.n	800340e <UART_SetConfig+0x236>
 8003400:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003404:	d009      	beq.n	800341a <UART_SetConfig+0x242>
 8003406:	e00b      	b.n	8003420 <UART_SetConfig+0x248>
 8003408:	2300      	movs	r3, #0
 800340a:	76fb      	strb	r3, [r7, #27]
 800340c:	e00e      	b.n	800342c <UART_SetConfig+0x254>
 800340e:	2302      	movs	r3, #2
 8003410:	76fb      	strb	r3, [r7, #27]
 8003412:	e00b      	b.n	800342c <UART_SetConfig+0x254>
 8003414:	2304      	movs	r3, #4
 8003416:	76fb      	strb	r3, [r7, #27]
 8003418:	e008      	b.n	800342c <UART_SetConfig+0x254>
 800341a:	2308      	movs	r3, #8
 800341c:	76fb      	strb	r3, [r7, #27]
 800341e:	e005      	b.n	800342c <UART_SetConfig+0x254>
 8003420:	2310      	movs	r3, #16
 8003422:	76fb      	strb	r3, [r7, #27]
 8003424:	bf00      	nop
 8003426:	e001      	b.n	800342c <UART_SetConfig+0x254>
 8003428:	2310      	movs	r3, #16
 800342a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a28      	ldr	r2, [pc, #160]	; (80034d4 <UART_SetConfig+0x2fc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	f040 80a1 	bne.w	800357a <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003438:	7efb      	ldrb	r3, [r7, #27]
 800343a:	2b08      	cmp	r3, #8
 800343c:	d823      	bhi.n	8003486 <UART_SetConfig+0x2ae>
 800343e:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <UART_SetConfig+0x26c>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	08003469 	.word	0x08003469
 8003448:	08003487 	.word	0x08003487
 800344c:	08003471 	.word	0x08003471
 8003450:	08003487 	.word	0x08003487
 8003454:	08003477 	.word	0x08003477
 8003458:	08003487 	.word	0x08003487
 800345c:	08003487 	.word	0x08003487
 8003460:	08003487 	.word	0x08003487
 8003464:	0800347f 	.word	0x0800347f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003468:	f7fe fd64 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 800346c:	6178      	str	r0, [r7, #20]
        break;
 800346e:	e00f      	b.n	8003490 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003470:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <UART_SetConfig+0x314>)
 8003472:	617b      	str	r3, [r7, #20]
        break;
 8003474:	e00c      	b.n	8003490 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003476:	f7fe fcef 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 800347a:	6178      	str	r0, [r7, #20]
        break;
 800347c:	e008      	b.n	8003490 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003482:	617b      	str	r3, [r7, #20]
        break;
 8003484:	e004      	b.n	8003490 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	76bb      	strb	r3, [r7, #26]
        break;
 800348e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8130 	beq.w	80036f8 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <UART_SetConfig+0x318>)
 800349e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034a2:	461a      	mov	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4413      	add	r3, r2
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d305      	bcc.n	80034c8 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d915      	bls.n	80034f4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	76bb      	strb	r3, [r7, #26]
 80034cc:	e114      	b.n	80036f8 <UART_SetConfig+0x520>
 80034ce:	bf00      	nop
 80034d0:	cfff69f3 	.word	0xcfff69f3
 80034d4:	40008000 	.word	0x40008000
 80034d8:	40013800 	.word	0x40013800
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40004400 	.word	0x40004400
 80034e4:	40004800 	.word	0x40004800
 80034e8:	40004c00 	.word	0x40004c00
 80034ec:	00f42400 	.word	0x00f42400
 80034f0:	08003cd0 	.word	0x08003cd0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	4a87      	ldr	r2, [pc, #540]	; (8003720 <UART_SetConfig+0x548>)
 8003502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003506:	b29b      	uxth	r3, r3
 8003508:	f04f 0400 	mov.w	r4, #0
 800350c:	461a      	mov	r2, r3
 800350e:	4623      	mov	r3, r4
 8003510:	f7fc fe82 	bl	8000218 <__aeabi_uldivmod>
 8003514:	4603      	mov	r3, r0
 8003516:	460c      	mov	r4, r1
 8003518:	4619      	mov	r1, r3
 800351a:	4622      	mov	r2, r4
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	f04f 0400 	mov.w	r4, #0
 8003524:	0214      	lsls	r4, r2, #8
 8003526:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800352a:	020b      	lsls	r3, r1, #8
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6852      	ldr	r2, [r2, #4]
 8003530:	0852      	lsrs	r2, r2, #1
 8003532:	4611      	mov	r1, r2
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	eb13 0b01 	adds.w	fp, r3, r1
 800353c:	eb44 0c02 	adc.w	ip, r4, r2
 8003540:	4658      	mov	r0, fp
 8003542:	4661      	mov	r1, ip
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f04f 0400 	mov.w	r4, #0
 800354c:	461a      	mov	r2, r3
 800354e:	4623      	mov	r3, r4
 8003550:	f7fc fe62 	bl	8000218 <__aeabi_uldivmod>
 8003554:	4603      	mov	r3, r0
 8003556:	460c      	mov	r4, r1
 8003558:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003560:	d308      	bcc.n	8003574 <UART_SetConfig+0x39c>
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003568:	d204      	bcs.n	8003574 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	e0c1      	b.n	80036f8 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	76bb      	strb	r3, [r7, #26]
 8003578:	e0be      	b.n	80036f8 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003582:	d164      	bne.n	800364e <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8003584:	7efb      	ldrb	r3, [r7, #27]
 8003586:	2b08      	cmp	r3, #8
 8003588:	d827      	bhi.n	80035da <UART_SetConfig+0x402>
 800358a:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <UART_SetConfig+0x3b8>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035b5 	.word	0x080035b5
 8003594:	080035bd 	.word	0x080035bd
 8003598:	080035c5 	.word	0x080035c5
 800359c:	080035db 	.word	0x080035db
 80035a0:	080035cb 	.word	0x080035cb
 80035a4:	080035db 	.word	0x080035db
 80035a8:	080035db 	.word	0x080035db
 80035ac:	080035db 	.word	0x080035db
 80035b0:	080035d3 	.word	0x080035d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b4:	f7fe fcbe 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 80035b8:	6178      	str	r0, [r7, #20]
        break;
 80035ba:	e013      	b.n	80035e4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035bc:	f7fe fcd0 	bl	8001f60 <HAL_RCC_GetPCLK2Freq>
 80035c0:	6178      	str	r0, [r7, #20]
        break;
 80035c2:	e00f      	b.n	80035e4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c4:	4b57      	ldr	r3, [pc, #348]	; (8003724 <UART_SetConfig+0x54c>)
 80035c6:	617b      	str	r3, [r7, #20]
        break;
 80035c8:	e00c      	b.n	80035e4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ca:	f7fe fc45 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 80035ce:	6178      	str	r0, [r7, #20]
        break;
 80035d0:	e008      	b.n	80035e4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d6:	617b      	str	r3, [r7, #20]
        break;
 80035d8:	e004      	b.n	80035e4 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	76bb      	strb	r3, [r7, #26]
        break;
 80035e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8086 	beq.w	80036f8 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	4a4b      	ldr	r2, [pc, #300]	; (8003720 <UART_SetConfig+0x548>)
 80035f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035f6:	461a      	mov	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80035fe:	005a      	lsls	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	441a      	add	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	b29b      	uxth	r3, r3
 8003612:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b0f      	cmp	r3, #15
 8003618:	d916      	bls.n	8003648 <UART_SetConfig+0x470>
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003620:	d212      	bcs.n	8003648 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	b29b      	uxth	r3, r3
 8003626:	f023 030f 	bic.w	r3, r3, #15
 800362a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	085b      	lsrs	r3, r3, #1
 8003630:	b29b      	uxth	r3, r3
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	b29a      	uxth	r2, r3
 8003638:	89fb      	ldrh	r3, [r7, #14]
 800363a:	4313      	orrs	r3, r2
 800363c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	89fa      	ldrh	r2, [r7, #14]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	e057      	b.n	80036f8 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	76bb      	strb	r3, [r7, #26]
 800364c:	e054      	b.n	80036f8 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 800364e:	7efb      	ldrb	r3, [r7, #27]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d828      	bhi.n	80036a6 <UART_SetConfig+0x4ce>
 8003654:	a201      	add	r2, pc, #4	; (adr r2, 800365c <UART_SetConfig+0x484>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	08003681 	.word	0x08003681
 8003660:	08003689 	.word	0x08003689
 8003664:	08003691 	.word	0x08003691
 8003668:	080036a7 	.word	0x080036a7
 800366c:	08003697 	.word	0x08003697
 8003670:	080036a7 	.word	0x080036a7
 8003674:	080036a7 	.word	0x080036a7
 8003678:	080036a7 	.word	0x080036a7
 800367c:	0800369f 	.word	0x0800369f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003680:	f7fe fc58 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 8003684:	6178      	str	r0, [r7, #20]
        break;
 8003686:	e013      	b.n	80036b0 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003688:	f7fe fc6a 	bl	8001f60 <HAL_RCC_GetPCLK2Freq>
 800368c:	6178      	str	r0, [r7, #20]
        break;
 800368e:	e00f      	b.n	80036b0 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003690:	4b24      	ldr	r3, [pc, #144]	; (8003724 <UART_SetConfig+0x54c>)
 8003692:	617b      	str	r3, [r7, #20]
        break;
 8003694:	e00c      	b.n	80036b0 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003696:	f7fe fbdf 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 800369a:	6178      	str	r0, [r7, #20]
        break;
 800369c:	e008      	b.n	80036b0 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a2:	617b      	str	r3, [r7, #20]
        break;
 80036a4:	e004      	b.n	80036b0 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	76bb      	strb	r3, [r7, #26]
        break;
 80036ae:	bf00      	nop
    }

    if (pclk != 0U)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d020      	beq.n	80036f8 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	4a19      	ldr	r2, [pc, #100]	; (8003720 <UART_SetConfig+0x548>)
 80036bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036c0:	461a      	mov	r2, r3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	441a      	add	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	b29b      	uxth	r3, r3
 80036da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b0f      	cmp	r3, #15
 80036e0:	d908      	bls.n	80036f4 <UART_SetConfig+0x51c>
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e8:	d204      	bcs.n	80036f4 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	e001      	b.n	80036f8 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003714:	7ebb      	ldrb	r3, [r7, #26]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003720:	08003cd0 	.word	0x08003cd0
 8003724:	00f42400 	.word	0x00f42400

08003728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01a      	beq.n	800383e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003826:	d10a      	bne.n	800383e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	605a      	str	r2, [r3, #4]
  }
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af02      	add	r7, sp, #8
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800387c:	f7fd fa12 	bl	8000ca4 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b08      	cmp	r3, #8
 800388e:	d10e      	bne.n	80038ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f82c 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e022      	b.n	80038f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d10e      	bne.n	80038da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f816 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e00c      	b.n	80038f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390c:	e062      	b.n	80039d4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d05e      	beq.n	80039d4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fd f9c5 	bl	8000ca4 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <UART_WaitOnFlagUntilTimeout+0x30>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d11d      	bne.n	8003968 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800393a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e045      	b.n	80039f4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d02e      	beq.n	80039d4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003984:	d126      	bne.n	80039d4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800398e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800399e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e00f      	b.n	80039f4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4013      	ands	r3, r2
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d08d      	beq.n	800390e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e027      	b.n	8003a62 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2224      	movs	r2, #36	; 0x24
 8003a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003a40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e02d      	b.n	8003ae2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2224      	movs	r2, #36	; 0x24
 8003a92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f850 	bl	8003b68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e02d      	b.n	8003b5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2224      	movs	r2, #36	; 0x24
 8003b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f812 	bl	8003b68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b089      	sub	sp, #36	; 0x24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003b70:	4a2f      	ldr	r2, [pc, #188]	; (8003c30 <UARTEx_SetNbDataToProcess+0xc8>)
 8003b72:	f107 0314 	add.w	r3, r7, #20
 8003b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b7a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003b7e:	4a2d      	ldr	r2, [pc, #180]	; (8003c34 <UARTEx_SetNbDataToProcess+0xcc>)
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b88:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d108      	bne.n	8003ba6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ba4:	e03d      	b.n	8003c22 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003baa:	2308      	movs	r3, #8
 8003bac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	0e5b      	lsrs	r3, r3, #25
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	0f5b      	lsrs	r3, r3, #29
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bce:	7fbb      	ldrb	r3, [r7, #30]
 8003bd0:	7f3a      	ldrb	r2, [r7, #28]
 8003bd2:	f107 0120 	add.w	r1, r7, #32
 8003bd6:	440a      	add	r2, r1
 8003bd8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003be0:	7f3a      	ldrb	r2, [r7, #28]
 8003be2:	f107 0120 	add.w	r1, r7, #32
 8003be6:	440a      	add	r2, r1
 8003be8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bec:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bf8:	7ffb      	ldrb	r3, [r7, #31]
 8003bfa:	7f7a      	ldrb	r2, [r7, #29]
 8003bfc:	f107 0120 	add.w	r1, r7, #32
 8003c00:	440a      	add	r2, r1
 8003c02:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c0a:	7f7a      	ldrb	r2, [r7, #29]
 8003c0c:	f107 0120 	add.w	r1, r7, #32
 8003c10:	440a      	add	r2, r1
 8003c12:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c16:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c22:	bf00      	nop
 8003c24:	3724      	adds	r7, #36	; 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	08003ca8 	.word	0x08003ca8
 8003c34:	08003cb0 	.word	0x08003cb0

08003c38 <__libc_init_array>:
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	4e0d      	ldr	r6, [pc, #52]	; (8003c70 <__libc_init_array+0x38>)
 8003c3c:	4c0d      	ldr	r4, [pc, #52]	; (8003c74 <__libc_init_array+0x3c>)
 8003c3e:	1ba4      	subs	r4, r4, r6
 8003c40:	10a4      	asrs	r4, r4, #2
 8003c42:	2500      	movs	r5, #0
 8003c44:	42a5      	cmp	r5, r4
 8003c46:	d109      	bne.n	8003c5c <__libc_init_array+0x24>
 8003c48:	4e0b      	ldr	r6, [pc, #44]	; (8003c78 <__libc_init_array+0x40>)
 8003c4a:	4c0c      	ldr	r4, [pc, #48]	; (8003c7c <__libc_init_array+0x44>)
 8003c4c:	f000 f820 	bl	8003c90 <_init>
 8003c50:	1ba4      	subs	r4, r4, r6
 8003c52:	10a4      	asrs	r4, r4, #2
 8003c54:	2500      	movs	r5, #0
 8003c56:	42a5      	cmp	r5, r4
 8003c58:	d105      	bne.n	8003c66 <__libc_init_array+0x2e>
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
 8003c5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c60:	4798      	blx	r3
 8003c62:	3501      	adds	r5, #1
 8003c64:	e7ee      	b.n	8003c44 <__libc_init_array+0xc>
 8003c66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c6a:	4798      	blx	r3
 8003c6c:	3501      	adds	r5, #1
 8003c6e:	e7f2      	b.n	8003c56 <__libc_init_array+0x1e>
 8003c70:	08003cf0 	.word	0x08003cf0
 8003c74:	08003cf0 	.word	0x08003cf0
 8003c78:	08003cf0 	.word	0x08003cf0
 8003c7c:	08003cf4 	.word	0x08003cf4

08003c80 <memset>:
 8003c80:	4402      	add	r2, r0
 8003c82:	4603      	mov	r3, r0
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d100      	bne.n	8003c8a <memset+0xa>
 8003c88:	4770      	bx	lr
 8003c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8e:	e7f9      	b.n	8003c84 <memset+0x4>

08003c90 <_init>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr

08003c9c <_fini>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	bf00      	nop
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr
