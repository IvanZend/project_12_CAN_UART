
project_12_FLASH_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003d8c  08003d8c  00013d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dcc  08003dcc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dd4  08003dd4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd4  08003dd4  00013dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd8  08003dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000002c  08003e08  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003e08  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e51  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000240c  00000000  00000000  00031ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  000342c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  000353a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dfe0  00000000  00000000  00036378  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d2ae  00000000  00000000  00054358  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c639e  00000000  00000000  00061606  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001279a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a4  00000000  00000000  00127a20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003d74 	.word	0x08003d74

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	08003d74 	.word	0x08003d74

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fb05 	bl	8000b2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f80c 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f90a 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f8bc 	bl	80006a4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f86c 	bl	8000608 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000530:	4801      	ldr	r0, [pc, #4]	; (8000538 <main+0x20>)
 8000532:	f002 f8c1 	bl	80026b8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000536:	e7fe      	b.n	8000536 <main+0x1e>
 8000538:	20000058 	.word	0x20000058

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b0a4      	sub	sp, #144	; 0x90
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000546:	2238      	movs	r2, #56	; 0x38
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fc0a 	bl	8003d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fbfc 	bl	8003d64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000570:	f001 f872 	bl	8001658 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2340      	movs	r3, #64	; 0x40
 8000580:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800058a:	2306      	movs	r3, #6
 800058c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 48;
 800058e:	2330      	movs	r3, #48	; 0x30
 8000590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f908 	bl	80017c0 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005b6:	f000 f90d 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005d2:	2101      	movs	r1, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fc0b 	bl	8001df0 <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005e0:	f000 f8f8 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fe1a 	bl	8002228 <HAL_RCCEx_PeriphCLKConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fa:	f000 f8eb 	bl	80007d4 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3790      	adds	r7, #144	; 0x90
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000628:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800062c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000630:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_TIM2_Init+0x98>)
 800063e:	2264      	movs	r2, #100	; 0x64
 8000640:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_TIM2_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800064e:	4814      	ldr	r0, [pc, #80]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000650:	f001 ffda 	bl	8002608 <HAL_TIM_Base_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800065a:	f000 f8bb 	bl	80007d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_TIM2_Init+0x98>)
 800066c:	f002 fa0e 	bl	8002a8c <HAL_TIM_ConfigClockSource>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000676:	f000 f8ad 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800067a:	2320      	movs	r3, #32
 800067c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MX_TIM2_Init+0x98>)
 8000688:	f002 fc30 	bl	8002eec <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000692:	f000 f89f 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000058 	.word	0x20000058

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006aa:	4a23      	ldr	r2, [pc, #140]	; (8000738 <MX_USART2_UART_Init+0x94>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ec:	4811      	ldr	r0, [pc, #68]	; (8000734 <MX_USART2_UART_Init+0x90>)
 80006ee:	f002 fcc5 	bl	800307c <HAL_UART_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006f8:	f000 f86c 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006fc:	2100      	movs	r1, #0
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_USART2_UART_Init+0x90>)
 8000700:	f003 fa27 	bl	8003b52 <HAL_UARTEx_SetTxFifoThreshold>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800070a:	f000 f863 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070e:	2100      	movs	r1, #0
 8000710:	4808      	ldr	r0, [pc, #32]	; (8000734 <MX_USART2_UART_Init+0x90>)
 8000712:	f003 fa5c 	bl	8003bce <HAL_UARTEx_SetRxFifoThreshold>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800071c:	f000 f85a 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_USART2_UART_Init+0x90>)
 8000722:	f003 f9dd 	bl	8003ae0 <HAL_UARTEx_DisableFifoMode>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800072c:	f000 f852 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000a4 	.word	0x200000a4
 8000738:	40004400 	.word	0x40004400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_GPIO_Init+0x90>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <MX_GPIO_Init+0x90>)
 8000758:	f043 0320 	orr.w	r3, r3, #32
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_GPIO_Init+0x90>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0320 	and.w	r3, r3, #32
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_GPIO_Init+0x90>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MX_GPIO_Init+0x90>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_GPIO_Init+0x90>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_GPIO_Init+0x90>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <MX_GPIO_Init+0x90>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_GPIO_Init+0x90>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <MX_GPIO_Init+0x94>)
 80007a2:	f000 ff27 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_GPIO_Init+0x94>)
 80007c0:	f000 fd96 	bl	80012f0 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000400 	.word	0x48000400

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x44>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x44>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6613      	str	r3, [r2, #96]	; 0x60
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x44>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x44>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6593      	str	r3, [r2, #88]	; 0x58
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800081a:	f000 ffc1 	bl	80017a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800083c:	d113      	bne.n	8000866 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_TIM_Base_MspInit+0x44>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <HAL_TIM_Base_MspInit+0x44>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6593      	str	r3, [r2, #88]	; 0x58
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_TIM_Base_MspInit+0x44>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2101      	movs	r1, #1
 800085a:	201c      	movs	r0, #28
 800085c:	f000 fab1 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000860:	201c      	movs	r0, #28
 8000862:	f000 fac8 	bl	8000df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <HAL_UART_MspInit+0x7c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d128      	bne.n	80008e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0x80>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <HAL_UART_MspInit+0x80>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	6593      	str	r3, [r2, #88]	; 0x58
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_UART_MspInit+0x80>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c6:	230c      	movs	r3, #12
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d6:	2307      	movs	r3, #7
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 fd04 	bl	80012f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f940 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <TIM2_IRQHandler+0x20>)
 800095a:	f001 ff17 	bl	800278c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800095e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <TIM2_IRQHandler+0x24>)
 8000964:	f000 fe5e 	bl	8001624 <HAL_GPIO_TogglePin>
  UART_message_check(&huart2);
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <TIM2_IRQHandler+0x28>)
 800096a:	f000 f81f 	bl	80009ac <UART_message_check>
  /* USER CODE END TIM2_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000058 	.word	0x20000058
 8000978:	48000400 	.word	0x48000400
 800097c:	200000a4 	.word	0x200000a4

08000980 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <SystemInit+0x28>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098a:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <SystemInit+0x28>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <SystemInit+0x28>)
 8000996:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800099a:	609a      	str	r2, [r3, #8]
#endif
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <UART_message_check>:
#define DATA_64                     ((uint64_t)0x1)

uint64_t UART_recieve_timer_counter = 0;

void UART_message_check(UART_HandleTypeDef *huart_pointer)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	init_array_by_zero(sizeof(UART_rx_buffer), UART_rx_buffer);
 80009b4:	4909      	ldr	r1, [pc, #36]	; (80009dc <UART_message_check+0x30>)
 80009b6:	2008      	movs	r0, #8
 80009b8:	f000 f812 	bl	80009e0 <init_array_by_zero>
	if ((HAL_UART_Receive(huart_pointer, UART_rx_buffer, (uint16_t)UART_MESSAGE_SIZE, UART_TIMEOUT)) != HAL_TIMEOUT)
 80009bc:	2364      	movs	r3, #100	; 0x64
 80009be:	2208      	movs	r2, #8
 80009c0:	4906      	ldr	r1, [pc, #24]	; (80009dc <UART_message_check+0x30>)
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f002 fbaa 	bl	800311c <HAL_UART_Receive>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d002      	beq.n	80009d4 <UART_message_check+0x28>
	{
		dip_switch_emulate_decode(UART_rx_buffer);
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <UART_message_check+0x30>)
 80009d0:	f000 f830 	bl	8000a34 <dip_switch_emulate_decode>
	}
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000048 	.word	0x20000048

080009e0 <init_array_by_zero>:
		*(byte_array_pointer + number_of_values - i) = value_to_distribute >> i;
	}
}

void init_array_by_zero(uint8_t array_size, uint8_t* array_pointer)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < array_size; i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	e007      	b.n	8000a02 <init_array_by_zero+0x22>
	{
		*(array_pointer + i) = 0;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < array_size; i++)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3301      	adds	r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	dbf3      	blt.n	80009f2 <init_array_by_zero+0x12>
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <GetPage>:

	}
}

uint32_t GetPage(uint32_t Addr)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000a24:	0adb      	lsrs	r3, r3, #11
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <dip_switch_emulate_decode>:

void dip_switch_emulate_decode(uint8_t* array_pointer)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	switch (UART_rx_buffer[UART_COMMAND_BYTE])
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <dip_switch_emulate_decode+0x30>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d000      	beq.n	8000a46 <dip_switch_emulate_decode+0x12>
	{
		flash_vrite_page(DIP_SWITCH_STATE_FLASH, UART_rx_buffer[UART_DATA_BYTE]);
		break;
	}
	}
}
 8000a44:	e00a      	b.n	8000a5c <dip_switch_emulate_decode+0x28>
		flash_vrite_page(DIP_SWITCH_STATE_FLASH, UART_rx_buffer[UART_DATA_BYTE]);
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <dip_switch_emulate_decode+0x30>)
 8000a48:	785b      	ldrb	r3, [r3, #1]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f04f 0400 	mov.w	r4, #0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4623      	mov	r3, r4
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <dip_switch_emulate_decode+0x34>)
 8000a56:	f000 f809 	bl	8000a6c <flash_vrite_page>
		break;
 8000a5a:	bf00      	nop
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	20000048 	.word	0x20000048
 8000a68:	08002000 	.word	0x08002000

08000a6c <flash_vrite_page>:

void flash_vrite_page(uint32_t Addr, uint64_t value_to_write)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b08f      	sub	sp, #60	; 0x3c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	e9c7 2300 	strd	r2, r3, [r7]
	uint32_t FirstPage = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t PageError = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
	FLASH_EraseInitTypeDef EraseInitStruct;

	HAL_FLASH_Unlock();
 8000a80:	f000 fa2a 	bl	8000ed8 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <flash_vrite_page+0x68>)
 8000a86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a8a:	611a      	str	r2, [r3, #16]
	FirstPage = GetPage(Addr);
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f7ff ffc2 	bl	8000a16 <GetPage>
 8000a92:	6378      	str	r0, [r7, #52]	; 0x34
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Page        = FirstPage;
 8000a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a9a:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages     = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000aa0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 fafc 	bl	80010a8 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Addr, value_to_write);
 8000ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ab4:	68f9      	ldr	r1, [r7, #12]
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f9b8 	bl	8000e2c <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000abc:	f000 fa2e 	bl	8000f1c <HAL_FLASH_Lock>

	uint64_t value_from_memory = *(__IO uint64_t *)Addr;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ac6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	if (value_from_memory)
	{

	}
}
 8000aca:	bf00      	nop
 8000acc:	373c      	adds	r7, #60	; 0x3c
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd90      	pop	{r4, r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ada:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490e      	ldr	r1, [pc, #56]	; (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0b      	ldr	r4, [pc, #44]	; (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b02:	f7ff ff3d 	bl	8000980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f003 f909 	bl	8003d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b0a:	f7ff fd05 	bl	8000518 <main>

08000b0e <LoopForever>:

LoopForever:
    b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   r0, =_estack
 8000b10:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000b1c:	08003ddc 	.word	0x08003ddc
  ldr r2, =_sbss
 8000b20:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000b24:	20000134 	.word	0x20000134

08000b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_2_IRQHandler>

08000b2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f939 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 f80e 	bl	8000b5c <HAL_InitTick>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	71fb      	strb	r3, [r7, #7]
 8000b4a:	e001      	b.n	8000b50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b4c:	f7ff fe4a 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b50:	79fb      	ldrb	r3, [r7, #7]

}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_InitTick+0x68>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d022      	beq.n	8000bb6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_InitTick+0x6c>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_InitTick+0x68>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f944 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10f      	bne.n	8000bb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b0f      	cmp	r3, #15
 8000b94:	d809      	bhi.n	8000baa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b96:	2200      	movs	r2, #0
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	f000 f910 	bl	8000dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_InitTick+0x70>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	e007      	b.n	8000bba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	e004      	b.n	8000bba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e001      	b.n	8000bba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x1c>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a03      	ldr	r2, [pc, #12]	; (8000bec <HAL_IncTick+0x1c>)
 8000be0:	6013      	str	r3, [r2, #0]
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	20000130 	.word	0x20000130
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_GetTick+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000130 	.word	0x20000130

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff29 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff40 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff90 	bl	8000d00 <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5f 	bl	8000cac <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff33 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffa4 	bl	8000d68 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <HAL_FLASH_Program+0xa4>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d101      	bne.n	8000e4a <HAL_FLASH_Program+0x1e>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e03e      	b.n	8000ec8 <HAL_FLASH_Program+0x9c>
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_FLASH_Program+0xa4>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e54:	f000 f87c 	bl	8000f50 <FLASH_WaitForLastOperation>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8000e5c:	7dfb      	ldrb	r3, [r7, #23]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d12e      	bne.n	8000ec0 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_FLASH_Program+0xa4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d107      	bne.n	8000e7e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e72:	68b8      	ldr	r0, [r7, #8]
 8000e74:	f000 f8c0 	bl	8000ff8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	e010      	b.n	8000ea0 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d002      	beq.n	8000e8a <HAL_FLASH_Program+0x5e>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d10a      	bne.n	8000ea0 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	68b8      	ldr	r0, [r7, #8]
 8000e90:	f000 f8d6 	bl	8001040 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d102      	bne.n	8000ea0 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8000e9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e9e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea4:	f000 f854 	bl	8000f50 <FLASH_WaitForLastOperation>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d006      	beq.n	8000ec0 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_FLASH_Program+0xa8>)
 8000eb4:	695a      	ldr	r2, [r3, #20]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	4906      	ldr	r1, [pc, #24]	; (8000ed4 <HAL_FLASH_Program+0xa8>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_FLASH_Program+0xa4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8000ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000000c 	.word	0x2000000c
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_FLASH_Unlock+0x38>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	da0b      	bge.n	8000f02 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_FLASH_Unlock+0x38>)
 8000eec:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <HAL_FLASH_Unlock+0x3c>)
 8000eee:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <HAL_FLASH_Unlock+0x38>)
 8000ef2:	4a09      	ldr	r2, [pc, #36]	; (8000f18 <HAL_FLASH_Unlock+0x40>)
 8000ef4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_FLASH_Unlock+0x38>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	da01      	bge.n	8000f02 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40022000 	.word	0x40022000
 8000f14:	45670123 	.word	0x45670123
 8000f18:	cdef89ab 	.word	0xcdef89ab

08000f1c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_FLASH_Lock+0x30>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <HAL_FLASH_Lock+0x30>)
 8000f2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f30:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_FLASH_Lock+0x30>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da01      	bge.n	8000f3e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	40022000 	.word	0x40022000

08000f50 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff fe4c 	bl	8000bf4 <HAL_GetTick>
 8000f5c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000f5e:	e009      	b.n	8000f74 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8000f60:	f7ff fe48 	bl	8000bf4 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d201      	bcs.n	8000f74 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e038      	b.n	8000fe6 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <FLASH_WaitForLastOperation+0xa0>)
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f80:	d0ee      	beq.n	8000f60 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <FLASH_WaitForLastOperation+0xa0>)
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d01e      	beq.n	8000fd2 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <FLASH_WaitForLastOperation+0xa4>)
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <FLASH_WaitForLastOperation+0xa4>)
 8000f9e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <FLASH_WaitForLastOperation+0x6a>
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <FLASH_WaitForLastOperation+0xa0>)
 8000fac:	699a      	ldr	r2, [r3, #24]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000fb4:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <FLASH_WaitForLastOperation+0xa0>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	618b      	str	r3, [r1, #24]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <FLASH_WaitForLastOperation+0x7e>
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <FLASH_WaitForLastOperation+0xa0>)
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000fcc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e009      	b.n	8000fe6 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <FLASH_WaitForLastOperation+0xa0>)
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d102      	bne.n	8000fe4 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <FLASH_WaitForLastOperation+0xa0>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40022000 	.word	0x40022000
 8000ff4:	2000000c 	.word	0x2000000c

08000ff8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000ff8:	b490      	push	{r4, r7}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <FLASH_Program_DoubleWord+0x44>)
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <FLASH_Program_DoubleWord+0x44>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001016:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800101a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	f04f 0400 	mov.w	r4, #0
 8001026:	0013      	movs	r3, r2
 8001028:	2400      	movs	r4, #0
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	3204      	adds	r2, #4
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bc90      	pop	{r4, r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40022000 	.word	0x40022000

08001040 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800104a:	2340      	movs	r3, #64	; 0x40
 800104c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <FLASH_Program_Fast+0x64>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <FLASH_Program_Fast+0x64>)
 800105c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001060:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001062:	f3ef 8310 	mrs	r3, PRIMASK
 8001066:	60fb      	str	r3, [r7, #12]
  return(result);
 8001068:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800106a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	3304      	adds	r3, #4
 800107a:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3304      	adds	r3, #4
 8001080:	617b      	str	r3, [r7, #20]
    row_index--;
 8001082:	7ffb      	ldrb	r3, [r7, #31]
 8001084:	3b01      	subs	r3, #1
 8001086:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8001088:	7ffb      	ldrb	r3, [r7, #31]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1ef      	bne.n	800106e <FLASH_Program_Fast+0x2e>
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001098:	bf00      	nop
 800109a:	3724      	adds	r7, #36	; 0x24
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010b2:	4b4a      	ldr	r3, [pc, #296]	; (80011dc <HAL_FLASHEx_Erase+0x134>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d101      	bne.n	80010be <HAL_FLASHEx_Erase+0x16>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e089      	b.n	80011d2 <HAL_FLASHEx_Erase+0x12a>
 80010be:	4b47      	ldr	r3, [pc, #284]	; (80011dc <HAL_FLASHEx_Erase+0x134>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c8:	f7ff ff42 	bl	8000f50 <FLASH_WaitForLastOperation>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d179      	bne.n	80011ca <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010d6:	4b41      	ldr	r3, [pc, #260]	; (80011dc <HAL_FLASHEx_Erase+0x134>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80010dc:	4b40      	ldr	r3, [pc, #256]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d019      	beq.n	800111c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80010e8:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a3c      	ldr	r2, [pc, #240]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 80010ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010f2:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80010f4:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d009      	beq.n	8001114 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001100:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a36      	ldr	r2, [pc, #216]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 8001106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800110a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <HAL_FLASHEx_Erase+0x134>)
 800110e:	2203      	movs	r2, #3
 8001110:	771a      	strb	r2, [r3, #28]
 8001112:	e016      	b.n	8001142 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <HAL_FLASHEx_Erase+0x134>)
 8001116:	2201      	movs	r2, #1
 8001118:	771a      	strb	r2, [r3, #28]
 800111a:	e012      	b.n	8001142 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800111c:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001124:	2b00      	cmp	r3, #0
 8001126:	d009      	beq.n	800113c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a2c      	ldr	r2, [pc, #176]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 800112e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001132:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_FLASHEx_Erase+0x134>)
 8001136:	2202      	movs	r2, #2
 8001138:	771a      	strb	r2, [r3, #28]
 800113a:	e002      	b.n	8001142 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <HAL_FLASHEx_Erase+0x134>)
 800113e:	2200      	movs	r2, #0
 8001140:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d111      	bne.n	800116e <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f848 	bl	80011e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001158:	f7ff fefa 	bl	8000f50 <FLASH_WaitForLastOperation>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 8001166:	f023 0304 	bic.w	r3, r3, #4
 800116a:	6153      	str	r3, [r2, #20]
 800116c:	e02b      	b.n	80011c6 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	e01b      	b.n	80011b6 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4619      	mov	r1, r3
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f000 f84b 	bl	8001220 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800118a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800118e:	f7ff fedf 	bl	8000f50 <FLASH_WaitForLastOperation>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <HAL_FLASHEx_Erase+0x138>)
 800119c:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80011a0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	601a      	str	r2, [r3, #0]
          break;
 80011ae:	e00a      	b.n	80011c6 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	3301      	adds	r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3db      	bcc.n	800117e <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80011c6:	f000 f84f 	bl	8001268 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_FLASHEx_Erase+0x134>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]

  return status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000000c 	.word	0x2000000c
 80011e0:	40022000 	.word	0x40022000

080011e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <FLASH_MassErase+0x38>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <FLASH_MassErase+0x38>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <FLASH_MassErase+0x38>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <FLASH_MassErase+0x38>)
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	6153      	str	r3, [r2, #20]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40022000 	.word	0x40022000

08001220 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <FLASH_PageErase+0x44>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800123a:	490a      	ldr	r1, [pc, #40]	; (8001264 <FLASH_PageErase+0x44>)
 800123c:	4313      	orrs	r3, r2
 800123e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <FLASH_PageErase+0x44>)
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <FLASH_PageErase+0x44>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <FLASH_PageErase+0x44>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <FLASH_PageErase+0x44>)
 8001252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001256:	6153      	str	r3, [r2, #20]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40022000 	.word	0x40022000

08001268 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <FLASH_FlushCaches+0x80>)
 8001270:	7f1b      	ldrb	r3, [r3, #28]
 8001272:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d002      	beq.n	8001280 <FLASH_FlushCaches+0x18>
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b03      	cmp	r3, #3
 800127e:	d111      	bne.n	80012a4 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <FLASH_FlushCaches+0x84>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a19      	ldr	r2, [pc, #100]	; (80012ec <FLASH_FlushCaches+0x84>)
 8001286:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <FLASH_FlushCaches+0x84>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a16      	ldr	r2, [pc, #88]	; (80012ec <FLASH_FlushCaches+0x84>)
 8001292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001296:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <FLASH_FlushCaches+0x84>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <FLASH_FlushCaches+0x84>)
 800129e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d002      	beq.n	80012b0 <FLASH_FlushCaches+0x48>
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d111      	bne.n	80012d4 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <FLASH_FlushCaches+0x84>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <FLASH_FlushCaches+0x84>)
 80012b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <FLASH_FlushCaches+0x84>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <FLASH_FlushCaches+0x84>)
 80012c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <FLASH_FlushCaches+0x84>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <FLASH_FlushCaches+0x84>)
 80012ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <FLASH_FlushCaches+0x80>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	771a      	strb	r2, [r3, #28]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	2000000c 	.word	0x2000000c
 80012ec:	40022000 	.word	0x40022000

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012fe:	e15a      	b.n	80015b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 814c 	beq.w	80015b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d00b      	beq.n	8001338 <HAL_GPIO_Init+0x48>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d007      	beq.n	8001338 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800132c:	2b11      	cmp	r3, #17
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b12      	cmp	r3, #18
 8001336:	d130      	bne.n	800139a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800136e:	2201      	movs	r2, #1
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f003 0201 	and.w	r2, r3, #1
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0xea>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d123      	bne.n	8001422 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	6939      	ldr	r1, [r7, #16]
 800141e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0203 	and.w	r2, r3, #3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 80a6 	beq.w	80015b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001464:	4b5b      	ldr	r3, [pc, #364]	; (80015d4 <HAL_GPIO_Init+0x2e4>)
 8001466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001468:	4a5a      	ldr	r2, [pc, #360]	; (80015d4 <HAL_GPIO_Init+0x2e4>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6613      	str	r3, [r2, #96]	; 0x60
 8001470:	4b58      	ldr	r3, [pc, #352]	; (80015d4 <HAL_GPIO_Init+0x2e4>)
 8001472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147c:	4a56      	ldr	r2, [pc, #344]	; (80015d8 <HAL_GPIO_Init+0x2e8>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	220f      	movs	r2, #15
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014a6:	d01f      	beq.n	80014e8 <HAL_GPIO_Init+0x1f8>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a4c      	ldr	r2, [pc, #304]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d019      	beq.n	80014e4 <HAL_GPIO_Init+0x1f4>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a4b      	ldr	r2, [pc, #300]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d013      	beq.n	80014e0 <HAL_GPIO_Init+0x1f0>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a4a      	ldr	r2, [pc, #296]	; (80015e4 <HAL_GPIO_Init+0x2f4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d00d      	beq.n	80014dc <HAL_GPIO_Init+0x1ec>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a49      	ldr	r2, [pc, #292]	; (80015e8 <HAL_GPIO_Init+0x2f8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d007      	beq.n	80014d8 <HAL_GPIO_Init+0x1e8>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a48      	ldr	r2, [pc, #288]	; (80015ec <HAL_GPIO_Init+0x2fc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d101      	bne.n	80014d4 <HAL_GPIO_Init+0x1e4>
 80014d0:	2305      	movs	r3, #5
 80014d2:	e00a      	b.n	80014ea <HAL_GPIO_Init+0x1fa>
 80014d4:	2306      	movs	r3, #6
 80014d6:	e008      	b.n	80014ea <HAL_GPIO_Init+0x1fa>
 80014d8:	2304      	movs	r3, #4
 80014da:	e006      	b.n	80014ea <HAL_GPIO_Init+0x1fa>
 80014dc:	2303      	movs	r3, #3
 80014de:	e004      	b.n	80014ea <HAL_GPIO_Init+0x1fa>
 80014e0:	2302      	movs	r3, #2
 80014e2:	e002      	b.n	80014ea <HAL_GPIO_Init+0x1fa>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_GPIO_Init+0x1fa>
 80014e8:	2300      	movs	r3, #0
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	f002 0203 	and.w	r2, r2, #3
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	4093      	lsls	r3, r2
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014fa:	4937      	ldr	r1, [pc, #220]	; (80015d8 <HAL_GPIO_Init+0x2e8>)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_GPIO_Init+0x300>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800152c:	4a30      	ldr	r2, [pc, #192]	; (80015f0 <HAL_GPIO_Init+0x300>)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001532:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001556:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_GPIO_Init+0x300>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015aa:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <HAL_GPIO_Init+0x300>)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3301      	adds	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f ae9d 	bne.w	8001300 <HAL_GPIO_Init+0x10>
  }
}
 80015c6:	bf00      	nop
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000
 80015dc:	48000400 	.word	0x48000400
 80015e0:	48000800 	.word	0x48000800
 80015e4:	48000c00 	.word	0x48000c00
 80015e8:	48001000 	.word	0x48001000
 80015ec:	48001400 	.word	0x48001400
 80015f0:	40010400 	.word	0x40010400

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001610:	e002      	b.n	8001618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	43d9      	mvns	r1, r3
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	400b      	ands	r3, r1
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d141      	bne.n	80016ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001666:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800166e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001672:	d131      	bne.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001674:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800167a:	4a46      	ldr	r2, [pc, #280]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001684:	4b43      	ldr	r3, [pc, #268]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800168c:	4a41      	ldr	r2, [pc, #260]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001694:	4b40      	ldr	r3, [pc, #256]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2232      	movs	r2, #50	; 0x32
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	4a3f      	ldr	r2, [pc, #252]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9b      	lsrs	r3, r3, #18
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016aa:	e002      	b.n	80016b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016be:	d102      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f2      	bne.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d158      	bne.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e057      	b.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d8:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016de:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e8:	e04d      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f0:	d141      	bne.n	8001776 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f2:	4b28      	ldr	r3, [pc, #160]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fe:	d131      	bne.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001706:	4a23      	ldr	r2, [pc, #140]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001718:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2232      	movs	r2, #50	; 0x32
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	4a1c      	ldr	r2, [pc, #112]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	0c9b      	lsrs	r3, r3, #18
 8001732:	3301      	adds	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	e002      	b.n	800173e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3b01      	subs	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174a:	d102      	bne.n	8001752 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f2      	bne.n	8001738 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175e:	d112      	bne.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e011      	b.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001774:	e007      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001784:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	40007000 	.word	0x40007000
 8001798:	20000000 	.word	0x20000000
 800179c:	431bde83 	.word	0x431bde83

080017a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ae:	6093      	str	r3, [r2, #8]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40007000 	.word	0x40007000

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e308      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d075      	beq.n	80018ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017de:	4ba3      	ldr	r3, [pc, #652]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e8:	4ba0      	ldr	r3, [pc, #640]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d102      	bne.n	80017fe <HAL_RCC_OscConfig+0x3e>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d002      	beq.n	8001804 <HAL_RCC_OscConfig+0x44>
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2b08      	cmp	r3, #8
 8001802:	d10b      	bne.n	800181c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	4b99      	ldr	r3, [pc, #612]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d05b      	beq.n	80018c8 <HAL_RCC_OscConfig+0x108>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d157      	bne.n	80018c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e2e3      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001824:	d106      	bne.n	8001834 <HAL_RCC_OscConfig+0x74>
 8001826:	4b91      	ldr	r3, [pc, #580]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a90      	ldr	r2, [pc, #576]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e01d      	b.n	8001870 <HAL_RCC_OscConfig+0xb0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x98>
 800183e:	4b8b      	ldr	r3, [pc, #556]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a8a      	ldr	r2, [pc, #552]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b88      	ldr	r3, [pc, #544]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a87      	ldr	r2, [pc, #540]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0xb0>
 8001858:	4b84      	ldr	r3, [pc, #528]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a83      	ldr	r2, [pc, #524]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b81      	ldr	r3, [pc, #516]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a80      	ldr	r2, [pc, #512]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff f9bc 	bl	8000bf4 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff f9b8 	bl	8000bf4 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e2a8      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001892:	4b76      	ldr	r3, [pc, #472]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0xc0>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff f9a8 	bl	8000bf4 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff f9a4 	bl	8000bf4 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e294      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ba:	4b6c      	ldr	r3, [pc, #432]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0xe8>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d075      	beq.n	80019c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d6:	4b65      	ldr	r3, [pc, #404]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e0:	4b62      	ldr	r3, [pc, #392]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d102      	bne.n	80018f6 <HAL_RCC_OscConfig+0x136>
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d002      	beq.n	80018fc <HAL_RCC_OscConfig+0x13c>
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d11f      	bne.n	800193c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fc:	4b5b      	ldr	r3, [pc, #364]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_OscConfig+0x154>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e267      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001914:	4b55      	ldr	r3, [pc, #340]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	061b      	lsls	r3, r3, #24
 8001922:	4952      	ldr	r1, [pc, #328]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001928:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <HAL_RCC_OscConfig+0x2b0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff f915 	bl	8000b5c <HAL_InitTick>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d043      	beq.n	80019c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e253      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d023      	beq.n	800198c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001944:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a48      	ldr	r2, [pc, #288]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 800194a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f950 	bl	8000bf4 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff f94c 	bl	8000bf4 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e23c      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800196a:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	061b      	lsls	r3, r3, #24
 8001984:	4939      	ldr	r1, [pc, #228]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
 800198a:	e01a      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198c:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a36      	ldr	r2, [pc, #216]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff f92c 	bl	8000bf4 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff f928 	bl	8000bf4 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e218      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b2:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1e0>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d03c      	beq.n	8001a48 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d01c      	beq.n	8001a10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019dc:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff f905 	bl	8000bf4 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ee:	f7ff f901 	bl	8000bf4 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1f1      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0ef      	beq.n	80019ee <HAL_RCC_OscConfig+0x22e>
 8001a0e:	e01b      	b.n	8001a48 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7ff f8e8 	bl	8000bf4 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff f8e4 	bl	8000bf4 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e1d4      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ef      	bne.n	8001a28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80ab 	beq.w	8001bac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d106      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2b4>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e005      	b.n	8001a76 <HAL_RCC_OscConfig+0x2b6>
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	20000004 	.word	0x20000004
 8001a74:	2300      	movs	r3, #0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00d      	beq.n	8001a96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4baf      	ldr	r3, [pc, #700]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	4aae      	ldr	r2, [pc, #696]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	6593      	str	r3, [r2, #88]	; 0x58
 8001a86:	4bac      	ldr	r3, [pc, #688]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a92:	2301      	movs	r3, #1
 8001a94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a96:	4ba9      	ldr	r3, [pc, #676]	; (8001d3c <HAL_RCC_OscConfig+0x57c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d118      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aa2:	4ba6      	ldr	r3, [pc, #664]	; (8001d3c <HAL_RCC_OscConfig+0x57c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4aa5      	ldr	r2, [pc, #660]	; (8001d3c <HAL_RCC_OscConfig+0x57c>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aae:	f7ff f8a1 	bl	8000bf4 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab6:	f7ff f89d 	bl	8000bf4 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e18d      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac8:	4b9c      	ldr	r3, [pc, #624]	; (8001d3c <HAL_RCC_OscConfig+0x57c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d108      	bne.n	8001aee <HAL_RCC_OscConfig+0x32e>
 8001adc:	4b96      	ldr	r3, [pc, #600]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae2:	4a95      	ldr	r2, [pc, #596]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aec:	e024      	b.n	8001b38 <HAL_RCC_OscConfig+0x378>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d110      	bne.n	8001b18 <HAL_RCC_OscConfig+0x358>
 8001af6:	4b90      	ldr	r3, [pc, #576]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afc:	4a8e      	ldr	r2, [pc, #568]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b06:	4b8c      	ldr	r3, [pc, #560]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0c:	4a8a      	ldr	r2, [pc, #552]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b16:	e00f      	b.n	8001b38 <HAL_RCC_OscConfig+0x378>
 8001b18:	4b87      	ldr	r3, [pc, #540]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4a86      	ldr	r2, [pc, #536]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b28:	4b83      	ldr	r3, [pc, #524]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2e:	4a82      	ldr	r2, [pc, #520]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d016      	beq.n	8001b6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff f858 	bl	8000bf4 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7ff f854 	bl	8000bf4 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e142      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5e:	4b76      	ldr	r3, [pc, #472]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ed      	beq.n	8001b48 <HAL_RCC_OscConfig+0x388>
 8001b6c:	e015      	b.n	8001b9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7ff f841 	bl	8000bf4 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff f83d 	bl	8000bf4 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e12b      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ed      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b9a:	7ffb      	ldrb	r3, [r7, #31]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d105      	bne.n	8001bac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba0:	4b65      	ldr	r3, [pc, #404]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	4a64      	ldr	r2, [pc, #400]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d03c      	beq.n	8001c32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bc0:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc6:	4a5c      	ldr	r2, [pc, #368]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f810 	bl	8000bf4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd8:	f7ff f80c 	bl	8000bf4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e0fc      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bea:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ef      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x418>
 8001bf8:	e01b      	b.n	8001c32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bfa:	4b4f      	ldr	r3, [pc, #316]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c00:	4a4d      	ldr	r2, [pc, #308]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7fe fff3 	bl	8000bf4 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c12:	f7fe ffef 	bl	8000bf4 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e0df      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c24:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ef      	bne.n	8001c12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 80d3 	beq.w	8001de2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c3c:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	f000 808d 	beq.w	8001d64 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d15a      	bne.n	8001d08 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a38      	ldr	r2, [pc, #224]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7fe ffc9 	bl	8000bf4 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7fe ffc5 	bl	8000bf4 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0b5      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c84:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_RCC_OscConfig+0x580>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6a11      	ldr	r1, [r2, #32]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c94:	3a01      	subs	r2, #1
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	4311      	orrs	r1, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c9e:	0212      	lsls	r2, r2, #8
 8001ca0:	4311      	orrs	r1, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ca6:	0852      	lsrs	r2, r2, #1
 8001ca8:	3a01      	subs	r2, #1
 8001caa:	0552      	lsls	r2, r2, #21
 8001cac:	4311      	orrs	r1, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cb2:	0852      	lsrs	r2, r2, #1
 8001cb4:	3a01      	subs	r2, #1
 8001cb6:	0652      	lsls	r2, r2, #25
 8001cb8:	4311      	orrs	r1, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cbe:	06d2      	lsls	r2, r2, #27
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	491d      	ldr	r1, [pc, #116]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7fe ff88 	bl	8000bf4 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7fe ff84 	bl	8000bf4 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e074      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x528>
 8001d06:	e06c      	b.n	8001de2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d12:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_RCC_OscConfig+0x578>)
 8001d26:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7fe ff60 	bl	8000bf4 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d36:	e00e      	b.n	8001d56 <HAL_RCC_OscConfig+0x596>
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7fe ff56 	bl	8000bf4 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e046      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_RCC_OscConfig+0x62c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x584>
 8001d62:	e03e      	b.n	8001de2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e039      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <HAL_RCC_OscConfig+0x62c>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d12c      	bne.n	8001dde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d123      	bne.n	8001dde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d11b      	bne.n	8001dde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d113      	bne.n	8001dde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd4:	085b      	lsrs	r3, r3, #1
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000

08001df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e11e      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e08:	4b91      	ldr	r3, [pc, #580]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d910      	bls.n	8001e38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b8e      	ldr	r3, [pc, #568]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 020f 	bic.w	r2, r3, #15
 8001e1e:	498c      	ldr	r1, [pc, #560]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b8a      	ldr	r3, [pc, #552]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e106      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d073      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d129      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4c:	4b81      	ldr	r3, [pc, #516]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0f4      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e5c:	f000 f99e 	bl	800219c <RCC_GetSysClockFreqFromPLLSource>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4a7c      	ldr	r2, [pc, #496]	; (8002058 <HAL_RCC_ClockConfig+0x268>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d93f      	bls.n	8001eea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e6a:	4b7a      	ldr	r3, [pc, #488]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d033      	beq.n	8001eea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d12f      	bne.n	8001eea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e8a:	4b72      	ldr	r3, [pc, #456]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e92:	4a70      	ldr	r2, [pc, #448]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e024      	b.n	8001eea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea8:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0c6      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb8:	4b66      	ldr	r3, [pc, #408]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0be      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ec8:	f000 f8ce 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4a61      	ldr	r2, [pc, #388]	; (8002058 <HAL_RCC_ClockConfig+0x268>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d909      	bls.n	8001eea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ede:	4a5d      	ldr	r2, [pc, #372]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b5a      	ldr	r3, [pc, #360]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4957      	ldr	r1, [pc, #348]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001efc:	f7fe fe7a 	bl	8000bf4 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7fe fe76 	bl	8000bf4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e095      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 020c 	and.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1eb      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d023      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f44:	4b43      	ldr	r3, [pc, #268]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a42      	ldr	r2, [pc, #264]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f5c:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f64:	4a3b      	ldr	r2, [pc, #236]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4936      	ldr	r1, [pc, #216]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b80      	cmp	r3, #128	; 0x80
 8001f84:	d105      	bne.n	8001f92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f86:	4b33      	ldr	r3, [pc, #204]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4a32      	ldr	r2, [pc, #200]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d21d      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 020f 	bic.w	r2, r3, #15
 8001fa8:	4929      	ldr	r1, [pc, #164]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fe20 	bl	8000bf4 <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7fe fe1c 	bl	8000bf4 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e03b      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1ed      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4917      	ldr	r1, [pc, #92]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	490f      	ldr	r1, [pc, #60]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800201a:	f000 f825 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 800201e:	4601      	mov	r1, r0
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_RCC_ClockConfig+0x264>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	4a0c      	ldr	r2, [pc, #48]	; (800205c <HAL_RCC_ClockConfig+0x26c>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	fa21 f303 	lsr.w	r3, r1, r3
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x270>)
 8002038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x274>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fd8c 	bl	8000b5c <HAL_InitTick>
 8002044:	4603      	mov	r3, r0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40022000 	.word	0x40022000
 8002054:	40021000 	.word	0x40021000
 8002058:	04c4b400 	.word	0x04c4b400
 800205c:	08003d9c 	.word	0x08003d9c
 8002060:	20000000 	.word	0x20000000
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b04      	cmp	r3, #4
 8002078:	d102      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_RCC_GetSysClockFreq+0xbc>)
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e047      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d102      	bne.n	8002092 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800208c:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc0>)
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	e03e      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d136      	bne.n	800210c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3301      	adds	r3, #1
 80020b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020bc:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	4a16      	ldr	r2, [pc, #88]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c6:	68d2      	ldr	r2, [r2, #12]
 80020c8:	0a12      	lsrs	r2, r2, #8
 80020ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	617b      	str	r3, [r7, #20]
      break;
 80020d4:	e00c      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020d6:	4a13      	ldr	r2, [pc, #76]	; (8002124 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e0:	68d2      	ldr	r2, [r2, #12]
 80020e2:	0a12      	lsrs	r2, r2, #8
 80020e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
      break;
 80020ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0e5b      	lsrs	r3, r3, #25
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	3301      	adds	r3, #1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	e001      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002110:	693b      	ldr	r3, [r7, #16]
}
 8002112:	4618      	mov	r0, r3
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	00f42400 	.word	0x00f42400
 8002128:	007a1200 	.word	0x007a1200

0800212c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_RCC_GetHCLKFreq+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000

08002144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002148:	f7ff fff0 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800214c:	4601      	mov	r1, r0
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_RCC_GetPCLK1Freq+0x28>)
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	08003dac 	.word	0x08003dac

08002170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002174:	f7ff ffda 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002178:	4601      	mov	r1, r0
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x24>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0adb      	lsrs	r3, r3, #11
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	08003dac 	.word	0x08003dac

0800219c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	3301      	adds	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d10c      	bne.n	80021da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021c0:	4a17      	ldr	r2, [pc, #92]	; (8002220 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c8:	4a14      	ldr	r2, [pc, #80]	; (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ca:	68d2      	ldr	r2, [r2, #12]
 80021cc:	0a12      	lsrs	r2, r2, #8
 80021ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	617b      	str	r3, [r7, #20]
    break;
 80021d8:	e00c      	b.n	80021f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e2:	4a0e      	ldr	r2, [pc, #56]	; (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021e4:	68d2      	ldr	r2, [r2, #12]
 80021e6:	0a12      	lsrs	r2, r2, #8
 80021e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	617b      	str	r3, [r7, #20]
    break;
 80021f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0e5b      	lsrs	r3, r3, #25
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	3301      	adds	r3, #1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800220e:	687b      	ldr	r3, [r7, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40021000 	.word	0x40021000
 8002220:	007a1200 	.word	0x007a1200
 8002224:	00f42400 	.word	0x00f42400

08002228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002230:	2300      	movs	r3, #0
 8002232:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002234:	2300      	movs	r3, #0
 8002236:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8098 	beq.w	8002376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224a:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10d      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	4b40      	ldr	r3, [pc, #256]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	4a3f      	ldr	r2, [pc, #252]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6593      	str	r3, [r2, #88]	; 0x58
 8002262:	4b3d      	ldr	r3, [pc, #244]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226e:	2301      	movs	r3, #1
 8002270:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002272:	4b3a      	ldr	r3, [pc, #232]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a39      	ldr	r2, [pc, #228]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800227e:	f7fe fcb9 	bl	8000bf4 <HAL_GetTick>
 8002282:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002284:	e009      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002286:	f7fe fcb5 	bl	8000bf4 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d902      	bls.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	74fb      	strb	r3, [r7, #19]
        break;
 8002298:	e005      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800229a:	4b30      	ldr	r3, [pc, #192]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0ef      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d159      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d01e      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d019      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022d4:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	4a1f      	ldr	r2, [pc, #124]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	4a1b      	ldr	r2, [pc, #108]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022f4:	4a18      	ldr	r2, [pc, #96]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d016      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7fe fc75 	bl	8000bf4 <HAL_GetTick>
 800230a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800230c:	e00b      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fc71 	bl	8000bf4 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d902      	bls.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	74fb      	strb	r3, [r7, #19]
            break;
 8002324:	e006      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ec      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10b      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	4903      	ldr	r1, [pc, #12]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002350:	e008      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	74bb      	strb	r3, [r7, #18]
 8002356:	e005      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002364:	7c7b      	ldrb	r3, [r7, #17]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4ba6      	ldr	r3, [pc, #664]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4aa5      	ldr	r2, [pc, #660]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002382:	4ba0      	ldr	r3, [pc, #640]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f023 0203 	bic.w	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	499c      	ldr	r1, [pc, #624]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023a4:	4b97      	ldr	r3, [pc, #604]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f023 020c 	bic.w	r2, r3, #12
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4994      	ldr	r1, [pc, #592]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023c6:	4b8f      	ldr	r3, [pc, #572]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	498b      	ldr	r1, [pc, #556]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023e8:	4b86      	ldr	r3, [pc, #536]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	4983      	ldr	r1, [pc, #524]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800240a:	4b7e      	ldr	r3, [pc, #504]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	497a      	ldr	r1, [pc, #488]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800242c:	4b75      	ldr	r3, [pc, #468]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	4972      	ldr	r1, [pc, #456]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800244e:	4b6d      	ldr	r3, [pc, #436]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	4969      	ldr	r1, [pc, #420]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002470:	4b64      	ldr	r3, [pc, #400]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4961      	ldr	r1, [pc, #388]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002492:	4b5c      	ldr	r3, [pc, #368]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	4958      	ldr	r1, [pc, #352]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d015      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	4950      	ldr	r1, [pc, #320]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d2:	d105      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a4a      	ldr	r2, [pc, #296]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d015      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024ec:	4b45      	ldr	r3, [pc, #276]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	4942      	ldr	r1, [pc, #264]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250a:	d105      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800250c:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a3c      	ldr	r2, [pc, #240]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002516:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d015      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002524:	4b37      	ldr	r3, [pc, #220]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4934      	ldr	r1, [pc, #208]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002542:	d105      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002544:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4a2e      	ldr	r2, [pc, #184]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800254e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800255c:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	4926      	ldr	r1, [pc, #152]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800257a:	d105      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4a20      	ldr	r2, [pc, #128]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002586:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d015      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	4918      	ldr	r1, [pc, #96]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b2:	d105      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4a12      	ldr	r2, [pc, #72]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d015      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	490a      	ldr	r1, [pc, #40]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ea:	d105      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80025f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000

08002608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e049      	b.n	80026ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe f8fc 	bl	800082c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f000 fb24 	bl	8002c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d001      	beq.n	80026d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e04a      	b.n	8002766 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a21      	ldr	r2, [pc, #132]	; (8002774 <HAL_TIM_Base_Start_IT+0xbc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d018      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x6c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fa:	d013      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x6c>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <HAL_TIM_Base_Start_IT+0xc0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00e      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x6c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_TIM_Base_Start_IT+0xc4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d009      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x6c>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1a      	ldr	r2, [pc, #104]	; (8002780 <HAL_TIM_Base_Start_IT+0xc8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x6c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a19      	ldr	r2, [pc, #100]	; (8002784 <HAL_TIM_Base_Start_IT+0xcc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d115      	bne.n	8002750 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_TIM_Base_Start_IT+0xd0>)
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b06      	cmp	r3, #6
 8002734:	d015      	beq.n	8002762 <HAL_TIM_Base_Start_IT+0xaa>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273c:	d011      	beq.n	8002762 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274e:	e008      	b.n	8002762 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e000      	b.n	8002764 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002762:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800
 8002780:	40013400 	.word	0x40013400
 8002784:	40014000 	.word	0x40014000
 8002788:	00010007 	.word	0x00010007

0800278c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d122      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d11b      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0202 	mvn.w	r2, #2
 80027b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fa42 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 80027d4:	e005      	b.n	80027e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fa34 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fa45 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d122      	bne.n	800283c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b04      	cmp	r3, #4
 8002802:	d11b      	bne.n	800283c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0204 	mvn.w	r2, #4
 800280c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2202      	movs	r2, #2
 8002812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fa18 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 8002828:	e005      	b.n	8002836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fa0a 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fa1b 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b08      	cmp	r3, #8
 8002848:	d122      	bne.n	8002890 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b08      	cmp	r3, #8
 8002856:	d11b      	bne.n	8002890 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0208 	mvn.w	r2, #8
 8002860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2204      	movs	r2, #4
 8002866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f9ee 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 800287c:	e005      	b.n	800288a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f9e0 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f9f1 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b10      	cmp	r3, #16
 800289c:	d122      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	d11b      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0210 	mvn.w	r2, #16
 80028b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2208      	movs	r2, #8
 80028ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f9c4 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 80028d0:	e005      	b.n	80028de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f9b6 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f9c7 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d10e      	bne.n	8002910 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0201 	mvn.w	r2, #1
 8002908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f990 	bl	8002c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b80      	cmp	r3, #128	; 0x80
 800291c:	d10e      	bne.n	800293c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002928:	2b80      	cmp	r3, #128	; 0x80
 800292a:	d107      	bne.n	800293c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fb64 	bl	8003004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294a:	d10e      	bne.n	800296a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	2b80      	cmp	r3, #128	; 0x80
 8002958:	d107      	bne.n	800296a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fb57 	bl	8003018 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d10e      	bne.n	8002996 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d107      	bne.n	8002996 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800298e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f975 	bl	8002c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d10e      	bne.n	80029c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d107      	bne.n	80029c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f06f 0220 	mvn.w	r2, #32
 80029ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fb17 	bl	8002ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d0:	d10f      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029e0:	d107      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80029ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fb1d 	bl	800302c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a00:	d10f      	bne.n	8002a22 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a10:	d107      	bne.n	8002a22 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fb0f 	bl	8003040 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a30:	d10f      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a40:	d107      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fb01 	bl	8003054 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a60:	d10f      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a70:	d107      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 faf3 	bl	8003068 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_TIM_ConfigClockSource+0x18>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e0b9      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x18c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002ac2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ace:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b70      	cmp	r3, #112	; 0x70
 8002ade:	d02e      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0xb2>
 8002ae0:	2b70      	cmp	r3, #112	; 0x70
 8002ae2:	d812      	bhi.n	8002b0a <HAL_TIM_ConfigClockSource+0x7e>
 8002ae4:	2b30      	cmp	r3, #48	; 0x30
 8002ae6:	f000 8084 	beq.w	8002bf2 <HAL_TIM_ConfigClockSource+0x166>
 8002aea:	2b30      	cmp	r3, #48	; 0x30
 8002aec:	d806      	bhi.n	8002afc <HAL_TIM_ConfigClockSource+0x70>
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d07f      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x166>
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d07d      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x166>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d07b      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002afa:	e084      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8002afc:	2b50      	cmp	r3, #80	; 0x50
 8002afe:	d048      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x106>
 8002b00:	2b60      	cmp	r3, #96	; 0x60
 8002b02:	d056      	beq.n	8002bb2 <HAL_TIM_ConfigClockSource+0x126>
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d064      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8002b08:	e07d      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8002b0a:	4a45      	ldr	r2, [pc, #276]	; (8002c20 <HAL_TIM_ConfigClockSource+0x194>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d070      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x166>
 8002b10:	4a43      	ldr	r2, [pc, #268]	; (8002c20 <HAL_TIM_ConfigClockSource+0x194>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d809      	bhi.n	8002b2a <HAL_TIM_ConfigClockSource+0x9e>
 8002b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1a:	d027      	beq.n	8002b6c <HAL_TIM_ConfigClockSource+0xe0>
 8002b1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002b20:	d067      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x166>
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b26:	d06d      	beq.n	8002c04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002b28:	e06d      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8002b2a:	4a3e      	ldr	r2, [pc, #248]	; (8002c24 <HAL_TIM_ConfigClockSource+0x198>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d060      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x166>
 8002b30:	4a3d      	ldr	r2, [pc, #244]	; (8002c28 <HAL_TIM_ConfigClockSource+0x19c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d05d      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x166>
 8002b36:	4a3d      	ldr	r2, [pc, #244]	; (8002c2c <HAL_TIM_ConfigClockSource+0x1a0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d05a      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8002b3c:	e063      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6899      	ldr	r1, [r3, #8]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f000 f9ad 	bl	8002eac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	609a      	str	r2, [r3, #8]
      break;
 8002b6a:	e04c      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	6899      	ldr	r1, [r3, #8]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f000 f996 	bl	8002eac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b8e:	609a      	str	r2, [r3, #8]
      break;
 8002b90:	e039      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f000 f908 	bl	8002db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2150      	movs	r1, #80	; 0x50
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f961 	bl	8002e72 <TIM_ITRx_SetConfig>
      break;
 8002bb0:	e029      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f000 f927 	bl	8002e12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2160      	movs	r1, #96	; 0x60
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f951 	bl	8002e72 <TIM_ITRx_SetConfig>
      break;
 8002bd0:	e019      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f000 f8e8 	bl	8002db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2140      	movs	r1, #64	; 0x40
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f941 	bl	8002e72 <TIM_ITRx_SetConfig>
      break;
 8002bf0:	e009      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	f000 f938 	bl	8002e72 <TIM_ITRx_SetConfig>
        break;
 8002c02:	e000      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8002c04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	00100020 	.word	0x00100020
 8002c24:	00100040 	.word	0x00100040
 8002c28:	00100070 	.word	0x00100070
 8002c2c:	00100030 	.word	0x00100030

08002c30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3c      	ldr	r2, [pc, #240]	; (8002d98 <TIM_Base_SetConfig+0x104>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00f      	beq.n	8002ccc <TIM_Base_SetConfig+0x38>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb2:	d00b      	beq.n	8002ccc <TIM_Base_SetConfig+0x38>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a39      	ldr	r2, [pc, #228]	; (8002d9c <TIM_Base_SetConfig+0x108>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d007      	beq.n	8002ccc <TIM_Base_SetConfig+0x38>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a38      	ldr	r2, [pc, #224]	; (8002da0 <TIM_Base_SetConfig+0x10c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <TIM_Base_SetConfig+0x38>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a37      	ldr	r2, [pc, #220]	; (8002da4 <TIM_Base_SetConfig+0x110>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d108      	bne.n	8002cde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2d      	ldr	r2, [pc, #180]	; (8002d98 <TIM_Base_SetConfig+0x104>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d01b      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cec:	d017      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2a      	ldr	r2, [pc, #168]	; (8002d9c <TIM_Base_SetConfig+0x108>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <TIM_Base_SetConfig+0x10c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00f      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a28      	ldr	r2, [pc, #160]	; (8002da4 <TIM_Base_SetConfig+0x110>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00b      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <TIM_Base_SetConfig+0x114>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a26      	ldr	r2, [pc, #152]	; (8002dac <TIM_Base_SetConfig+0x118>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d003      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <TIM_Base_SetConfig+0x11c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d108      	bne.n	8002d30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <TIM_Base_SetConfig+0x104>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00f      	beq.n	8002d7c <TIM_Base_SetConfig+0xe8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <TIM_Base_SetConfig+0x110>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00b      	beq.n	8002d7c <TIM_Base_SetConfig+0xe8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <TIM_Base_SetConfig+0x114>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d007      	beq.n	8002d7c <TIM_Base_SetConfig+0xe8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <TIM_Base_SetConfig+0x118>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_Base_SetConfig+0xe8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <TIM_Base_SetConfig+0x11c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d103      	bne.n	8002d84 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	615a      	str	r2, [r3, #20]
}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800
 8002da4:	40013400 	.word	0x40013400
 8002da8:	40014000 	.word	0x40014000
 8002dac:	40014400 	.word	0x40014400
 8002db0:	40014800 	.word	0x40014800

08002db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f023 0201 	bic.w	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 030a 	bic.w	r3, r3, #10
 8002df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b087      	sub	sp, #28
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f023 0210 	bic.w	r2, r3, #16
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	031b      	lsls	r3, r3, #12
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	621a      	str	r2, [r3, #32]
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f043 0307 	orr.w	r3, r3, #7
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	021a      	lsls	r2, r3, #8
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	609a      	str	r2, [r3, #8]
}
 8002ee0:	bf00      	nop
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e065      	b.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2c      	ldr	r2, [pc, #176]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2b      	ldr	r2, [pc, #172]	; (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d108      	bne.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d018      	beq.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7a:	d013      	beq.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00e      	beq.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d10c      	bne.n	8002fbe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002faa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40013400 	.word	0x40013400
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000800 	.word	0x40000800
 8002fec:	40014000 	.word	0x40014000

08002ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e042      	b.n	8003114 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7fd fbe7 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2224      	movs	r2, #36	; 0x24
 80030aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8fc 	bl	80032bc <UART_SetConfig>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e022      	b.n	8003114 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fb98 	bl	800380c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fc1f 	bl	8003950 <UART_CheckIdleState>
 8003112:	4603      	mov	r3, r0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003132:	2b20      	cmp	r3, #32
 8003134:	f040 80bd 	bne.w	80032b2 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_UART_Receive+0x28>
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0b5      	b.n	80032b4 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_UART_Receive+0x3a>
 8003152:	2302      	movs	r3, #2
 8003154:	e0ae      	b.n	80032b4 <HAL_UART_Receive+0x198>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2222      	movs	r2, #34	; 0x22
 800316a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800316e:	f7fd fd41 	bl	8000bf4 <HAL_GetTick>
 8003172:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318c:	d10e      	bne.n	80031ac <HAL_UART_Receive+0x90>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d105      	bne.n	80031a2 <HAL_UART_Receive+0x86>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f240 12ff 	movw	r2, #511	; 0x1ff
 800319c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031a0:	e02d      	b.n	80031fe <HAL_UART_Receive+0xe2>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	22ff      	movs	r2, #255	; 0xff
 80031a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031aa:	e028      	b.n	80031fe <HAL_UART_Receive+0xe2>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10d      	bne.n	80031d0 <HAL_UART_Receive+0xb4>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_UART_Receive+0xaa>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	22ff      	movs	r2, #255	; 0xff
 80031c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031c4:	e01b      	b.n	80031fe <HAL_UART_Receive+0xe2>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	227f      	movs	r2, #127	; 0x7f
 80031ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031ce:	e016      	b.n	80031fe <HAL_UART_Receive+0xe2>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031d8:	d10d      	bne.n	80031f6 <HAL_UART_Receive+0xda>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <HAL_UART_Receive+0xd0>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	227f      	movs	r2, #127	; 0x7f
 80031e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031ea:	e008      	b.n	80031fe <HAL_UART_Receive+0xe2>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	223f      	movs	r2, #63	; 0x3f
 80031f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031f4:	e003      	b.n	80031fe <HAL_UART_Receive+0xe2>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003204:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320e:	d108      	bne.n	8003222 <HAL_UART_Receive+0x106>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d104      	bne.n	8003222 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	e003      	b.n	800322a <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003232:	e032      	b.n	800329a <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2200      	movs	r2, #0
 800323c:	2120      	movs	r1, #32
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fbce 	bl	80039e0 <UART_WaitOnFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e032      	b.n	80032b4 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10c      	bne.n	800326e <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	b29a      	uxth	r2, r3
 800325c:	8a7b      	ldrh	r3, [r7, #18]
 800325e:	4013      	ands	r3, r2
 8003260:	b29a      	uxth	r2, r3
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	3302      	adds	r3, #2
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	e00c      	b.n	8003288 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	b2da      	uxtb	r2, r3
 8003276:	8a7b      	ldrh	r3, [r7, #18]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	4013      	ands	r3, r2
 800327c:	b2da      	uxtb	r2, r3
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3301      	adds	r3, #1
 8003286:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1c6      	bne.n	8003234 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e000      	b.n	80032b4 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80032b2:	2302      	movs	r3, #2
  }
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80032c0:	b088      	sub	sp, #32
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4bb0      	ldr	r3, [pc, #704]	; (80035b4 <UART_SetConfig+0x2f8>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	69f9      	ldr	r1, [r7, #28]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4aa5      	ldr	r2, [pc, #660]	; (80035b8 <UART_SetConfig+0x2fc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	4313      	orrs	r3, r2
 800332e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800333a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	69f9      	ldr	r1, [r7, #28]
 8003344:	430b      	orrs	r3, r1
 8003346:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	f023 010f 	bic.w	r1, r3, #15
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a96      	ldr	r2, [pc, #600]	; (80035bc <UART_SetConfig+0x300>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d121      	bne.n	80033ac <UART_SetConfig+0xf0>
 8003368:	4b95      	ldr	r3, [pc, #596]	; (80035c0 <UART_SetConfig+0x304>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b03      	cmp	r3, #3
 8003374:	d816      	bhi.n	80033a4 <UART_SetConfig+0xe8>
 8003376:	a201      	add	r2, pc, #4	; (adr r2, 800337c <UART_SetConfig+0xc0>)
 8003378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337c:	0800338d 	.word	0x0800338d
 8003380:	08003399 	.word	0x08003399
 8003384:	08003393 	.word	0x08003393
 8003388:	0800339f 	.word	0x0800339f
 800338c:	2301      	movs	r3, #1
 800338e:	76fb      	strb	r3, [r7, #27]
 8003390:	e0be      	b.n	8003510 <UART_SetConfig+0x254>
 8003392:	2302      	movs	r3, #2
 8003394:	76fb      	strb	r3, [r7, #27]
 8003396:	e0bb      	b.n	8003510 <UART_SetConfig+0x254>
 8003398:	2304      	movs	r3, #4
 800339a:	76fb      	strb	r3, [r7, #27]
 800339c:	e0b8      	b.n	8003510 <UART_SetConfig+0x254>
 800339e:	2308      	movs	r3, #8
 80033a0:	76fb      	strb	r3, [r7, #27]
 80033a2:	e0b5      	b.n	8003510 <UART_SetConfig+0x254>
 80033a4:	2310      	movs	r3, #16
 80033a6:	76fb      	strb	r3, [r7, #27]
 80033a8:	bf00      	nop
 80033aa:	e0b1      	b.n	8003510 <UART_SetConfig+0x254>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a84      	ldr	r2, [pc, #528]	; (80035c4 <UART_SetConfig+0x308>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d134      	bne.n	8003420 <UART_SetConfig+0x164>
 80033b6:	4b82      	ldr	r3, [pc, #520]	; (80035c0 <UART_SetConfig+0x304>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	d829      	bhi.n	8003418 <UART_SetConfig+0x15c>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <UART_SetConfig+0x110>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003419 	.word	0x08003419
 80033d4:	08003419 	.word	0x08003419
 80033d8:	08003419 	.word	0x08003419
 80033dc:	0800340d 	.word	0x0800340d
 80033e0:	08003419 	.word	0x08003419
 80033e4:	08003419 	.word	0x08003419
 80033e8:	08003419 	.word	0x08003419
 80033ec:	08003407 	.word	0x08003407
 80033f0:	08003419 	.word	0x08003419
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003419 	.word	0x08003419
 80033fc:	08003413 	.word	0x08003413
 8003400:	2300      	movs	r3, #0
 8003402:	76fb      	strb	r3, [r7, #27]
 8003404:	e084      	b.n	8003510 <UART_SetConfig+0x254>
 8003406:	2302      	movs	r3, #2
 8003408:	76fb      	strb	r3, [r7, #27]
 800340a:	e081      	b.n	8003510 <UART_SetConfig+0x254>
 800340c:	2304      	movs	r3, #4
 800340e:	76fb      	strb	r3, [r7, #27]
 8003410:	e07e      	b.n	8003510 <UART_SetConfig+0x254>
 8003412:	2308      	movs	r3, #8
 8003414:	76fb      	strb	r3, [r7, #27]
 8003416:	e07b      	b.n	8003510 <UART_SetConfig+0x254>
 8003418:	2310      	movs	r3, #16
 800341a:	76fb      	strb	r3, [r7, #27]
 800341c:	bf00      	nop
 800341e:	e077      	b.n	8003510 <UART_SetConfig+0x254>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a68      	ldr	r2, [pc, #416]	; (80035c8 <UART_SetConfig+0x30c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d120      	bne.n	800346c <UART_SetConfig+0x1b0>
 800342a:	4b65      	ldr	r3, [pc, #404]	; (80035c0 <UART_SetConfig+0x304>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003434:	2b10      	cmp	r3, #16
 8003436:	d00f      	beq.n	8003458 <UART_SetConfig+0x19c>
 8003438:	2b10      	cmp	r3, #16
 800343a:	d802      	bhi.n	8003442 <UART_SetConfig+0x186>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <UART_SetConfig+0x190>
 8003440:	e010      	b.n	8003464 <UART_SetConfig+0x1a8>
 8003442:	2b20      	cmp	r3, #32
 8003444:	d005      	beq.n	8003452 <UART_SetConfig+0x196>
 8003446:	2b30      	cmp	r3, #48	; 0x30
 8003448:	d009      	beq.n	800345e <UART_SetConfig+0x1a2>
 800344a:	e00b      	b.n	8003464 <UART_SetConfig+0x1a8>
 800344c:	2300      	movs	r3, #0
 800344e:	76fb      	strb	r3, [r7, #27]
 8003450:	e05e      	b.n	8003510 <UART_SetConfig+0x254>
 8003452:	2302      	movs	r3, #2
 8003454:	76fb      	strb	r3, [r7, #27]
 8003456:	e05b      	b.n	8003510 <UART_SetConfig+0x254>
 8003458:	2304      	movs	r3, #4
 800345a:	76fb      	strb	r3, [r7, #27]
 800345c:	e058      	b.n	8003510 <UART_SetConfig+0x254>
 800345e:	2308      	movs	r3, #8
 8003460:	76fb      	strb	r3, [r7, #27]
 8003462:	e055      	b.n	8003510 <UART_SetConfig+0x254>
 8003464:	2310      	movs	r3, #16
 8003466:	76fb      	strb	r3, [r7, #27]
 8003468:	bf00      	nop
 800346a:	e051      	b.n	8003510 <UART_SetConfig+0x254>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a56      	ldr	r2, [pc, #344]	; (80035cc <UART_SetConfig+0x310>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d120      	bne.n	80034b8 <UART_SetConfig+0x1fc>
 8003476:	4b52      	ldr	r3, [pc, #328]	; (80035c0 <UART_SetConfig+0x304>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003480:	2b40      	cmp	r3, #64	; 0x40
 8003482:	d00f      	beq.n	80034a4 <UART_SetConfig+0x1e8>
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d802      	bhi.n	800348e <UART_SetConfig+0x1d2>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <UART_SetConfig+0x1dc>
 800348c:	e010      	b.n	80034b0 <UART_SetConfig+0x1f4>
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d005      	beq.n	800349e <UART_SetConfig+0x1e2>
 8003492:	2bc0      	cmp	r3, #192	; 0xc0
 8003494:	d009      	beq.n	80034aa <UART_SetConfig+0x1ee>
 8003496:	e00b      	b.n	80034b0 <UART_SetConfig+0x1f4>
 8003498:	2300      	movs	r3, #0
 800349a:	76fb      	strb	r3, [r7, #27]
 800349c:	e038      	b.n	8003510 <UART_SetConfig+0x254>
 800349e:	2302      	movs	r3, #2
 80034a0:	76fb      	strb	r3, [r7, #27]
 80034a2:	e035      	b.n	8003510 <UART_SetConfig+0x254>
 80034a4:	2304      	movs	r3, #4
 80034a6:	76fb      	strb	r3, [r7, #27]
 80034a8:	e032      	b.n	8003510 <UART_SetConfig+0x254>
 80034aa:	2308      	movs	r3, #8
 80034ac:	76fb      	strb	r3, [r7, #27]
 80034ae:	e02f      	b.n	8003510 <UART_SetConfig+0x254>
 80034b0:	2310      	movs	r3, #16
 80034b2:	76fb      	strb	r3, [r7, #27]
 80034b4:	bf00      	nop
 80034b6:	e02b      	b.n	8003510 <UART_SetConfig+0x254>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a3e      	ldr	r2, [pc, #248]	; (80035b8 <UART_SetConfig+0x2fc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d124      	bne.n	800350c <UART_SetConfig+0x250>
 80034c2:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <UART_SetConfig+0x304>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d012      	beq.n	80034f8 <UART_SetConfig+0x23c>
 80034d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d6:	d802      	bhi.n	80034de <UART_SetConfig+0x222>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <UART_SetConfig+0x230>
 80034dc:	e012      	b.n	8003504 <UART_SetConfig+0x248>
 80034de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e2:	d006      	beq.n	80034f2 <UART_SetConfig+0x236>
 80034e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034e8:	d009      	beq.n	80034fe <UART_SetConfig+0x242>
 80034ea:	e00b      	b.n	8003504 <UART_SetConfig+0x248>
 80034ec:	2300      	movs	r3, #0
 80034ee:	76fb      	strb	r3, [r7, #27]
 80034f0:	e00e      	b.n	8003510 <UART_SetConfig+0x254>
 80034f2:	2302      	movs	r3, #2
 80034f4:	76fb      	strb	r3, [r7, #27]
 80034f6:	e00b      	b.n	8003510 <UART_SetConfig+0x254>
 80034f8:	2304      	movs	r3, #4
 80034fa:	76fb      	strb	r3, [r7, #27]
 80034fc:	e008      	b.n	8003510 <UART_SetConfig+0x254>
 80034fe:	2308      	movs	r3, #8
 8003500:	76fb      	strb	r3, [r7, #27]
 8003502:	e005      	b.n	8003510 <UART_SetConfig+0x254>
 8003504:	2310      	movs	r3, #16
 8003506:	76fb      	strb	r3, [r7, #27]
 8003508:	bf00      	nop
 800350a:	e001      	b.n	8003510 <UART_SetConfig+0x254>
 800350c:	2310      	movs	r3, #16
 800350e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a28      	ldr	r2, [pc, #160]	; (80035b8 <UART_SetConfig+0x2fc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	f040 80a1 	bne.w	800365e <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800351c:	7efb      	ldrb	r3, [r7, #27]
 800351e:	2b08      	cmp	r3, #8
 8003520:	d823      	bhi.n	800356a <UART_SetConfig+0x2ae>
 8003522:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <UART_SetConfig+0x26c>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	0800354d 	.word	0x0800354d
 800352c:	0800356b 	.word	0x0800356b
 8003530:	08003555 	.word	0x08003555
 8003534:	0800356b 	.word	0x0800356b
 8003538:	0800355b 	.word	0x0800355b
 800353c:	0800356b 	.word	0x0800356b
 8003540:	0800356b 	.word	0x0800356b
 8003544:	0800356b 	.word	0x0800356b
 8003548:	08003563 	.word	0x08003563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7fe fdfa 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8003550:	6178      	str	r0, [r7, #20]
        break;
 8003552:	e00f      	b.n	8003574 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003554:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <UART_SetConfig+0x314>)
 8003556:	617b      	str	r3, [r7, #20]
        break;
 8003558:	e00c      	b.n	8003574 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800355a:	f7fe fd85 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 800355e:	6178      	str	r0, [r7, #20]
        break;
 8003560:	e008      	b.n	8003574 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003566:	617b      	str	r3, [r7, #20]
        break;
 8003568:	e004      	b.n	8003574 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	76bb      	strb	r3, [r7, #26]
        break;
 8003572:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8130 	beq.w	80037dc <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <UART_SetConfig+0x318>)
 8003582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003586:	461a      	mov	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fbb3 f3f2 	udiv	r3, r3, r2
 800358e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	d305      	bcc.n	80035ac <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d915      	bls.n	80035d8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	76bb      	strb	r3, [r7, #26]
 80035b0:	e114      	b.n	80037dc <UART_SetConfig+0x520>
 80035b2:	bf00      	nop
 80035b4:	cfff69f3 	.word	0xcfff69f3
 80035b8:	40008000 	.word	0x40008000
 80035bc:	40013800 	.word	0x40013800
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40004400 	.word	0x40004400
 80035c8:	40004800 	.word	0x40004800
 80035cc:	40004c00 	.word	0x40004c00
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	08003db4 	.word	0x08003db4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4618      	mov	r0, r3
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	4a87      	ldr	r2, [pc, #540]	; (8003804 <UART_SetConfig+0x548>)
 80035e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f04f 0400 	mov.w	r4, #0
 80035f0:	461a      	mov	r2, r3
 80035f2:	4623      	mov	r3, r4
 80035f4:	f7fc fe10 	bl	8000218 <__aeabi_uldivmod>
 80035f8:	4603      	mov	r3, r0
 80035fa:	460c      	mov	r4, r1
 80035fc:	4619      	mov	r1, r3
 80035fe:	4622      	mov	r2, r4
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	f04f 0400 	mov.w	r4, #0
 8003608:	0214      	lsls	r4, r2, #8
 800360a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800360e:	020b      	lsls	r3, r1, #8
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6852      	ldr	r2, [r2, #4]
 8003614:	0852      	lsrs	r2, r2, #1
 8003616:	4611      	mov	r1, r2
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	eb13 0b01 	adds.w	fp, r3, r1
 8003620:	eb44 0c02 	adc.w	ip, r4, r2
 8003624:	4658      	mov	r0, fp
 8003626:	4661      	mov	r1, ip
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f04f 0400 	mov.w	r4, #0
 8003630:	461a      	mov	r2, r3
 8003632:	4623      	mov	r3, r4
 8003634:	f7fc fdf0 	bl	8000218 <__aeabi_uldivmod>
 8003638:	4603      	mov	r3, r0
 800363a:	460c      	mov	r4, r1
 800363c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003644:	d308      	bcc.n	8003658 <UART_SetConfig+0x39c>
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800364c:	d204      	bcs.n	8003658 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	e0c1      	b.n	80037dc <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	76bb      	strb	r3, [r7, #26]
 800365c:	e0be      	b.n	80037dc <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003666:	d164      	bne.n	8003732 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8003668:	7efb      	ldrb	r3, [r7, #27]
 800366a:	2b08      	cmp	r3, #8
 800366c:	d827      	bhi.n	80036be <UART_SetConfig+0x402>
 800366e:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <UART_SetConfig+0x3b8>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	08003699 	.word	0x08003699
 8003678:	080036a1 	.word	0x080036a1
 800367c:	080036a9 	.word	0x080036a9
 8003680:	080036bf 	.word	0x080036bf
 8003684:	080036af 	.word	0x080036af
 8003688:	080036bf 	.word	0x080036bf
 800368c:	080036bf 	.word	0x080036bf
 8003690:	080036bf 	.word	0x080036bf
 8003694:	080036b7 	.word	0x080036b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003698:	f7fe fd54 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 800369c:	6178      	str	r0, [r7, #20]
        break;
 800369e:	e013      	b.n	80036c8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a0:	f7fe fd66 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 80036a4:	6178      	str	r0, [r7, #20]
        break;
 80036a6:	e00f      	b.n	80036c8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a8:	4b57      	ldr	r3, [pc, #348]	; (8003808 <UART_SetConfig+0x54c>)
 80036aa:	617b      	str	r3, [r7, #20]
        break;
 80036ac:	e00c      	b.n	80036c8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ae:	f7fe fcdb 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 80036b2:	6178      	str	r0, [r7, #20]
        break;
 80036b4:	e008      	b.n	80036c8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ba:	617b      	str	r3, [r7, #20]
        break;
 80036bc:	e004      	b.n	80036c8 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	76bb      	strb	r3, [r7, #26]
        break;
 80036c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8086 	beq.w	80037dc <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	4a4b      	ldr	r2, [pc, #300]	; (8003804 <UART_SetConfig+0x548>)
 80036d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036da:	461a      	mov	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	fbb3 f3f2 	udiv	r3, r3, r2
 80036e2:	005a      	lsls	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	441a      	add	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	d916      	bls.n	800372c <UART_SetConfig+0x470>
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003704:	d212      	bcs.n	800372c <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	b29b      	uxth	r3, r3
 800370a:	f023 030f 	bic.w	r3, r3, #15
 800370e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	b29b      	uxth	r3, r3
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	b29a      	uxth	r2, r3
 800371c:	89fb      	ldrh	r3, [r7, #14]
 800371e:	4313      	orrs	r3, r2
 8003720:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	89fa      	ldrh	r2, [r7, #14]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	e057      	b.n	80037dc <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	76bb      	strb	r3, [r7, #26]
 8003730:	e054      	b.n	80037dc <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003732:	7efb      	ldrb	r3, [r7, #27]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d828      	bhi.n	800378a <UART_SetConfig+0x4ce>
 8003738:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <UART_SetConfig+0x484>)
 800373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373e:	bf00      	nop
 8003740:	08003765 	.word	0x08003765
 8003744:	0800376d 	.word	0x0800376d
 8003748:	08003775 	.word	0x08003775
 800374c:	0800378b 	.word	0x0800378b
 8003750:	0800377b 	.word	0x0800377b
 8003754:	0800378b 	.word	0x0800378b
 8003758:	0800378b 	.word	0x0800378b
 800375c:	0800378b 	.word	0x0800378b
 8003760:	08003783 	.word	0x08003783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003764:	f7fe fcee 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8003768:	6178      	str	r0, [r7, #20]
        break;
 800376a:	e013      	b.n	8003794 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800376c:	f7fe fd00 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 8003770:	6178      	str	r0, [r7, #20]
        break;
 8003772:	e00f      	b.n	8003794 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003774:	4b24      	ldr	r3, [pc, #144]	; (8003808 <UART_SetConfig+0x54c>)
 8003776:	617b      	str	r3, [r7, #20]
        break;
 8003778:	e00c      	b.n	8003794 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377a:	f7fe fc75 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 800377e:	6178      	str	r0, [r7, #20]
        break;
 8003780:	e008      	b.n	8003794 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003786:	617b      	str	r3, [r7, #20]
        break;
 8003788:	e004      	b.n	8003794 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	76bb      	strb	r3, [r7, #26]
        break;
 8003792:	bf00      	nop
    }

    if (pclk != 0U)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d020      	beq.n	80037dc <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	4a19      	ldr	r2, [pc, #100]	; (8003804 <UART_SetConfig+0x548>)
 80037a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037a4:	461a      	mov	r2, r3
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	441a      	add	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	b29b      	uxth	r3, r3
 80037be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	d908      	bls.n	80037d8 <UART_SetConfig+0x51c>
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d204      	bcs.n	80037d8 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	e001      	b.n	80037dc <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80037f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003804:	08003db4 	.word	0x08003db4
 8003808:	00f42400 	.word	0x00f42400

0800380c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01a      	beq.n	8003922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800390a:	d10a      	bne.n	8003922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	605a      	str	r2, [r3, #4]
  }
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af02      	add	r7, sp, #8
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003960:	f7fd f948 	bl	8000bf4 <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d10e      	bne.n	8003992 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f82c 	bl	80039e0 <UART_WaitOnFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e022      	b.n	80039d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b04      	cmp	r3, #4
 800399e:	d10e      	bne.n	80039be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f816 	bl	80039e0 <UART_WaitOnFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e00c      	b.n	80039d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f0:	e062      	b.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d05e      	beq.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fa:	f7fd f8fb 	bl	8000bf4 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d302      	bcc.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d11d      	bne.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a1e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0201 	bic.w	r2, r2, #1
 8003a2e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e045      	b.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d02e      	beq.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a68:	d126      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a72:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a82:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e00f      	b.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d08d      	beq.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_UARTEx_DisableFifoMode+0x16>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e027      	b.n	8003b46 <HAL_UARTEx_DisableFifoMode+0x66>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2224      	movs	r2, #36	; 0x24
 8003b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003b24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e02d      	b.n	8003bc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2224      	movs	r2, #36	; 0x24
 8003b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f850 	bl	8003c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e02d      	b.n	8003c42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2224      	movs	r2, #36	; 0x24
 8003bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0201 	bic.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f812 	bl	8003c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	; 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003c54:	4a2f      	ldr	r2, [pc, #188]	; (8003d14 <UARTEx_SetNbDataToProcess+0xc8>)
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c5e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003c62:	4a2d      	ldr	r2, [pc, #180]	; (8003d18 <UARTEx_SetNbDataToProcess+0xcc>)
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c6c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d108      	bne.n	8003c8a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c88:	e03d      	b.n	8003d06 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c8e:	2308      	movs	r3, #8
 8003c90:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	0e5b      	lsrs	r3, r3, #25
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	0f5b      	lsrs	r3, r3, #29
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003cb2:	7fbb      	ldrb	r3, [r7, #30]
 8003cb4:	7f3a      	ldrb	r2, [r7, #28]
 8003cb6:	f107 0120 	add.w	r1, r7, #32
 8003cba:	440a      	add	r2, r1
 8003cbc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003cc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003cc4:	7f3a      	ldrb	r2, [r7, #28]
 8003cc6:	f107 0120 	add.w	r1, r7, #32
 8003cca:	440a      	add	r2, r1
 8003ccc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003cd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cdc:	7ffb      	ldrb	r3, [r7, #31]
 8003cde:	7f7a      	ldrb	r2, [r7, #29]
 8003ce0:	f107 0120 	add.w	r1, r7, #32
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003cee:	7f7a      	ldrb	r2, [r7, #29]
 8003cf0:	f107 0120 	add.w	r1, r7, #32
 8003cf4:	440a      	add	r2, r1
 8003cf6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d06:	bf00      	nop
 8003d08:	3724      	adds	r7, #36	; 0x24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	08003d8c 	.word	0x08003d8c
 8003d18:	08003d94 	.word	0x08003d94

08003d1c <__libc_init_array>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	4e0d      	ldr	r6, [pc, #52]	; (8003d54 <__libc_init_array+0x38>)
 8003d20:	4c0d      	ldr	r4, [pc, #52]	; (8003d58 <__libc_init_array+0x3c>)
 8003d22:	1ba4      	subs	r4, r4, r6
 8003d24:	10a4      	asrs	r4, r4, #2
 8003d26:	2500      	movs	r5, #0
 8003d28:	42a5      	cmp	r5, r4
 8003d2a:	d109      	bne.n	8003d40 <__libc_init_array+0x24>
 8003d2c:	4e0b      	ldr	r6, [pc, #44]	; (8003d5c <__libc_init_array+0x40>)
 8003d2e:	4c0c      	ldr	r4, [pc, #48]	; (8003d60 <__libc_init_array+0x44>)
 8003d30:	f000 f820 	bl	8003d74 <_init>
 8003d34:	1ba4      	subs	r4, r4, r6
 8003d36:	10a4      	asrs	r4, r4, #2
 8003d38:	2500      	movs	r5, #0
 8003d3a:	42a5      	cmp	r5, r4
 8003d3c:	d105      	bne.n	8003d4a <__libc_init_array+0x2e>
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d44:	4798      	blx	r3
 8003d46:	3501      	adds	r5, #1
 8003d48:	e7ee      	b.n	8003d28 <__libc_init_array+0xc>
 8003d4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d4e:	4798      	blx	r3
 8003d50:	3501      	adds	r5, #1
 8003d52:	e7f2      	b.n	8003d3a <__libc_init_array+0x1e>
 8003d54:	08003dd4 	.word	0x08003dd4
 8003d58:	08003dd4 	.word	0x08003dd4
 8003d5c:	08003dd4 	.word	0x08003dd4
 8003d60:	08003dd8 	.word	0x08003dd8

08003d64 <memset>:
 8003d64:	4402      	add	r2, r0
 8003d66:	4603      	mov	r3, r0
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d100      	bne.n	8003d6e <memset+0xa>
 8003d6c:	4770      	bx	lr
 8003d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d72:	e7f9      	b.n	8003d68 <memset+0x4>

08003d74 <_init>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	bf00      	nop
 8003d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7a:	bc08      	pop	{r3}
 8003d7c:	469e      	mov	lr, r3
 8003d7e:	4770      	bx	lr

08003d80 <_fini>:
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d82:	bf00      	nop
 8003d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d86:	bc08      	pop	{r3}
 8003d88:	469e      	mov	lr, r3
 8003d8a:	4770      	bx	lr
