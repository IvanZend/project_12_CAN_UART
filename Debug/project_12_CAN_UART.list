
project_12_CAN_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006954  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e54  08006e54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e5c  08006e5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e64  08006e64  00016e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f0  2000000c  08006e74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011fc  08006e74  000211fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017205  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026bc  00000000  00000000  00037241  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  00039900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001260  00000000  00000000  0003ac88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fbde  00000000  00000000  0003bee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e481  00000000  00000000  0005bac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd1b9  00000000  00000000  00069f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137100  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000542c  00000000  00000000  0013717c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006b14 	.word	0x08006b14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006b14 	.word	0x08006b14

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b972 	b.w	8000528 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9e08      	ldr	r6, [sp, #32]
 8000262:	4604      	mov	r4, r0
 8000264:	4688      	mov	r8, r1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d14b      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026a:	428a      	cmp	r2, r1
 800026c:	4615      	mov	r5, r2
 800026e:	d967      	bls.n	8000340 <__udivmoddi4+0xe4>
 8000270:	fab2 f282 	clz	r2, r2
 8000274:	b14a      	cbz	r2, 800028a <__udivmoddi4+0x2e>
 8000276:	f1c2 0720 	rsb	r7, r2, #32
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	fa20 f707 	lsr.w	r7, r0, r7
 8000282:	4095      	lsls	r5, r2
 8000284:	ea47 0803 	orr.w	r8, r7, r3
 8000288:	4094      	lsls	r4, r2
 800028a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028e:	0c23      	lsrs	r3, r4, #16
 8000290:	fbb8 f7fe 	udiv	r7, r8, lr
 8000294:	fa1f fc85 	uxth.w	ip, r5
 8000298:	fb0e 8817 	mls	r8, lr, r7, r8
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	fb07 f10c 	mul.w	r1, r7, ip
 80002a4:	4299      	cmp	r1, r3
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x60>
 80002a8:	18eb      	adds	r3, r5, r3
 80002aa:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ae:	f080 811b 	bcs.w	80004e8 <__udivmoddi4+0x28c>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 8118 	bls.w	80004e8 <__udivmoddi4+0x28c>
 80002b8:	3f02      	subs	r7, #2
 80002ba:	442b      	add	r3, r5
 80002bc:	1a5b      	subs	r3, r3, r1
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002cc:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d0:	45a4      	cmp	ip, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x8c>
 80002d4:	192c      	adds	r4, r5, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x290>
 80002de:	45a4      	cmp	ip, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x290>
 80002e4:	3802      	subs	r0, #2
 80002e6:	442c      	add	r4, r5
 80002e8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ec:	eba4 040c 	sub.w	r4, r4, ip
 80002f0:	2700      	movs	r7, #0
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa0>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0xbe>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80eb 	beq.w	80004e2 <__udivmoddi4+0x286>
 800030c:	2700      	movs	r7, #0
 800030e:	e9c6 0100 	strd	r0, r1, [r6]
 8000312:	4638      	mov	r0, r7
 8000314:	4639      	mov	r1, r7
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f783 	clz	r7, r3
 800031e:	2f00      	cmp	r7, #0
 8000320:	d147      	bne.n	80003b2 <__udivmoddi4+0x156>
 8000322:	428b      	cmp	r3, r1
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xd0>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2c4>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb61 0303 	sbc.w	r3, r1, r3
 8000332:	2001      	movs	r0, #1
 8000334:	4698      	mov	r8, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d0e0      	beq.n	80002fc <__udivmoddi4+0xa0>
 800033a:	e9c6 4800 	strd	r4, r8, [r6]
 800033e:	e7dd      	b.n	80002fc <__udivmoddi4+0xa0>
 8000340:	b902      	cbnz	r2, 8000344 <__udivmoddi4+0xe8>
 8000342:	deff      	udf	#255	; 0xff
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	2a00      	cmp	r2, #0
 800034a:	f040 808f 	bne.w	800046c <__udivmoddi4+0x210>
 800034e:	1b49      	subs	r1, r1, r5
 8000350:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000354:	fa1f f885 	uxth.w	r8, r5
 8000358:	2701      	movs	r7, #1
 800035a:	fbb1 fcfe 	udiv	ip, r1, lr
 800035e:	0c23      	lsrs	r3, r4, #16
 8000360:	fb0e 111c 	mls	r1, lr, ip, r1
 8000364:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000368:	fb08 f10c 	mul.w	r1, r8, ip
 800036c:	4299      	cmp	r1, r3
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x124>
 8000370:	18eb      	adds	r3, r5, r3
 8000372:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x122>
 8000378:	4299      	cmp	r1, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2bc>
 800037e:	4684      	mov	ip, r0
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	b2a3      	uxth	r3, r4
 8000384:	fbb1 f0fe 	udiv	r0, r1, lr
 8000388:	fb0e 1410 	mls	r4, lr, r0, r1
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	fb08 f800 	mul.w	r8, r8, r0
 8000394:	45a0      	cmp	r8, r4
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x14c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x14a>
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	f200 80b6 	bhi.w	8000512 <__udivmoddi4+0x2b6>
 80003a6:	4618      	mov	r0, r3
 80003a8:	eba4 0408 	sub.w	r4, r4, r8
 80003ac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b0:	e79f      	b.n	80002f2 <__udivmoddi4+0x96>
 80003b2:	f1c7 0c20 	rsb	ip, r7, #32
 80003b6:	40bb      	lsls	r3, r7
 80003b8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003bc:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c0:	fa01 f407 	lsl.w	r4, r1, r7
 80003c4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003cc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d0:	4325      	orrs	r5, r4
 80003d2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d6:	0c2c      	lsrs	r4, r5, #16
 80003d8:	fb08 3319 	mls	r3, r8, r9, r3
 80003dc:	fa1f fa8e 	uxth.w	sl, lr
 80003e0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e4:	fb09 f40a 	mul.w	r4, r9, sl
 80003e8:	429c      	cmp	r4, r3
 80003ea:	fa02 f207 	lsl.w	r2, r2, r7
 80003ee:	fa00 f107 	lsl.w	r1, r0, r7
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b0>
 80003f4:	eb1e 0303 	adds.w	r3, lr, r3
 80003f8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003fc:	f080 8087 	bcs.w	800050e <__udivmoddi4+0x2b2>
 8000400:	429c      	cmp	r4, r3
 8000402:	f240 8084 	bls.w	800050e <__udivmoddi4+0x2b2>
 8000406:	f1a9 0902 	sub.w	r9, r9, #2
 800040a:	4473      	add	r3, lr
 800040c:	1b1b      	subs	r3, r3, r4
 800040e:	b2ad      	uxth	r5, r5
 8000410:	fbb3 f0f8 	udiv	r0, r3, r8
 8000414:	fb08 3310 	mls	r3, r8, r0, r3
 8000418:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800041c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000420:	45a2      	cmp	sl, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1da>
 8000424:	eb1e 0404 	adds.w	r4, lr, r4
 8000428:	f100 33ff 	add.w	r3, r0, #4294967295
 800042c:	d26b      	bcs.n	8000506 <__udivmoddi4+0x2aa>
 800042e:	45a2      	cmp	sl, r4
 8000430:	d969      	bls.n	8000506 <__udivmoddi4+0x2aa>
 8000432:	3802      	subs	r0, #2
 8000434:	4474      	add	r4, lr
 8000436:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043a:	fba0 8902 	umull	r8, r9, r0, r2
 800043e:	eba4 040a 	sub.w	r4, r4, sl
 8000442:	454c      	cmp	r4, r9
 8000444:	46c2      	mov	sl, r8
 8000446:	464b      	mov	r3, r9
 8000448:	d354      	bcc.n	80004f4 <__udivmoddi4+0x298>
 800044a:	d051      	beq.n	80004f0 <__udivmoddi4+0x294>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2c8>
 8000450:	ebb1 050a 	subs.w	r5, r1, sl
 8000454:	eb64 0403 	sbc.w	r4, r4, r3
 8000458:	fa04 fc0c 	lsl.w	ip, r4, ip
 800045c:	40fd      	lsrs	r5, r7
 800045e:	40fc      	lsrs	r4, r7
 8000460:	ea4c 0505 	orr.w	r5, ip, r5
 8000464:	e9c6 5400 	strd	r5, r4, [r6]
 8000468:	2700      	movs	r7, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa0>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f703 	lsr.w	r7, r0, r3
 8000474:	4095      	lsls	r5, r2
 8000476:	fa01 f002 	lsl.w	r0, r1, r2
 800047a:	fa21 f303 	lsr.w	r3, r1, r3
 800047e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000482:	4338      	orrs	r0, r7
 8000484:	0c01      	lsrs	r1, r0, #16
 8000486:	fbb3 f7fe 	udiv	r7, r3, lr
 800048a:	fa1f f885 	uxth.w	r8, r5
 800048e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb07 f308 	mul.w	r3, r7, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x256>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f107 3cff 	add.w	ip, r7, #4294967295
 80004a8:	d22f      	bcs.n	800050a <__udivmoddi4+0x2ae>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d92d      	bls.n	800050a <__udivmoddi4+0x2ae>
 80004ae:	3f02      	subs	r7, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1acb      	subs	r3, r1, r3
 80004b4:	b281      	uxth	r1, r0
 80004b6:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ba:	fb0e 3310 	mls	r3, lr, r0, r3
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb00 f308 	mul.w	r3, r0, r8
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x27e>
 80004ca:	1869      	adds	r1, r5, r1
 80004cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d0:	d217      	bcs.n	8000502 <__udivmoddi4+0x2a6>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d915      	bls.n	8000502 <__udivmoddi4+0x2a6>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4429      	add	r1, r5
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e0:	e73b      	b.n	800035a <__udivmoddi4+0xfe>
 80004e2:	4637      	mov	r7, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e709      	b.n	80002fc <__udivmoddi4+0xa0>
 80004e8:	4607      	mov	r7, r0
 80004ea:	e6e7      	b.n	80002bc <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x8c>
 80004f0:	4541      	cmp	r1, r8
 80004f2:	d2ab      	bcs.n	800044c <__udivmoddi4+0x1f0>
 80004f4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f8:	eb69 020e 	sbc.w	r2, r9, lr
 80004fc:	3801      	subs	r0, #1
 80004fe:	4613      	mov	r3, r2
 8000500:	e7a4      	b.n	800044c <__udivmoddi4+0x1f0>
 8000502:	4660      	mov	r0, ip
 8000504:	e7e9      	b.n	80004da <__udivmoddi4+0x27e>
 8000506:	4618      	mov	r0, r3
 8000508:	e795      	b.n	8000436 <__udivmoddi4+0x1da>
 800050a:	4667      	mov	r7, ip
 800050c:	e7d1      	b.n	80004b2 <__udivmoddi4+0x256>
 800050e:	4681      	mov	r9, r0
 8000510:	e77c      	b.n	800040c <__udivmoddi4+0x1b0>
 8000512:	3802      	subs	r0, #2
 8000514:	442c      	add	r4, r5
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0x14c>
 8000518:	f1ac 0c02 	sub.w	ip, ip, #2
 800051c:	442b      	add	r3, r5
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x124>
 8000520:	4638      	mov	r0, r7
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xda>
 8000524:	4637      	mov	r7, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa0>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <_ZN3MSGC1Ev>:
 */

#ifndef INC_MSG_QUEUE_H_
#define INC_MSG_QUEUE_H_

struct MSG
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	621a      	str	r2, [r3, #32]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	625a      	str	r2, [r3, #36]	; 0x24
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <_ZN5QueueC1Ev>:
	char Buffer[32];
	int Priority = 0;
	int Size = 0;
};

struct Queue
 800054e:	b5b0      	push	{r4, r5, r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	2407      	movs	r4, #7
 8000562:	461d      	mov	r5, r3
 8000564:	2c00      	cmp	r4, #0
 8000566:	db05      	blt.n	8000574 <_ZN5QueueC1Ev+0x26>
 8000568:	4628      	mov	r0, r5
 800056a:	f7ff ffdf 	bl	800052c <_ZN3MSGC1Ev>
 800056e:	3528      	adds	r5, #40	; 0x28
 8000570:	3c01      	subs	r4, #1
 8000572:	e7f7      	b.n	8000564 <_ZN5QueueC1Ev+0x16>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2200      	movs	r2, #0
 8000578:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2200      	movs	r2, #0
 8000580:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bdb0      	pop	{r4, r5, r7, pc}

0800058e <UART_IT_handler>:
Queue UARTQueueRX, UARTQueueTX;

extern "C"
{
	void UART_IT_handler(void)
	{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
		//bool Queue::Push(char* data, int size, int priority);


		//add_byte_to_string(UART_rx_buffer[0]);													// добавляем принятый байт в строку в очереди на парсинг
		//HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_RX_MESSAGE_SIZE);			// взводим функцию для обработки прерывания
	}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <_Z41__static_initialization_and_destruction_0ii>:
}
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d10a      	bne.n	80005c2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d105      	bne.n	80005c2 <_Z41__static_initialization_and_destruction_0ii+0x26>
Queue UARTQueueRX, UARTQueueTX;
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80005b8:	f7ff ffc9 	bl	800054e <_ZN5QueueC1Ev>
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80005be:	f7ff ffc6 	bl	800054e <_ZN5QueueC1Ev>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000028 	.word	0x20000028
 80005d0:	20000174 	.word	0x20000174

080005d4 <_GLOBAL__sub_I_UARTQueueRX>:
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff ffdd 	bl	800059c <_Z41__static_initialization_and_destruction_0ii>
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_UART_values();
 80005e8:	f000 fb98 	bl	8000d1c <init_UART_values>
  init_CAN_values();
 80005ec:	f001 fab4 	bl	8001b58 <init_CAN_values>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f001 ffb1 	bl	8002556 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f832 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f9ca 	bl	8000990 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f97a 	bl	80008f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000600:	f000 f92a 	bl	8000858 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8000604:	f000 f894 	bl	8000730 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000608:	f000 f8d8 	bl	80007bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800060c:	480e      	ldr	r0, [pc, #56]	; (8000648 <main+0x64>)
 800060e:	f004 fac3 	bl	8004b98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000612:	480e      	ldr	r0, [pc, #56]	; (800064c <main+0x68>)
 8000614:	f004 fac0 	bl	8004b98 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_RX_MESSAGE_SIZE);
 8000618:	2201      	movs	r2, #1
 800061a:	490d      	ldr	r1, [pc, #52]	; (8000650 <main+0x6c>)
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <main+0x70>)
 800061e:	f005 f883 	bl	8005728 <HAL_UART_Receive_IT>
  init_CAN_filter();
 8000622:	f001 fedf 	bl	80023e4 <init_CAN_filter>
  HAL_FDCAN_ConfigTimestampCounter(&hfdcan1, FDCAN_TIMESTAMP_PRESC_1);
 8000626:	2100      	movs	r1, #0
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <main+0x74>)
 800062a:	f002 fb78 	bl	8002d1e <HAL_FDCAN_ConfigTimestampCounter>
  HAL_FDCAN_EnableTimestampCounter(&hfdcan1, FDCAN_TIMESTAMP_INTERNAL);
 800062e:	2101      	movs	r1, #1
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <main+0x74>)
 8000632:	f002 fb98 	bl	8002d66 <HAL_FDCAN_EnableTimestampCounter>
  HAL_FDCAN_Start(&hfdcan1);
 8000636:	4808      	ldr	r0, [pc, #32]	; (8000658 <main+0x74>)
 8000638:	f002 fbc7 	bl	8002dca <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, FDCAN_TX_BUFFER0);
 800063c:	2201      	movs	r2, #1
 800063e:	2101      	movs	r1, #1
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <main+0x74>)
 8000642:	f002 fd79 	bl	8003138 <HAL_FDCAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x62>
 8000648:	20000a1c 	.word	0x20000a1c
 800064c:	2000111c 	.word	0x2000111c
 8000650:	200003cc 	.word	0x200003cc
 8000654:	20001168 	.word	0x20001168
 8000658:	20000f4c 	.word	0x20000f4c

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b0a4      	sub	sp, #144	; 0x90
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000666:	2238      	movs	r2, #56	; 0x38
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f006 fa4a 	bl	8006b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2244      	movs	r2, #68	; 0x44
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f006 fa3c 	bl	8006b04 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000690:	f003 fa52 	bl	8003b38 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2340      	movs	r3, #64	; 0x40
 80006a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a6:	2302      	movs	r3, #2
 80006a8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80006aa:	2306      	movs	r3, #6
 80006ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 48;
 80006ae:	2330      	movs	r3, #48	; 0x30
 80006b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fae8 	bl	8003ca0 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006d6:	f000 f9a7 	bl	8000a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006f2:	2101      	movs	r1, #1
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fdeb 	bl	80042d0 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000700:	f000 f992 	bl	8000a28 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_FDCAN;
 8000704:	f241 0302 	movw	r3, #4098	; 0x1002
 8000708:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800070e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fff6 	bl	8004708 <HAL_RCCEx_PeriphCLKConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000722:	f000 f981 	bl	8000a28 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3790      	adds	r7, #144	; 0x90
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 8000736:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <MX_FDCAN1_Init+0x88>)
 8000738:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 800074e:	2200      	movs	r2, #0
 8000750:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 8000754:	2200      	movs	r2, #0
 8000756:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 800075a:	2200      	movs	r2, #0
 800075c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 8000760:	2208      	movs	r2, #8
 8000762:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 8000766:	2203      	movs	r2, #3
 8000768:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 800076c:	220d      	movs	r2, #13
 800076e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 8000772:	2202      	movs	r2, #2
 8000774:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 8000778:	2208      	movs	r2, #8
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 800077e:	2203      	movs	r2, #3
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 8000784:	220a      	movs	r2, #10
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 800078a:	2203      	movs	r2, #3
 800078c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 8000790:	2201      	movs	r2, #1
 8000792:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 8000796:	2201      	movs	r2, #1
 8000798:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 800079c:	2200      	movs	r2, #0
 800079e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_FDCAN1_Init+0x84>)
 80007a2:	f002 f8d7 	bl	8002954 <HAL_FDCAN_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80007ac:	f000 f93c 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000f4c 	.word	0x20000f4c
 80007b8:	40006400 	.word	0x40006400

080007bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_TIM2_Init+0x98>)
 80007dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_TIM2_Init+0x98>)
 80007e4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80007e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_TIM2_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_TIM2_Init+0x98>)
 80007f2:	2209      	movs	r2, #9
 80007f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_TIM2_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_TIM2_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <MX_TIM2_Init+0x98>)
 8000804:	f004 f970 	bl	8004ae8 <HAL_TIM_Base_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800080e:	f000 f90b 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_TIM2_Init+0x98>)
 8000820:	f004 fba4 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800082a:	f000 f8fd 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800082e:	2320      	movs	r3, #32
 8000830:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4806      	ldr	r0, [pc, #24]	; (8000854 <MX_TIM2_Init+0x98>)
 800083c:	f004 fdc6 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000846:	f000 f8ef 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000111c 	.word	0x2000111c

08000858 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_TIM3_Init+0x94>)
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <MX_TIM3_Init+0x98>)
 800087a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_TIM3_Init+0x94>)
 800087e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000882:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_TIM3_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_TIM3_Init+0x94>)
 800088c:	2263      	movs	r2, #99	; 0x63
 800088e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_TIM3_Init+0x94>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_TIM3_Init+0x94>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800089c:	4813      	ldr	r0, [pc, #76]	; (80008ec <MX_TIM3_Init+0x94>)
 800089e:	f004 f923 	bl	8004ae8 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008a8:	f000 f8be 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_TIM3_Init+0x94>)
 80008ba:	f004 fb57 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008c4:	f000 f8b0 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008c8:	2320      	movs	r3, #32
 80008ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_TIM3_Init+0x94>)
 80008d6:	f004 fd79 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008e0:	f000 f8a2 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000a1c 	.word	0x20000a1c
 80008f0:	40000400 	.word	0x40000400

080008f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <MX_USART2_UART_Init+0x94>)
 80008fa:	4a24      	ldr	r2, [pc, #144]	; (800098c <MX_USART2_UART_Init+0x98>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fe:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_USART2_UART_Init+0x94>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_USART2_UART_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_USART2_UART_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_USART2_UART_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_USART2_UART_Init+0x94>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_USART2_UART_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_USART2_UART_Init+0x94>)
 8000926:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800092a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_USART2_UART_Init+0x94>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_USART2_UART_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_USART2_UART_Init+0x94>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093e:	4812      	ldr	r0, [pc, #72]	; (8000988 <MX_USART2_UART_Init+0x94>)
 8000940:	f004 fe0c 	bl	800555c <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800094a:	f000 f86d 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_USART2_UART_Init+0x94>)
 8000952:	f005 ffce 	bl	80068f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800095c:	f000 f864 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4809      	ldr	r0, [pc, #36]	; (8000988 <MX_USART2_UART_Init+0x94>)
 8000964:	f006 f803 	bl	800696e <HAL_UARTEx_SetRxFifoThreshold>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800096e:	f000 f85b 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART2_UART_Init+0x94>)
 8000974:	f005 ff84 	bl	8006880 <HAL_UARTEx_DisableFifoMode>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800097e:	f000 f853 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20001168 	.word	0x20001168
 800098c:	40004400 	.word	0x40004400

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009ac:	f043 0320 	orr.w	r3, r3, #32
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0320 	and.w	r3, r3, #32
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <MX_GPIO_Init+0x94>)
 80009f6:	f003 f887 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4619      	mov	r1, r3
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_GPIO_Init+0x94>)
 8000a14:	f002 fef6 	bl	8003804 <HAL_GPIO_Init>

}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	48000400 	.word	0x48000400

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <HAL_MspInit+0x44>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_MspInit+0x44>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6613      	str	r3, [r2, #96]	; 0x60
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x44>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x44>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6593      	str	r3, [r2, #88]	; 0x58
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a6e:	f003 f907 	bl	8003c80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a1c      	ldr	r2, [pc, #112]	; (8000b10 <HAL_FDCAN_MspInit+0x90>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d131      	bne.n	8000b06 <HAL_FDCAN_MspInit+0x86>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <HAL_FDCAN_MspInit+0x94>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <HAL_FDCAN_MspInit+0x94>)
 8000aa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aac:	6593      	str	r3, [r2, #88]	; 0x58
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_FDCAN_MspInit+0x94>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_FDCAN_MspInit+0x94>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <HAL_FDCAN_MspInit+0x94>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_FDCAN_MspInit+0x94>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ad2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ae4:	2309      	movs	r3, #9
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af2:	f002 fe87 	bl	8003804 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2102      	movs	r1, #2
 8000afa:	2015      	movs	r0, #21
 8000afc:	f001 fe8b 	bl	8002816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000b00:	2015      	movs	r0, #21
 8000b02:	f001 fea2 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40006400 	.word	0x40006400
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b28:	d114      	bne.n	8000b54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_TIM_Base_MspInit+0x78>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <HAL_TIM_Base_MspInit+0x78>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <HAL_TIM_Base_MspInit+0x78>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2104      	movs	r1, #4
 8000b46:	201c      	movs	r0, #28
 8000b48:	f001 fe65 	bl	8002816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b4c:	201c      	movs	r0, #28
 8000b4e:	f001 fe7c 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b52:	e018      	b.n	8000b86 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_TIM_Base_MspInit+0x7c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d113      	bne.n	8000b86 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_TIM_Base_MspInit+0x78>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_TIM_Base_MspInit+0x78>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_TIM_Base_MspInit+0x78>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2103      	movs	r1, #3
 8000b7a:	201d      	movs	r0, #29
 8000b7c:	f001 fe4b 	bl	8002816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b80:	201d      	movs	r0, #29
 8000b82:	f001 fe62 	bl	800284a <HAL_NVIC_EnableIRQ>
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40000400 	.word	0x40000400

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <HAL_UART_MspInit+0x8c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d130      	bne.n	8000c1c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_UART_MspInit+0x90>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <HAL_UART_MspInit+0x90>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_UART_MspInit+0x90>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_UART_MspInit+0x90>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <HAL_UART_MspInit+0x90>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_UART_MspInit+0x90>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bea:	230c      	movs	r3, #12
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f002 fdfc 	bl	8003804 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2101      	movs	r1, #1
 8000c10:	2026      	movs	r0, #38	; 0x26
 8000c12:	f001 fe00 	bl	8002816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c16:	2026      	movs	r0, #38	; 0x26
 8000c18:	f001 fe17 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	; 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40004400 	.word	0x40004400
 8000c28:	40021000 	.word	0x40021000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f001 fcbc 	bl	80025fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <FDCAN1_IT0_IRQHandler+0x14>)
 8000c8e:	f002 fb39 	bl	8003304 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
  CAN_IT_handler();
 8000c92:	f000 fc33 	bl	80014fc <CAN_IT_handler>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000f4c 	.word	0x20000f4c

08000ca0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <TIM2_IRQHandler+0x18>)
 8000ca6:	f003 ffe1 	bl	8004c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  send_messages_from_UART_TX_queue();
 8000caa:	f001 fa91 	bl	80021d0 <send_messages_from_UART_TX_queue>
  send_messages_from_CAN_TX_queue();
 8000cae:	f001 fb47 	bl	8002340 <send_messages_from_CAN_TX_queue>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000111c 	.word	0x2000111c

08000cbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <TIM3_IRQHandler+0x18>)
 8000cc2:	f003 ffd3 	bl	8004c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  UART_RX_queue_polling();
 8000cc6:	f000 f853 	bl	8000d70 <UART_RX_queue_polling>
  CAN_RX_queue_polling();
 8000cca:	f000 fc53 	bl	8001574 <CAN_RX_queue_polling>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000a1c 	.word	0x20000a1c

08000cd8 <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */

void USART2_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <USART2_IRQHandler+0x14>)
 8000cde:	f004 fdfb 	bl	80058d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  UART_IT_handler();
 8000ce2:	f7ff fc54 	bl	800058e <UART_IT_handler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20001168 	.word	0x20001168

08000cf0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <SystemInit+0x28>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <SystemInit+0x28>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SystemInit+0x28>)
 8000d06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <init_UART_values>:
#define FLASH_USER_START_ADDR		ADDR_FLASH_PAGE_4
#define FLASH_USER_END_ADDR     	(ADDR_FLASH_PAGE_63 + FLASH_PAGE_SIZE - 1)   /* End @ of user Flash area */

// стартовая инициализация счётчиков и буферов UART
void init_UART_values(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	uart_error_state = UART_NO_ERROR;									// ошибка отсутствует
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <init_UART_values+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
	UART_RX_string_buffer_counter = 0;								// счётчик элемента строки-буфера
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <init_UART_values+0x3c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
	UART_RX_put_index = 0;							// обнуляем счётчитк элемента очереди на парсинг, в который ведётся запись
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <init_UART_values+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	UART_RX_get_index = 0;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <init_UART_values+0x44>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
	UART_TX_put_index = 0;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <init_UART_values+0x48>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
	UART_TX_get_index = 0;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <init_UART_values+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
	timestamp_enabled = TRUE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <init_UART_values+0x50>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	200011f6 	.word	0x200011f6
 8000d58:	20000fb0 	.word	0x20000fb0
 8000d5c:	200011f4 	.word	0x200011f4
 8000d60:	20000f49 	.word	0x20000f49
 8000d64:	200011f5 	.word	0x200011f5
 8000d68:	20001118 	.word	0x20001118
 8000d6c:	20000f48 	.word	0x20000f48

08000d70 <UART_RX_queue_polling>:
	}
}

// парсим сообщения из буфера-очереди
void UART_RX_queue_polling(void)
{
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
	if (UART_RX_get_index != UART_RX_put_index)												// если в буфере-очереди содержится хотя бы одно сообщение
 8000d76:	4b3a      	ldr	r3, [pc, #232]	; (8000e60 <UART_RX_queue_polling+0xf0>)
 8000d78:	781a      	ldrb	r2, [r3, #0]
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <UART_RX_queue_polling+0xf4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d063      	beq.n	8000e4a <UART_RX_queue_polling+0xda>
	{
 8000d82:	466b      	mov	r3, sp
 8000d84:	461d      	mov	r5, r3
		char tmp_ch_buf[UART_RX_queue_buffer[UART_RX_get_index].message_size + 1];			// буфер для формирования сообщения на парсинг. Размер буфера равен длине сообщения (без пустых символов)
 8000d86:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <UART_RX_queue_polling+0xf0>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4a36      	ldr	r2, [pc, #216]	; (8000e68 <UART_RX_queue_polling+0xf8>)
 8000d8e:	460b      	mov	r3, r1
 8000d90:	019b      	lsls	r3, r3, #6
 8000d92:	440b      	add	r3, r1
 8000d94:	4413      	add	r3, r2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	1c58      	adds	r0, r3, #1
 8000d9a:	1e43      	subs	r3, r0, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4619      	mov	r1, r3
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	f04f 0300 	mov.w	r3, #0
 8000daa:	f04f 0400 	mov.w	r4, #0
 8000dae:	00d4      	lsls	r4, r2, #3
 8000db0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000db4:	00cb      	lsls	r3, r1, #3
 8000db6:	4603      	mov	r3, r0
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	f04f 0400 	mov.w	r4, #0
 8000dc6:	00d4      	lsls	r4, r2, #3
 8000dc8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000dcc:	00cb      	lsls	r3, r1, #3
 8000dce:	4603      	mov	r3, r0
 8000dd0:	3307      	adds	r3, #7
 8000dd2:	08db      	lsrs	r3, r3, #3
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	ebad 0d03 	sub.w	sp, sp, r3
 8000dda:	466b      	mov	r3, sp
 8000ddc:	3300      	adds	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
		for (int ii = 0; ii < sizeof(tmp_ch_buf); ii++)									    // переписываем всё сообщение во временный буфер
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	e013      	b.n	8000e0e <UART_RX_queue_polling+0x9e>
		{
			tmp_ch_buf[ii] = UART_RX_queue_buffer[UART_RX_get_index].message_data[ii];
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <UART_RX_queue_polling+0xf0>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4619      	mov	r1, r3
 8000dec:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <UART_RX_queue_polling+0xf8>)
 8000dee:	460b      	mov	r3, r1
 8000df0:	019b      	lsls	r3, r3, #6
 8000df2:	440b      	add	r3, r1
 8000df4:	441a      	add	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4413      	add	r3, r2
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	7819      	ldrb	r1, [r3, #0]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	460a      	mov	r2, r1
 8000e06:	701a      	strb	r2, [r3, #0]
		for (int ii = 0; ii < sizeof(tmp_ch_buf); ii++)									    // переписываем всё сообщение во временный буфер
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4602      	mov	r2, r0
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d8e7      	bhi.n	8000de6 <UART_RX_queue_polling+0x76>
		}
		tmp_ch_buf[sizeof(tmp_ch_buf) - 1] = '\0';										// добавляем нуль-символ в конец сообщения
 8000e16:	4603      	mov	r3, r0
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	54d1      	strb	r1, [r2, r3]
		parse_UART_message(tmp_ch_buf);													// отправляем на парсинг текущее сообщение
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f822 	bl	8000e6c <parse_UART_message>
		UART_RX_queue_buffer[UART_RX_get_index].message_size = 0;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <UART_RX_queue_polling+0xf0>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <UART_RX_queue_polling+0xf8>)
 8000e30:	460b      	mov	r3, r1
 8000e32:	019b      	lsls	r3, r3, #6
 8000e34:	440b      	add	r3, r1
 8000e36:	4413      	add	r3, r2
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
		UART_RX_get_index++;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <UART_RX_queue_polling+0xf0>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <UART_RX_queue_polling+0xf0>)
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	46ad      	mov	sp, r5
	}
	if (UART_RX_get_index >= UART_RX_QUEUE_BUFFER_SIZE)
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <UART_RX_queue_polling+0xf0>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d902      	bls.n	8000e58 <UART_RX_queue_polling+0xe8>
	{
		UART_RX_get_index = 0;
 8000e52:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <UART_RX_queue_polling+0xf0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
	}
}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e60:	20000f49 	.word	0x20000f49
 8000e64:	200011f4 	.word	0x200011f4
 8000e68:	200002c4 	.word	0x200002c4

08000e6c <parse_UART_message>:

void parse_UART_message(char* UART_buffer_to_parse)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b092      	sub	sp, #72	; 0x48
 8000e70:	af02      	add	r7, sp, #8
 8000e72:	6078      	str	r0, [r7, #4]
	if (!strcmp(UART_buffer_to_parse, "return_test"))
 8000e74:	49bf      	ldr	r1, [pc, #764]	; (8001174 <parse_UART_message+0x308>)
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff f9ce 	bl	8000218 <strcmp>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d105      	bne.n	8000e8e <parse_UART_message+0x22>
	{
		put_string_to_UART(sizeof(MESSAGE_TEST_VALUE), MESSAGE_TEST_VALUE, UART_TX_MESSAGE_PRIORITY_3);
 8000e82:	2203      	movs	r2, #3
 8000e84:	49bc      	ldr	r1, [pc, #752]	; (8001178 <parse_UART_message+0x30c>)
 8000e86:	2010      	movs	r0, #16
 8000e88:	f000 fac9 	bl	800141e <put_string_to_UART>
	else if (UART_buffer_to_parse[0] == 'M')
	{
		update_CAN_acceptance_code(count_string_lenght(&UART_buffer_to_parse[1]), &UART_buffer_to_parse[1]);
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
	}
}
 8000e8c:	e2a0      	b.n	80013d0 <parse_UART_message+0x564>
	else if ((!strcmp(UART_buffer_to_parse, "H")) || (!strcmp(UART_buffer_to_parse, "h")) || (!strcmp(UART_buffer_to_parse, "?")))
 8000e8e:	49bb      	ldr	r1, [pc, #748]	; (800117c <parse_UART_message+0x310>)
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff f9c1 	bl	8000218 <strcmp>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00d      	beq.n	8000eb8 <parse_UART_message+0x4c>
 8000e9c:	49b8      	ldr	r1, [pc, #736]	; (8001180 <parse_UART_message+0x314>)
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff f9ba 	bl	8000218 <strcmp>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d006      	beq.n	8000eb8 <parse_UART_message+0x4c>
 8000eaa:	49b6      	ldr	r1, [pc, #728]	; (8001184 <parse_UART_message+0x318>)
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff f9b3 	bl	8000218 <strcmp>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d15f      	bne.n	8000f78 <parse_UART_message+0x10c>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_01), MESSAGE_COMMAND_LIST_STRING_01, UART_TX_MESSAGE_PRIORITY_3);
 8000eb8:	2203      	movs	r2, #3
 8000eba:	49b3      	ldr	r1, [pc, #716]	; (8001188 <parse_UART_message+0x31c>)
 8000ebc:	201b      	movs	r0, #27
 8000ebe:	f000 faae 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_02), MESSAGE_COMMAND_LIST_STRING_02, UART_TX_MESSAGE_PRIORITY_3);
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	49b1      	ldr	r1, [pc, #708]	; (800118c <parse_UART_message+0x320>)
 8000ec6:	2024      	movs	r0, #36	; 0x24
 8000ec8:	f000 faa9 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_03), MESSAGE_COMMAND_LIST_STRING_03, UART_TX_MESSAGE_PRIORITY_3);
 8000ecc:	2203      	movs	r2, #3
 8000ece:	49b0      	ldr	r1, [pc, #704]	; (8001190 <parse_UART_message+0x324>)
 8000ed0:	202d      	movs	r0, #45	; 0x2d
 8000ed2:	f000 faa4 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_04), MESSAGE_COMMAND_LIST_STRING_04, UART_TX_MESSAGE_PRIORITY_3);
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	49ae      	ldr	r1, [pc, #696]	; (8001194 <parse_UART_message+0x328>)
 8000eda:	2026      	movs	r0, #38	; 0x26
 8000edc:	f000 fa9f 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_05), MESSAGE_COMMAND_LIST_STRING_05, UART_TX_MESSAGE_PRIORITY_3);
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	49ad      	ldr	r1, [pc, #692]	; (8001198 <parse_UART_message+0x32c>)
 8000ee4:	2016      	movs	r0, #22
 8000ee6:	f000 fa9a 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_06), MESSAGE_COMMAND_LIST_STRING_06, UART_TX_MESSAGE_PRIORITY_3);
 8000eea:	2203      	movs	r2, #3
 8000eec:	49ab      	ldr	r1, [pc, #684]	; (800119c <parse_UART_message+0x330>)
 8000eee:	2015      	movs	r0, #21
 8000ef0:	f000 fa95 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_07), MESSAGE_COMMAND_LIST_STRING_07, UART_TX_MESSAGE_PRIORITY_3);
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	49aa      	ldr	r1, [pc, #680]	; (80011a0 <parse_UART_message+0x334>)
 8000ef8:	201d      	movs	r0, #29
 8000efa:	f000 fa90 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_08), MESSAGE_COMMAND_LIST_STRING_08, UART_TX_MESSAGE_PRIORITY_3);
 8000efe:	2203      	movs	r2, #3
 8000f00:	49a8      	ldr	r1, [pc, #672]	; (80011a4 <parse_UART_message+0x338>)
 8000f02:	201e      	movs	r0, #30
 8000f04:	f000 fa8b 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_09), MESSAGE_COMMAND_LIST_STRING_09, UART_TX_MESSAGE_PRIORITY_3);
 8000f08:	2203      	movs	r2, #3
 8000f0a:	49a7      	ldr	r1, [pc, #668]	; (80011a8 <parse_UART_message+0x33c>)
 8000f0c:	201f      	movs	r0, #31
 8000f0e:	f000 fa86 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_10), MESSAGE_COMMAND_LIST_STRING_10, UART_TX_MESSAGE_PRIORITY_3);
 8000f12:	2203      	movs	r2, #3
 8000f14:	49a5      	ldr	r1, [pc, #660]	; (80011ac <parse_UART_message+0x340>)
 8000f16:	2031      	movs	r0, #49	; 0x31
 8000f18:	f000 fa81 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_11), MESSAGE_COMMAND_LIST_STRING_11, UART_TX_MESSAGE_PRIORITY_3);
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	49a4      	ldr	r1, [pc, #656]	; (80011b0 <parse_UART_message+0x344>)
 8000f20:	2032      	movs	r0, #50	; 0x32
 8000f22:	f000 fa7c 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_12), MESSAGE_COMMAND_LIST_STRING_12, UART_TX_MESSAGE_PRIORITY_3);
 8000f26:	2203      	movs	r2, #3
 8000f28:	49a2      	ldr	r1, [pc, #648]	; (80011b4 <parse_UART_message+0x348>)
 8000f2a:	2019      	movs	r0, #25
 8000f2c:	f000 fa77 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_13), MESSAGE_COMMAND_LIST_STRING_13, UART_TX_MESSAGE_PRIORITY_3);
 8000f30:	2203      	movs	r2, #3
 8000f32:	49a1      	ldr	r1, [pc, #644]	; (80011b8 <parse_UART_message+0x34c>)
 8000f34:	2018      	movs	r0, #24
 8000f36:	f000 fa72 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_14), MESSAGE_COMMAND_LIST_STRING_14, UART_TX_MESSAGE_PRIORITY_3);
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	499f      	ldr	r1, [pc, #636]	; (80011bc <parse_UART_message+0x350>)
 8000f3e:	201a      	movs	r0, #26
 8000f40:	f000 fa6d 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_15), MESSAGE_COMMAND_LIST_STRING_15, UART_TX_MESSAGE_PRIORITY_3);
 8000f44:	2203      	movs	r2, #3
 8000f46:	499e      	ldr	r1, [pc, #632]	; (80011c0 <parse_UART_message+0x354>)
 8000f48:	2015      	movs	r0, #21
 8000f4a:	f000 fa68 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_16), MESSAGE_COMMAND_LIST_STRING_16, UART_TX_MESSAGE_PRIORITY_3);
 8000f4e:	2203      	movs	r2, #3
 8000f50:	499c      	ldr	r1, [pc, #624]	; (80011c4 <parse_UART_message+0x358>)
 8000f52:	2015      	movs	r0, #21
 8000f54:	f000 fa63 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_17), MESSAGE_COMMAND_LIST_STRING_17, UART_TX_MESSAGE_PRIORITY_3);
 8000f58:	2203      	movs	r2, #3
 8000f5a:	499b      	ldr	r1, [pc, #620]	; (80011c8 <parse_UART_message+0x35c>)
 8000f5c:	2012      	movs	r0, #18
 8000f5e:	f000 fa5e 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_18), MESSAGE_COMMAND_LIST_STRING_18, UART_TX_MESSAGE_PRIORITY_0_MAX);
 8000f62:	2200      	movs	r2, #0
 8000f64:	4999      	ldr	r1, [pc, #612]	; (80011cc <parse_UART_message+0x360>)
 8000f66:	200c      	movs	r0, #12
 8000f68:	f000 fa59 	bl	800141e <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_19), MESSAGE_COMMAND_LIST_STRING_19, UART_TX_MESSAGE_PRIORITY_1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4998      	ldr	r1, [pc, #608]	; (80011d0 <parse_UART_message+0x364>)
 8000f70:	2023      	movs	r0, #35	; 0x23
 8000f72:	f000 fa54 	bl	800141e <put_string_to_UART>
}
 8000f76:	e22b      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "O"))
 8000f78:	4996      	ldr	r1, [pc, #600]	; (80011d4 <parse_UART_message+0x368>)
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff f94c 	bl	8000218 <strcmp>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d108      	bne.n	8000f98 <parse_UART_message+0x12c>
		CAN_mode_change(&hfdcan1, FDCAN_MODE_NORMAL);
 8000f86:	2100      	movs	r1, #0
 8000f88:	4893      	ldr	r0, [pc, #588]	; (80011d8 <parse_UART_message+0x36c>)
 8000f8a:	f001 f892 	bl	80020b2 <CAN_mode_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8000f8e:	2103      	movs	r1, #3
 8000f90:	200d      	movs	r0, #13
 8000f92:	f000 fa2f 	bl	80013f4 <put_single_char_to_UART>
}
 8000f96:	e21b      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "L"))
 8000f98:	4990      	ldr	r1, [pc, #576]	; (80011dc <parse_UART_message+0x370>)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff f93c 	bl	8000218 <strcmp>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d108      	bne.n	8000fb8 <parse_UART_message+0x14c>
		CAN_mode_change(&hfdcan1, FDCAN_MODE_BUS_MONITORING);
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	488b      	ldr	r0, [pc, #556]	; (80011d8 <parse_UART_message+0x36c>)
 8000faa:	f001 f882 	bl	80020b2 <CAN_mode_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8000fae:	2103      	movs	r1, #3
 8000fb0:	200d      	movs	r0, #13
 8000fb2:	f000 fa1f 	bl	80013f4 <put_single_char_to_UART>
}
 8000fb6:	e20b      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "Y"))
 8000fb8:	4989      	ldr	r1, [pc, #548]	; (80011e0 <parse_UART_message+0x374>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff f92c 	bl	8000218 <strcmp>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d108      	bne.n	8000fd8 <parse_UART_message+0x16c>
		CAN_mode_change(&hfdcan1, FDCAN_MODE_EXTERNAL_LOOPBACK);
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	4883      	ldr	r0, [pc, #524]	; (80011d8 <parse_UART_message+0x36c>)
 8000fca:	f001 f872 	bl	80020b2 <CAN_mode_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8000fce:	2103      	movs	r1, #3
 8000fd0:	200d      	movs	r0, #13
 8000fd2:	f000 fa0f 	bl	80013f4 <put_single_char_to_UART>
}
 8000fd6:	e1fb      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "C"))
 8000fd8:	4982      	ldr	r1, [pc, #520]	; (80011e4 <parse_UART_message+0x378>)
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff f91c 	bl	8000218 <strcmp>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d107      	bne.n	8000ff6 <parse_UART_message+0x18a>
		HAL_FDCAN_Stop(&hfdcan1);
 8000fe6:	487c      	ldr	r0, [pc, #496]	; (80011d8 <parse_UART_message+0x36c>)
 8000fe8:	f001 ff17 	bl	8002e1a <HAL_FDCAN_Stop>
		put_single_char_to_UART(BEL_CHAR, UART_TX_MESSAGE_PRIORITY_3);
 8000fec:	2103      	movs	r1, #3
 8000fee:	2007      	movs	r0, #7
 8000ff0:	f000 fa00 	bl	80013f4 <put_single_char_to_UART>
}
 8000ff4:	e1ec      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S1"))
 8000ff6:	497c      	ldr	r1, [pc, #496]	; (80011e8 <parse_UART_message+0x37c>)
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff f90d 	bl	8000218 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10c      	bne.n	800101e <parse_UART_message+0x1b2>
		CAN_baudrate_change(&hfdcan1, CAN_20_KBIT_PRESCALER, CAN_20_KBIT_SJW, CAN_20_KBIT_SEG1, CAN_20_KBIT_SEG2);
 8001004:	2302      	movs	r3, #2
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	230d      	movs	r3, #13
 800100a:	2203      	movs	r2, #3
 800100c:	21c8      	movs	r1, #200	; 0xc8
 800100e:	4872      	ldr	r0, [pc, #456]	; (80011d8 <parse_UART_message+0x36c>)
 8001010:	f001 f864 	bl	80020dc <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001014:	2103      	movs	r1, #3
 8001016:	200d      	movs	r0, #13
 8001018:	f000 f9ec 	bl	80013f4 <put_single_char_to_UART>
}
 800101c:	e1d8      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S2"))
 800101e:	4973      	ldr	r1, [pc, #460]	; (80011ec <parse_UART_message+0x380>)
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff f8f9 	bl	8000218 <strcmp>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10c      	bne.n	8001046 <parse_UART_message+0x1da>
		CAN_baudrate_change(&hfdcan1, CAN_50_KBIT_PRESCALER, CAN_50_KBIT_SJW, CAN_50_KBIT_SEG1, CAN_50_KBIT_SEG2);
 800102c:	2302      	movs	r3, #2
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	230d      	movs	r3, #13
 8001032:	2203      	movs	r2, #3
 8001034:	2150      	movs	r1, #80	; 0x50
 8001036:	4868      	ldr	r0, [pc, #416]	; (80011d8 <parse_UART_message+0x36c>)
 8001038:	f001 f850 	bl	80020dc <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 800103c:	2103      	movs	r1, #3
 800103e:	200d      	movs	r0, #13
 8001040:	f000 f9d8 	bl	80013f4 <put_single_char_to_UART>
}
 8001044:	e1c4      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S3"))
 8001046:	496a      	ldr	r1, [pc, #424]	; (80011f0 <parse_UART_message+0x384>)
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff f8e5 	bl	8000218 <strcmp>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10c      	bne.n	800106e <parse_UART_message+0x202>
		CAN_baudrate_change(&hfdcan1, CAN_100_KBIT_PRESCALER, CAN_100_KBIT_SJW, CAN_100_KBIT_SEG1, CAN_100_KBIT_SEG2);
 8001054:	2302      	movs	r3, #2
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	230d      	movs	r3, #13
 800105a:	2203      	movs	r2, #3
 800105c:	2128      	movs	r1, #40	; 0x28
 800105e:	485e      	ldr	r0, [pc, #376]	; (80011d8 <parse_UART_message+0x36c>)
 8001060:	f001 f83c 	bl	80020dc <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001064:	2103      	movs	r1, #3
 8001066:	200d      	movs	r0, #13
 8001068:	f000 f9c4 	bl	80013f4 <put_single_char_to_UART>
}
 800106c:	e1b0      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S4"))
 800106e:	4961      	ldr	r1, [pc, #388]	; (80011f4 <parse_UART_message+0x388>)
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff f8d1 	bl	8000218 <strcmp>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10c      	bne.n	8001096 <parse_UART_message+0x22a>
		CAN_baudrate_change(&hfdcan1, CAN_125_KBIT_PRESCALER, CAN_125_KBIT_SJW, CAN_125_KBIT_SEG1, CAN_125_KBIT_SEG2);
 800107c:	2302      	movs	r3, #2
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	230d      	movs	r3, #13
 8001082:	2203      	movs	r2, #3
 8001084:	2120      	movs	r1, #32
 8001086:	4854      	ldr	r0, [pc, #336]	; (80011d8 <parse_UART_message+0x36c>)
 8001088:	f001 f828 	bl	80020dc <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 800108c:	2103      	movs	r1, #3
 800108e:	200d      	movs	r0, #13
 8001090:	f000 f9b0 	bl	80013f4 <put_single_char_to_UART>
}
 8001094:	e19c      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S5"))
 8001096:	4958      	ldr	r1, [pc, #352]	; (80011f8 <parse_UART_message+0x38c>)
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff f8bd 	bl	8000218 <strcmp>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10c      	bne.n	80010be <parse_UART_message+0x252>
		CAN_baudrate_change(&hfdcan1, CAN_250_KBIT_PRESCALER, CAN_250_KBIT_SJW, CAN_250_KBIT_SEG1, CAN_250_KBIT_SEG2);
 80010a4:	2302      	movs	r3, #2
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	230d      	movs	r3, #13
 80010aa:	2203      	movs	r2, #3
 80010ac:	2110      	movs	r1, #16
 80010ae:	484a      	ldr	r0, [pc, #296]	; (80011d8 <parse_UART_message+0x36c>)
 80010b0:	f001 f814 	bl	80020dc <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 80010b4:	2103      	movs	r1, #3
 80010b6:	200d      	movs	r0, #13
 80010b8:	f000 f99c 	bl	80013f4 <put_single_char_to_UART>
}
 80010bc:	e188      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S6"))
 80010be:	494f      	ldr	r1, [pc, #316]	; (80011fc <parse_UART_message+0x390>)
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff f8a9 	bl	8000218 <strcmp>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10c      	bne.n	80010e6 <parse_UART_message+0x27a>
		CAN_baudrate_change(&hfdcan1, CAN_500_KBIT_PRESCALER, CAN_500_KBIT_SJW, CAN_500_KBIT_SEG1, CAN_500_KBIT_SEG2);
 80010cc:	2302      	movs	r3, #2
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	230d      	movs	r3, #13
 80010d2:	2203      	movs	r2, #3
 80010d4:	2108      	movs	r1, #8
 80010d6:	4840      	ldr	r0, [pc, #256]	; (80011d8 <parse_UART_message+0x36c>)
 80010d8:	f001 f800 	bl	80020dc <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 80010dc:	2103      	movs	r1, #3
 80010de:	200d      	movs	r0, #13
 80010e0:	f000 f988 	bl	80013f4 <put_single_char_to_UART>
}
 80010e4:	e174      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S7"))
 80010e6:	4946      	ldr	r1, [pc, #280]	; (8001200 <parse_UART_message+0x394>)
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff f895 	bl	8000218 <strcmp>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10c      	bne.n	800110e <parse_UART_message+0x2a2>
		CAN_baudrate_change(&hfdcan1, CAN_800_KBIT_PRESCALER, CAN_800_KBIT_SJW, CAN_800_KBIT_SEG1, CAN_800_KBIT_SEG2);
 80010f4:	2302      	movs	r3, #2
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	230d      	movs	r3, #13
 80010fa:	2203      	movs	r2, #3
 80010fc:	2105      	movs	r1, #5
 80010fe:	4836      	ldr	r0, [pc, #216]	; (80011d8 <parse_UART_message+0x36c>)
 8001100:	f000 ffec 	bl	80020dc <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001104:	2103      	movs	r1, #3
 8001106:	200d      	movs	r0, #13
 8001108:	f000 f974 	bl	80013f4 <put_single_char_to_UART>
}
 800110c:	e160      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S8"))
 800110e:	493d      	ldr	r1, [pc, #244]	; (8001204 <parse_UART_message+0x398>)
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f881 	bl	8000218 <strcmp>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10c      	bne.n	8001136 <parse_UART_message+0x2ca>
		CAN_baudrate_change(&hfdcan1, CAN_1000_KBIT_PRESCALER, CAN_1000_KBIT_SJW, CAN_1000_KBIT_SEG1, CAN_1000_KBIT_SEG2);
 800111c:	2302      	movs	r3, #2
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	230d      	movs	r3, #13
 8001122:	2203      	movs	r2, #3
 8001124:	2104      	movs	r1, #4
 8001126:	482c      	ldr	r0, [pc, #176]	; (80011d8 <parse_UART_message+0x36c>)
 8001128:	f000 ffd8 	bl	80020dc <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 800112c:	2103      	movs	r1, #3
 800112e:	200d      	movs	r0, #13
 8001130:	f000 f960 	bl	80013f4 <put_single_char_to_UART>
}
 8001134:	e14c      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "Z1"))
 8001136:	4934      	ldr	r1, [pc, #208]	; (8001208 <parse_UART_message+0x39c>)
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff f86d 	bl	8000218 <strcmp>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d107      	bne.n	8001154 <parse_UART_message+0x2e8>
		timestamp_enabled = TRUE;
 8001144:	4b31      	ldr	r3, [pc, #196]	; (800120c <parse_UART_message+0x3a0>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 800114a:	2103      	movs	r1, #3
 800114c:	200d      	movs	r0, #13
 800114e:	f000 f951 	bl	80013f4 <put_single_char_to_UART>
}
 8001152:	e13d      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "Z0"))
 8001154:	492e      	ldr	r1, [pc, #184]	; (8001210 <parse_UART_message+0x3a4>)
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff f85e 	bl	8000218 <strcmp>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d158      	bne.n	8001214 <parse_UART_message+0x3a8>
		timestamp_enabled = FALSE;
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <parse_UART_message+0x3a0>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001168:	2103      	movs	r1, #3
 800116a:	200d      	movs	r0, #13
 800116c:	f000 f942 	bl	80013f4 <put_single_char_to_UART>
}
 8001170:	e12e      	b.n	80013d0 <parse_UART_message+0x564>
 8001172:	bf00      	nop
 8001174:	08006b2c 	.word	0x08006b2c
 8001178:	08006b38 	.word	0x08006b38
 800117c:	08006b48 	.word	0x08006b48
 8001180:	08006b4c 	.word	0x08006b4c
 8001184:	08006b50 	.word	0x08006b50
 8001188:	08006b54 	.word	0x08006b54
 800118c:	08006b70 	.word	0x08006b70
 8001190:	08006b94 	.word	0x08006b94
 8001194:	08006bc4 	.word	0x08006bc4
 8001198:	08006bec 	.word	0x08006bec
 800119c:	08006c04 	.word	0x08006c04
 80011a0:	08006c1c 	.word	0x08006c1c
 80011a4:	08006c3c 	.word	0x08006c3c
 80011a8:	08006c5c 	.word	0x08006c5c
 80011ac:	08006c7c 	.word	0x08006c7c
 80011b0:	08006cb0 	.word	0x08006cb0
 80011b4:	08006ce4 	.word	0x08006ce4
 80011b8:	08006d00 	.word	0x08006d00
 80011bc:	08006d18 	.word	0x08006d18
 80011c0:	08006d34 	.word	0x08006d34
 80011c4:	08006d4c 	.word	0x08006d4c
 80011c8:	08006d64 	.word	0x08006d64
 80011cc:	08006d78 	.word	0x08006d78
 80011d0:	08006d84 	.word	0x08006d84
 80011d4:	08006da8 	.word	0x08006da8
 80011d8:	20000f4c 	.word	0x20000f4c
 80011dc:	08006dac 	.word	0x08006dac
 80011e0:	08006db0 	.word	0x08006db0
 80011e4:	08006db4 	.word	0x08006db4
 80011e8:	08006db8 	.word	0x08006db8
 80011ec:	08006dbc 	.word	0x08006dbc
 80011f0:	08006dc0 	.word	0x08006dc0
 80011f4:	08006dc4 	.word	0x08006dc4
 80011f8:	08006dc8 	.word	0x08006dc8
 80011fc:	08006dcc 	.word	0x08006dcc
 8001200:	08006dd0 	.word	0x08006dd0
 8001204:	08006dd4 	.word	0x08006dd4
 8001208:	08006dd8 	.word	0x08006dd8
 800120c:	20000f48 	.word	0x20000f48
 8001210:	08006ddc 	.word	0x08006ddc
	else if (!strcmp(UART_buffer_to_parse, "F"))
 8001214:	4970      	ldr	r1, [pc, #448]	; (80013d8 <parse_UART_message+0x56c>)
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7fe fffe 	bl	8000218 <strcmp>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d113      	bne.n	800124a <parse_UART_message+0x3de>
		init_char_array_by_zero(sizeof(error_code_tmp), error_code_tmp);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4619      	mov	r1, r3
 8001228:	2003      	movs	r0, #3
 800122a:	f000 fefa 	bl	8002022 <init_char_array_by_zero>
		if (hfdcan1.ErrorCode != HAL_FDCAN_ERROR_NONE)
 800122e:	4b6b      	ldr	r3, [pc, #428]	; (80013dc <parse_UART_message+0x570>)
 8001230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <parse_UART_message+0x3ce>
			error_code_tmp[1] = '1';
 8001236:	2331      	movs	r3, #49	; 0x31
 8001238:	737b      	strb	r3, [r7, #13]
		put_string_to_UART(sizeof(error_code_tmp), error_code_tmp, UART_TX_MESSAGE_PRIORITY_3);
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2203      	movs	r2, #3
 8001240:	4619      	mov	r1, r3
 8001242:	2003      	movs	r0, #3
 8001244:	f000 f8eb 	bl	800141e <put_string_to_UART>
}
 8001248:	e0c2      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "V"))
 800124a:	4965      	ldr	r1, [pc, #404]	; (80013e0 <parse_UART_message+0x574>)
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7fe ffe3 	bl	8000218 <strcmp>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <parse_UART_message+0x3f8>
		put_string_to_UART(sizeof(MESSAGE_FIRMWARE_VERSION), MESSAGE_FIRMWARE_VERSION, UART_TX_MESSAGE_PRIORITY_3);
 8001258:	2203      	movs	r2, #3
 800125a:	4962      	ldr	r1, [pc, #392]	; (80013e4 <parse_UART_message+0x578>)
 800125c:	2006      	movs	r0, #6
 800125e:	f000 f8de 	bl	800141e <put_string_to_UART>
}
 8001262:	e0b5      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "N"))
 8001264:	4960      	ldr	r1, [pc, #384]	; (80013e8 <parse_UART_message+0x57c>)
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7fe ffd6 	bl	8000218 <strcmp>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d105      	bne.n	800127e <parse_UART_message+0x412>
		put_string_to_UART(sizeof(MESSAGE_SERIAL_NUMBER), MESSAGE_SERIAL_NUMBER, UART_TX_MESSAGE_PRIORITY_3);
 8001272:	2203      	movs	r2, #3
 8001274:	495d      	ldr	r1, [pc, #372]	; (80013ec <parse_UART_message+0x580>)
 8001276:	200a      	movs	r0, #10
 8001278:	f000 f8d1 	bl	800141e <put_string_to_UART>
}
 800127c:	e0a8      	b.n	80013d0 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "RST"))
 800127e:	495c      	ldr	r1, [pc, #368]	; (80013f0 <parse_UART_message+0x584>)
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7fe ffc9 	bl	8000218 <strcmp>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <parse_UART_message+0x426>
		HAL_NVIC_SystemReset();
 800128c:	f001 faeb 	bl	8002866 <HAL_NVIC_SystemReset>
}
 8001290:	e09e      	b.n	80013d0 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 't')
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b74      	cmp	r3, #116	; 0x74
 8001298:	d115      	bne.n	80012c6 <parse_UART_message+0x45a>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_STANDARD_ID, FDCAN_DATA_FRAME));
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fc74 	bl	8001b90 <set_can_frame_parameters>
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 fcad 	bl	8001c0e <send_CAN_frame>
		put_single_char_to_UART('z', UART_TX_MESSAGE_PRIORITY_3);
 80012b4:	2103      	movs	r1, #3
 80012b6:	207a      	movs	r0, #122	; 0x7a
 80012b8:	f000 f89c 	bl	80013f4 <put_single_char_to_UART>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 80012bc:	2103      	movs	r1, #3
 80012be:	200d      	movs	r0, #13
 80012c0:	f000 f898 	bl	80013f4 <put_single_char_to_UART>
}
 80012c4:	e084      	b.n	80013d0 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 'r')
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b72      	cmp	r3, #114	; 0x72
 80012cc:	d116      	bne.n	80012fc <parse_UART_message+0x490>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_STANDARD_ID, FDCAN_REMOTE_FRAME));
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fc59 	bl	8001b90 <set_can_frame_parameters>
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 fc92 	bl	8001c0e <send_CAN_frame>
		put_single_char_to_UART('z', UART_TX_MESSAGE_PRIORITY_3);
 80012ea:	2103      	movs	r1, #3
 80012ec:	207a      	movs	r0, #122	; 0x7a
 80012ee:	f000 f881 	bl	80013f4 <put_single_char_to_UART>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 80012f2:	2103      	movs	r1, #3
 80012f4:	200d      	movs	r0, #13
 80012f6:	f000 f87d 	bl	80013f4 <put_single_char_to_UART>
}
 80012fa:	e069      	b.n	80013d0 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 'T')
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b54      	cmp	r3, #84	; 0x54
 8001302:	d116      	bne.n	8001332 <parse_UART_message+0x4c6>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_EXTENDED_ID, FDCAN_DATA_FRAME));
 8001304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001308:	2200      	movs	r2, #0
 800130a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fc3e 	bl	8001b90 <set_can_frame_parameters>
 8001314:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fc77 	bl	8001c0e <send_CAN_frame>
		put_single_char_to_UART('Z', UART_TX_MESSAGE_PRIORITY_3);
 8001320:	2103      	movs	r1, #3
 8001322:	205a      	movs	r0, #90	; 0x5a
 8001324:	f000 f866 	bl	80013f4 <put_single_char_to_UART>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001328:	2103      	movs	r1, #3
 800132a:	200d      	movs	r0, #13
 800132c:	f000 f862 	bl	80013f4 <put_single_char_to_UART>
}
 8001330:	e04e      	b.n	80013d0 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 'R')
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b52      	cmp	r3, #82	; 0x52
 8001338:	d117      	bne.n	800136a <parse_UART_message+0x4fe>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_EXTENDED_ID, FDCAN_REMOTE_FRAME));
 800133a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800133e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001342:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fc22 	bl	8001b90 <set_can_frame_parameters>
 800134c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001350:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 fc5b 	bl	8001c0e <send_CAN_frame>
		put_single_char_to_UART('Z', UART_TX_MESSAGE_PRIORITY_3);
 8001358:	2103      	movs	r1, #3
 800135a:	205a      	movs	r0, #90	; 0x5a
 800135c:	f000 f84a 	bl	80013f4 <put_single_char_to_UART>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001360:	2103      	movs	r1, #3
 8001362:	200d      	movs	r0, #13
 8001364:	f000 f846 	bl	80013f4 <put_single_char_to_UART>
}
 8001368:	e032      	b.n	80013d0 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 's')
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b73      	cmp	r3, #115	; 0x73
 8001370:	d103      	bne.n	800137a <parse_UART_message+0x50e>
		set_non_standard_CAN_bitrate(UART_buffer_to_parse);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 fba6 	bl	8001ac4 <set_non_standard_CAN_bitrate>
}
 8001378:	e02a      	b.n	80013d0 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 'm')
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b6d      	cmp	r3, #109	; 0x6d
 8001380:	d111      	bne.n	80013a6 <parse_UART_message+0x53a>
		update_CAN_acceptance_mask(count_string_lenght(&UART_buffer_to_parse[1]), &UART_buffer_to_parse[1]);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3301      	adds	r3, #1
 8001386:	4618      	mov	r0, r3
 8001388:	f001 f810 	bl	80023ac <count_string_lenght>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3301      	adds	r3, #1
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f001 f84c 	bl	8002434 <update_CAN_acceptance_mask>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 800139c:	2103      	movs	r1, #3
 800139e:	200d      	movs	r0, #13
 80013a0:	f000 f828 	bl	80013f4 <put_single_char_to_UART>
}
 80013a4:	e014      	b.n	80013d0 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 'M')
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b4d      	cmp	r3, #77	; 0x4d
 80013ac:	d110      	bne.n	80013d0 <parse_UART_message+0x564>
		update_CAN_acceptance_code(count_string_lenght(&UART_buffer_to_parse[1]), &UART_buffer_to_parse[1]);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fffa 	bl	80023ac <count_string_lenght>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3301      	adds	r3, #1
 80013c0:	4619      	mov	r1, r3
 80013c2:	4610      	mov	r0, r2
 80013c4:	f001 f86a 	bl	800249c <update_CAN_acceptance_code>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 80013c8:	2103      	movs	r1, #3
 80013ca:	200d      	movs	r0, #13
 80013cc:	f000 f812 	bl	80013f4 <put_single_char_to_UART>
}
 80013d0:	bf00      	nop
 80013d2:	3740      	adds	r7, #64	; 0x40
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	08006de0 	.word	0x08006de0
 80013dc:	20000f4c 	.word	0x20000f4c
 80013e0:	08006de4 	.word	0x08006de4
 80013e4:	08006de8 	.word	0x08006de8
 80013e8:	08006df0 	.word	0x08006df0
 80013ec:	08006df4 	.word	0x08006df4
 80013f0:	08006e00 	.word	0x08006e00

080013f4 <put_single_char_to_UART>:

void put_single_char_to_UART(uint8_t char_code_to_send, uint8_t message_priority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	460a      	mov	r2, r1
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	4613      	mov	r3, r2
 8001402:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp_arr_1[1];
	tmp_arr_1[0] = char_code_to_send;
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	733b      	strb	r3, [r7, #12]
	add_message_to_UART_TX_queue(sizeof(tmp_arr_1), tmp_arr_1, message_priority);
 8001408:	79ba      	ldrb	r2, [r7, #6]
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	2001      	movs	r0, #1
 8001412:	f000 fe83 	bl	800211c <add_message_to_UART_TX_queue>
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <put_string_to_UART>:

void put_string_to_UART(uint16_t size_of_string, char* string_to_send, uint8_t message_priority)
{
 800141e:	b5b0      	push	{r4, r5, r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	6039      	str	r1, [r7, #0]
 8001428:	80fb      	strh	r3, [r7, #6]
 800142a:	4613      	mov	r3, r2
 800142c:	717b      	strb	r3, [r7, #5]
 800142e:	466b      	mov	r3, sp
 8001430:	461d      	mov	r5, r3
	uint8_t tmp_arr_1[size_of_string];
 8001432:	88f8      	ldrh	r0, [r7, #6]
 8001434:	4603      	mov	r3, r0
 8001436:	3b01      	subs	r3, #1
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	b281      	uxth	r1, r0
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	f04f 0400 	mov.w	r4, #0
 8001448:	00d4      	lsls	r4, r2, #3
 800144a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800144e:	00cb      	lsls	r3, r1, #3
 8001450:	b281      	uxth	r1, r0
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	f04f 0400 	mov.w	r4, #0
 800145e:	00d4      	lsls	r4, r2, #3
 8001460:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001464:	00cb      	lsls	r3, r1, #3
 8001466:	4603      	mov	r3, r0
 8001468:	3307      	adds	r3, #7
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	ebad 0d03 	sub.w	sp, sp, r3
 8001472:	466b      	mov	r3, sp
 8001474:	3300      	adds	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(tmp_arr_1); i++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e00b      	b.n	8001496 <put_string_to_UART+0x78>
	{
		tmp_arr_1[i] = string_to_send[i];
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	4413      	add	r3, r2
 8001484:	7819      	ldrb	r1, [r3, #0]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	4413      	add	r3, r2
 800148c:	460a      	mov	r2, r1
 800148e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tmp_arr_1); i++)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	4602      	mov	r2, r0
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	429a      	cmp	r2, r3
 800149c:	d8ef      	bhi.n	800147e <put_string_to_UART+0x60>
	}
	tmp_arr_1[sizeof(tmp_arr_1) - 1] = CARRIAGE_RETURN_CHAR;
 800149e:	4603      	mov	r3, r0
 80014a0:	3b01      	subs	r3, #1
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	210d      	movs	r1, #13
 80014a6:	54d1      	strb	r1, [r2, r3]
	add_message_to_UART_TX_queue(sizeof(tmp_arr_1), tmp_arr_1, message_priority);
 80014a8:	b2c3      	uxtb	r3, r0
 80014aa:	68f9      	ldr	r1, [r7, #12]
 80014ac:	797a      	ldrb	r2, [r7, #5]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fe34 	bl	800211c <add_message_to_UART_TX_queue>
 80014b4:	46ad      	mov	sp, r5
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014c0 <send_message_to_UART>:

void send_message_to_UART(uint16_t message_size, uint8_t* message_to_send)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	80fb      	strh	r3, [r7, #6]
	for (int ii = 0; ii < message_size; ii++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	e00a      	b.n	80014e8 <send_message_to_UART+0x28>
	{
		HAL_UART_Transmit(&huart2, &message_to_send[ii], UART_TX_MESSAGE_SIZE, UART_TIMEOUT);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	18d1      	adds	r1, r2, r3
 80014d8:	2364      	movs	r3, #100	; 0x64
 80014da:	2201      	movs	r2, #1
 80014dc:	4806      	ldr	r0, [pc, #24]	; (80014f8 <send_message_to_UART+0x38>)
 80014de:	f004 f88d 	bl	80055fc <HAL_UART_Transmit>
	for (int ii = 0; ii < message_size; ii++)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3301      	adds	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbf0      	blt.n	80014d2 <send_message_to_UART+0x12>
	}
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20001168 	.word	0x20001168

080014fc <CAN_IT_handler>:

void CAN_IT_handler(void)
{
 80014fc:	b598      	push	{r3, r4, r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_header_buffer, \
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <CAN_IT_handler+0x68>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	4a18      	ldr	r2, [pc, #96]	; (8001568 <CAN_IT_handler+0x6c>)
 8001508:	1899      	adds	r1, r3, r2
							CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_data_buffer);
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <CAN_IT_handler+0x68>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	019b      	lsls	r3, r3, #6
 8001510:	3328      	adds	r3, #40	; 0x28
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <CAN_IT_handler+0x6c>)
 8001514:	4413      	add	r3, r2
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_header_buffer, \
 8001516:	460a      	mov	r2, r1
 8001518:	2140      	movs	r1, #64	; 0x40
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <CAN_IT_handler+0x70>)
 800151c:	f001 fd32 	bl	8002f84 <HAL_FDCAN_GetRxMessage>
	if (timestamp_enabled)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <CAN_IT_handler+0x74>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00d      	beq.n	8001544 <CAN_IT_handler+0x48>
	{
		CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_timestamp_buffer = HAL_FDCAN_GetTimestampCounter(&hfdcan1);
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <CAN_IT_handler+0x68>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461c      	mov	r4, r3
 800152e:	480f      	ldr	r0, [pc, #60]	; (800156c <CAN_IT_handler+0x70>)
 8001530:	f001 fc3d 	bl	8002dae <HAL_FDCAN_GetTimestampCounter>
 8001534:	4603      	mov	r3, r0
 8001536:	4619      	mov	r1, r3
 8001538:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <CAN_IT_handler+0x6c>)
 800153a:	01a3      	lsls	r3, r4, #6
 800153c:	4413      	add	r3, r2
 800153e:	333c      	adds	r3, #60	; 0x3c
 8001540:	460a      	mov	r2, r1
 8001542:	801a      	strh	r2, [r3, #0]
	}

	CAN_RX_put_index++;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <CAN_IT_handler+0x68>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <CAN_IT_handler+0x68>)
 800154e:	701a      	strb	r2, [r3, #0]

	if (CAN_RX_put_index >= CAN_RX_QUEUE_BUFFER_SIZE)
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <CAN_IT_handler+0x68>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d902      	bls.n	800155e <CAN_IT_handler+0x62>
	{
		CAN_RX_put_index = 0;
 8001558:	4b02      	ldr	r3, [pc, #8]	; (8001564 <CAN_IT_handler+0x68>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
	}
}
 800155e:	bf00      	nop
 8001560:	bd98      	pop	{r3, r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	200003c8 	.word	0x200003c8
 8001568:	20001018 	.word	0x20001018
 800156c:	20000f4c 	.word	0x20000f4c
 8001570:	20000f48 	.word	0x20000f48

08001574 <CAN_RX_queue_polling>:

void CAN_RX_queue_polling(void)
{
 8001574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001576:	b08d      	sub	sp, #52	; 0x34
 8001578:	af0c      	add	r7, sp, #48	; 0x30
	if (CAN_RX_get_index != CAN_RX_put_index)
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <CAN_RX_queue_polling+0x5c>)
 800157c:	781a      	ldrb	r2, [r3, #0]
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <CAN_RX_queue_polling+0x60>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d019      	beq.n	80015ba <CAN_RX_queue_polling+0x46>
	{
		parse_CAN_message(CAN_RX_queue_buffer[CAN_RX_get_index]);
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <CAN_RX_queue_polling+0x5c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <CAN_RX_queue_polling+0x64>)
 800158c:	019b      	lsls	r3, r3, #6
 800158e:	18d6      	adds	r6, r2, r3
 8001590:	466d      	mov	r5, sp
 8001592:	f106 0410 	add.w	r4, r6, #16
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015aa:	f000 f817 	bl	80015dc <parse_CAN_message>
		CAN_RX_get_index++;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <CAN_RX_queue_polling+0x5c>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <CAN_RX_queue_polling+0x5c>)
 80015b8:	701a      	strb	r2, [r3, #0]
	}
	if (CAN_RX_get_index >= CAN_RX_QUEUE_BUFFER_SIZE)
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <CAN_RX_queue_polling+0x5c>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d902      	bls.n	80015c8 <CAN_RX_queue_polling+0x54>
	{
		CAN_RX_get_index = 0;
 80015c2:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <CAN_RX_queue_polling+0x5c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
	}
}
 80015c8:	bf00      	nop
 80015ca:	3704      	adds	r7, #4
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d0:	20000a18 	.word	0x20000a18
 80015d4:	200003c8 	.word	0x200003c8
 80015d8:	20001018 	.word	0x20001018

080015dc <parse_CAN_message>:

void parse_CAN_message(CAN_RX_DataBuffer_StructTypeDef CAN_message_struct_to_parse)
{
 80015dc:	b084      	sub	sp, #16
 80015de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015e2:	b090      	sub	sp, #64	; 0x40
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80015ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015ee:	466b      	mov	r3, sp
 80015f0:	4699      	mov	r9, r3
	uint8_t id_lenght;
	char message_type_char;
	char message_end_char = CARRIAGE_RETURN_CHAR;
 80015f2:	230d      	movs	r3, #13
 80015f4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t data_lenght;
	if (CAN_message_struct_to_parse.CAN_RX_header_buffer.IdType == FDCAN_STANDARD_ID)
 80015f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d106      	bne.n	800160c <parse_CAN_message+0x30>
	{
		id_lenght = STANDARD_CAN_ID_LENGHT;
 80015fe:	2303      	movs	r3, #3
 8001600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		message_type_char = 't';
 8001604:	2374      	movs	r3, #116	; 0x74
 8001606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800160a:	e005      	b.n	8001618 <parse_CAN_message+0x3c>
	}
	else
	{
		id_lenght = EXTENDED_CAN_ID_LENGHT;
 800160c:	2308      	movs	r3, #8
 800160e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		message_type_char = 'T';
 8001612:	2354      	movs	r3, #84	; 0x54
 8001614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}
	data_lenght = CAN_message_data_lenght_define(CAN_message_struct_to_parse.CAN_RX_header_buffer.DataLength)*2;
 8001618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fbf2 	bl	8001e04 <CAN_message_data_lenght_define>
 8001620:	4603      	mov	r3, r0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t id_array[id_lenght];
 800162a:	f897 802a 	ldrb.w	r8, [r7, #42]	; 0x2a
 800162e:	4643      	mov	r3, r8
 8001630:	3b01      	subs	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
 8001634:	fa5f f188 	uxtb.w	r1, r8
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	f04f 0400 	mov.w	r4, #0
 8001644:	00d4      	lsls	r4, r2, #3
 8001646:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800164a:	00cb      	lsls	r3, r1, #3
 800164c:	fa5f f188 	uxtb.w	r1, r8
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	f04f 0400 	mov.w	r4, #0
 800165c:	00d4      	lsls	r4, r2, #3
 800165e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001662:	00cb      	lsls	r3, r1, #3
 8001664:	4643      	mov	r3, r8
 8001666:	3307      	adds	r3, #7
 8001668:	08db      	lsrs	r3, r3, #3
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	ebad 0d03 	sub.w	sp, sp, r3
 8001670:	466b      	mov	r3, sp
 8001672:	3300      	adds	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
	convert_int_value_to_ascii_hex_char_array(sizeof(id_array), id_array, CAN_message_struct_to_parse.CAN_RX_header_buffer.Identifier);
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800167a:	4619      	mov	r1, r3
 800167c:	4640      	mov	r0, r8
 800167e:	f000 f9f5 	bl	8001a6c <convert_int_value_to_ascii_hex_char_array>
	uint8_t data_array[data_lenght];
 8001682:	f897 6028 	ldrb.w	r6, [r7, #40]	; 0x28
 8001686:	4633      	mov	r3, r6
 8001688:	3b01      	subs	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	b2f1      	uxtb	r1, r6
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	f04f 0400 	mov.w	r4, #0
 800169a:	00d4      	lsls	r4, r2, #3
 800169c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80016a0:	00cb      	lsls	r3, r1, #3
 80016a2:	b2f1      	uxtb	r1, r6
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	f04f 0400 	mov.w	r4, #0
 80016b0:	00d4      	lsls	r4, r2, #3
 80016b2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80016b6:	00cb      	lsls	r3, r1, #3
 80016b8:	4633      	mov	r3, r6
 80016ba:	3307      	adds	r3, #7
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	ebad 0d03 	sub.w	sp, sp, r3
 80016c4:	466b      	mov	r3, sp
 80016c6:	3300      	adds	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < sizeof(data_array); i++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ce:	e021      	b.n	8001714 <parse_CAN_message+0x138>
	{
		if ((i % 2) == 0)
 80016d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d119      	bne.n	800170e <parse_CAN_message+0x132>
		{
			uint8_t tmp_arr_2[2];
			convert_int_value_to_ascii_hex_char_array(sizeof(tmp_arr_2), tmp_arr_2, CAN_message_struct_to_parse.CAN_RX_data_buffer[i/2]);
 80016da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016dc:	0fda      	lsrs	r2, r3, #31
 80016de:	4413      	add	r3, r2
 80016e0:	105b      	asrs	r3, r3, #1
 80016e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016e6:	4413      	add	r3, r2
 80016e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016ec:	461a      	mov	r2, r3
 80016ee:	463b      	mov	r3, r7
 80016f0:	4619      	mov	r1, r3
 80016f2:	2002      	movs	r0, #2
 80016f4:	f000 f9ba 	bl	8001a6c <convert_int_value_to_ascii_hex_char_array>
			data_array[i] = tmp_arr_2[0];
 80016f8:	7839      	ldrb	r1, [r7, #0]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	4413      	add	r3, r2
 8001700:	460a      	mov	r2, r1
 8001702:	701a      	strb	r2, [r3, #0]
			data_array[i + 1] = tmp_arr_2[1];
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	3301      	adds	r3, #1
 8001708:	7879      	ldrb	r1, [r7, #1]
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(data_array); i++)
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	3301      	adds	r3, #1
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001714:	4632      	mov	r2, r6
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	429a      	cmp	r2, r3
 800171a:	d8d9      	bhi.n	80016d0 <parse_CAN_message+0xf4>
		}
	}
	uint8_t timestamp_array[CAN_TIMESTAMP_SIZE];
	uint8_t timestamp_size_variable;
	if (timestamp_enabled)
 800171c:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <parse_CAN_message+0x300>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00c      	beq.n	800173e <parse_CAN_message+0x162>
	{
		timestamp_size_variable = CAN_TIMESTAMP_SIZE;
 8001724:	2304      	movs	r3, #4
 8001726:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		convert_int_value_to_ascii_hex_char_array(sizeof(timestamp_array), timestamp_array, CAN_message_struct_to_parse.CAN_RX_timestamp_buffer);
 800172a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800172e:	461a      	mov	r2, r3
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	4619      	mov	r1, r3
 8001736:	2004      	movs	r0, #4
 8001738:	f000 f998 	bl	8001a6c <convert_int_value_to_ascii_hex_char_array>
 800173c:	e002      	b.n	8001744 <parse_CAN_message+0x168>
	}
	else
	{
		timestamp_size_variable = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	}
	uint8_t CAN_to_UART_message_buffer[sizeof(message_type_char) + id_lenght + CAN_DATA_LENGHT_BYTE_SIZE + data_lenght + timestamp_size_variable + sizeof(message_end_char)];
 8001744:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001748:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800174c:	441a      	add	r2, r3
 800174e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001752:	4413      	add	r3, r2
 8001754:	1cdd      	adds	r5, r3, #3
 8001756:	466b      	mov	r3, sp
 8001758:	469a      	mov	sl, r3
 800175a:	462b      	mov	r3, r5
 800175c:	3b01      	subs	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	4629      	mov	r1, r5
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	f04f 0400 	mov.w	r4, #0
 800176e:	00d4      	lsls	r4, r2, #3
 8001770:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001774:	00cb      	lsls	r3, r1, #3
 8001776:	4629      	mov	r1, r5
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	f04f 0400 	mov.w	r4, #0
 8001784:	00d4      	lsls	r4, r2, #3
 8001786:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800178a:	00cb      	lsls	r3, r1, #3
 800178c:	1deb      	adds	r3, r5, #7
 800178e:	08db      	lsrs	r3, r3, #3
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	ebad 0d03 	sub.w	sp, sp, r3
 8001796:	466b      	mov	r3, sp
 8001798:	3300      	adds	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
	uint8_t message_element_counter = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t cycle_start_value_tmp = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
	CAN_to_UART_message_buffer[0] = message_type_char;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80017ac:	701a      	strb	r2, [r3, #0]
	message_element_counter++;
 80017ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017b2:	3301      	adds	r3, #1
 80017b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	cycle_start_value_tmp = message_element_counter;
 80017b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017bc:	73fb      	strb	r3, [r7, #15]
	for (int i = message_element_counter; i < (sizeof(id_array) + cycle_start_value_tmp); i++)
 80017be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
 80017c4:	e011      	b.n	80017ea <parse_CAN_message+0x20e>
	{
		CAN_to_UART_message_buffer[i] = id_array[i - cycle_start_value_tmp];
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	6a3a      	ldr	r2, [r7, #32]
 80017ce:	5cd1      	ldrb	r1, [r2, r3]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d4:	4413      	add	r3, r2
 80017d6:	460a      	mov	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
		message_element_counter++;
 80017da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017de:	3301      	adds	r3, #1
 80017e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = message_element_counter; i < (sizeof(id_array) + cycle_start_value_tmp); i++)
 80017e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e6:	3301      	adds	r3, #1
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
 80017ea:	4642      	mov	r2, r8
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	441a      	add	r2, r3
 80017f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d8e7      	bhi.n	80017c6 <parse_CAN_message+0x1ea>
	}
	uint8_t data_lengt_tmp_buff = convert_data_lenght_to_DLC_code(data_lenght/2);
 80017f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f86e 	bl	80018e0 <convert_data_lenght_to_DLC_code>
 8001804:	4603      	mov	r3, r0
 8001806:	73bb      	strb	r3, [r7, #14]
	uint8_t CAN_DLS_char_array[1];
	convert_int_value_to_ascii_hex_char_array(sizeof(CAN_DLS_char_array), CAN_DLS_char_array, data_lengt_tmp_buff);
 8001808:	7bba      	ldrb	r2, [r7, #14]
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	2001      	movs	r0, #1
 8001810:	f000 f92c 	bl	8001a6c <convert_int_value_to_ascii_hex_char_array>
	CAN_to_UART_message_buffer[message_element_counter] = CAN_DLS_char_array[0];
 8001814:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001818:	7939      	ldrb	r1, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	54d1      	strb	r1, [r2, r3]
	message_element_counter++;
 800181e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001822:	3301      	adds	r3, #1
 8001824:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	cycle_start_value_tmp = message_element_counter;
 8001828:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800182c:	73fb      	strb	r3, [r7, #15]
	for (int i = message_element_counter; i < (sizeof(data_array) + cycle_start_value_tmp); i++)
 800182e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
 8001834:	e011      	b.n	800185a <parse_CAN_message+0x27e>
	{
		CAN_to_UART_message_buffer[i] = data_array[i - cycle_start_value_tmp];
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	5cd1      	ldrb	r1, [r2, r3]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001844:	4413      	add	r3, r2
 8001846:	460a      	mov	r2, r1
 8001848:	701a      	strb	r2, [r3, #0]
		message_element_counter++;
 800184a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800184e:	3301      	adds	r3, #1
 8001850:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = message_element_counter; i < (sizeof(data_array) + cycle_start_value_tmp); i++)
 8001854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001856:	3301      	adds	r3, #1
 8001858:	63bb      	str	r3, [r7, #56]	; 0x38
 800185a:	4632      	mov	r2, r6
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	441a      	add	r2, r3
 8001860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001862:	429a      	cmp	r2, r3
 8001864:	d8e7      	bhi.n	8001836 <parse_CAN_message+0x25a>
	}
	if (timestamp_enabled)
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <parse_CAN_message+0x300>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d020      	beq.n	80018b0 <parse_CAN_message+0x2d4>
	{
		cycle_start_value_tmp = message_element_counter;
 800186e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001872:	73fb      	strb	r3, [r7, #15]
		for (int i = message_element_counter; i < (sizeof(timestamp_array) + cycle_start_value_tmp); i++)
 8001874:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800187a:	e014      	b.n	80018a6 <parse_CAN_message+0x2ca>
		{
			CAN_to_UART_message_buffer[i] = timestamp_array[i - cycle_start_value_tmp];
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001886:	4413      	add	r3, r2
 8001888:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001890:	4413      	add	r3, r2
 8001892:	460a      	mov	r2, r1
 8001894:	701a      	strb	r2, [r3, #0]
			message_element_counter++;
 8001896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800189a:	3301      	adds	r3, #1
 800189c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		for (int i = message_element_counter; i < (sizeof(timestamp_array) + cycle_start_value_tmp); i++)
 80018a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a2:	3301      	adds	r3, #1
 80018a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	1d1a      	adds	r2, r3, #4
 80018aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8e5      	bhi.n	800187c <parse_CAN_message+0x2a0>
		}
	}
	CAN_to_UART_message_buffer[message_element_counter] = message_end_char;
 80018b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 80018ba:	54d1      	strb	r1, [r2, r3]
	add_message_to_UART_TX_queue(sizeof(CAN_to_UART_message_buffer), CAN_to_UART_message_buffer, UART_TX_MESSAGE_PRIORITY_3);
 80018bc:	b2eb      	uxtb	r3, r5
 80018be:	6939      	ldr	r1, [r7, #16]
 80018c0:	2203      	movs	r2, #3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fc2a 	bl	800211c <add_message_to_UART_TX_queue>
 80018c8:	46d5      	mov	sp, sl
 80018ca:	46cd      	mov	sp, r9
}
 80018cc:	bf00      	nop
 80018ce:	3740      	adds	r7, #64	; 0x40
 80018d0:	46bd      	mov	sp, r7
 80018d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018d6:	b004      	add	sp, #16
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000f48 	.word	0x20000f48

080018e0 <convert_data_lenght_to_DLC_code>:

uint8_t convert_data_lenght_to_DLC_code(uint8_t value_to_convert)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	uint8_t DLC_code;
	switch (value_to_convert)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b40      	cmp	r3, #64	; 0x40
 80018ee:	f200 80b5 	bhi.w	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <convert_data_lenght_to_DLC_code+0x18>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	080019fd 	.word	0x080019fd
 80018fc:	08001a03 	.word	0x08001a03
 8001900:	08001a09 	.word	0x08001a09
 8001904:	08001a0f 	.word	0x08001a0f
 8001908:	08001a15 	.word	0x08001a15
 800190c:	08001a1b 	.word	0x08001a1b
 8001910:	08001a21 	.word	0x08001a21
 8001914:	08001a27 	.word	0x08001a27
 8001918:	08001a2d 	.word	0x08001a2d
 800191c:	08001a5d 	.word	0x08001a5d
 8001920:	08001a5d 	.word	0x08001a5d
 8001924:	08001a5d 	.word	0x08001a5d
 8001928:	08001a33 	.word	0x08001a33
 800192c:	08001a5d 	.word	0x08001a5d
 8001930:	08001a5d 	.word	0x08001a5d
 8001934:	08001a5d 	.word	0x08001a5d
 8001938:	08001a39 	.word	0x08001a39
 800193c:	08001a5d 	.word	0x08001a5d
 8001940:	08001a5d 	.word	0x08001a5d
 8001944:	08001a5d 	.word	0x08001a5d
 8001948:	08001a3f 	.word	0x08001a3f
 800194c:	08001a5d 	.word	0x08001a5d
 8001950:	08001a5d 	.word	0x08001a5d
 8001954:	08001a5d 	.word	0x08001a5d
 8001958:	08001a45 	.word	0x08001a45
 800195c:	08001a5d 	.word	0x08001a5d
 8001960:	08001a5d 	.word	0x08001a5d
 8001964:	08001a5d 	.word	0x08001a5d
 8001968:	08001a5d 	.word	0x08001a5d
 800196c:	08001a5d 	.word	0x08001a5d
 8001970:	08001a5d 	.word	0x08001a5d
 8001974:	08001a5d 	.word	0x08001a5d
 8001978:	08001a4b 	.word	0x08001a4b
 800197c:	08001a5d 	.word	0x08001a5d
 8001980:	08001a5d 	.word	0x08001a5d
 8001984:	08001a5d 	.word	0x08001a5d
 8001988:	08001a5d 	.word	0x08001a5d
 800198c:	08001a5d 	.word	0x08001a5d
 8001990:	08001a5d 	.word	0x08001a5d
 8001994:	08001a5d 	.word	0x08001a5d
 8001998:	08001a5d 	.word	0x08001a5d
 800199c:	08001a5d 	.word	0x08001a5d
 80019a0:	08001a5d 	.word	0x08001a5d
 80019a4:	08001a5d 	.word	0x08001a5d
 80019a8:	08001a5d 	.word	0x08001a5d
 80019ac:	08001a5d 	.word	0x08001a5d
 80019b0:	08001a5d 	.word	0x08001a5d
 80019b4:	08001a5d 	.word	0x08001a5d
 80019b8:	08001a51 	.word	0x08001a51
 80019bc:	08001a5d 	.word	0x08001a5d
 80019c0:	08001a5d 	.word	0x08001a5d
 80019c4:	08001a5d 	.word	0x08001a5d
 80019c8:	08001a5d 	.word	0x08001a5d
 80019cc:	08001a5d 	.word	0x08001a5d
 80019d0:	08001a5d 	.word	0x08001a5d
 80019d4:	08001a5d 	.word	0x08001a5d
 80019d8:	08001a5d 	.word	0x08001a5d
 80019dc:	08001a5d 	.word	0x08001a5d
 80019e0:	08001a5d 	.word	0x08001a5d
 80019e4:	08001a5d 	.word	0x08001a5d
 80019e8:	08001a5d 	.word	0x08001a5d
 80019ec:	08001a5d 	.word	0x08001a5d
 80019f0:	08001a5d 	.word	0x08001a5d
 80019f4:	08001a5d 	.word	0x08001a5d
 80019f8:	08001a57 	.word	0x08001a57
	{
	case 0:
	{
		DLC_code = 0x0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
		break;
 8001a00:	e02c      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 1:
	{
		DLC_code = 0x1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
		break;
 8001a06:	e029      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 2:
	{
		DLC_code = 0x2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	73fb      	strb	r3, [r7, #15]
		break;
 8001a0c:	e026      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 3:
	{
		DLC_code = 0x3;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	73fb      	strb	r3, [r7, #15]
		break;
 8001a12:	e023      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 4:
	{
		DLC_code = 0x4;
 8001a14:	2304      	movs	r3, #4
 8001a16:	73fb      	strb	r3, [r7, #15]
		break;
 8001a18:	e020      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 5:
	{
		DLC_code = 0x5;
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	73fb      	strb	r3, [r7, #15]
		break;
 8001a1e:	e01d      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 6:
	{
		DLC_code = 0x6;
 8001a20:	2306      	movs	r3, #6
 8001a22:	73fb      	strb	r3, [r7, #15]
		break;
 8001a24:	e01a      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 7:
	{
		DLC_code = 0x7;
 8001a26:	2307      	movs	r3, #7
 8001a28:	73fb      	strb	r3, [r7, #15]
		break;
 8001a2a:	e017      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 8:
	{
		DLC_code = 0x8;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	73fb      	strb	r3, [r7, #15]
		break;
 8001a30:	e014      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 12:
	{
		DLC_code = 0x9;
 8001a32:	2309      	movs	r3, #9
 8001a34:	73fb      	strb	r3, [r7, #15]
		break;
 8001a36:	e011      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 16:
	{
		DLC_code = 0xA;
 8001a38:	230a      	movs	r3, #10
 8001a3a:	73fb      	strb	r3, [r7, #15]
		break;
 8001a3c:	e00e      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 20:
	{
		DLC_code = 0xB;
 8001a3e:	230b      	movs	r3, #11
 8001a40:	73fb      	strb	r3, [r7, #15]
		break;
 8001a42:	e00b      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 24:
	{
		DLC_code = 0xC;
 8001a44:	230c      	movs	r3, #12
 8001a46:	73fb      	strb	r3, [r7, #15]
		break;
 8001a48:	e008      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 32:
	{
		DLC_code = 0xD;
 8001a4a:	230d      	movs	r3, #13
 8001a4c:	73fb      	strb	r3, [r7, #15]
		break;
 8001a4e:	e005      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 48:
	{
		DLC_code = 0xE;
 8001a50:	230e      	movs	r3, #14
 8001a52:	73fb      	strb	r3, [r7, #15]
		break;
 8001a54:	e002      	b.n	8001a5c <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 64:
	{
		DLC_code = 0xF;
 8001a56:	230f      	movs	r3, #15
 8001a58:	73fb      	strb	r3, [r7, #15]
		break;
 8001a5a:	bf00      	nop
	}
	}
	return DLC_code;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <convert_int_value_to_ascii_hex_char_array>:

void convert_int_value_to_ascii_hex_char_array(uint8_t size_of_array, uint8_t* array, uint32_t value)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size_of_array; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e018      	b.n	8001ab2 <convert_int_value_to_ascii_hex_char_array+0x46>
	{
		*(array + (sizeof(uint8_t) * i)) = (value >> ((size_of_array - i - 1) * INT_TO_ASCII_CONVERT_BITWISE_SHIFT)) & 0xF;
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	440b      	add	r3, r1
 8001a98:	f002 020f 	and.w	r2, r2, #15
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	701a      	strb	r2, [r3, #0]
		int_to_char(array + (sizeof(uint8_t) * i));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f83a 	bl	8001b20 <int_to_char>
	for (int i = 0; i < size_of_array; i++)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbe2      	blt.n	8001a80 <convert_int_value_to_ascii_hex_char_array+0x14>
	}
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <set_non_standard_CAN_bitrate>:

void set_non_standard_CAN_bitrate(char* UART_message)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
	uint32_t tmp_prescaler = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_PRESCALER_SIZE, &UART_message[NON_STAND_CAN_PRESCALER_INDEX]);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	2003      	movs	r0, #3
 8001ad4:	f000 f946 	bl	8001d64 <convert_hex_char_sequence_to_int_value>
 8001ad8:	6178      	str	r0, [r7, #20]
	uint32_t tmp_SJW = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_SJW_SIZE, &UART_message[NON_STAND_CAN_SJW_INDEX]);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3308      	adds	r3, #8
 8001ade:	4619      	mov	r1, r3
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f000 f93f 	bl	8001d64 <convert_hex_char_sequence_to_int_value>
 8001ae6:	6138      	str	r0, [r7, #16]
	uint32_t tmp_seg1 = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_SEG1_SIZE, &UART_message[NON_STAND_CAN_SEG1_INDEX]);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3304      	adds	r3, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	2002      	movs	r0, #2
 8001af0:	f000 f938 	bl	8001d64 <convert_hex_char_sequence_to_int_value>
 8001af4:	60f8      	str	r0, [r7, #12]
	uint32_t tmp_seg2 = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_SEG2_SIZE, &UART_message[NON_STAND_CAN_SEG2_INDEX]);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3306      	adds	r3, #6
 8001afa:	4619      	mov	r1, r3
 8001afc:	2002      	movs	r0, #2
 8001afe:	f000 f931 	bl	8001d64 <convert_hex_char_sequence_to_int_value>
 8001b02:	60b8      	str	r0, [r7, #8]
	CAN_baudrate_change(&hfdcan1, tmp_prescaler, tmp_SJW, tmp_seg1, tmp_seg2);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	6979      	ldr	r1, [r7, #20]
 8001b0e:	4803      	ldr	r0, [pc, #12]	; (8001b1c <set_non_standard_CAN_bitrate+0x58>)
 8001b10:	f000 fae4 	bl	80020dc <CAN_baudrate_change>
}
 8001b14:	bf00      	nop
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000f4c 	.word	0x20000f4c

08001b20 <int_to_char>:

void int_to_char(uint8_t* variable_pointer)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	if (*variable_pointer <= 9)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b09      	cmp	r3, #9
 8001b2e:	d806      	bhi.n	8001b3e <int_to_char+0x1e>
	{
		*variable_pointer = *variable_pointer + 0x30;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	3330      	adds	r3, #48	; 0x30
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*variable_pointer = *variable_pointer + 0x40 - 9;
	}
}
 8001b3c:	e005      	b.n	8001b4a <int_to_char+0x2a>
		*variable_pointer = *variable_pointer + 0x40 - 9;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	3337      	adds	r3, #55	; 0x37
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	701a      	strb	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <init_CAN_values>:

void init_CAN_values(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
	CAN_RX_put_index = 0;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <init_CAN_values+0x28>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
	CAN_RX_get_index = 0;
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <init_CAN_values+0x2c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
	CAN_TX_put_index = 0;
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <init_CAN_values+0x30>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
	CAN_TX_get_index = 0;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <init_CAN_values+0x34>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	200003c8 	.word	0x200003c8
 8001b84:	20000a18 	.word	0x20000a18
 8001b88:	20000f4a 	.word	0x20000f4a
 8001b8c:	200002c0 	.word	0x200002c0

08001b90 <set_can_frame_parameters>:

CAN_ParametersSet_StructTypeDef set_can_frame_parameters(uint32_t id_type_set, uint32_t frame_type_set)
{
 8001b90:	b490      	push	{r4, r7}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
	CAN_ParametersSet_StructTypeDef CAN_frame_parameters;
	switch (id_type_set)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <set_can_frame_parameters+0x1a>
 8001ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba6:	d00b      	beq.n	8001bc0 <set_can_frame_parameters+0x30>
 8001ba8:	e016      	b.n	8001bd8 <set_can_frame_parameters+0x48>
	{
	case FDCAN_STANDARD_ID:
	{
		CAN_frame_parameters.id_type = FDCAN_STANDARD_ID;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
		CAN_frame_parameters.id_lenght_in_bytes = STANDARD_CAN_MESSAGE_ID_LENGHT_BYTE;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	773b      	strb	r3, [r7, #28]
		CAN_frame_parameters.id_byte_number = STANDARD_CAN_MESSAGE_ID_BYTE;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	777b      	strb	r3, [r7, #29]
		CAN_frame_parameters.data_lenght_byte_number = STANDARD_CAN_MESSAGE_DATA_LENGHT_BYTE;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	77bb      	strb	r3, [r7, #30]
		CAN_frame_parameters.data_start_byte_number = STANDARD_CAN_MESSAGE_DATA_START_BYTE;
 8001bba:	2305      	movs	r3, #5
 8001bbc:	77fb      	strb	r3, [r7, #31]
		break;
 8001bbe:	e00b      	b.n	8001bd8 <set_can_frame_parameters+0x48>
	}
	case FDCAN_EXTENDED_ID:
	{
		CAN_frame_parameters.id_type = FDCAN_EXTENDED_ID;
 8001bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bc4:	617b      	str	r3, [r7, #20]
		CAN_frame_parameters.id_lenght_in_bytes = EXTENDED_CAN_MESSAGE_ID_LENGHT_BYTE;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	773b      	strb	r3, [r7, #28]
		CAN_frame_parameters.id_byte_number = EXTENDED_CAN_MESSAGE_ID_BYTE;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	777b      	strb	r3, [r7, #29]
		CAN_frame_parameters.data_lenght_byte_number = EXTENDED_CAN_MESSAGE_DATA_LENGHT_BYTE;
 8001bce:	2309      	movs	r3, #9
 8001bd0:	77bb      	strb	r3, [r7, #30]
		CAN_frame_parameters.data_start_byte_number = EXTENDED_CAN_MESSAGE_DATA_START_BYTE;
 8001bd2:	230a      	movs	r3, #10
 8001bd4:	77fb      	strb	r3, [r7, #31]
		break;
 8001bd6:	bf00      	nop
	}
	}
	switch (frame_type_set)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <set_can_frame_parameters+0x56>
 8001bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001be2:	d003      	beq.n	8001bec <set_can_frame_parameters+0x5c>
 8001be4:	e006      	b.n	8001bf4 <set_can_frame_parameters+0x64>
	{
	case FDCAN_DATA_FRAME:
	{
		CAN_frame_parameters.frame_type = FDCAN_DATA_FRAME;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
		break;
 8001bea:	e003      	b.n	8001bf4 <set_can_frame_parameters+0x64>
	}
	case FDCAN_REMOTE_FRAME:
	{
		CAN_frame_parameters.frame_type = FDCAN_REMOTE_FRAME;
 8001bec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001bf0:	61bb      	str	r3, [r7, #24]
		break;
 8001bf2:	bf00      	nop
	}
	}
	return CAN_frame_parameters;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	461c      	mov	r4, r3
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	3720      	adds	r7, #32
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc90      	pop	{r4, r7}
 8001c0c:	4770      	bx	lr

08001c0e <send_CAN_frame>:

void send_CAN_frame(char* can_buffer_to_parse, CAN_ParametersSet_StructTypeDef CAN_frame_parameters_set)
{
 8001c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c10:	b08d      	sub	sp, #52	; 0x34
 8001c12:	af02      	add	r7, sp, #8
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	4638      	mov	r0, r7
 8001c18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001c1c:	466b      	mov	r3, sp
 8001c1e:	461e      	mov	r6, r3
	uint32_t identifier = convert_hex_char_sequence_to_int_value(CAN_frame_parameters_set.id_lenght_in_bytes, &can_buffer_to_parse[CAN_frame_parameters_set.id_byte_number]);
 8001c20:	7a3a      	ldrb	r2, [r7, #8]
 8001c22:	7a7b      	ldrb	r3, [r7, #9]
 8001c24:	4619      	mov	r1, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	440b      	add	r3, r1
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	f000 f899 	bl	8001d64 <convert_hex_char_sequence_to_int_value>
 8001c32:	6238      	str	r0, [r7, #32]
	uint32_t data_lenght = CAN_TX_message_DLC_bytes_define(convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_lenght_byte_number]));
 8001c34:	7abb      	ldrb	r3, [r7, #10]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f878 	bl	8001d34 <convert_ascii_hex_char_to_int_value>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f958 	bl	8001efc <CAN_TX_message_DLC_bytes_define>
 8001c4c:	61f8      	str	r0, [r7, #28]
	uint8_t can_tx_data_buffer[convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_lenght_byte_number])];
 8001c4e:	7abb      	ldrb	r3, [r7, #10]
 8001c50:	461a      	mov	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4413      	add	r3, r2
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f86b 	bl	8001d34 <convert_ascii_hex_char_to_int_value>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461d      	mov	r5, r3
 8001c62:	462b      	mov	r3, r5
 8001c64:	3b01      	subs	r3, #1
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	b2e9      	uxtb	r1, r5
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	f04f 0400 	mov.w	r4, #0
 8001c76:	00d4      	lsls	r4, r2, #3
 8001c78:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001c7c:	00cb      	lsls	r3, r1, #3
 8001c7e:	b2e9      	uxtb	r1, r5
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	f04f 0400 	mov.w	r4, #0
 8001c8c:	00d4      	lsls	r4, r2, #3
 8001c8e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001c92:	00cb      	lsls	r3, r1, #3
 8001c94:	462b      	mov	r3, r5
 8001c96:	3307      	adds	r3, #7
 8001c98:	08db      	lsrs	r3, r3, #3
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	ebad 0d03 	sub.w	sp, sp, r3
 8001ca0:	ab02      	add	r3, sp, #8
 8001ca2:	3300      	adds	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < (sizeof(can_tx_data_buffer)*2); i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8001caa:	e031      	b.n	8001d10 <send_CAN_frame+0x102>
	{
		if ((i % 2) == 0)
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d129      	bne.n	8001d0a <send_CAN_frame+0xfc>
		{
			uint8_t value_array[2];
			value_array[0] = convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_start_byte_number + i]);
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	4413      	add	r3, r2
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f834 	bl	8001d34 <convert_ascii_hex_char_to_int_value>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	743b      	strb	r3, [r7, #16]
			value_array[1] = convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_start_byte_number + i + 1]);
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3301      	adds	r3, #1
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 f827 	bl	8001d34 <convert_ascii_hex_char_to_int_value>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	747b      	strb	r3, [r7, #17]
			can_tx_data_buffer[i/2] = unite_digits_sequence(sizeof(value_array), value_array, ASCII_TO_INT_CONVERT_BITWISE_SHIFT);
 8001cea:	f107 0310 	add.w	r3, r7, #16
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f000 f9b0 	bl	8002058 <unite_digits_sequence>
 8001cf8:	4601      	mov	r1, r0
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	0fda      	lsrs	r2, r3, #31
 8001cfe:	4413      	add	r3, r2
 8001d00:	105b      	asrs	r3, r3, #1
 8001d02:	461a      	mov	r2, r3
 8001d04:	b2c9      	uxtb	r1, r1
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	5499      	strb	r1, [r3, r2]
	for (int i = 0; i < (sizeof(can_tx_data_buffer)*2); i++)
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d10:	462b      	mov	r3, r5
 8001d12:	005a      	lsls	r2, r3, #1
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d8c8      	bhi.n	8001cac <send_CAN_frame+0x9e>
		}
	}
	CAN_transmit_message(CAN_frame_parameters_set.id_type, CAN_frame_parameters_set.frame_type, identifier, data_lenght, can_tx_data_buffer);
 8001d1a:	6838      	ldr	r0, [r7, #0]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	6a3a      	ldr	r2, [r7, #32]
 8001d26:	f000 f959 	bl	8001fdc <CAN_transmit_message>
 8001d2a:	46b5      	mov	sp, r6
}
 8001d2c:	bf00      	nop
 8001d2e:	372c      	adds	r7, #44	; 0x2c
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d34 <convert_ascii_hex_char_to_int_value>:

uint8_t convert_ascii_hex_char_to_int_value(char char_to_convert)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
	uint8_t int_value = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
	if ((int)char_to_convert <= (int)'9')
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2b39      	cmp	r3, #57	; 0x39
 8001d46:	d803      	bhi.n	8001d50 <convert_ascii_hex_char_to_int_value+0x1c>
	{
		int_value = char_to_convert - '0';
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	3b30      	subs	r3, #48	; 0x30
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	e002      	b.n	8001d56 <convert_ascii_hex_char_to_int_value+0x22>
	}
	else
	{
		int_value = char_to_convert - 'A' + 10;
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	3b37      	subs	r3, #55	; 0x37
 8001d54:	73fb      	strb	r3, [r7, #15]
	}
	return int_value;
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <convert_hex_char_sequence_to_int_value>:

uint32_t convert_hex_char_sequence_to_int_value(uint8_t number_of_chars, char* char_array_pointer)
{
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	466b      	mov	r3, sp
 8001d72:	461e      	mov	r6, r3
	uint8_t tmp_arr_2[number_of_chars];
 8001d74:	79fd      	ldrb	r5, [r7, #7]
 8001d76:	462b      	mov	r3, r5
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	b2e9      	uxtb	r1, r5
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	f04f 0400 	mov.w	r4, #0
 8001d8a:	00d4      	lsls	r4, r2, #3
 8001d8c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d90:	00cb      	lsls	r3, r1, #3
 8001d92:	b2e9      	uxtb	r1, r5
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	f04f 0400 	mov.w	r4, #0
 8001da0:	00d4      	lsls	r4, r2, #3
 8001da2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001da6:	00cb      	lsls	r3, r1, #3
 8001da8:	462b      	mov	r3, r5
 8001daa:	3307      	adds	r3, #7
 8001dac:	08db      	lsrs	r3, r3, #3
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	ebad 0d03 	sub.w	sp, sp, r3
 8001db4:	466b      	mov	r3, sp
 8001db6:	3300      	adds	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(tmp_arr_2); i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e010      	b.n	8001de2 <convert_hex_char_sequence_to_int_value+0x7e>
	{
		tmp_arr_2[i] = convert_ascii_hex_char_to_int_value(char_array_pointer[i]);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ffb3 	bl	8001d34 <convert_ascii_hex_char_to_int_value>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	460a      	mov	r2, r1
 8001dda:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tmp_arr_2); i++)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	3301      	adds	r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	462a      	mov	r2, r5
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d8ea      	bhi.n	8001dc0 <convert_hex_char_sequence_to_int_value+0x5c>
	}
	uint32_t return_int_value = unite_digits_sequence(sizeof(tmp_arr_2), tmp_arr_2, ASCII_TO_INT_CONVERT_BITWISE_SHIFT);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2204      	movs	r2, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4628      	mov	r0, r5
 8001df2:	f000 f931 	bl	8002058 <unite_digits_sequence>
 8001df6:	60b8      	str	r0, [r7, #8]
	return return_int_value;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	46b5      	mov	sp, r6
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e04 <CAN_message_data_lenght_define>:

uint32_t CAN_message_data_lenght_define(uint32_t data_lenght_code)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	uint32_t lenght_bytes;
	switch (data_lenght_code)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001e12:	d051      	beq.n	8001eb8 <CAN_message_data_lenght_define+0xb4>
 8001e14:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001e18:	d818      	bhi.n	8001e4c <CAN_message_data_lenght_define+0x48>
 8001e1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e1e:	d03f      	beq.n	8001ea0 <CAN_message_data_lenght_define+0x9c>
 8001e20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e24:	d808      	bhi.n	8001e38 <CAN_message_data_lenght_define+0x34>
 8001e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2a:	d033      	beq.n	8001e94 <CAN_message_data_lenght_define+0x90>
 8001e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e30:	d033      	beq.n	8001e9a <CAN_message_data_lenght_define+0x96>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d02b      	beq.n	8001e8e <CAN_message_data_lenght_define+0x8a>
 8001e36:	e05a      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
 8001e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e3c:	d036      	beq.n	8001eac <CAN_message_data_lenght_define+0xa8>
 8001e3e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001e42:	d036      	beq.n	8001eb2 <CAN_message_data_lenght_define+0xae>
 8001e44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e48:	d02d      	beq.n	8001ea6 <CAN_message_data_lenght_define+0xa2>
 8001e4a:	e050      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
 8001e4c:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8001e50:	d03e      	beq.n	8001ed0 <CAN_message_data_lenght_define+0xcc>
 8001e52:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8001e56:	d809      	bhi.n	8001e6c <CAN_message_data_lenght_define+0x68>
 8001e58:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8001e5c:	d032      	beq.n	8001ec4 <CAN_message_data_lenght_define+0xc0>
 8001e5e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001e62:	d032      	beq.n	8001eca <CAN_message_data_lenght_define+0xc6>
 8001e64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e68:	d029      	beq.n	8001ebe <CAN_message_data_lenght_define+0xba>
 8001e6a:	e040      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
 8001e6c:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8001e70:	d034      	beq.n	8001edc <CAN_message_data_lenght_define+0xd8>
 8001e72:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8001e76:	d803      	bhi.n	8001e80 <CAN_message_data_lenght_define+0x7c>
 8001e78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e7c:	d02b      	beq.n	8001ed6 <CAN_message_data_lenght_define+0xd2>
 8001e7e:	e036      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
 8001e80:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e84:	d02d      	beq.n	8001ee2 <CAN_message_data_lenght_define+0xde>
 8001e86:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8001e8a:	d02d      	beq.n	8001ee8 <CAN_message_data_lenght_define+0xe4>
 8001e8c:	e02f      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	{
	case FDCAN_DLC_BYTES_0:
	{
		lenght_bytes = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
		break;
 8001e92:	e02c      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_1:
	{
		lenght_bytes = 1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
		break;
 8001e98:	e029      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_2:
	{
		lenght_bytes = 2;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	60fb      	str	r3, [r7, #12]
		break;
 8001e9e:	e026      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_3:
	{
		lenght_bytes = 3;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	60fb      	str	r3, [r7, #12]
		break;
 8001ea4:	e023      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_4:
	{
		lenght_bytes = 4;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	60fb      	str	r3, [r7, #12]
		break;
 8001eaa:	e020      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_5:
	{
		lenght_bytes = 5;
 8001eac:	2305      	movs	r3, #5
 8001eae:	60fb      	str	r3, [r7, #12]
		break;
 8001eb0:	e01d      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_6:
	{
		lenght_bytes = 6;
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	60fb      	str	r3, [r7, #12]
		break;
 8001eb6:	e01a      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_7:
	{
		lenght_bytes = 7;
 8001eb8:	2307      	movs	r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]
		break;
 8001ebc:	e017      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_8:
	{
		lenght_bytes = 8;
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	60fb      	str	r3, [r7, #12]
		break;
 8001ec2:	e014      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_12:
	{
		lenght_bytes = 12;
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	60fb      	str	r3, [r7, #12]
		break;
 8001ec8:	e011      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_16:
	{
		lenght_bytes = 16;
 8001eca:	2310      	movs	r3, #16
 8001ecc:	60fb      	str	r3, [r7, #12]
		break;
 8001ece:	e00e      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_20:
	{
		lenght_bytes = 20;
 8001ed0:	2314      	movs	r3, #20
 8001ed2:	60fb      	str	r3, [r7, #12]
		break;
 8001ed4:	e00b      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_24:
	{
		lenght_bytes = 24;
 8001ed6:	2318      	movs	r3, #24
 8001ed8:	60fb      	str	r3, [r7, #12]
		break;
 8001eda:	e008      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_32:
	{
		lenght_bytes = 32;
 8001edc:	2320      	movs	r3, #32
 8001ede:	60fb      	str	r3, [r7, #12]
		break;
 8001ee0:	e005      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_48:
	{
		lenght_bytes = 48;
 8001ee2:	2330      	movs	r3, #48	; 0x30
 8001ee4:	60fb      	str	r3, [r7, #12]
		break;
 8001ee6:	e002      	b.n	8001eee <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_64:
	{
		lenght_bytes = 64;
 8001ee8:	2340      	movs	r3, #64	; 0x40
 8001eea:	60fb      	str	r3, [r7, #12]
		break;
 8001eec:	bf00      	nop
	}
	}
	return lenght_bytes;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <CAN_TX_message_DLC_bytes_define>:

uint32_t CAN_TX_message_DLC_bytes_define(uint32_t data_lenght_bytes)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	uint32_t DLC_bytes;
	switch (data_lenght_bytes)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	d861      	bhi.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
 8001f0a:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <CAN_TX_message_DLC_bytes_define+0x14>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f51 	.word	0x08001f51
 8001f14:	08001f57 	.word	0x08001f57
 8001f18:	08001f5f 	.word	0x08001f5f
 8001f1c:	08001f67 	.word	0x08001f67
 8001f20:	08001f6f 	.word	0x08001f6f
 8001f24:	08001f77 	.word	0x08001f77
 8001f28:	08001f7f 	.word	0x08001f7f
 8001f2c:	08001f87 	.word	0x08001f87
 8001f30:	08001f8f 	.word	0x08001f8f
 8001f34:	08001f97 	.word	0x08001f97
 8001f38:	08001f9f 	.word	0x08001f9f
 8001f3c:	08001fa7 	.word	0x08001fa7
 8001f40:	08001faf 	.word	0x08001faf
 8001f44:	08001fb7 	.word	0x08001fb7
 8001f48:	08001fbf 	.word	0x08001fbf
 8001f4c:	08001fc7 	.word	0x08001fc7
	{
	case 0x0:
	{
		DLC_bytes = FDCAN_DLC_BYTES_0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
		break;
 8001f54:	e03b      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x1:
	{
		DLC_bytes = FDCAN_DLC_BYTES_1;
 8001f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f5a:	60fb      	str	r3, [r7, #12]
		break;
 8001f5c:	e037      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x2:
	{
		DLC_bytes = FDCAN_DLC_BYTES_2;
 8001f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f62:	60fb      	str	r3, [r7, #12]
		break;
 8001f64:	e033      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x3:
	{
		DLC_bytes = FDCAN_DLC_BYTES_3;
 8001f66:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001f6a:	60fb      	str	r3, [r7, #12]
		break;
 8001f6c:	e02f      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x4:
	{
		DLC_bytes = FDCAN_DLC_BYTES_4;
 8001f6e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f72:	60fb      	str	r3, [r7, #12]
		break;
 8001f74:	e02b      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x5:
	{
		DLC_bytes = FDCAN_DLC_BYTES_5;
 8001f76:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f7a:	60fb      	str	r3, [r7, #12]
		break;
 8001f7c:	e027      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x6:
	{
		DLC_bytes = FDCAN_DLC_BYTES_6;
 8001f7e:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001f82:	60fb      	str	r3, [r7, #12]
		break;
 8001f84:	e023      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x7:
	{
		DLC_bytes = FDCAN_DLC_BYTES_7;
 8001f86:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8001f8a:	60fb      	str	r3, [r7, #12]
		break;
 8001f8c:	e01f      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x8:
	{
		DLC_bytes = FDCAN_DLC_BYTES_8;
 8001f8e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f92:	60fb      	str	r3, [r7, #12]
		break;
 8001f94:	e01b      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x9:
	{
		DLC_bytes = FDCAN_DLC_BYTES_12;
 8001f96:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8001f9a:	60fb      	str	r3, [r7, #12]
		break;
 8001f9c:	e017      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xA:
	{
		DLC_bytes = FDCAN_DLC_BYTES_16;
 8001f9e:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8001fa2:	60fb      	str	r3, [r7, #12]
		break;
 8001fa4:	e013      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xB:
	{
		DLC_bytes = FDCAN_DLC_BYTES_20;
 8001fa6:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8001faa:	60fb      	str	r3, [r7, #12]
		break;
 8001fac:	e00f      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xC:
	{
		DLC_bytes = FDCAN_DLC_BYTES_24;
 8001fae:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001fb2:	60fb      	str	r3, [r7, #12]
		break;
 8001fb4:	e00b      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xD:
	{
		DLC_bytes = FDCAN_DLC_BYTES_32;
 8001fb6:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 8001fba:	60fb      	str	r3, [r7, #12]
		break;
 8001fbc:	e007      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xE:
	{
		DLC_bytes = FDCAN_DLC_BYTES_48;
 8001fbe:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8001fc2:	60fb      	str	r3, [r7, #12]
		break;
 8001fc4:	e003      	b.n	8001fce <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xF:
	{
		DLC_bytes = FDCAN_DLC_BYTES_64;
 8001fc6:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8001fca:	60fb      	str	r3, [r7, #12]
		break;
 8001fcc:	bf00      	nop
	}
	}
	return DLC_bytes;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <CAN_transmit_message>:

void CAN_transmit_message(uint32_t id_type, uint32_t frame_type, uint32_t identifier, uint32_t data_lenght, uint8_t* tx_data)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08e      	sub	sp, #56	; 0x38
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
	FDCAN_TxHeaderTypeDef tx_header;
	tx_header.Identifier = identifier;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	617b      	str	r3, [r7, #20]
	tx_header.IdType = id_type;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
	tx_header.TxFrameType = frame_type;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	61fb      	str	r3, [r7, #28]
	tx_header.DataLength = data_lenght;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	623b      	str	r3, [r7, #32]
	tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
	tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
	tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
	tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002006:	2300      	movs	r3, #0
 8002008:	633b      	str	r3, [r7, #48]	; 0x30
	tx_header.MessageMarker = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
	add_message_to_CAN_TX_queue(&tx_header, tx_data);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002014:	4618      	mov	r0, r3
 8002016:	f000 f93f 	bl	8002298 <add_message_to_CAN_TX_queue>
}
 800201a:	bf00      	nop
 800201c:	3738      	adds	r7, #56	; 0x38
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <init_char_array_by_zero>:

// инициализируем нулями символьный массив
void init_char_array_by_zero(uint16_t array_size, char* array_pointer)
{
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	6039      	str	r1, [r7, #0]
 800202c:	80fb      	strh	r3, [r7, #6]
	for (int int_char_counter = 0; int_char_counter < (array_size); int_char_counter++)
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e007      	b.n	8002044 <init_char_array_by_zero+0x22>
	{
		*(array_pointer + (int_char_counter*(sizeof(char)))) = '0';
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4413      	add	r3, r2
 800203a:	2230      	movs	r2, #48	; 0x30
 800203c:	701a      	strb	r2, [r3, #0]
	for (int int_char_counter = 0; int_char_counter < (array_size); int_char_counter++)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3301      	adds	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbf3      	blt.n	8002034 <init_char_array_by_zero+0x12>
	}
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <unite_digits_sequence>:
		*(array_pointer + int_zero_counter) = 0;
	}
}

uint32_t unite_digits_sequence(uint8_t number_of_values, uint8_t *byte_array_pointer, uint8_t bitwise_shift)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
 8002064:	4613      	mov	r3, r2
 8002066:	71bb      	strb	r3, [r7, #6]
	uint32_t summary_value = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
	for (int i = number_of_values - 1; i >= 0; i--)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	3b01      	subs	r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	e014      	b.n	800209e <unite_digits_sequence+0x46>
	{
		summary_value = summary_value | (byte_array_pointer[i] << ((number_of_values - 1 - i)*bitwise_shift));
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	4413      	add	r3, r2
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	1e5a      	subs	r2, r3, #1
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	79ba      	ldrb	r2, [r7, #6]
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	461a      	mov	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
	for (int i = number_of_values - 1; i >= 0; i--)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	3b01      	subs	r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	dae7      	bge.n	8002074 <unite_digits_sequence+0x1c>
	}
	return summary_value;
 80020a4:	68fb      	ldr	r3, [r7, #12]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <CAN_mode_change>:

void CAN_mode_change(FDCAN_HandleTypeDef *hfdcan, uint32_t required_mode)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
	HAL_FDCAN_Stop(hfdcan);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 feac 	bl	8002e1a <HAL_FDCAN_Stop>
	hfdcan->Init.Mode = required_mode;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	60da      	str	r2, [r3, #12]
	HAL_FDCAN_Init(hfdcan);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fc43 	bl	8002954 <HAL_FDCAN_Init>
	HAL_FDCAN_Start(hfdcan);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fe7b 	bl	8002dca <HAL_FDCAN_Start>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <CAN_baudrate_change>:

void CAN_baudrate_change(FDCAN_HandleTypeDef *hfdcan, uint32_t prescaler, uint32_t SJW, uint32_t seg1, uint32_t seg2)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
	HAL_FDCAN_Stop(hfdcan);
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 fe95 	bl	8002e1a <HAL_FDCAN_Stop>
	hfdcan->Init.NominalPrescaler = prescaler;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	615a      	str	r2, [r3, #20]
	hfdcan->Init.NominalSyncJumpWidth = SJW;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	619a      	str	r2, [r3, #24]
	hfdcan->Init.NominalTimeSeg1 = seg1;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	61da      	str	r2, [r3, #28]
	hfdcan->Init.NominalTimeSeg2 = seg2;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	621a      	str	r2, [r3, #32]
	HAL_FDCAN_Init(hfdcan);
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fc23 	bl	8002954 <HAL_FDCAN_Init>
	HAL_FDCAN_Start(hfdcan);
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fe5b 	bl	8002dca <HAL_FDCAN_Start>
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <add_message_to_UART_TX_queue>:

void add_message_to_UART_TX_queue(uint8_t message_size, uint8_t* message_data_pointer, uint8_t message_priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
 8002128:	4613      	mov	r3, r2
 800212a:	71bb      	strb	r3, [r7, #6]
	if (UART_TX_queue_buffer[UART_TX_put_index].message_size != 0)
 800212c:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <add_message_to_UART_TX_queue+0xac>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4613      	mov	r3, r2
 8002134:	015b      	lsls	r3, r3, #5
 8002136:	4413      	add	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
	{
		//error. вернуть метод queue_full(код ошибки)
	}
	UART_TX_queue_buffer[UART_TX_put_index].message_priority = message_priority;
 800213a:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <add_message_to_UART_TX_queue+0xac>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	4a22      	ldr	r2, [pc, #136]	; (80021cc <add_message_to_UART_TX_queue+0xb0>)
 8002142:	460b      	mov	r3, r1
 8002144:	015b      	lsls	r3, r3, #5
 8002146:	440b      	add	r3, r1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	79ba      	ldrb	r2, [r7, #6]
 800214e:	701a      	strb	r2, [r3, #0]
	UART_TX_queue_buffer[UART_TX_put_index].message_size = message_size;
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <add_message_to_UART_TX_queue+0xac>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <add_message_to_UART_TX_queue+0xb0>)
 8002158:	460b      	mov	r3, r1
 800215a:	015b      	lsls	r3, r3, #5
 800215c:	440b      	add	r3, r1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	3301      	adds	r3, #1
 8002164:	79fa      	ldrb	r2, [r7, #7]
 8002166:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < message_size; i++)
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e014      	b.n	8002198 <add_message_to_UART_TX_queue+0x7c>
	{
		UART_TX_queue_buffer[UART_TX_put_index].message_data[i] = message_data_pointer[i];
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	4413      	add	r3, r2
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <add_message_to_UART_TX_queue+0xac>)
 8002176:	7812      	ldrb	r2, [r2, #0]
 8002178:	4611      	mov	r1, r2
 800217a:	7818      	ldrb	r0, [r3, #0]
 800217c:	4a13      	ldr	r2, [pc, #76]	; (80021cc <add_message_to_UART_TX_queue+0xb0>)
 800217e:	460b      	mov	r3, r1
 8002180:	015b      	lsls	r3, r3, #5
 8002182:	440b      	add	r3, r1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	441a      	add	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	3302      	adds	r3, #2
 800218e:	4602      	mov	r2, r0
 8002190:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < message_size; i++)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3301      	adds	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	dbe6      	blt.n	800216e <add_message_to_UART_TX_queue+0x52>
	}
	UART_TX_put_index++;
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <add_message_to_UART_TX_queue+0xac>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <add_message_to_UART_TX_queue+0xac>)
 80021aa:	701a      	strb	r2, [r3, #0]
	if (UART_TX_put_index == UART_TX_QUEUE_BUFFER_SIZE)
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <add_message_to_UART_TX_queue+0xac>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b18      	cmp	r3, #24
 80021b2:	d102      	bne.n	80021ba <add_message_to_UART_TX_queue+0x9e>
	{
		UART_TX_put_index = 0;
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <add_message_to_UART_TX_queue+0xac>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
	}
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	200011f5 	.word	0x200011f5
 80021cc:	200003d0 	.word	0x200003d0

080021d0 <send_messages_from_UART_TX_queue>:

void send_messages_from_UART_TX_queue(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
	if (UART_TX_get_index != UART_TX_put_index)
 80021d6:	4b2d      	ldr	r3, [pc, #180]	; (800228c <send_messages_from_UART_TX_queue+0xbc>)
 80021d8:	781a      	ldrb	r2, [r3, #0]
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <send_messages_from_UART_TX_queue+0xc0>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d049      	beq.n	8002276 <send_messages_from_UART_TX_queue+0xa6>
	{
		for (int ii = UART_TX_MESSAGE_PRIORITY_0_MAX; ii <= UART_TX_MESSAGE_PRIORITY_4_MIN; ii++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	e03f      	b.n	8002268 <send_messages_from_UART_TX_queue+0x98>
		{
			for (int i = UART_TX_get_index; i != UART_TX_put_index; i++)
 80021e8:	4b28      	ldr	r3, [pc, #160]	; (800228c <send_messages_from_UART_TX_queue+0xbc>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	e032      	b.n	8002256 <send_messages_from_UART_TX_queue+0x86>
			{
				if (i == UART_TX_QUEUE_BUFFER_SIZE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b18      	cmp	r3, #24
 80021f4:	d101      	bne.n	80021fa <send_messages_from_UART_TX_queue+0x2a>
				{
				i = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	603b      	str	r3, [r7, #0]
				}
				if(UART_TX_queue_buffer[i].message_priority == ii)
 80021fa:	4926      	ldr	r1, [pc, #152]	; (8002294 <send_messages_from_UART_TX_queue+0xc4>)
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	4613      	mov	r3, r2
 8002200:	015b      	lsls	r3, r3, #5
 8002202:	4413      	add	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	440b      	add	r3, r1
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4293      	cmp	r3, r2
 8002210:	d11e      	bne.n	8002250 <send_messages_from_UART_TX_queue+0x80>
				{
					send_message_to_UART(UART_TX_queue_buffer[i].message_size, UART_TX_queue_buffer[i].message_data);
 8002212:	4920      	ldr	r1, [pc, #128]	; (8002294 <send_messages_from_UART_TX_queue+0xc4>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	4613      	mov	r3, r2
 8002218:	015b      	lsls	r3, r3, #5
 800221a:	4413      	add	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	440b      	add	r3, r1
 8002220:	3301      	adds	r3, #1
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b298      	uxth	r0, r3
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	015b      	lsls	r3, r3, #5
 800222c:	4413      	add	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4a18      	ldr	r2, [pc, #96]	; (8002294 <send_messages_from_UART_TX_queue+0xc4>)
 8002232:	4413      	add	r3, r2
 8002234:	3302      	adds	r3, #2
 8002236:	4619      	mov	r1, r3
 8002238:	f7ff f942 	bl	80014c0 <send_message_to_UART>
					UART_TX_queue_buffer[i].message_size = 0;
 800223c:	4915      	ldr	r1, [pc, #84]	; (8002294 <send_messages_from_UART_TX_queue+0xc4>)
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	015b      	lsls	r3, r3, #5
 8002244:	4413      	add	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	440b      	add	r3, r1
 800224a:	3301      	adds	r3, #1
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
			for (int i = UART_TX_get_index; i != UART_TX_put_index; i++)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <send_messages_from_UART_TX_queue+0xc0>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4293      	cmp	r3, r2
 8002260:	d1c6      	bne.n	80021f0 <send_messages_from_UART_TX_queue+0x20>
		for (int ii = UART_TX_MESSAGE_PRIORITY_0_MAX; ii <= UART_TX_MESSAGE_PRIORITY_4_MIN; ii++)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3301      	adds	r3, #1
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b04      	cmp	r3, #4
 800226c:	ddbc      	ble.n	80021e8 <send_messages_from_UART_TX_queue+0x18>
				}
			}
		}
		UART_TX_get_index = UART_TX_put_index;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <send_messages_from_UART_TX_queue+0xc0>)
 8002270:	781a      	ldrb	r2, [r3, #0]
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <send_messages_from_UART_TX_queue+0xbc>)
 8002274:	701a      	strb	r2, [r3, #0]
	}
	if (UART_TX_get_index == UART_TX_QUEUE_BUFFER_SIZE)
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <send_messages_from_UART_TX_queue+0xbc>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b18      	cmp	r3, #24
 800227c:	d102      	bne.n	8002284 <send_messages_from_UART_TX_queue+0xb4>
	{
		UART_TX_get_index = 0;
 800227e:	4b03      	ldr	r3, [pc, #12]	; (800228c <send_messages_from_UART_TX_queue+0xbc>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
	}
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20001118 	.word	0x20001118
 8002290:	200011f5 	.word	0x200011f5
 8002294:	200003d0 	.word	0x200003d0

08002298 <add_message_to_CAN_TX_queue>:

void add_message_to_CAN_TX_queue(FDCAN_TxHeaderTypeDef *tx_header_pointer, uint8_t *tx_data_pointer)
{
 8002298:	b5b0      	push	{r4, r5, r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
	CAN_TX_queue_buffer[CAN_TX_put_index].message_header = *tx_header_pointer;
 80022a2:	4b25      	ldr	r3, [pc, #148]	; (8002338 <add_message_to_CAN_TX_queue+0xa0>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	4619      	mov	r1, r3
 80022a8:	4a24      	ldr	r2, [pc, #144]	; (800233c <add_message_to_CAN_TX_queue+0xa4>)
 80022aa:	2334      	movs	r3, #52	; 0x34
 80022ac:	fb03 f301 	mul.w	r3, r3, r1
 80022b0:	441a      	add	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4614      	mov	r4, r2
 80022b6:	461d      	mov	r5, r3
 80022b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c0:	682b      	ldr	r3, [r5, #0]
 80022c2:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < CAN_message_data_lenght_define(CAN_TX_queue_buffer[CAN_TX_put_index].message_header.DataLength); i++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e013      	b.n	80022f2 <add_message_to_CAN_TX_queue+0x5a>
	{
		CAN_TX_queue_buffer[CAN_TX_put_index].message_data[i] = tx_data_pointer[i];
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	4a19      	ldr	r2, [pc, #100]	; (8002338 <add_message_to_CAN_TX_queue+0xa0>)
 80022d2:	7812      	ldrb	r2, [r2, #0]
 80022d4:	4610      	mov	r0, r2
 80022d6:	7819      	ldrb	r1, [r3, #0]
 80022d8:	4a18      	ldr	r2, [pc, #96]	; (800233c <add_message_to_CAN_TX_queue+0xa4>)
 80022da:	2334      	movs	r3, #52	; 0x34
 80022dc:	fb03 f300 	mul.w	r3, r3, r0
 80022e0:	441a      	add	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4413      	add	r3, r2
 80022e6:	3324      	adds	r3, #36	; 0x24
 80022e8:	460a      	mov	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CAN_message_data_lenght_define(CAN_TX_queue_buffer[CAN_TX_put_index].message_header.DataLength); i++)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3301      	adds	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <add_message_to_CAN_TX_queue+0xa0>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	4a10      	ldr	r2, [pc, #64]	; (800233c <add_message_to_CAN_TX_queue+0xa4>)
 80022fa:	2334      	movs	r3, #52	; 0x34
 80022fc:	fb03 f301 	mul.w	r3, r3, r1
 8002300:	4413      	add	r3, r2
 8002302:	330c      	adds	r3, #12
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fd7c 	bl	8001e04 <CAN_message_data_lenght_define>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8da      	bhi.n	80022ca <add_message_to_CAN_TX_queue+0x32>
	}
	CAN_TX_put_index++;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <add_message_to_CAN_TX_queue+0xa0>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <add_message_to_CAN_TX_queue+0xa0>)
 800231e:	701a      	strb	r2, [r3, #0]
	if (CAN_TX_put_index > CAN_TX_QUEUE_BUFFER_SIZE)
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <add_message_to_CAN_TX_queue+0xa0>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b18      	cmp	r3, #24
 8002326:	d902      	bls.n	800232e <add_message_to_CAN_TX_queue+0x96>
	{
		CAN_TX_put_index = 0;
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <add_message_to_CAN_TX_queue+0xa0>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
	}
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bdb0      	pop	{r4, r5, r7, pc}
 8002336:	bf00      	nop
 8002338:	20000f4a 	.word	0x20000f4a
 800233c:	20000a68 	.word	0x20000a68

08002340 <send_messages_from_CAN_TX_queue>:

void send_messages_from_CAN_TX_queue(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	if (CAN_TX_get_index != CAN_TX_put_index)
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <send_messages_from_CAN_TX_queue+0x5c>)
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <send_messages_from_CAN_TX_queue+0x60>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d01b      	beq.n	8002388 <send_messages_from_CAN_TX_queue+0x48>
	{
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_TX_queue_buffer[CAN_TX_get_index].message_header, &CAN_TX_queue_buffer[CAN_TX_get_index].message_data[0]);
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <send_messages_from_CAN_TX_queue+0x5c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	2334      	movs	r3, #52	; 0x34
 8002358:	fb03 f302 	mul.w	r3, r3, r2
 800235c:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <send_messages_from_CAN_TX_queue+0x64>)
 800235e:	1899      	adds	r1, r3, r2
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <send_messages_from_CAN_TX_queue+0x5c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	2334      	movs	r3, #52	; 0x34
 8002368:	fb03 f302 	mul.w	r3, r3, r2
 800236c:	3320      	adds	r3, #32
 800236e:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <send_messages_from_CAN_TX_queue+0x64>)
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	461a      	mov	r2, r3
 8002376:	480c      	ldr	r0, [pc, #48]	; (80023a8 <send_messages_from_CAN_TX_queue+0x68>)
 8002378:	f000 fdbf 	bl	8002efa <HAL_FDCAN_AddMessageToTxFifoQ>
		CAN_TX_get_index++;
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <send_messages_from_CAN_TX_queue+0x5c>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <send_messages_from_CAN_TX_queue+0x5c>)
 8002386:	701a      	strb	r2, [r3, #0]
	}
	if (CAN_TX_get_index >= CAN_TX_QUEUE_BUFFER_SIZE)
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <send_messages_from_CAN_TX_queue+0x5c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b17      	cmp	r3, #23
 800238e:	d902      	bls.n	8002396 <send_messages_from_CAN_TX_queue+0x56>
	{
		CAN_TX_get_index = 0;
 8002390:	4b02      	ldr	r3, [pc, #8]	; (800239c <send_messages_from_CAN_TX_queue+0x5c>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
	}
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200002c0 	.word	0x200002c0
 80023a0:	20000f4a 	.word	0x20000f4a
 80023a4:	20000a68 	.word	0x20000a68
 80023a8:	20000f4c 	.word	0x20000f4c

080023ac <count_string_lenght>:

uint8_t count_string_lenght(char* ch_string)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	uint8_t number_of_chars = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
	while (ch_string[number_of_chars] != '\0')
 80023b8:	e005      	b.n	80023c6 <count_string_lenght+0x1a>
	{
		number_of_chars++;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	3301      	adds	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
		if (number_of_chars == UART_STRING_MAX_SIZE)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	2b40      	cmp	r3, #64	; 0x40
 80023c4:	d006      	beq.n	80023d4 <count_string_lenght+0x28>
	while (ch_string[number_of_chars] != '\0')
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	4413      	add	r3, r2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f3      	bne.n	80023ba <count_string_lenght+0xe>
 80023d2:	e000      	b.n	80023d6 <count_string_lenght+0x2a>
		{
			break;
 80023d4:	bf00      	nop
		}
	}
	return number_of_chars;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <init_CAN_filter>:

void init_CAN_filter(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af02      	add	r7, sp, #8
	filter_config.IdType = FDCAN_STANDARD_ID;	//FDCAN_STANDARD_ID;
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <init_CAN_filter+0x48>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
	filter_config.FilterIndex = 0;
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <init_CAN_filter+0x48>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	605a      	str	r2, [r3, #4]
	filter_config.FilterType = FDCAN_FILTER_MASK;
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <init_CAN_filter+0x48>)
 80023f8:	2202      	movs	r2, #2
 80023fa:	609a      	str	r2, [r3, #8]
	filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <init_CAN_filter+0x48>)
 80023fe:	2201      	movs	r2, #1
 8002400:	60da      	str	r2, [r3, #12]
	filter_config.FilterID1 = 0x0;
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <init_CAN_filter+0x48>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
	filter_config.FilterID2 = 0x0;
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <init_CAN_filter+0x48>)
 800240a:	2200      	movs	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800240e:	4907      	ldr	r1, [pc, #28]	; (800242c <init_CAN_filter+0x48>)
 8002410:	4807      	ldr	r0, [pc, #28]	; (8002430 <init_CAN_filter+0x4c>)
 8002412:	f000 fbf9 	bl	8002c08 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
 8002416:	2300      	movs	r3, #0
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2300      	movs	r3, #0
 800241c:	2202      	movs	r2, #2
 800241e:	2102      	movs	r1, #2
 8002420:	4803      	ldr	r0, [pc, #12]	; (8002430 <init_CAN_filter+0x4c>)
 8002422:	f000 fc4b 	bl	8002cbc <HAL_FDCAN_ConfigGlobalFilter>
	//HAL_FDCAN_ConfigExtendedIdMask(&hfdcan1, 0);
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000a00 	.word	0x20000a00
 8002430:	20000f4c 	.word	0x20000f4c

08002434 <update_CAN_acceptance_mask>:

void update_CAN_acceptance_mask(uint8_t string_size, char* string_pointer)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
	switch (string_size)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	2b03      	cmp	r3, #3
 8002444:	d002      	beq.n	800244c <update_CAN_acceptance_mask+0x18>
 8002446:	2b08      	cmp	r3, #8
 8002448:	d00f      	beq.n	800246a <update_CAN_acceptance_mask+0x36>
		filter_config.FilterID2 = convert_hex_char_sequence_to_int_value(CAN_MASK_LENGHT_EXTENDED, string_pointer);
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
		break;
	}
	}
}
 800244a:	e01e      	b.n	800248a <update_CAN_acceptance_mask+0x56>
		filter_config.IdType = FDCAN_STANDARD_ID;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <update_CAN_acceptance_mask+0x60>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
		filter_config.FilterID2 = convert_hex_char_sequence_to_int_value(CAN_MASK_LENGHT_STANDARD, string_pointer);
 8002452:	6839      	ldr	r1, [r7, #0]
 8002454:	2003      	movs	r0, #3
 8002456:	f7ff fc85 	bl	8001d64 <convert_hex_char_sequence_to_int_value>
 800245a:	4602      	mov	r2, r0
 800245c:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <update_CAN_acceptance_mask+0x60>)
 800245e:	615a      	str	r2, [r3, #20]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 8002460:	490c      	ldr	r1, [pc, #48]	; (8002494 <update_CAN_acceptance_mask+0x60>)
 8002462:	480d      	ldr	r0, [pc, #52]	; (8002498 <update_CAN_acceptance_mask+0x64>)
 8002464:	f000 fbd0 	bl	8002c08 <HAL_FDCAN_ConfigFilter>
		break;
 8002468:	e00f      	b.n	800248a <update_CAN_acceptance_mask+0x56>
		filter_config.IdType = FDCAN_EXTENDED_ID;
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <update_CAN_acceptance_mask+0x60>)
 800246c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002470:	601a      	str	r2, [r3, #0]
		filter_config.FilterID2 = convert_hex_char_sequence_to_int_value(CAN_MASK_LENGHT_EXTENDED, string_pointer);
 8002472:	6839      	ldr	r1, [r7, #0]
 8002474:	2008      	movs	r0, #8
 8002476:	f7ff fc75 	bl	8001d64 <convert_hex_char_sequence_to_int_value>
 800247a:	4602      	mov	r2, r0
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <update_CAN_acceptance_mask+0x60>)
 800247e:	615a      	str	r2, [r3, #20]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 8002480:	4904      	ldr	r1, [pc, #16]	; (8002494 <update_CAN_acceptance_mask+0x60>)
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <update_CAN_acceptance_mask+0x64>)
 8002484:	f000 fbc0 	bl	8002c08 <HAL_FDCAN_ConfigFilter>
		break;
 8002488:	bf00      	nop
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000a00 	.word	0x20000a00
 8002498:	20000f4c 	.word	0x20000f4c

0800249c <update_CAN_acceptance_code>:

void update_CAN_acceptance_code(uint8_t string_size, char* string_pointer)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
	switch (string_size)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d002      	beq.n	80024b4 <update_CAN_acceptance_code+0x18>
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d00f      	beq.n	80024d2 <update_CAN_acceptance_code+0x36>
		filter_config.FilterID1 = convert_hex_char_sequence_to_int_value(CAN_CODE_LENGHT_EXTENDED, string_pointer);
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
		break;
	}
	}
}
 80024b2:	e01e      	b.n	80024f2 <update_CAN_acceptance_code+0x56>
		filter_config.IdType = FDCAN_STANDARD_ID;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <update_CAN_acceptance_code+0x60>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
		filter_config.FilterID1 = convert_hex_char_sequence_to_int_value(CAN_CODE_LENGHT_STANDARD, string_pointer);
 80024ba:	6839      	ldr	r1, [r7, #0]
 80024bc:	2003      	movs	r0, #3
 80024be:	f7ff fc51 	bl	8001d64 <convert_hex_char_sequence_to_int_value>
 80024c2:	4602      	mov	r2, r0
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <update_CAN_acceptance_code+0x60>)
 80024c6:	611a      	str	r2, [r3, #16]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 80024c8:	490c      	ldr	r1, [pc, #48]	; (80024fc <update_CAN_acceptance_code+0x60>)
 80024ca:	480d      	ldr	r0, [pc, #52]	; (8002500 <update_CAN_acceptance_code+0x64>)
 80024cc:	f000 fb9c 	bl	8002c08 <HAL_FDCAN_ConfigFilter>
		break;
 80024d0:	e00f      	b.n	80024f2 <update_CAN_acceptance_code+0x56>
		filter_config.IdType = FDCAN_EXTENDED_ID;
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <update_CAN_acceptance_code+0x60>)
 80024d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024d8:	601a      	str	r2, [r3, #0]
		filter_config.FilterID1 = convert_hex_char_sequence_to_int_value(CAN_CODE_LENGHT_EXTENDED, string_pointer);
 80024da:	6839      	ldr	r1, [r7, #0]
 80024dc:	2008      	movs	r0, #8
 80024de:	f7ff fc41 	bl	8001d64 <convert_hex_char_sequence_to_int_value>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <update_CAN_acceptance_code+0x60>)
 80024e6:	611a      	str	r2, [r3, #16]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 80024e8:	4904      	ldr	r1, [pc, #16]	; (80024fc <update_CAN_acceptance_code+0x60>)
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <update_CAN_acceptance_code+0x64>)
 80024ec:	f000 fb8c 	bl	8002c08 <HAL_FDCAN_ConfigFilter>
		break;
 80024f0:	bf00      	nop
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000a00 	.word	0x20000a00
 8002500:	20000f4c 	.word	0x20000f4c

08002504 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002504:	480d      	ldr	r0, [pc, #52]	; (800253c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002506:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002508:	480d      	ldr	r0, [pc, #52]	; (8002540 <LoopForever+0x6>)
  ldr r1, =_edata
 800250a:	490e      	ldr	r1, [pc, #56]	; (8002544 <LoopForever+0xa>)
  ldr r2, =_sidata
 800250c:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <LoopForever+0xe>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002510:	e002      	b.n	8002518 <LoopCopyDataInit>

08002512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002516:	3304      	adds	r3, #4

08002518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800251c:	d3f9      	bcc.n	8002512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251e:	4a0b      	ldr	r2, [pc, #44]	; (800254c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002520:	4c0b      	ldr	r4, [pc, #44]	; (8002550 <LoopForever+0x16>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002524:	e001      	b.n	800252a <LoopFillZerobss>

08002526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002528:	3204      	adds	r2, #4

0800252a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800252c:	d3fb      	bcc.n	8002526 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800252e:	f7fe fbdf 	bl	8000cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002532:	f004 fac3 	bl	8006abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002536:	f7fe f855 	bl	80005e4 <main>

0800253a <LoopForever>:

LoopForever:
    b LoopForever
 800253a:	e7fe      	b.n	800253a <LoopForever>
  ldr   r0, =_estack
 800253c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002544:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002548:	08006e68 	.word	0x08006e68
  ldr r2, =_sbss
 800254c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002550:	200011fc 	.word	0x200011fc

08002554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002554:	e7fe      	b.n	8002554 <ADC1_2_IRQHandler>

08002556 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002560:	2003      	movs	r0, #3
 8002562:	f000 f94d 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002566:	2000      	movs	r0, #0
 8002568:	f000 f80e 	bl	8002588 <HAL_InitTick>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	71fb      	strb	r3, [r7, #7]
 8002576:	e001      	b.n	800257c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002578:	f7fe fa5e 	bl	8000a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800257c:	79fb      	ldrb	r3, [r7, #7]

}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002594:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_InitTick+0x68>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d022      	beq.n	80025e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_InitTick+0x6c>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_InitTick+0x68>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 f95c 	bl	800286e <HAL_SYSTICK_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10f      	bne.n	80025dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b0f      	cmp	r3, #15
 80025c0:	d809      	bhi.n	80025d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c2:	2200      	movs	r2, #0
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	f04f 30ff 	mov.w	r0, #4294967295
 80025ca:	f000 f924 	bl	8002816 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_InitTick+0x70>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e007      	b.n	80025e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e004      	b.n	80025e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	e001      	b.n	80025e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000008 	.word	0x20000008
 80025f4:	20000000 	.word	0x20000000
 80025f8:	20000004 	.word	0x20000004

080025fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_IncTick+0x1c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_IncTick+0x20>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4413      	add	r3, r2
 800260a:	4a03      	ldr	r2, [pc, #12]	; (8002618 <HAL_IncTick+0x1c>)
 800260c:	6013      	str	r3, [r2, #0]
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	200011f8 	.word	0x200011f8
 800261c:	20000008 	.word	0x20000008

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	200011f8 	.word	0x200011f8

08002638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002654:	4013      	ands	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266a:	4a04      	ldr	r2, [pc, #16]	; (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	60d3      	str	r3, [r2, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <__NVIC_GetPriorityGrouping+0x18>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 0307 	and.w	r3, r3, #7
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	db0b      	blt.n	80026c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <__NVIC_EnableIRQ+0x38>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2001      	movs	r0, #1
 80026be:	fa00 f202 	lsl.w	r2, r0, r2
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	; (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
         );
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002798:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <__NVIC_SystemReset+0x20>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80027a4:	4903      	ldr	r1, [pc, #12]	; (80027b4 <__NVIC_SystemReset+0x20>)
 80027a6:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <__NVIC_SystemReset+0x24>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60cb      	str	r3, [r1, #12]
 80027ac:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <__NVIC_SystemReset+0x1c>
 80027b4:	e000ed00 	.word	0xe000ed00
 80027b8:	05fa0004 	.word	0x05fa0004

080027bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027cc:	d301      	bcc.n	80027d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <SysTick_Config+0x40>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027da:	210f      	movs	r1, #15
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f7ff ff7a 	bl	80026d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <SysTick_Config+0x40>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <SysTick_Config+0x40>)
 80027ec:	2207      	movs	r2, #7
 80027ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000e010 	.word	0xe000e010

08002800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff15 	bl	8002638 <__NVIC_SetPriorityGrouping>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002824:	f7ff ff2c 	bl	8002680 <__NVIC_GetPriorityGrouping>
 8002828:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	6978      	ldr	r0, [r7, #20]
 8002830:	f7ff ff7c 	bl	800272c <NVIC_EncodePriority>
 8002834:	4602      	mov	r2, r0
 8002836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff4b 	bl	80026d8 <__NVIC_SetPriority>
}
 8002842:	bf00      	nop
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff1f 	bl	800269c <__NVIC_EnableIRQ>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800286a:	f7ff ff93 	bl	8002794 <__NVIC_SystemReset>

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa0 	bl	80027bc <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d00d      	beq.n	80028ba <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2204      	movs	r2, #4
 80028a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	e047      	b.n	800294a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 020e 	bic.w	r2, r2, #14
 80028c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f003 021f 	and.w	r2, r3, #31
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002906:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00c      	beq.n	800292a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800291e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002928:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
    }
  }
  return status;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e147      	b.n	8002bf6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe f880 	bl	8000a80 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0210 	bic.w	r2, r2, #16
 800298e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002990:	f7ff fe46 	bl	8002620 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002996:	e012      	b.n	80029be <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002998:	f7ff fe42 	bl	8002620 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b0a      	cmp	r3, #10
 80029a4:	d90b      	bls.n	80029be <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2203      	movs	r2, #3
 80029b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e11b      	b.n	8002bf6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d0e5      	beq.n	8002998 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029dc:	f7ff fe20 	bl	8002620 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80029e2:	e012      	b.n	8002a0a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80029e4:	f7ff fe1c 	bl	8002620 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b0a      	cmp	r3, #10
 80029f0:	d90b      	bls.n	8002a0a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2203      	movs	r2, #3
 8002a02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0f5      	b.n	8002bf6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0e5      	beq.n	80029e4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0202 	orr.w	r2, r2, #2
 8002a26:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a74      	ldr	r2, [pc, #464]	; (8002c00 <HAL_FDCAN_Init+0x2ac>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d103      	bne.n	8002a3a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002a32:	4a74      	ldr	r2, [pc, #464]	; (8002c04 <HAL_FDCAN_Init+0x2b0>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7c1b      	ldrb	r3, [r3, #16]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d108      	bne.n	8002a54 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699a      	ldr	r2, [r3, #24]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a50:	619a      	str	r2, [r3, #24]
 8002a52:	e007      	b.n	8002a64 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a62:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7c5b      	ldrb	r3, [r3, #17]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d108      	bne.n	8002a7e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a7a:	619a      	str	r2, [r3, #24]
 8002a7c:	e007      	b.n	8002a8e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a8c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7c9b      	ldrb	r3, [r3, #18]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d108      	bne.n	8002aa8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aa4:	619a      	str	r2, [r3, #24]
 8002aa6:	e007      	b.n	8002ab8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ab6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002adc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0210 	bic.w	r2, r2, #16
 8002aec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d108      	bne.n	8002b08 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0204 	orr.w	r2, r2, #4
 8002b04:	619a      	str	r2, [r3, #24]
 8002b06:	e02c      	b.n	8002b62 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d028      	beq.n	8002b62 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d01c      	beq.n	8002b52 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b26:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0210 	orr.w	r2, r2, #16
 8002b36:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d110      	bne.n	8002b62 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0220 	orr.w	r2, r2, #32
 8002b4e:	619a      	str	r2, [r3, #24]
 8002b50:	e007      	b.n	8002b62 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0220 	orr.w	r2, r2, #32
 8002b60:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002b72:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002b7a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002b8a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002b8c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b96:	d115      	bne.n	8002bc4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ba6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	3b01      	subs	r3, #1
 8002bae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002bb0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002bc0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002bc2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fd40 	bl	8003660 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40006400 	.word	0x40006400
 8002c04:	40006500 	.word	0x40006500

08002c08 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c18:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d002      	beq.n	8002c26 <HAL_FDCAN_ConfigFilter+0x1e>
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d13d      	bne.n	8002ca2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d119      	bne.n	8002c62 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002c3a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002c42:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e01d      	b.n	8002c9e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	075a      	lsls	r2, r3, #29
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	079a      	lsls	r2, r3, #30
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3304      	adds	r3, #4
 8002c96:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e006      	b.n	8002cb0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	f043 0202 	orr.w	r2, r3, #2
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d116      	bne.n	8002d04 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cde:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	011a      	lsls	r2, r3, #4
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	431a      	orrs	r2, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e006      	b.n	8002d12 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d08:	f043 0204 	orr.w	r2, r3, #4
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
  }
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_FDCAN_ConfigTimestampCounter>:
  * @param  TimestampPrescaler Timestamp Counter Prescaler.
  *         This parameter can be a value of @arg FDCAN_Timestamp_Prescaler.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTimestampCounter(FDCAN_HandleTypeDef *hfdcan, uint32_t TimestampPrescaler)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TIMESTAMP_PRESCALER(TimestampPrescaler));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d10b      	bne.n	8002d4c <HAL_FDCAN_ConfigTimestampCounter+0x2e>
  {
    /* Configure prescaler */
    MODIFY_REG(hfdcan->Instance->TSCC, FDCAN_TSCC_TCP, TimestampPrescaler);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	621a      	str	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e006      	b.n	8002d5a <HAL_FDCAN_ConfigTimestampCounter+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d50:	f043 0204 	orr.w	r2, r3, #4
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <HAL_FDCAN_EnableTimestampCounter>:
  * @param  TimestampOperation Timestamp counter operation.
  *         This parameter can be a value of @arg FDCAN_Timestamp.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTimestampCounter(FDCAN_HandleTypeDef *hfdcan, uint32_t TimestampOperation)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TIMESTAMP(TimestampOperation));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d10b      	bne.n	8002d94 <HAL_FDCAN_EnableTimestampCounter+0x2e>
  {
    /* Enable timestamp counter */
    MODIFY_REG(hfdcan->Instance->TSCC, FDCAN_TSCC_TSS, TimestampOperation);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f023 0103 	bic.w	r1, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	621a      	str	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e006      	b.n	8002da2 <HAL_FDCAN_EnableTimestampCounter+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d98:	f043 0204 	orr.w	r2, r3, #4
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
  }
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_FDCAN_GetTimestampCounter>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Timestamp counter value
  */
uint16_t HAL_FDCAN_GetTimestampCounter(FDCAN_HandleTypeDef *hfdcan)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  return (uint16_t)(hfdcan->Instance->TSCV);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	b29b      	uxth	r3, r3
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d110      	bne.n	8002e00 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e006      	b.n	8002e0e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e04:	f043 0204 	orr.w	r2, r3, #4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d156      	bne.n	8002ee0 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e42:	e011      	b.n	8002e68 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b0a      	cmp	r3, #10
 8002e48:	d90b      	bls.n	8002e62 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2203      	movs	r2, #3
 8002e5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e045      	b.n	8002eee <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3301      	adds	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0e6      	beq.n	8002e44 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0210 	bic.w	r2, r2, #16
 8002e88:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e8a:	e011      	b.n	8002eb0 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b0a      	cmp	r3, #10
 8002e90:	d90b      	bls.n	8002eaa <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e021      	b.n	8002eee <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3301      	adds	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d0e6      	beq.n	8002e8c <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0202 	orr.w	r2, r2, #2
 8002ecc:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e006      	b.n	8002eee <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee4:	f043 0208 	orr.w	r2, r3, #8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d12c      	bne.n	8002f6c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e023      	b.n	8002f7a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002f3a:	0c1b      	lsrs	r3, r3, #16
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fbdf 	bl	800370c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2101      	movs	r1, #1
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002f5e:	2201      	movs	r2, #1
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e006      	b.n	8002f7a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f70:	f043 0208 	orr.w	r2, r3, #8
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b08b      	sub	sp, #44	; 0x2c
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f98:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002f9a:	7efb      	ldrb	r3, [r7, #27]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	f040 80bc 	bne.w	800311a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
 8002fa6:	d121      	bne.n	8002fec <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0af      	b.n	8003128 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	440b      	add	r3, r1
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fea:	e020      	b.n	800302e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003000:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e08d      	b.n	8003128 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	440b      	add	r3, r1
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d107      	bne.n	8003052 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	0c9b      	lsrs	r3, r3, #18
 8003048:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e005      	b.n	800305e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	3304      	adds	r3, #4
 800307a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	b29a      	uxth	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	0e1b      	lsrs	r3, r3, #24
 80030b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0fda      	lsrs	r2, r3, #31
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	3304      	adds	r3, #4
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80030cc:	2300      	movs	r3, #0
 80030ce:	623b      	str	r3, [r7, #32]
 80030d0:	e00a      	b.n	80030e8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	441a      	add	r2, r3
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	440b      	add	r3, r1
 80030de:	7812      	ldrb	r2, [r2, #0]
 80030e0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	3301      	adds	r3, #1
 80030e6:	623b      	str	r3, [r7, #32]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	4a11      	ldr	r2, [pc, #68]	; (8003134 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80030f0:	5cd3      	ldrb	r3, [r2, r3]
 80030f2:	461a      	mov	r2, r3
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d3eb      	bcc.n	80030d2 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d105      	bne.n	800310c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800310a:	e004      	b.n	8003116 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e006      	b.n	8003128 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311e:	f043 0208 	orr.w	r2, r3, #8
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
  }
}
 8003128:	4618      	mov	r0, r3
 800312a:	372c      	adds	r7, #44	; 0x2c
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	08006e2c 	.word	0x08006e2c

08003138 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800314a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800314c:	7dfb      	ldrb	r3, [r7, #23]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d003      	beq.n	800315a <HAL_FDCAN_ActivateNotification+0x22>
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b02      	cmp	r3, #2
 8003156:	f040 80c8 	bne.w	80032ea <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	2b00      	cmp	r3, #0
 800316a:	d004      	beq.n	8003176 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d03b      	beq.n	80031ee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d031      	beq.n	80031ee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d027      	beq.n	80031ee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01d      	beq.n	80031ee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d013      	beq.n	80031ee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d004      	beq.n	80031da <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00c      	beq.n	80031fe <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0201 	orr.w	r2, r2, #1
 80031fc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d13b      	bne.n	800328a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d131      	bne.n	800328a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800322c:	2b00      	cmp	r3, #0
 800322e:	d004      	beq.n	800323a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d127      	bne.n	800328a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003240:	2b00      	cmp	r3, #0
 8003242:	d004      	beq.n	800324e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d11d      	bne.n	800328a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d113      	bne.n	800328a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00c      	beq.n	800329a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0202 	orr.w	r2, r2, #2
 8003298:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d009      	beq.n	80032b8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e006      	b.n	80032f8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ee:	f043 0202 	orr.w	r2, r3, #2
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	; 0x28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003312:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003320:	4013      	ands	r3, r2
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	6a3a      	ldr	r2, [r7, #32]
 8003338:	4013      	ands	r3, r2
 800333a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003346:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	4013      	ands	r3, r2
 8003352:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800335e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003376:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4013      	ands	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d006      	beq.n	80033ae <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2240      	movs	r2, #64	; 0x40
 80033a6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f939 	bl	8003620 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01b      	beq.n	80033f4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d014      	beq.n	80033f4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033d2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80033ec:	6939      	ldr	r1, [r7, #16]
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8f7 	bl	80035e2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003400:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f8b6 	bl	8003576 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003418:	6a39      	ldr	r1, [r7, #32]
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8b6 	bl	800358c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800342e:	69f9      	ldr	r1, [r7, #28]
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f8b6 	bl	80035a2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800345a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f8ab 	bl	80035b8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01a      	beq.n	80034a6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d013      	beq.n	80034a6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003486:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4013      	ands	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2280      	movs	r2, #128	; 0x80
 800349c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800349e:	68f9      	ldr	r1, [r7, #12]
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f893 	bl	80035cc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00e      	beq.n	80034d2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034ca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f893 	bl	80035f8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00e      	beq.n	80034fe <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80034f6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f887 	bl	800360c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d011      	beq.n	8003530 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003522:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003528:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800353e:	6979      	ldr	r1, [r7, #20]
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f881 	bl	8003648 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f863 	bl	8003634 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800356e:	bf00      	nop
 8003570:	3728      	adds	r7, #40	; 0x28
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003668:	4b27      	ldr	r3, [pc, #156]	; (8003708 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800366a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003682:	041a      	lsls	r2, r3, #16
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	061a      	lsls	r2, r3, #24
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e005      	b.n	80036ee <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3304      	adds	r3, #4
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3f3      	bcc.n	80036e2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	4000a400 	.word	0x4000a400

0800370c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800372a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003732:	4313      	orrs	r3, r2
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e00a      	b.n	800374e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003740:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003746:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800374c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003758:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800375e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003764:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	440b      	add	r3, r1
 800377e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	3304      	adds	r3, #4
 800378a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	3304      	adds	r3, #4
 8003796:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	e020      	b.n	80037e0 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	3303      	adds	r3, #3
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3302      	adds	r3, #2
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	440b      	add	r3, r1
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80037b6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3301      	adds	r3, #1
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	440b      	add	r3, r1
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80037c4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	440a      	add	r2, r1
 80037cc:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80037ce:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	3304      	adds	r3, #4
 80037d8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	3304      	adds	r3, #4
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	4a06      	ldr	r2, [pc, #24]	; (8003800 <FDCAN_CopyMessageToRAM+0xf4>)
 80037e8:	5cd3      	ldrb	r3, [r2, r3]
 80037ea:	461a      	mov	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d3d5      	bcc.n	800379e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80037f2:	bf00      	nop
 80037f4:	3724      	adds	r7, #36	; 0x24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	08006e2c 	.word	0x08006e2c

08003804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003812:	e15a      	b.n	8003aca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	2101      	movs	r1, #1
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	4013      	ands	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 814c 	beq.w	8003ac4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d00b      	beq.n	800384c <HAL_GPIO_Init+0x48>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d007      	beq.n	800384c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003840:	2b11      	cmp	r3, #17
 8003842:	d003      	beq.n	800384c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b12      	cmp	r3, #18
 800384a:	d130      	bne.n	80038ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2203      	movs	r2, #3
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003882:	2201      	movs	r2, #1
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 0201 	and.w	r2, r3, #1
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	2203      	movs	r2, #3
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0xea>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b12      	cmp	r3, #18
 80038ec:	d123      	bne.n	8003936 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	08da      	lsrs	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3208      	adds	r2, #8
 80038f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	220f      	movs	r2, #15
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	6939      	ldr	r1, [r7, #16]
 8003932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	2203      	movs	r2, #3
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0203 	and.w	r2, r3, #3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a6 	beq.w	8003ac4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003978:	4b5b      	ldr	r3, [pc, #364]	; (8003ae8 <HAL_GPIO_Init+0x2e4>)
 800397a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397c:	4a5a      	ldr	r2, [pc, #360]	; (8003ae8 <HAL_GPIO_Init+0x2e4>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	6613      	str	r3, [r2, #96]	; 0x60
 8003984:	4b58      	ldr	r3, [pc, #352]	; (8003ae8 <HAL_GPIO_Init+0x2e4>)
 8003986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003990:	4a56      	ldr	r2, [pc, #344]	; (8003aec <HAL_GPIO_Init+0x2e8>)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	089b      	lsrs	r3, r3, #2
 8003996:	3302      	adds	r3, #2
 8003998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	220f      	movs	r2, #15
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039ba:	d01f      	beq.n	80039fc <HAL_GPIO_Init+0x1f8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a4c      	ldr	r2, [pc, #304]	; (8003af0 <HAL_GPIO_Init+0x2ec>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d019      	beq.n	80039f8 <HAL_GPIO_Init+0x1f4>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a4b      	ldr	r2, [pc, #300]	; (8003af4 <HAL_GPIO_Init+0x2f0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <HAL_GPIO_Init+0x1f0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a4a      	ldr	r2, [pc, #296]	; (8003af8 <HAL_GPIO_Init+0x2f4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00d      	beq.n	80039f0 <HAL_GPIO_Init+0x1ec>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a49      	ldr	r2, [pc, #292]	; (8003afc <HAL_GPIO_Init+0x2f8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <HAL_GPIO_Init+0x1e8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a48      	ldr	r2, [pc, #288]	; (8003b00 <HAL_GPIO_Init+0x2fc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_GPIO_Init+0x1e4>
 80039e4:	2305      	movs	r3, #5
 80039e6:	e00a      	b.n	80039fe <HAL_GPIO_Init+0x1fa>
 80039e8:	2306      	movs	r3, #6
 80039ea:	e008      	b.n	80039fe <HAL_GPIO_Init+0x1fa>
 80039ec:	2304      	movs	r3, #4
 80039ee:	e006      	b.n	80039fe <HAL_GPIO_Init+0x1fa>
 80039f0:	2303      	movs	r3, #3
 80039f2:	e004      	b.n	80039fe <HAL_GPIO_Init+0x1fa>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e002      	b.n	80039fe <HAL_GPIO_Init+0x1fa>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <HAL_GPIO_Init+0x1fa>
 80039fc:	2300      	movs	r3, #0
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	f002 0203 	and.w	r2, r2, #3
 8003a04:	0092      	lsls	r2, r2, #2
 8003a06:	4093      	lsls	r3, r2
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a0e:	4937      	ldr	r1, [pc, #220]	; (8003aec <HAL_GPIO_Init+0x2e8>)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	3302      	adds	r3, #2
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a1c:	4b39      	ldr	r3, [pc, #228]	; (8003b04 <HAL_GPIO_Init+0x300>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a40:	4a30      	ldr	r2, [pc, #192]	; (8003b04 <HAL_GPIO_Init+0x300>)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003a46:	4b2f      	ldr	r3, [pc, #188]	; (8003b04 <HAL_GPIO_Init+0x300>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a6a:	4a26      	ldr	r2, [pc, #152]	; (8003b04 <HAL_GPIO_Init+0x300>)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a70:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <HAL_GPIO_Init+0x300>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a94:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <HAL_GPIO_Init+0x300>)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <HAL_GPIO_Init+0x300>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003abe:	4a11      	ldr	r2, [pc, #68]	; (8003b04 <HAL_GPIO_Init+0x300>)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f47f ae9d 	bne.w	8003814 <HAL_GPIO_Init+0x10>
  }
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40010000 	.word	0x40010000
 8003af0:	48000400 	.word	0x48000400
 8003af4:	48000800 	.word	0x48000800
 8003af8:	48000c00 	.word	0x48000c00
 8003afc:	48001000 	.word	0x48001000
 8003b00:	48001400 	.word	0x48001400
 8003b04:	40010400 	.word	0x40010400

08003b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
 8003b14:	4613      	mov	r3, r2
 8003b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b18:	787b      	ldrb	r3, [r7, #1]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b24:	e002      	b.n	8003b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b26:	887a      	ldrh	r2, [r7, #2]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d141      	bne.n	8003bca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b46:	4b4b      	ldr	r3, [pc, #300]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b52:	d131      	bne.n	8003bb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b54:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b5a:	4a46      	ldr	r2, [pc, #280]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b64:	4b43      	ldr	r3, [pc, #268]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b6c:	4a41      	ldr	r2, [pc, #260]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b74:	4b40      	ldr	r3, [pc, #256]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2232      	movs	r2, #50	; 0x32
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	4a3f      	ldr	r2, [pc, #252]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	0c9b      	lsrs	r3, r3, #18
 8003b86:	3301      	adds	r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b8a:	e002      	b.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b92:	4b38      	ldr	r3, [pc, #224]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9e:	d102      	bne.n	8003ba6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f2      	bne.n	8003b8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ba6:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb2:	d158      	bne.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e057      	b.n	8003c68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bb8:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bbe:	4a2d      	ldr	r2, [pc, #180]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bc8:	e04d      	b.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd0:	d141      	bne.n	8003c56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bd2:	4b28      	ldr	r3, [pc, #160]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bde:	d131      	bne.n	8003c44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be6:	4a23      	ldr	r2, [pc, #140]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bf0:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c00:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2232      	movs	r2, #50	; 0x32
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	0c9b      	lsrs	r3, r3, #18
 8003c12:	3301      	adds	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c16:	e002      	b.n	8003c1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2a:	d102      	bne.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f2      	bne.n	8003c18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3e:	d112      	bne.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e011      	b.n	8003c68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c54:	e007      	b.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c56:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c5e:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40007000 	.word	0x40007000
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	431bde83 	.word	0x431bde83

08003c80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c8e:	6093      	str	r3, [r2, #8]
}
 8003c90:	bf00      	nop
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40007000 	.word	0x40007000

08003ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e308      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d075      	beq.n	8003daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cbe:	4ba3      	ldr	r3, [pc, #652]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc8:	4ba0      	ldr	r3, [pc, #640]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d102      	bne.n	8003cde <HAL_RCC_OscConfig+0x3e>
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d002      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x44>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d10b      	bne.n	8003cfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	4b99      	ldr	r3, [pc, #612]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d05b      	beq.n	8003da8 <HAL_RCC_OscConfig+0x108>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d157      	bne.n	8003da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e2e3      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d04:	d106      	bne.n	8003d14 <HAL_RCC_OscConfig+0x74>
 8003d06:	4b91      	ldr	r3, [pc, #580]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a90      	ldr	r2, [pc, #576]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e01d      	b.n	8003d50 <HAL_RCC_OscConfig+0xb0>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x98>
 8003d1e:	4b8b      	ldr	r3, [pc, #556]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a8a      	ldr	r2, [pc, #552]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	4b88      	ldr	r3, [pc, #544]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a87      	ldr	r2, [pc, #540]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0xb0>
 8003d38:	4b84      	ldr	r3, [pc, #528]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a83      	ldr	r2, [pc, #524]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	4b81      	ldr	r3, [pc, #516]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a80      	ldr	r2, [pc, #512]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d013      	beq.n	8003d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fe fc62 	bl	8002620 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d60:	f7fe fc5e 	bl	8002620 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b64      	cmp	r3, #100	; 0x64
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e2a8      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d72:	4b76      	ldr	r3, [pc, #472]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0xc0>
 8003d7e:	e014      	b.n	8003daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe fc4e 	bl	8002620 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d88:	f7fe fc4a 	bl	8002620 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	; 0x64
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e294      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d9a:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0xe8>
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d075      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db6:	4b65      	ldr	r3, [pc, #404]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc0:	4b62      	ldr	r3, [pc, #392]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2b0c      	cmp	r3, #12
 8003dce:	d102      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x136>
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d002      	beq.n	8003ddc <HAL_RCC_OscConfig+0x13c>
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d11f      	bne.n	8003e1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ddc:	4b5b      	ldr	r3, [pc, #364]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_OscConfig+0x154>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e267      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df4:	4b55      	ldr	r3, [pc, #340]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	4952      	ldr	r1, [pc, #328]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e08:	4b51      	ldr	r3, [pc, #324]	; (8003f50 <HAL_RCC_OscConfig+0x2b0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe fbbb 	bl	8002588 <HAL_InitTick>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d043      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e253      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d023      	beq.n	8003e6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e24:	4b49      	ldr	r3, [pc, #292]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a48      	ldr	r2, [pc, #288]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fe fbf6 	bl	8002620 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e38:	f7fe fbf2 	bl	8002620 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e23c      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e4a:	4b40      	ldr	r3, [pc, #256]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e56:	4b3d      	ldr	r3, [pc, #244]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	061b      	lsls	r3, r3, #24
 8003e64:	4939      	ldr	r1, [pc, #228]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	604b      	str	r3, [r1, #4]
 8003e6a:	e01a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6c:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a36      	ldr	r2, [pc, #216]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe fbd2 	bl	8002620 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e80:	f7fe fbce 	bl	8002620 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e218      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e92:	4b2e      	ldr	r3, [pc, #184]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x1e0>
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d03c      	beq.n	8003f28 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01c      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb6:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ebc:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fbab 	bl	8002620 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ece:	f7fe fba7 	bl	8002620 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e1f1      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0ef      	beq.n	8003ece <HAL_RCC_OscConfig+0x22e>
 8003eee:	e01b      	b.n	8003f28 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef0:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef6:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fe fb8e 	bl	8002620 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f08:	f7fe fb8a 	bl	8002620 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e1d4      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ef      	bne.n	8003f08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80ab 	beq.w	800408c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f36:	2300      	movs	r3, #0
 8003f38:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_RCC_OscConfig+0x2b4>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e005      	b.n	8003f56 <HAL_RCC_OscConfig+0x2b6>
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	20000004 	.word	0x20000004
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5a:	4baf      	ldr	r3, [pc, #700]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5e:	4aae      	ldr	r2, [pc, #696]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8003f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f64:	6593      	str	r3, [r2, #88]	; 0x58
 8003f66:	4bac      	ldr	r3, [pc, #688]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f72:	2301      	movs	r3, #1
 8003f74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f76:	4ba9      	ldr	r3, [pc, #676]	; (800421c <HAL_RCC_OscConfig+0x57c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d118      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f82:	4ba6      	ldr	r3, [pc, #664]	; (800421c <HAL_RCC_OscConfig+0x57c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4aa5      	ldr	r2, [pc, #660]	; (800421c <HAL_RCC_OscConfig+0x57c>)
 8003f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8e:	f7fe fb47 	bl	8002620 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f96:	f7fe fb43 	bl	8002620 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e18d      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa8:	4b9c      	ldr	r3, [pc, #624]	; (800421c <HAL_RCC_OscConfig+0x57c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d108      	bne.n	8003fce <HAL_RCC_OscConfig+0x32e>
 8003fbc:	4b96      	ldr	r3, [pc, #600]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc2:	4a95      	ldr	r2, [pc, #596]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fcc:	e024      	b.n	8004018 <HAL_RCC_OscConfig+0x378>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b05      	cmp	r3, #5
 8003fd4:	d110      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x358>
 8003fd6:	4b90      	ldr	r3, [pc, #576]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	4a8e      	ldr	r2, [pc, #568]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8003fde:	f043 0304 	orr.w	r3, r3, #4
 8003fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fe6:	4b8c      	ldr	r3, [pc, #560]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	4a8a      	ldr	r2, [pc, #552]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff6:	e00f      	b.n	8004018 <HAL_RCC_OscConfig+0x378>
 8003ff8:	4b87      	ldr	r3, [pc, #540]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	4a86      	ldr	r2, [pc, #536]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004008:	4b83      	ldr	r3, [pc, #524]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	4a82      	ldr	r2, [pc, #520]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8004010:	f023 0304 	bic.w	r3, r3, #4
 8004014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d016      	beq.n	800404e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004020:	f7fe fafe 	bl	8002620 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004026:	e00a      	b.n	800403e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004028:	f7fe fafa 	bl	8002620 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	; 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e142      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800403e:	4b76      	ldr	r3, [pc, #472]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0ed      	beq.n	8004028 <HAL_RCC_OscConfig+0x388>
 800404c:	e015      	b.n	800407a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404e:	f7fe fae7 	bl	8002620 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004054:	e00a      	b.n	800406c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004056:	f7fe fae3 	bl	8002620 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	; 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e12b      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800406c:	4b6a      	ldr	r3, [pc, #424]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1ed      	bne.n	8004056 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800407a:	7ffb      	ldrb	r3, [r7, #31]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d105      	bne.n	800408c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004080:	4b65      	ldr	r3, [pc, #404]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	4a64      	ldr	r2, [pc, #400]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8004086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d03c      	beq.n	8004112 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01c      	beq.n	80040da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040a0:	4b5d      	ldr	r3, [pc, #372]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80040a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040a6:	4a5c      	ldr	r2, [pc, #368]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7fe fab6 	bl	8002620 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040b8:	f7fe fab2 	bl	8002620 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e0fc      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040ca:	4b53      	ldr	r3, [pc, #332]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80040cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0ef      	beq.n	80040b8 <HAL_RCC_OscConfig+0x418>
 80040d8:	e01b      	b.n	8004112 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040da:	4b4f      	ldr	r3, [pc, #316]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80040dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040e0:	4a4d      	ldr	r2, [pc, #308]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ea:	f7fe fa99 	bl	8002620 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040f2:	f7fe fa95 	bl	8002620 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0df      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004104:	4b44      	ldr	r3, [pc, #272]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8004106:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1ef      	bne.n	80040f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80d3 	beq.w	80042c2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800411c:	4b3e      	ldr	r3, [pc, #248]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 030c 	and.w	r3, r3, #12
 8004124:	2b0c      	cmp	r3, #12
 8004126:	f000 808d 	beq.w	8004244 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d15a      	bne.n	80041e8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004132:	4b39      	ldr	r3, [pc, #228]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a38      	ldr	r2, [pc, #224]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8004138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fe fa6f 	bl	8002620 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004146:	f7fe fa6b 	bl	8002620 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e0b5      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004158:	4b2f      	ldr	r3, [pc, #188]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f0      	bne.n	8004146 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004164:	4b2c      	ldr	r3, [pc, #176]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	4b2d      	ldr	r3, [pc, #180]	; (8004220 <HAL_RCC_OscConfig+0x580>)
 800416a:	4013      	ands	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6a11      	ldr	r1, [r2, #32]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004174:	3a01      	subs	r2, #1
 8004176:	0112      	lsls	r2, r2, #4
 8004178:	4311      	orrs	r1, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800417e:	0212      	lsls	r2, r2, #8
 8004180:	4311      	orrs	r1, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004186:	0852      	lsrs	r2, r2, #1
 8004188:	3a01      	subs	r2, #1
 800418a:	0552      	lsls	r2, r2, #21
 800418c:	4311      	orrs	r1, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004192:	0852      	lsrs	r2, r2, #1
 8004194:	3a01      	subs	r2, #1
 8004196:	0652      	lsls	r2, r2, #25
 8004198:	4311      	orrs	r1, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800419e:	06d2      	lsls	r2, r2, #27
 80041a0:	430a      	orrs	r2, r1
 80041a2:	491d      	ldr	r1, [pc, #116]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a8:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80041ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041b4:	4b18      	ldr	r3, [pc, #96]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a17      	ldr	r2, [pc, #92]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80041ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fe fa2e 	bl	8002620 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fe fa2a 	bl	8002620 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e074      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041da:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x528>
 80041e6:	e06c      	b.n	80042c2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80041ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80041f4:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4a07      	ldr	r2, [pc, #28]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <HAL_RCC_OscConfig+0x578>)
 8004206:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800420a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fe fa06 	bl	8002620 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004216:	e00e      	b.n	8004236 <HAL_RCC_OscConfig+0x596>
 8004218:	40021000 	.word	0x40021000
 800421c:	40007000 	.word	0x40007000
 8004220:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004224:	f7fe f9fc 	bl	8002620 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e046      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004236:	4b25      	ldr	r3, [pc, #148]	; (80042cc <HAL_RCC_OscConfig+0x62c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x584>
 8004242:	e03e      	b.n	80042c2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e039      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004250:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <HAL_RCC_OscConfig+0x62c>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 0203 	and.w	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	429a      	cmp	r2, r3
 8004262:	d12c      	bne.n	80042be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	3b01      	subs	r3, #1
 8004270:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d123      	bne.n	80042be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d11b      	bne.n	80042be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d113      	bne.n	80042be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	3b01      	subs	r3, #1
 80042a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d109      	bne.n	80042be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	3b01      	subs	r3, #1
 80042b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d001      	beq.n	80042c2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3720      	adds	r7, #32
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40021000 	.word	0x40021000

080042d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e11e      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e8:	4b91      	ldr	r3, [pc, #580]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d910      	bls.n	8004318 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f6:	4b8e      	ldr	r3, [pc, #568]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f023 020f 	bic.w	r2, r3, #15
 80042fe:	498c      	ldr	r1, [pc, #560]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004306:	4b8a      	ldr	r3, [pc, #552]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e106      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d073      	beq.n	800440c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d129      	bne.n	8004380 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432c:	4b81      	ldr	r3, [pc, #516]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0f4      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800433c:	f000 f99e 	bl	800467c <RCC_GetSysClockFreqFromPLLSource>
 8004340:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4a7c      	ldr	r2, [pc, #496]	; (8004538 <HAL_RCC_ClockConfig+0x268>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d93f      	bls.n	80043ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800434a:	4b7a      	ldr	r3, [pc, #488]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800435e:	2b00      	cmp	r3, #0
 8004360:	d033      	beq.n	80043ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004366:	2b00      	cmp	r3, #0
 8004368:	d12f      	bne.n	80043ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800436a:	4b72      	ldr	r3, [pc, #456]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004372:	4a70      	ldr	r2, [pc, #448]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004378:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e024      	b.n	80043ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d107      	bne.n	8004398 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004388:	4b6a      	ldr	r3, [pc, #424]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d109      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0c6      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004398:	4b66      	ldr	r3, [pc, #408]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0be      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043a8:	f000 f8ce 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4a61      	ldr	r2, [pc, #388]	; (8004538 <HAL_RCC_ClockConfig+0x268>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d909      	bls.n	80043ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043b6:	4b5f      	ldr	r3, [pc, #380]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043be:	4a5d      	ldr	r2, [pc, #372]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043ca:	4b5a      	ldr	r3, [pc, #360]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f023 0203 	bic.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4957      	ldr	r1, [pc, #348]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043dc:	f7fe f920 	bl	8002620 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e4:	f7fe f91c 	bl	8002620 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e095      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	4b4e      	ldr	r3, [pc, #312]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 020c 	and.w	r2, r3, #12
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	429a      	cmp	r2, r3
 800440a:	d1eb      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d023      	beq.n	8004460 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004424:	4b43      	ldr	r3, [pc, #268]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a42      	ldr	r2, [pc, #264]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800442a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800442e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800443c:	4b3d      	ldr	r3, [pc, #244]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004444:	4a3b      	ldr	r2, [pc, #236]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800444a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800444c:	4b39      	ldr	r3, [pc, #228]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	4936      	ldr	r1, [pc, #216]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
 800445e:	e008      	b.n	8004472 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b80      	cmp	r3, #128	; 0x80
 8004464:	d105      	bne.n	8004472 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004466:	4b33      	ldr	r3, [pc, #204]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	4a32      	ldr	r2, [pc, #200]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800446c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004470:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004472:	4b2f      	ldr	r3, [pc, #188]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d21d      	bcs.n	80044bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004480:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 020f 	bic.w	r2, r3, #15
 8004488:	4929      	ldr	r1, [pc, #164]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004490:	f7fe f8c6 	bl	8002620 <HAL_GetTick>
 8004494:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004496:	e00a      	b.n	80044ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004498:	f7fe f8c2 	bl	8002620 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e03b      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d1ed      	bne.n	8004498 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4917      	ldr	r1, [pc, #92]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	490f      	ldr	r1, [pc, #60]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044fa:	f000 f825 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 80044fe:	4601      	mov	r1, r0
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	4a0c      	ldr	r2, [pc, #48]	; (800453c <HAL_RCC_ClockConfig+0x26c>)
 800450c:	5cd3      	ldrb	r3, [r2, r3]
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	fa21 f303 	lsr.w	r3, r1, r3
 8004516:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <HAL_RCC_ClockConfig+0x270>)
 8004518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <HAL_RCC_ClockConfig+0x274>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe f832 	bl	8002588 <HAL_InitTick>
 8004524:	4603      	mov	r3, r0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40022000 	.word	0x40022000
 8004534:	40021000 	.word	0x40021000
 8004538:	04c4b400 	.word	0x04c4b400
 800453c:	08006e14 	.word	0x08006e14
 8004540:	20000000 	.word	0x20000000
 8004544:	20000004 	.word	0x20000004

08004548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b04      	cmp	r3, #4
 8004558:	d102      	bne.n	8004560 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800455a:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <HAL_RCC_GetSysClockFreq+0xbc>)
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	e047      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004560:	4b27      	ldr	r3, [pc, #156]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b08      	cmp	r3, #8
 800456a:	d102      	bne.n	8004572 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800456c:	4b26      	ldr	r3, [pc, #152]	; (8004608 <HAL_RCC_GetSysClockFreq+0xc0>)
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	e03e      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004572:	4b23      	ldr	r3, [pc, #140]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d136      	bne.n	80045ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800457e:	4b20      	ldr	r3, [pc, #128]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004588:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	3301      	adds	r3, #1
 8004594:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d10c      	bne.n	80045b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800459c:	4a1a      	ldr	r2, [pc, #104]	; (8004608 <HAL_RCC_GetSysClockFreq+0xc0>)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	4a16      	ldr	r2, [pc, #88]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a6:	68d2      	ldr	r2, [r2, #12]
 80045a8:	0a12      	lsrs	r2, r2, #8
 80045aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	617b      	str	r3, [r7, #20]
      break;
 80045b4:	e00c      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045b6:	4a13      	ldr	r2, [pc, #76]	; (8004604 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80045be:	4a10      	ldr	r2, [pc, #64]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c0:	68d2      	ldr	r2, [r2, #12]
 80045c2:	0a12      	lsrs	r2, r2, #8
 80045c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045c8:	fb02 f303 	mul.w	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]
      break;
 80045ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	0e5b      	lsrs	r3, r3, #25
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	3301      	adds	r3, #1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	e001      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80045f0:	693b      	ldr	r3, [r7, #16]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
 8004604:	00f42400 	.word	0x00f42400
 8004608:	007a1200 	.word	0x007a1200

0800460c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000000 	.word	0x20000000

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004628:	f7ff fff0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462c:	4601      	mov	r1, r0
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4a04      	ldr	r2, [pc, #16]	; (800464c <HAL_RCC_GetPCLK1Freq+0x28>)
 800463a:	5cd3      	ldrb	r3, [r2, r3]
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40021000 	.word	0x40021000
 800464c:	08006e24 	.word	0x08006e24

08004650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004654:	f7ff ffda 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004658:	4601      	mov	r1, r0
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0adb      	lsrs	r3, r3, #11
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4a04      	ldr	r2, [pc, #16]	; (8004678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	08006e24 	.word	0x08006e24

0800467c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004682:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	3301      	adds	r3, #1
 8004698:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d10c      	bne.n	80046ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046a0:	4a17      	ldr	r2, [pc, #92]	; (8004700 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	4a14      	ldr	r2, [pc, #80]	; (80046fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046aa:	68d2      	ldr	r2, [r2, #12]
 80046ac:	0a12      	lsrs	r2, r2, #8
 80046ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	617b      	str	r3, [r7, #20]
    break;
 80046b8:	e00c      	b.n	80046d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046ba:	4a12      	ldr	r2, [pc, #72]	; (8004704 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	4a0e      	ldr	r2, [pc, #56]	; (80046fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046c4:	68d2      	ldr	r2, [r2, #12]
 80046c6:	0a12      	lsrs	r2, r2, #8
 80046c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
    break;
 80046d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	0e5b      	lsrs	r3, r3, #25
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	3301      	adds	r3, #1
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80046ee:	687b      	ldr	r3, [r7, #4]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40021000 	.word	0x40021000
 8004700:	007a1200 	.word	0x007a1200
 8004704:	00f42400 	.word	0x00f42400

08004708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004710:	2300      	movs	r3, #0
 8004712:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004714:	2300      	movs	r3, #0
 8004716:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8098 	beq.w	8004856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004726:	2300      	movs	r3, #0
 8004728:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472a:	4b43      	ldr	r3, [pc, #268]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10d      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004736:	4b40      	ldr	r3, [pc, #256]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	4a3f      	ldr	r2, [pc, #252]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004740:	6593      	str	r3, [r2, #88]	; 0x58
 8004742:	4b3d      	ldr	r3, [pc, #244]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800474e:	2301      	movs	r3, #1
 8004750:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004752:	4b3a      	ldr	r3, [pc, #232]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a39      	ldr	r2, [pc, #228]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800475e:	f7fd ff5f 	bl	8002620 <HAL_GetTick>
 8004762:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004764:	e009      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004766:	f7fd ff5b 	bl	8002620 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d902      	bls.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	74fb      	strb	r3, [r7, #19]
        break;
 8004778:	e005      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800477a:	4b30      	ldr	r3, [pc, #192]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0ef      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d159      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800478c:	4b2a      	ldr	r3, [pc, #168]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004796:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01e      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d019      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047a8:	4b23      	ldr	r3, [pc, #140]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047b4:	4b20      	ldr	r3, [pc, #128]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	4a1f      	ldr	r2, [pc, #124]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047c4:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047d4:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d016      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fd ff1b 	bl	8002620 <HAL_GetTick>
 80047ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ec:	e00b      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fd ff17 	bl	8002620 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d902      	bls.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	74fb      	strb	r3, [r7, #19]
            break;
 8004804:	e006      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004806:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ec      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004814:	7cfb      	ldrb	r3, [r7, #19]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	4903      	ldr	r1, [pc, #12]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004830:	e008      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004832:	7cfb      	ldrb	r3, [r7, #19]
 8004834:	74bb      	strb	r3, [r7, #18]
 8004836:	e005      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004838:	40021000 	.word	0x40021000
 800483c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004844:	7c7b      	ldrb	r3, [r7, #17]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d105      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484a:	4ba6      	ldr	r3, [pc, #664]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	4aa5      	ldr	r2, [pc, #660]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004862:	4ba0      	ldr	r3, [pc, #640]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f023 0203 	bic.w	r2, r3, #3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	499c      	ldr	r1, [pc, #624]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004884:	4b97      	ldr	r3, [pc, #604]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f023 020c 	bic.w	r2, r3, #12
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4994      	ldr	r1, [pc, #592]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048a6:	4b8f      	ldr	r3, [pc, #572]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	498b      	ldr	r1, [pc, #556]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048c8:	4b86      	ldr	r3, [pc, #536]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	4983      	ldr	r1, [pc, #524]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048ea:	4b7e      	ldr	r3, [pc, #504]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	497a      	ldr	r1, [pc, #488]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800490c:	4b75      	ldr	r3, [pc, #468]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	4972      	ldr	r1, [pc, #456]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800492e:	4b6d      	ldr	r3, [pc, #436]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	4969      	ldr	r1, [pc, #420]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004950:	4b64      	ldr	r3, [pc, #400]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	4961      	ldr	r1, [pc, #388]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004972:	4b5c      	ldr	r3, [pc, #368]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004978:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	4958      	ldr	r1, [pc, #352]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004990:	2b00      	cmp	r3, #0
 8004992:	d015      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004994:	4b53      	ldr	r3, [pc, #332]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	4950      	ldr	r1, [pc, #320]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b2:	d105      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b4:	4b4b      	ldr	r3, [pc, #300]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a4a      	ldr	r2, [pc, #296]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d015      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049cc:	4b45      	ldr	r3, [pc, #276]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	4942      	ldr	r1, [pc, #264]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ea:	d105      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ec:	4b3d      	ldr	r3, [pc, #244]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a3c      	ldr	r2, [pc, #240]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d015      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a04:	4b37      	ldr	r3, [pc, #220]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	4934      	ldr	r1, [pc, #208]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a22:	d105      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a24:	4b2f      	ldr	r3, [pc, #188]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a2e      	ldr	r2, [pc, #184]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d015      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a3c:	4b29      	ldr	r3, [pc, #164]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4a:	4926      	ldr	r1, [pc, #152]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a5a:	d105      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a5c:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4a20      	ldr	r2, [pc, #128]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d015      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	4918      	ldr	r1, [pc, #96]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a92:	d105      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a94:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4a12      	ldr	r2, [pc, #72]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d015      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aba:	490a      	ldr	r1, [pc, #40]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aca:	d105      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4a04      	ldr	r2, [pc, #16]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ad8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e049      	b.n	8004b8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc f802 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f000 fb24 	bl	8005174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d001      	beq.n	8004bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e04a      	b.n	8004c46 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a21      	ldr	r2, [pc, #132]	; (8004c54 <HAL_TIM_Base_Start_IT+0xbc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d018      	beq.n	8004c04 <HAL_TIM_Base_Start_IT+0x6c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bda:	d013      	beq.n	8004c04 <HAL_TIM_Base_Start_IT+0x6c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <HAL_TIM_Base_Start_IT+0xc0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00e      	beq.n	8004c04 <HAL_TIM_Base_Start_IT+0x6c>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1c      	ldr	r2, [pc, #112]	; (8004c5c <HAL_TIM_Base_Start_IT+0xc4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d009      	beq.n	8004c04 <HAL_TIM_Base_Start_IT+0x6c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1a      	ldr	r2, [pc, #104]	; (8004c60 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_TIM_Base_Start_IT+0x6c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a19      	ldr	r2, [pc, #100]	; (8004c64 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d115      	bne.n	8004c30 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b06      	cmp	r3, #6
 8004c14:	d015      	beq.n	8004c42 <HAL_TIM_Base_Start_IT+0xaa>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1c:	d011      	beq.n	8004c42 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0201 	orr.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2e:	e008      	b.n	8004c42 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e000      	b.n	8004c44 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40013400 	.word	0x40013400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	00010007 	.word	0x00010007

08004c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d122      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d11b      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0202 	mvn.w	r2, #2
 8004c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fa42 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004cb4:	e005      	b.n	8004cc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fa34 	bl	8005124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fa45 	bl	800514c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d122      	bne.n	8004d1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d11b      	bne.n	8004d1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0204 	mvn.w	r2, #4
 8004cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fa18 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004d08:	e005      	b.n	8004d16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fa0a 	bl	8005124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fa1b 	bl	800514c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d122      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d11b      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0208 	mvn.w	r2, #8
 8004d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2204      	movs	r2, #4
 8004d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f9ee 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004d5c:	e005      	b.n	8004d6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f9e0 	bl	8005124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f9f1 	bl	800514c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b10      	cmp	r3, #16
 8004d7c:	d122      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b10      	cmp	r3, #16
 8004d8a:	d11b      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0210 	mvn.w	r2, #16
 8004d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2208      	movs	r2, #8
 8004d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f9c4 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004db0:	e005      	b.n	8004dbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f9b6 	bl	8005124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f9c7 	bl	800514c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d10e      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d107      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f06f 0201 	mvn.w	r2, #1
 8004de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f990 	bl	8005110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfa:	2b80      	cmp	r3, #128	; 0x80
 8004dfc:	d10e      	bne.n	8004e1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e08:	2b80      	cmp	r3, #128	; 0x80
 8004e0a:	d107      	bne.n	8004e1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fb64 	bl	80054e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2a:	d10e      	bne.n	8004e4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b80      	cmp	r3, #128	; 0x80
 8004e38:	d107      	bne.n	8004e4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fb57 	bl	80054f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e54:	2b40      	cmp	r3, #64	; 0x40
 8004e56:	d10e      	bne.n	8004e76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e62:	2b40      	cmp	r3, #64	; 0x40
 8004e64:	d107      	bne.n	8004e76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f975 	bl	8005160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d10e      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d107      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f06f 0220 	mvn.w	r2, #32
 8004e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fb17 	bl	80054d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb0:	d10f      	bne.n	8004ed2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec0:	d107      	bne.n	8004ed2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fb1d 	bl	800550c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004edc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee0:	d10f      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ef0:	d107      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fb0f 	bl	8005520 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f10:	d10f      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f20:	d107      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fb01 	bl	8005534 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f40:	d10f      	bne.n	8004f62 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f50:	d107      	bne.n	8004f62 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 faf3 	bl	8005548 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_TIM_ConfigClockSource+0x18>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e0b9      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x18c>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004fa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b70      	cmp	r3, #112	; 0x70
 8004fbe:	d02e      	beq.n	800501e <HAL_TIM_ConfigClockSource+0xb2>
 8004fc0:	2b70      	cmp	r3, #112	; 0x70
 8004fc2:	d812      	bhi.n	8004fea <HAL_TIM_ConfigClockSource+0x7e>
 8004fc4:	2b30      	cmp	r3, #48	; 0x30
 8004fc6:	f000 8084 	beq.w	80050d2 <HAL_TIM_ConfigClockSource+0x166>
 8004fca:	2b30      	cmp	r3, #48	; 0x30
 8004fcc:	d806      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x70>
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d07f      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x166>
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d07d      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x166>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d07b      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004fda:	e084      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004fdc:	2b50      	cmp	r3, #80	; 0x50
 8004fde:	d048      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x106>
 8004fe0:	2b60      	cmp	r3, #96	; 0x60
 8004fe2:	d056      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x126>
 8004fe4:	2b40      	cmp	r3, #64	; 0x40
 8004fe6:	d064      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8004fe8:	e07d      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004fea:	4a45      	ldr	r2, [pc, #276]	; (8005100 <HAL_TIM_ConfigClockSource+0x194>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d070      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x166>
 8004ff0:	4a43      	ldr	r2, [pc, #268]	; (8005100 <HAL_TIM_ConfigClockSource+0x194>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d809      	bhi.n	800500a <HAL_TIM_ConfigClockSource+0x9e>
 8004ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffa:	d027      	beq.n	800504c <HAL_TIM_ConfigClockSource+0xe0>
 8004ffc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005000:	d067      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x166>
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005006:	d06d      	beq.n	80050e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005008:	e06d      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800500a:	4a3e      	ldr	r2, [pc, #248]	; (8005104 <HAL_TIM_ConfigClockSource+0x198>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d060      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x166>
 8005010:	4a3d      	ldr	r2, [pc, #244]	; (8005108 <HAL_TIM_ConfigClockSource+0x19c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d05d      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x166>
 8005016:	4a3d      	ldr	r2, [pc, #244]	; (800510c <HAL_TIM_ConfigClockSource+0x1a0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d05a      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x166>
      break;
 800501c:	e063      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6899      	ldr	r1, [r3, #8]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f000 f9ad 	bl	800538c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005040:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	609a      	str	r2, [r3, #8]
      break;
 800504a:	e04c      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	6899      	ldr	r1, [r3, #8]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f000 f996 	bl	800538c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800506e:	609a      	str	r2, [r3, #8]
      break;
 8005070:	e039      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6859      	ldr	r1, [r3, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	461a      	mov	r2, r3
 8005080:	f000 f908 	bl	8005294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2150      	movs	r1, #80	; 0x50
 800508a:	4618      	mov	r0, r3
 800508c:	f000 f961 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 8005090:	e029      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6859      	ldr	r1, [r3, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	461a      	mov	r2, r3
 80050a0:	f000 f927 	bl	80052f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2160      	movs	r1, #96	; 0x60
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f951 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 80050b0:	e019      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6859      	ldr	r1, [r3, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	461a      	mov	r2, r3
 80050c0:	f000 f8e8 	bl	8005294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2140      	movs	r1, #64	; 0x40
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f941 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 80050d0:	e009      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f000 f938 	bl	8005352 <TIM_ITRx_SetConfig>
        break;
 80050e2:	e000      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80050e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	00100020 	.word	0x00100020
 8005104:	00100040 	.word	0x00100040
 8005108:	00100070 	.word	0x00100070
 800510c:	00100030 	.word	0x00100030

08005110 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a3c      	ldr	r2, [pc, #240]	; (8005278 <TIM_Base_SetConfig+0x104>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00f      	beq.n	80051ac <TIM_Base_SetConfig+0x38>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005192:	d00b      	beq.n	80051ac <TIM_Base_SetConfig+0x38>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a39      	ldr	r2, [pc, #228]	; (800527c <TIM_Base_SetConfig+0x108>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d007      	beq.n	80051ac <TIM_Base_SetConfig+0x38>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a38      	ldr	r2, [pc, #224]	; (8005280 <TIM_Base_SetConfig+0x10c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d003      	beq.n	80051ac <TIM_Base_SetConfig+0x38>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a37      	ldr	r2, [pc, #220]	; (8005284 <TIM_Base_SetConfig+0x110>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a2d      	ldr	r2, [pc, #180]	; (8005278 <TIM_Base_SetConfig+0x104>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d01b      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d017      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a2a      	ldr	r2, [pc, #168]	; (800527c <TIM_Base_SetConfig+0x108>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a29      	ldr	r2, [pc, #164]	; (8005280 <TIM_Base_SetConfig+0x10c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00f      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a28      	ldr	r2, [pc, #160]	; (8005284 <TIM_Base_SetConfig+0x110>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00b      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a27      	ldr	r2, [pc, #156]	; (8005288 <TIM_Base_SetConfig+0x114>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d007      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a26      	ldr	r2, [pc, #152]	; (800528c <TIM_Base_SetConfig+0x118>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a25      	ldr	r2, [pc, #148]	; (8005290 <TIM_Base_SetConfig+0x11c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d108      	bne.n	8005210 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a10      	ldr	r2, [pc, #64]	; (8005278 <TIM_Base_SetConfig+0x104>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00f      	beq.n	800525c <TIM_Base_SetConfig+0xe8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a11      	ldr	r2, [pc, #68]	; (8005284 <TIM_Base_SetConfig+0x110>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00b      	beq.n	800525c <TIM_Base_SetConfig+0xe8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a10      	ldr	r2, [pc, #64]	; (8005288 <TIM_Base_SetConfig+0x114>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d007      	beq.n	800525c <TIM_Base_SetConfig+0xe8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a0f      	ldr	r2, [pc, #60]	; (800528c <TIM_Base_SetConfig+0x118>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_Base_SetConfig+0xe8>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a0e      	ldr	r2, [pc, #56]	; (8005290 <TIM_Base_SetConfig+0x11c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d103      	bne.n	8005264 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	615a      	str	r2, [r3, #20]
}
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40000400 	.word	0x40000400
 8005280:	40000800 	.word	0x40000800
 8005284:	40013400 	.word	0x40013400
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400
 8005290:	40014800 	.word	0x40014800

08005294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f023 030a 	bic.w	r3, r3, #10
 80052d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b087      	sub	sp, #28
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f023 0210 	bic.w	r2, r3, #16
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800531c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	031b      	lsls	r3, r3, #12
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800532e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	f043 0307 	orr.w	r3, r3, #7
 8005378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	609a      	str	r2, [r3, #8]
}
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	021a      	lsls	r2, r3, #8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	609a      	str	r2, [r3, #8]
}
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e065      	b.n	80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a2c      	ldr	r2, [pc, #176]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2b      	ldr	r2, [pc, #172]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d108      	bne.n	800542a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800541e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005434:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1b      	ldr	r2, [pc, #108]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d018      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d013      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00e      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d009      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a12      	ldr	r2, [pc, #72]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a13      	ldr	r2, [pc, #76]	; (80054cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d10c      	bne.n	800549e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800548a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	4313      	orrs	r3, r2
 8005494:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	40012c00 	.word	0x40012c00
 80054c0:	40013400 	.word	0x40013400
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40014000 	.word	0x40014000

080054d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e042      	b.n	80055f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005574:	2b00      	cmp	r3, #0
 8005576:	d106      	bne.n	8005586 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7fb fb09 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2224      	movs	r2, #36	; 0x24
 800558a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fb38 	bl	8005c14 <UART_SetConfig>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e022      	b.n	80055f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fdd4 	bl	8006164 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fe5b 	bl	80062a8 <UART_CheckIdleState>
 80055f2:	4603      	mov	r3, r0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af02      	add	r7, sp, #8
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	4613      	mov	r3, r2
 800560a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005612:	2b20      	cmp	r3, #32
 8005614:	f040 8083 	bne.w	800571e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_UART_Transmit+0x28>
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e07b      	b.n	8005720 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_UART_Transmit+0x3a>
 8005632:	2302      	movs	r3, #2
 8005634:	e074      	b.n	8005720 <HAL_UART_Transmit+0x124>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2221      	movs	r2, #33	; 0x21
 800564a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800564e:	f7fc ffe7 	bl	8002620 <HAL_GetTick>
 8005652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	88fa      	ldrh	r2, [r7, #6]
 8005660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566c:	d108      	bne.n	8005680 <HAL_UART_Transmit+0x84>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d104      	bne.n	8005680 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	e003      	b.n	8005688 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005684:	2300      	movs	r3, #0
 8005686:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005690:	e02c      	b.n	80056ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2200      	movs	r2, #0
 800569a:	2180      	movs	r1, #128	; 0x80
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 fe4b 	bl	8006338 <UART_WaitOnFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e039      	b.n	8005720 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10b      	bne.n	80056ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	3302      	adds	r3, #2
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	e007      	b.n	80056da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	781a      	ldrb	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	3301      	adds	r3, #1
 80056d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1cc      	bne.n	8005692 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2200      	movs	r2, #0
 8005700:	2140      	movs	r1, #64	; 0x40
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fe18 	bl	8006338 <UART_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e006      	b.n	8005720 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	e000      	b.n	8005720 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800571e:	2302      	movs	r3, #2
  }
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	4613      	mov	r3, r2
 8005734:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800573c:	2b20      	cmp	r3, #32
 800573e:	f040 80bc 	bne.w	80058ba <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <HAL_UART_Receive_IT+0x26>
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e0b4      	b.n	80058bc <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_UART_Receive_IT+0x38>
 800575c:	2302      	movs	r3, #2
 800575e:	e0ad      	b.n	80058bc <HAL_UART_Receive_IT+0x194>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	88fa      	ldrh	r2, [r7, #6]
 8005772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	88fa      	ldrh	r2, [r7, #6]
 800577a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578c:	d10e      	bne.n	80057ac <HAL_UART_Receive_IT+0x84>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d105      	bne.n	80057a2 <HAL_UART_Receive_IT+0x7a>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f240 12ff 	movw	r2, #511	; 0x1ff
 800579c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057a0:	e02d      	b.n	80057fe <HAL_UART_Receive_IT+0xd6>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	22ff      	movs	r2, #255	; 0xff
 80057a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057aa:	e028      	b.n	80057fe <HAL_UART_Receive_IT+0xd6>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10d      	bne.n	80057d0 <HAL_UART_Receive_IT+0xa8>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <HAL_UART_Receive_IT+0x9e>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	22ff      	movs	r2, #255	; 0xff
 80057c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057c4:	e01b      	b.n	80057fe <HAL_UART_Receive_IT+0xd6>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	227f      	movs	r2, #127	; 0x7f
 80057ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057ce:	e016      	b.n	80057fe <HAL_UART_Receive_IT+0xd6>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057d8:	d10d      	bne.n	80057f6 <HAL_UART_Receive_IT+0xce>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <HAL_UART_Receive_IT+0xc4>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	227f      	movs	r2, #127	; 0x7f
 80057e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057ea:	e008      	b.n	80057fe <HAL_UART_Receive_IT+0xd6>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	223f      	movs	r2, #63	; 0x3f
 80057f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057f4:	e003      	b.n	80057fe <HAL_UART_Receive_IT+0xd6>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2222      	movs	r2, #34	; 0x22
 800580a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005826:	d12a      	bne.n	800587e <HAL_UART_Receive_IT+0x156>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800582e:	88fa      	ldrh	r2, [r7, #6]
 8005830:	429a      	cmp	r2, r3
 8005832:	d324      	bcc.n	800587e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583c:	d107      	bne.n	800584e <HAL_UART_Receive_IT+0x126>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <HAL_UART_Receive_IT+0x1a0>)
 800584a:	66da      	str	r2, [r3, #108]	; 0x6c
 800584c:	e002      	b.n	8005854 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <HAL_UART_Receive_IT+0x1a4>)
 8005852:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800586a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800587a:	609a      	str	r2, [r3, #8]
 800587c:	e01b      	b.n	80058b6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005886:	d107      	bne.n	8005898 <HAL_UART_Receive_IT+0x170>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d103      	bne.n	8005898 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4a0f      	ldr	r2, [pc, #60]	; (80058d0 <HAL_UART_Receive_IT+0x1a8>)
 8005894:	66da      	str	r2, [r3, #108]	; 0x6c
 8005896:	e002      	b.n	800589e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4a0e      	ldr	r2, [pc, #56]	; (80058d4 <HAL_UART_Receive_IT+0x1ac>)
 800589c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80058b4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e000      	b.n	80058bc <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80058ba:	2302      	movs	r3, #2
  }
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	0800673d 	.word	0x0800673d
 80058cc:	08006635 	.word	0x08006635
 80058d0:	08006589 	.word	0x08006589
 80058d4:	080064df 	.word	0x080064df

080058d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d118      	bne.n	800593a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d013      	beq.n	800593a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 8145 	beq.w	8005bba <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	4798      	blx	r3
      }
      return;
 8005938:	e13f      	b.n	8005bba <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80e8 	beq.w	8005b12 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4ba1      	ldr	r3, [pc, #644]	; (8005bcc <HAL_UART_IRQHandler+0x2f4>)
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d105      	bne.n	8005958 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4ba0      	ldr	r3, [pc, #640]	; (8005bd0 <HAL_UART_IRQHandler+0x2f8>)
 8005950:	4013      	ands	r3, r2
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 80dd 	beq.w	8005b12 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d010      	beq.n	8005984 <HAL_UART_IRQHandler+0xac>
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597a:	f043 0201 	orr.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d010      	beq.n	80059b0 <HAL_UART_IRQHandler+0xd8>
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2202      	movs	r2, #2
 800599e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a6:	f043 0204 	orr.w	r2, r3, #4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d010      	beq.n	80059dc <HAL_UART_IRQHandler+0x104>
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00b      	beq.n	80059dc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2204      	movs	r2, #4
 80059ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d2:	f043 0202 	orr.w	r2, r3, #2
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d015      	beq.n	8005a12 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4b76      	ldr	r3, [pc, #472]	; (8005bcc <HAL_UART_IRQHandler+0x2f4>)
 80059f4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2208      	movs	r2, #8
 8005a00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a08:	f043 0208 	orr.w	r2, r3, #8
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d011      	beq.n	8005a40 <HAL_UART_IRQHandler+0x168>
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a36:	f043 0220 	orr.w	r2, r3, #32
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80b9 	beq.w	8005bbe <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d011      	beq.n	8005a7a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d104      	bne.n	8005a6a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d007      	beq.n	8005a7a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a80:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b40      	cmp	r3, #64	; 0x40
 8005a8e:	d004      	beq.n	8005a9a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d031      	beq.n	8005afe <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fccc 	bl	8006438 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aaa:	2b40      	cmp	r3, #64	; 0x40
 8005aac:	d123      	bne.n	8005af6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005abc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d013      	beq.n	8005aee <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aca:	4a42      	ldr	r2, [pc, #264]	; (8005bd4 <HAL_UART_IRQHandler+0x2fc>)
 8005acc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fc fed7 	bl	8002886 <HAL_DMA_Abort_IT>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d017      	beq.n	8005b0e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	e00f      	b.n	8005b0e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f886 	bl	8005c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af4:	e00b      	b.n	8005b0e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f882 	bl	8005c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	e007      	b.n	8005b0e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f87e 	bl	8005c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005b0c:	e057      	b.n	8005bbe <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0e:	bf00      	nop
    return;
 8005b10:	e055      	b.n	8005bbe <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00d      	beq.n	8005b38 <HAL_UART_IRQHandler+0x260>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d008      	beq.n	8005b38 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fe87 	bl	8006844 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b36:	e045      	b.n	8005bc4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d012      	beq.n	8005b68 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d104      	bne.n	8005b56 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d008      	beq.n	8005b68 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d031      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	4798      	blx	r3
    }
    return;
 8005b66:	e02c      	b.n	8005bc2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <HAL_UART_IRQHandler+0x2ac>
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fc94 	bl	80064aa <UART_EndTransmit_IT>
    return;
 8005b82:	e01f      	b.n	8005bc4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d008      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x2c8>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fe67 	bl	800686c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b9e:	e011      	b.n	8005bc4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00c      	beq.n	8005bc4 <HAL_UART_IRQHandler+0x2ec>
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	da09      	bge.n	8005bc4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fe51 	bl	8006858 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bb6:	bf00      	nop
 8005bb8:	e004      	b.n	8005bc4 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005bba:	bf00      	nop
 8005bbc:	e002      	b.n	8005bc4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005bc2:	bf00      	nop
  }
}
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	10000001 	.word	0x10000001
 8005bd0:	04000120 	.word	0x04000120
 8005bd4:	0800647f 	.word	0x0800647f

08005bd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c14:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005c18:	b088      	sub	sp, #32
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4bb0      	ldr	r3, [pc, #704]	; (8005f0c <UART_SetConfig+0x2f8>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	69f9      	ldr	r1, [r7, #28]
 8005c54:	430b      	orrs	r3, r1
 8005c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4aa5      	ldr	r2, [pc, #660]	; (8005f10 <UART_SetConfig+0x2fc>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6812      	ldr	r2, [r2, #0]
 8005c9a:	69f9      	ldr	r1, [r7, #28]
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	f023 010f 	bic.w	r1, r3, #15
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a96      	ldr	r2, [pc, #600]	; (8005f14 <UART_SetConfig+0x300>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d121      	bne.n	8005d04 <UART_SetConfig+0xf0>
 8005cc0:	4b95      	ldr	r3, [pc, #596]	; (8005f18 <UART_SetConfig+0x304>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d816      	bhi.n	8005cfc <UART_SetConfig+0xe8>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <UART_SetConfig+0xc0>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005cf1 	.word	0x08005cf1
 8005cdc:	08005ceb 	.word	0x08005ceb
 8005ce0:	08005cf7 	.word	0x08005cf7
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	76fb      	strb	r3, [r7, #27]
 8005ce8:	e0be      	b.n	8005e68 <UART_SetConfig+0x254>
 8005cea:	2302      	movs	r3, #2
 8005cec:	76fb      	strb	r3, [r7, #27]
 8005cee:	e0bb      	b.n	8005e68 <UART_SetConfig+0x254>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	76fb      	strb	r3, [r7, #27]
 8005cf4:	e0b8      	b.n	8005e68 <UART_SetConfig+0x254>
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	76fb      	strb	r3, [r7, #27]
 8005cfa:	e0b5      	b.n	8005e68 <UART_SetConfig+0x254>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	76fb      	strb	r3, [r7, #27]
 8005d00:	bf00      	nop
 8005d02:	e0b1      	b.n	8005e68 <UART_SetConfig+0x254>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a84      	ldr	r2, [pc, #528]	; (8005f1c <UART_SetConfig+0x308>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d134      	bne.n	8005d78 <UART_SetConfig+0x164>
 8005d0e:	4b82      	ldr	r3, [pc, #520]	; (8005f18 <UART_SetConfig+0x304>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f003 030c 	and.w	r3, r3, #12
 8005d18:	2b0c      	cmp	r3, #12
 8005d1a:	d829      	bhi.n	8005d70 <UART_SetConfig+0x15c>
 8005d1c:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <UART_SetConfig+0x110>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d59 	.word	0x08005d59
 8005d28:	08005d71 	.word	0x08005d71
 8005d2c:	08005d71 	.word	0x08005d71
 8005d30:	08005d71 	.word	0x08005d71
 8005d34:	08005d65 	.word	0x08005d65
 8005d38:	08005d71 	.word	0x08005d71
 8005d3c:	08005d71 	.word	0x08005d71
 8005d40:	08005d71 	.word	0x08005d71
 8005d44:	08005d5f 	.word	0x08005d5f
 8005d48:	08005d71 	.word	0x08005d71
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d71 	.word	0x08005d71
 8005d54:	08005d6b 	.word	0x08005d6b
 8005d58:	2300      	movs	r3, #0
 8005d5a:	76fb      	strb	r3, [r7, #27]
 8005d5c:	e084      	b.n	8005e68 <UART_SetConfig+0x254>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	76fb      	strb	r3, [r7, #27]
 8005d62:	e081      	b.n	8005e68 <UART_SetConfig+0x254>
 8005d64:	2304      	movs	r3, #4
 8005d66:	76fb      	strb	r3, [r7, #27]
 8005d68:	e07e      	b.n	8005e68 <UART_SetConfig+0x254>
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	76fb      	strb	r3, [r7, #27]
 8005d6e:	e07b      	b.n	8005e68 <UART_SetConfig+0x254>
 8005d70:	2310      	movs	r3, #16
 8005d72:	76fb      	strb	r3, [r7, #27]
 8005d74:	bf00      	nop
 8005d76:	e077      	b.n	8005e68 <UART_SetConfig+0x254>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a68      	ldr	r2, [pc, #416]	; (8005f20 <UART_SetConfig+0x30c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d120      	bne.n	8005dc4 <UART_SetConfig+0x1b0>
 8005d82:	4b65      	ldr	r3, [pc, #404]	; (8005f18 <UART_SetConfig+0x304>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d00f      	beq.n	8005db0 <UART_SetConfig+0x19c>
 8005d90:	2b10      	cmp	r3, #16
 8005d92:	d802      	bhi.n	8005d9a <UART_SetConfig+0x186>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <UART_SetConfig+0x190>
 8005d98:	e010      	b.n	8005dbc <UART_SetConfig+0x1a8>
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	d005      	beq.n	8005daa <UART_SetConfig+0x196>
 8005d9e:	2b30      	cmp	r3, #48	; 0x30
 8005da0:	d009      	beq.n	8005db6 <UART_SetConfig+0x1a2>
 8005da2:	e00b      	b.n	8005dbc <UART_SetConfig+0x1a8>
 8005da4:	2300      	movs	r3, #0
 8005da6:	76fb      	strb	r3, [r7, #27]
 8005da8:	e05e      	b.n	8005e68 <UART_SetConfig+0x254>
 8005daa:	2302      	movs	r3, #2
 8005dac:	76fb      	strb	r3, [r7, #27]
 8005dae:	e05b      	b.n	8005e68 <UART_SetConfig+0x254>
 8005db0:	2304      	movs	r3, #4
 8005db2:	76fb      	strb	r3, [r7, #27]
 8005db4:	e058      	b.n	8005e68 <UART_SetConfig+0x254>
 8005db6:	2308      	movs	r3, #8
 8005db8:	76fb      	strb	r3, [r7, #27]
 8005dba:	e055      	b.n	8005e68 <UART_SetConfig+0x254>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	76fb      	strb	r3, [r7, #27]
 8005dc0:	bf00      	nop
 8005dc2:	e051      	b.n	8005e68 <UART_SetConfig+0x254>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a56      	ldr	r2, [pc, #344]	; (8005f24 <UART_SetConfig+0x310>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d120      	bne.n	8005e10 <UART_SetConfig+0x1fc>
 8005dce:	4b52      	ldr	r3, [pc, #328]	; (8005f18 <UART_SetConfig+0x304>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dd8:	2b40      	cmp	r3, #64	; 0x40
 8005dda:	d00f      	beq.n	8005dfc <UART_SetConfig+0x1e8>
 8005ddc:	2b40      	cmp	r3, #64	; 0x40
 8005dde:	d802      	bhi.n	8005de6 <UART_SetConfig+0x1d2>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <UART_SetConfig+0x1dc>
 8005de4:	e010      	b.n	8005e08 <UART_SetConfig+0x1f4>
 8005de6:	2b80      	cmp	r3, #128	; 0x80
 8005de8:	d005      	beq.n	8005df6 <UART_SetConfig+0x1e2>
 8005dea:	2bc0      	cmp	r3, #192	; 0xc0
 8005dec:	d009      	beq.n	8005e02 <UART_SetConfig+0x1ee>
 8005dee:	e00b      	b.n	8005e08 <UART_SetConfig+0x1f4>
 8005df0:	2300      	movs	r3, #0
 8005df2:	76fb      	strb	r3, [r7, #27]
 8005df4:	e038      	b.n	8005e68 <UART_SetConfig+0x254>
 8005df6:	2302      	movs	r3, #2
 8005df8:	76fb      	strb	r3, [r7, #27]
 8005dfa:	e035      	b.n	8005e68 <UART_SetConfig+0x254>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	76fb      	strb	r3, [r7, #27]
 8005e00:	e032      	b.n	8005e68 <UART_SetConfig+0x254>
 8005e02:	2308      	movs	r3, #8
 8005e04:	76fb      	strb	r3, [r7, #27]
 8005e06:	e02f      	b.n	8005e68 <UART_SetConfig+0x254>
 8005e08:	2310      	movs	r3, #16
 8005e0a:	76fb      	strb	r3, [r7, #27]
 8005e0c:	bf00      	nop
 8005e0e:	e02b      	b.n	8005e68 <UART_SetConfig+0x254>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a3e      	ldr	r2, [pc, #248]	; (8005f10 <UART_SetConfig+0x2fc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d124      	bne.n	8005e64 <UART_SetConfig+0x250>
 8005e1a:	4b3f      	ldr	r3, [pc, #252]	; (8005f18 <UART_SetConfig+0x304>)
 8005e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e28:	d012      	beq.n	8005e50 <UART_SetConfig+0x23c>
 8005e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2e:	d802      	bhi.n	8005e36 <UART_SetConfig+0x222>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <UART_SetConfig+0x230>
 8005e34:	e012      	b.n	8005e5c <UART_SetConfig+0x248>
 8005e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e3a:	d006      	beq.n	8005e4a <UART_SetConfig+0x236>
 8005e3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e40:	d009      	beq.n	8005e56 <UART_SetConfig+0x242>
 8005e42:	e00b      	b.n	8005e5c <UART_SetConfig+0x248>
 8005e44:	2300      	movs	r3, #0
 8005e46:	76fb      	strb	r3, [r7, #27]
 8005e48:	e00e      	b.n	8005e68 <UART_SetConfig+0x254>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	76fb      	strb	r3, [r7, #27]
 8005e4e:	e00b      	b.n	8005e68 <UART_SetConfig+0x254>
 8005e50:	2304      	movs	r3, #4
 8005e52:	76fb      	strb	r3, [r7, #27]
 8005e54:	e008      	b.n	8005e68 <UART_SetConfig+0x254>
 8005e56:	2308      	movs	r3, #8
 8005e58:	76fb      	strb	r3, [r7, #27]
 8005e5a:	e005      	b.n	8005e68 <UART_SetConfig+0x254>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	76fb      	strb	r3, [r7, #27]
 8005e60:	bf00      	nop
 8005e62:	e001      	b.n	8005e68 <UART_SetConfig+0x254>
 8005e64:	2310      	movs	r3, #16
 8005e66:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a28      	ldr	r2, [pc, #160]	; (8005f10 <UART_SetConfig+0x2fc>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	f040 80a1 	bne.w	8005fb6 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e74:	7efb      	ldrb	r3, [r7, #27]
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d823      	bhi.n	8005ec2 <UART_SetConfig+0x2ae>
 8005e7a:	a201      	add	r2, pc, #4	; (adr r2, 8005e80 <UART_SetConfig+0x26c>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ec3 	.word	0x08005ec3
 8005e88:	08005ead 	.word	0x08005ead
 8005e8c:	08005ec3 	.word	0x08005ec3
 8005e90:	08005eb3 	.word	0x08005eb3
 8005e94:	08005ec3 	.word	0x08005ec3
 8005e98:	08005ec3 	.word	0x08005ec3
 8005e9c:	08005ec3 	.word	0x08005ec3
 8005ea0:	08005ebb 	.word	0x08005ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ea4:	f7fe fbbe 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8005ea8:	6178      	str	r0, [r7, #20]
        break;
 8005eaa:	e00f      	b.n	8005ecc <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eac:	4b1e      	ldr	r3, [pc, #120]	; (8005f28 <UART_SetConfig+0x314>)
 8005eae:	617b      	str	r3, [r7, #20]
        break;
 8005eb0:	e00c      	b.n	8005ecc <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eb2:	f7fe fb49 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 8005eb6:	6178      	str	r0, [r7, #20]
        break;
 8005eb8:	e008      	b.n	8005ecc <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ebe:	617b      	str	r3, [r7, #20]
        break;
 8005ec0:	e004      	b.n	8005ecc <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	76bb      	strb	r3, [r7, #26]
        break;
 8005eca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 8130 	beq.w	8006134 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	4a14      	ldr	r2, [pc, #80]	; (8005f2c <UART_SetConfig+0x318>)
 8005eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	4613      	mov	r3, r2
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	4413      	add	r3, r2
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d305      	bcc.n	8005f04 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d915      	bls.n	8005f30 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	76bb      	strb	r3, [r7, #26]
 8005f08:	e114      	b.n	8006134 <UART_SetConfig+0x520>
 8005f0a:	bf00      	nop
 8005f0c:	cfff69f3 	.word	0xcfff69f3
 8005f10:	40008000 	.word	0x40008000
 8005f14:	40013800 	.word	0x40013800
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	40004400 	.word	0x40004400
 8005f20:	40004800 	.word	0x40004800
 8005f24:	40004c00 	.word	0x40004c00
 8005f28:	00f42400 	.word	0x00f42400
 8005f2c:	08006e3c 	.word	0x08006e3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f04f 0100 	mov.w	r1, #0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	4a87      	ldr	r2, [pc, #540]	; (800615c <UART_SetConfig+0x548>)
 8005f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f04f 0400 	mov.w	r4, #0
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	f7fa f96e 	bl	800022c <__aeabi_uldivmod>
 8005f50:	4603      	mov	r3, r0
 8005f52:	460c      	mov	r4, r1
 8005f54:	4619      	mov	r1, r3
 8005f56:	4622      	mov	r2, r4
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	f04f 0400 	mov.w	r4, #0
 8005f60:	0214      	lsls	r4, r2, #8
 8005f62:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f66:	020b      	lsls	r3, r1, #8
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6852      	ldr	r2, [r2, #4]
 8005f6c:	0852      	lsrs	r2, r2, #1
 8005f6e:	4611      	mov	r1, r2
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	eb13 0b01 	adds.w	fp, r3, r1
 8005f78:	eb44 0c02 	adc.w	ip, r4, r2
 8005f7c:	4658      	mov	r0, fp
 8005f7e:	4661      	mov	r1, ip
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f04f 0400 	mov.w	r4, #0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4623      	mov	r3, r4
 8005f8c:	f7fa f94e 	bl	800022c <__aeabi_uldivmod>
 8005f90:	4603      	mov	r3, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f9c:	d308      	bcc.n	8005fb0 <UART_SetConfig+0x39c>
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa4:	d204      	bcs.n	8005fb0 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	60da      	str	r2, [r3, #12]
 8005fae:	e0c1      	b.n	8006134 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	76bb      	strb	r3, [r7, #26]
 8005fb4:	e0be      	b.n	8006134 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fbe:	d164      	bne.n	800608a <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8005fc0:	7efb      	ldrb	r3, [r7, #27]
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d827      	bhi.n	8006016 <UART_SetConfig+0x402>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <UART_SetConfig+0x3b8>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08005ff1 	.word	0x08005ff1
 8005fd0:	08005ff9 	.word	0x08005ff9
 8005fd4:	08006001 	.word	0x08006001
 8005fd8:	08006017 	.word	0x08006017
 8005fdc:	08006007 	.word	0x08006007
 8005fe0:	08006017 	.word	0x08006017
 8005fe4:	08006017 	.word	0x08006017
 8005fe8:	08006017 	.word	0x08006017
 8005fec:	0800600f 	.word	0x0800600f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff0:	f7fe fb18 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8005ff4:	6178      	str	r0, [r7, #20]
        break;
 8005ff6:	e013      	b.n	8006020 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff8:	f7fe fb2a 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 8005ffc:	6178      	str	r0, [r7, #20]
        break;
 8005ffe:	e00f      	b.n	8006020 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006000:	4b57      	ldr	r3, [pc, #348]	; (8006160 <UART_SetConfig+0x54c>)
 8006002:	617b      	str	r3, [r7, #20]
        break;
 8006004:	e00c      	b.n	8006020 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006006:	f7fe fa9f 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 800600a:	6178      	str	r0, [r7, #20]
        break;
 800600c:	e008      	b.n	8006020 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006012:	617b      	str	r3, [r7, #20]
        break;
 8006014:	e004      	b.n	8006020 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	76bb      	strb	r3, [r7, #26]
        break;
 800601e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 8086 	beq.w	8006134 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	4a4b      	ldr	r2, [pc, #300]	; (800615c <UART_SetConfig+0x548>)
 800602e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006032:	461a      	mov	r2, r3
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	fbb3 f3f2 	udiv	r3, r3, r2
 800603a:	005a      	lsls	r2, r3, #1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	085b      	lsrs	r3, r3, #1
 8006042:	441a      	add	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	fbb2 f3f3 	udiv	r3, r2, r3
 800604c:	b29b      	uxth	r3, r3
 800604e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b0f      	cmp	r3, #15
 8006054:	d916      	bls.n	8006084 <UART_SetConfig+0x470>
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605c:	d212      	bcs.n	8006084 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	b29b      	uxth	r3, r3
 8006062:	f023 030f 	bic.w	r3, r3, #15
 8006066:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	085b      	lsrs	r3, r3, #1
 800606c:	b29b      	uxth	r3, r3
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	b29a      	uxth	r2, r3
 8006074:	89fb      	ldrh	r3, [r7, #14]
 8006076:	4313      	orrs	r3, r2
 8006078:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	89fa      	ldrh	r2, [r7, #14]
 8006080:	60da      	str	r2, [r3, #12]
 8006082:	e057      	b.n	8006134 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	76bb      	strb	r3, [r7, #26]
 8006088:	e054      	b.n	8006134 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 800608a:	7efb      	ldrb	r3, [r7, #27]
 800608c:	2b08      	cmp	r3, #8
 800608e:	d828      	bhi.n	80060e2 <UART_SetConfig+0x4ce>
 8006090:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <UART_SetConfig+0x484>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	080060e3 	.word	0x080060e3
 80060a8:	080060d3 	.word	0x080060d3
 80060ac:	080060e3 	.word	0x080060e3
 80060b0:	080060e3 	.word	0x080060e3
 80060b4:	080060e3 	.word	0x080060e3
 80060b8:	080060db 	.word	0x080060db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7fe fab2 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 80060c0:	6178      	str	r0, [r7, #20]
        break;
 80060c2:	e013      	b.n	80060ec <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c4:	f7fe fac4 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 80060c8:	6178      	str	r0, [r7, #20]
        break;
 80060ca:	e00f      	b.n	80060ec <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060cc:	4b24      	ldr	r3, [pc, #144]	; (8006160 <UART_SetConfig+0x54c>)
 80060ce:	617b      	str	r3, [r7, #20]
        break;
 80060d0:	e00c      	b.n	80060ec <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d2:	f7fe fa39 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 80060d6:	6178      	str	r0, [r7, #20]
        break;
 80060d8:	e008      	b.n	80060ec <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060de:	617b      	str	r3, [r7, #20]
        break;
 80060e0:	e004      	b.n	80060ec <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	76bb      	strb	r3, [r7, #26]
        break;
 80060ea:	bf00      	nop
    }

    if (pclk != 0U)
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d020      	beq.n	8006134 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	4a19      	ldr	r2, [pc, #100]	; (800615c <UART_SetConfig+0x548>)
 80060f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060fc:	461a      	mov	r2, r3
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	fbb3 f2f2 	udiv	r2, r3, r2
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	441a      	add	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	fbb2 f3f3 	udiv	r3, r2, r3
 8006114:	b29b      	uxth	r3, r3
 8006116:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	2b0f      	cmp	r3, #15
 800611c:	d908      	bls.n	8006130 <UART_SetConfig+0x51c>
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006124:	d204      	bcs.n	8006130 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	60da      	str	r2, [r3, #12]
 800612e:	e001      	b.n	8006134 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006150:	7ebb      	ldrb	r3, [r7, #26]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3720      	adds	r7, #32
 8006156:	46bd      	mov	sp, r7
 8006158:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800615c:	08006e3c 	.word	0x08006e3c
 8006160:	00f42400 	.word	0x00f42400

08006164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01a      	beq.n	800627a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006262:	d10a      	bne.n	800627a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	605a      	str	r2, [r3, #4]
  }
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062b8:	f7fc f9b2 	bl	8002620 <HAL_GetTick>
 80062bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d10e      	bne.n	80062ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f82c 	bl	8006338 <UART_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e022      	b.n	8006330 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d10e      	bne.n	8006316 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f816 	bl	8006338 <UART_WaitOnFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e00c      	b.n	8006330 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	4613      	mov	r3, r2
 8006346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006348:	e062      	b.n	8006410 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006350:	d05e      	beq.n	8006410 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006352:	f7fc f965 	bl	8002620 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	429a      	cmp	r2, r3
 8006360:	d302      	bcc.n	8006368 <UART_WaitOnFlagUntilTimeout+0x30>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d11d      	bne.n	80063a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006376:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0201 	bic.w	r2, r2, #1
 8006386:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2220      	movs	r2, #32
 8006394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e045      	b.n	8006430 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d02e      	beq.n	8006410 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c0:	d126      	bne.n	8006410 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063da:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0201 	bic.w	r2, r2, #1
 80063ea:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e00f      	b.n	8006430 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69da      	ldr	r2, [r3, #28]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	4013      	ands	r3, r2
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	429a      	cmp	r2, r3
 800641e:	bf0c      	ite	eq
 8006420:	2301      	moveq	r3, #1
 8006422:	2300      	movne	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	429a      	cmp	r2, r3
 800642c:	d08d      	beq.n	800634a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800644e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800645e:	f023 0301 	bic.w	r3, r3, #1
 8006462:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f7ff fbaf 	bl	8005c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fb81 	bl	8005bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064d6:	bf00      	nop
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064ec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f4:	2b22      	cmp	r3, #34	; 0x22
 80064f6:	d13b      	bne.n	8006570 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006500:	89bb      	ldrh	r3, [r7, #12]
 8006502:	b2d9      	uxtb	r1, r3
 8006504:	89fb      	ldrh	r3, [r7, #14]
 8006506:	b2da      	uxtb	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650c:	400a      	ands	r2, r1
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d122      	bne.n	8006580 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006548:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0201 	bic.w	r2, r2, #1
 8006558:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff fb3f 	bl	8005bec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800656e:	e007      	b.n	8006580 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0208 	orr.w	r2, r2, #8
 800657e:	619a      	str	r2, [r3, #24]
}
 8006580:	bf00      	nop
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006596:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800659e:	2b22      	cmp	r3, #34	; 0x22
 80065a0:	d13b      	bne.n	800661a <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ae:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80065b0:	89ba      	ldrh	r2, [r7, #12]
 80065b2:	89fb      	ldrh	r3, [r7, #14]
 80065b4:	4013      	ands	r3, r2
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c0:	1c9a      	adds	r2, r3, #2
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d122      	bne.n	800662a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065f2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff faea 	bl	8005bec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006618:	e007      	b.n	800662a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	699a      	ldr	r2, [r3, #24]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0208 	orr.w	r2, r2, #8
 8006628:	619a      	str	r2, [r3, #24]
}
 800662a:	bf00      	nop
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006642:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800664a:	2b22      	cmp	r3, #34	; 0x22
 800664c:	d168      	bne.n	8006720 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006654:	81fb      	strh	r3, [r7, #14]
 8006656:	e03f      	b.n	80066d8 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006660:	893b      	ldrh	r3, [r7, #8]
 8006662:	b2d9      	uxtb	r1, r3
 8006664:	89bb      	ldrh	r3, [r7, #12]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666c:	400a      	ands	r2, r1
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006682:	b29b      	uxth	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006694:	b29b      	uxth	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d11b      	bne.n	80066d2 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066a8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6812      	ldr	r2, [r2, #0]
 80066b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff fa8d 	bl	8005bec <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80066d2:	89fb      	ldrh	r3, [r7, #14]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	81fb      	strh	r3, [r7, #14]
 80066d8:	89fb      	ldrh	r3, [r7, #14]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1bc      	bne.n	8006658 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066e4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80066e6:	897b      	ldrh	r3, [r7, #10]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d021      	beq.n	8006730 <UART_RxISR_8BIT_FIFOEN+0xfc>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066f2:	897a      	ldrh	r2, [r7, #10]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d21b      	bcs.n	8006730 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006706:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a0b      	ldr	r2, [pc, #44]	; (8006738 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800670c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0220 	orr.w	r2, r2, #32
 800671c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800671e:	e007      	b.n	8006730 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0208 	orr.w	r2, r2, #8
 800672e:	619a      	str	r2, [r3, #24]
}
 8006730:	bf00      	nop
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	080064df 	.word	0x080064df

0800673c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800674a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006752:	2b22      	cmp	r3, #34	; 0x22
 8006754:	d168      	bne.n	8006828 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800675c:	82fb      	strh	r3, [r7, #22]
 800675e:	e03f      	b.n	80067e0 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800676e:	8a3a      	ldrh	r2, [r7, #16]
 8006770:	8abb      	ldrh	r3, [r7, #20]
 8006772:	4013      	ands	r3, r2
 8006774:	b29a      	uxth	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677e:	1c9a      	adds	r2, r3, #2
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d11b      	bne.n	80067da <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067b0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c0:	f023 0301 	bic.w	r3, r3, #1
 80067c4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff fa09 	bl	8005bec <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80067da:	8afb      	ldrh	r3, [r7, #22]
 80067dc:	3b01      	subs	r3, #1
 80067de:	82fb      	strh	r3, [r7, #22]
 80067e0:	8afb      	ldrh	r3, [r7, #22]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1bc      	bne.n	8006760 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067ec:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80067ee:	8a7b      	ldrh	r3, [r7, #18]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d021      	beq.n	8006838 <UART_RxISR_16BIT_FIFOEN+0xfc>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067fa:	8a7a      	ldrh	r2, [r7, #18]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d21b      	bcs.n	8006838 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800680e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a0b      	ldr	r2, [pc, #44]	; (8006840 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006814:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0220 	orr.w	r2, r2, #32
 8006824:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006826:	e007      	b.n	8006838 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0208 	orr.w	r2, r2, #8
 8006836:	619a      	str	r2, [r3, #24]
}
 8006838:	bf00      	nop
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	08006589 	.word	0x08006589

08006844 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800688e:	2b01      	cmp	r3, #1
 8006890:	d101      	bne.n	8006896 <HAL_UARTEx_DisableFifoMode+0x16>
 8006892:	2302      	movs	r3, #2
 8006894:	e027      	b.n	80068e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2224      	movs	r2, #36	; 0x24
 80068a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0201 	bic.w	r2, r2, #1
 80068bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006906:	2302      	movs	r3, #2
 8006908:	e02d      	b.n	8006966 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2224      	movs	r2, #36	; 0x24
 8006916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f850 	bl	80069ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006982:	2302      	movs	r3, #2
 8006984:	e02d      	b.n	80069e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2224      	movs	r2, #36	; 0x24
 8006992:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0201 	bic.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f812 	bl	80069ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b089      	sub	sp, #36	; 0x24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80069f4:	4a2f      	ldr	r2, [pc, #188]	; (8006ab4 <UARTEx_SetNbDataToProcess+0xc8>)
 80069f6:	f107 0314 	add.w	r3, r7, #20
 80069fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069fe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a02:	4a2d      	ldr	r2, [pc, #180]	; (8006ab8 <UARTEx_SetNbDataToProcess+0xcc>)
 8006a04:	f107 030c 	add.w	r3, r7, #12
 8006a08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a0c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d108      	bne.n	8006a2a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a28:	e03d      	b.n	8006aa6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a2e:	2308      	movs	r3, #8
 8006a30:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	0e5b      	lsrs	r3, r3, #25
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	f003 0307 	and.w	r3, r3, #7
 8006a40:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	0f5b      	lsrs	r3, r3, #29
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a52:	7fbb      	ldrb	r3, [r7, #30]
 8006a54:	7f3a      	ldrb	r2, [r7, #28]
 8006a56:	f107 0120 	add.w	r1, r7, #32
 8006a5a:	440a      	add	r2, r1
 8006a5c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006a60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a64:	7f3a      	ldrb	r2, [r7, #28]
 8006a66:	f107 0120 	add.w	r1, r7, #32
 8006a6a:	440a      	add	r2, r1
 8006a6c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a70:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a7c:	7ffb      	ldrb	r3, [r7, #31]
 8006a7e:	7f7a      	ldrb	r2, [r7, #29]
 8006a80:	f107 0120 	add.w	r1, r7, #32
 8006a84:	440a      	add	r2, r1
 8006a86:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006a8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a8e:	7f7a      	ldrb	r2, [r7, #29]
 8006a90:	f107 0120 	add.w	r1, r7, #32
 8006a94:	440a      	add	r2, r1
 8006a96:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006aa6:	bf00      	nop
 8006aa8:	3724      	adds	r7, #36	; 0x24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	08006e04 	.word	0x08006e04
 8006ab8:	08006e0c 	.word	0x08006e0c

08006abc <__libc_init_array>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	4e0d      	ldr	r6, [pc, #52]	; (8006af4 <__libc_init_array+0x38>)
 8006ac0:	4c0d      	ldr	r4, [pc, #52]	; (8006af8 <__libc_init_array+0x3c>)
 8006ac2:	1ba4      	subs	r4, r4, r6
 8006ac4:	10a4      	asrs	r4, r4, #2
 8006ac6:	2500      	movs	r5, #0
 8006ac8:	42a5      	cmp	r5, r4
 8006aca:	d109      	bne.n	8006ae0 <__libc_init_array+0x24>
 8006acc:	4e0b      	ldr	r6, [pc, #44]	; (8006afc <__libc_init_array+0x40>)
 8006ace:	4c0c      	ldr	r4, [pc, #48]	; (8006b00 <__libc_init_array+0x44>)
 8006ad0:	f000 f820 	bl	8006b14 <_init>
 8006ad4:	1ba4      	subs	r4, r4, r6
 8006ad6:	10a4      	asrs	r4, r4, #2
 8006ad8:	2500      	movs	r5, #0
 8006ada:	42a5      	cmp	r5, r4
 8006adc:	d105      	bne.n	8006aea <__libc_init_array+0x2e>
 8006ade:	bd70      	pop	{r4, r5, r6, pc}
 8006ae0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ae4:	4798      	blx	r3
 8006ae6:	3501      	adds	r5, #1
 8006ae8:	e7ee      	b.n	8006ac8 <__libc_init_array+0xc>
 8006aea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006aee:	4798      	blx	r3
 8006af0:	3501      	adds	r5, #1
 8006af2:	e7f2      	b.n	8006ada <__libc_init_array+0x1e>
 8006af4:	08006e5c 	.word	0x08006e5c
 8006af8:	08006e5c 	.word	0x08006e5c
 8006afc:	08006e5c 	.word	0x08006e5c
 8006b00:	08006e64 	.word	0x08006e64

08006b04 <memset>:
 8006b04:	4402      	add	r2, r0
 8006b06:	4603      	mov	r3, r0
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d100      	bne.n	8006b0e <memset+0xa>
 8006b0c:	4770      	bx	lr
 8006b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b12:	e7f9      	b.n	8006b08 <memset+0x4>

08006b14 <_init>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	bf00      	nop
 8006b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1a:	bc08      	pop	{r3}
 8006b1c:	469e      	mov	lr, r3
 8006b1e:	4770      	bx	lr

08006b20 <_fini>:
 8006b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b22:	bf00      	nop
 8006b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b26:	bc08      	pop	{r3}
 8006b28:	469e      	mov	lr, r3
 8006b2a:	4770      	bx	lr
