
project_12_CAN_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ec4  08005ec4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ec4  08005ec4  00015ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ecc  08005ecc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ed0  08005ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000000c  08005ee0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005ee0  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f16  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002454  00000000  00000000  00035f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c8  00000000  00000000  000383a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  00039670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001eef0  00000000  00000000  0003a820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0de  00000000  00000000  00059710  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc082  00000000  00000000  000677ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133870  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005100  00000000  00000000  001338ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005b84 	.word	0x08005b84

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005b84 	.word	0x08005b84

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b972 	b.w	8000528 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9e08      	ldr	r6, [sp, #32]
 8000262:	4604      	mov	r4, r0
 8000264:	4688      	mov	r8, r1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d14b      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026a:	428a      	cmp	r2, r1
 800026c:	4615      	mov	r5, r2
 800026e:	d967      	bls.n	8000340 <__udivmoddi4+0xe4>
 8000270:	fab2 f282 	clz	r2, r2
 8000274:	b14a      	cbz	r2, 800028a <__udivmoddi4+0x2e>
 8000276:	f1c2 0720 	rsb	r7, r2, #32
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	fa20 f707 	lsr.w	r7, r0, r7
 8000282:	4095      	lsls	r5, r2
 8000284:	ea47 0803 	orr.w	r8, r7, r3
 8000288:	4094      	lsls	r4, r2
 800028a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028e:	0c23      	lsrs	r3, r4, #16
 8000290:	fbb8 f7fe 	udiv	r7, r8, lr
 8000294:	fa1f fc85 	uxth.w	ip, r5
 8000298:	fb0e 8817 	mls	r8, lr, r7, r8
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	fb07 f10c 	mul.w	r1, r7, ip
 80002a4:	4299      	cmp	r1, r3
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x60>
 80002a8:	18eb      	adds	r3, r5, r3
 80002aa:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ae:	f080 811b 	bcs.w	80004e8 <__udivmoddi4+0x28c>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 8118 	bls.w	80004e8 <__udivmoddi4+0x28c>
 80002b8:	3f02      	subs	r7, #2
 80002ba:	442b      	add	r3, r5
 80002bc:	1a5b      	subs	r3, r3, r1
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002cc:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d0:	45a4      	cmp	ip, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x8c>
 80002d4:	192c      	adds	r4, r5, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x290>
 80002de:	45a4      	cmp	ip, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x290>
 80002e4:	3802      	subs	r0, #2
 80002e6:	442c      	add	r4, r5
 80002e8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ec:	eba4 040c 	sub.w	r4, r4, ip
 80002f0:	2700      	movs	r7, #0
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa0>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0xbe>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80eb 	beq.w	80004e2 <__udivmoddi4+0x286>
 800030c:	2700      	movs	r7, #0
 800030e:	e9c6 0100 	strd	r0, r1, [r6]
 8000312:	4638      	mov	r0, r7
 8000314:	4639      	mov	r1, r7
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f783 	clz	r7, r3
 800031e:	2f00      	cmp	r7, #0
 8000320:	d147      	bne.n	80003b2 <__udivmoddi4+0x156>
 8000322:	428b      	cmp	r3, r1
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xd0>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2c4>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb61 0303 	sbc.w	r3, r1, r3
 8000332:	2001      	movs	r0, #1
 8000334:	4698      	mov	r8, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d0e0      	beq.n	80002fc <__udivmoddi4+0xa0>
 800033a:	e9c6 4800 	strd	r4, r8, [r6]
 800033e:	e7dd      	b.n	80002fc <__udivmoddi4+0xa0>
 8000340:	b902      	cbnz	r2, 8000344 <__udivmoddi4+0xe8>
 8000342:	deff      	udf	#255	; 0xff
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	2a00      	cmp	r2, #0
 800034a:	f040 808f 	bne.w	800046c <__udivmoddi4+0x210>
 800034e:	1b49      	subs	r1, r1, r5
 8000350:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000354:	fa1f f885 	uxth.w	r8, r5
 8000358:	2701      	movs	r7, #1
 800035a:	fbb1 fcfe 	udiv	ip, r1, lr
 800035e:	0c23      	lsrs	r3, r4, #16
 8000360:	fb0e 111c 	mls	r1, lr, ip, r1
 8000364:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000368:	fb08 f10c 	mul.w	r1, r8, ip
 800036c:	4299      	cmp	r1, r3
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x124>
 8000370:	18eb      	adds	r3, r5, r3
 8000372:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x122>
 8000378:	4299      	cmp	r1, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2bc>
 800037e:	4684      	mov	ip, r0
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	b2a3      	uxth	r3, r4
 8000384:	fbb1 f0fe 	udiv	r0, r1, lr
 8000388:	fb0e 1410 	mls	r4, lr, r0, r1
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	fb08 f800 	mul.w	r8, r8, r0
 8000394:	45a0      	cmp	r8, r4
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x14c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x14a>
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	f200 80b6 	bhi.w	8000512 <__udivmoddi4+0x2b6>
 80003a6:	4618      	mov	r0, r3
 80003a8:	eba4 0408 	sub.w	r4, r4, r8
 80003ac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b0:	e79f      	b.n	80002f2 <__udivmoddi4+0x96>
 80003b2:	f1c7 0c20 	rsb	ip, r7, #32
 80003b6:	40bb      	lsls	r3, r7
 80003b8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003bc:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c0:	fa01 f407 	lsl.w	r4, r1, r7
 80003c4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003cc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d0:	4325      	orrs	r5, r4
 80003d2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d6:	0c2c      	lsrs	r4, r5, #16
 80003d8:	fb08 3319 	mls	r3, r8, r9, r3
 80003dc:	fa1f fa8e 	uxth.w	sl, lr
 80003e0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e4:	fb09 f40a 	mul.w	r4, r9, sl
 80003e8:	429c      	cmp	r4, r3
 80003ea:	fa02 f207 	lsl.w	r2, r2, r7
 80003ee:	fa00 f107 	lsl.w	r1, r0, r7
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b0>
 80003f4:	eb1e 0303 	adds.w	r3, lr, r3
 80003f8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003fc:	f080 8087 	bcs.w	800050e <__udivmoddi4+0x2b2>
 8000400:	429c      	cmp	r4, r3
 8000402:	f240 8084 	bls.w	800050e <__udivmoddi4+0x2b2>
 8000406:	f1a9 0902 	sub.w	r9, r9, #2
 800040a:	4473      	add	r3, lr
 800040c:	1b1b      	subs	r3, r3, r4
 800040e:	b2ad      	uxth	r5, r5
 8000410:	fbb3 f0f8 	udiv	r0, r3, r8
 8000414:	fb08 3310 	mls	r3, r8, r0, r3
 8000418:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800041c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000420:	45a2      	cmp	sl, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1da>
 8000424:	eb1e 0404 	adds.w	r4, lr, r4
 8000428:	f100 33ff 	add.w	r3, r0, #4294967295
 800042c:	d26b      	bcs.n	8000506 <__udivmoddi4+0x2aa>
 800042e:	45a2      	cmp	sl, r4
 8000430:	d969      	bls.n	8000506 <__udivmoddi4+0x2aa>
 8000432:	3802      	subs	r0, #2
 8000434:	4474      	add	r4, lr
 8000436:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043a:	fba0 8902 	umull	r8, r9, r0, r2
 800043e:	eba4 040a 	sub.w	r4, r4, sl
 8000442:	454c      	cmp	r4, r9
 8000444:	46c2      	mov	sl, r8
 8000446:	464b      	mov	r3, r9
 8000448:	d354      	bcc.n	80004f4 <__udivmoddi4+0x298>
 800044a:	d051      	beq.n	80004f0 <__udivmoddi4+0x294>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2c8>
 8000450:	ebb1 050a 	subs.w	r5, r1, sl
 8000454:	eb64 0403 	sbc.w	r4, r4, r3
 8000458:	fa04 fc0c 	lsl.w	ip, r4, ip
 800045c:	40fd      	lsrs	r5, r7
 800045e:	40fc      	lsrs	r4, r7
 8000460:	ea4c 0505 	orr.w	r5, ip, r5
 8000464:	e9c6 5400 	strd	r5, r4, [r6]
 8000468:	2700      	movs	r7, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa0>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f703 	lsr.w	r7, r0, r3
 8000474:	4095      	lsls	r5, r2
 8000476:	fa01 f002 	lsl.w	r0, r1, r2
 800047a:	fa21 f303 	lsr.w	r3, r1, r3
 800047e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000482:	4338      	orrs	r0, r7
 8000484:	0c01      	lsrs	r1, r0, #16
 8000486:	fbb3 f7fe 	udiv	r7, r3, lr
 800048a:	fa1f f885 	uxth.w	r8, r5
 800048e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb07 f308 	mul.w	r3, r7, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x256>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f107 3cff 	add.w	ip, r7, #4294967295
 80004a8:	d22f      	bcs.n	800050a <__udivmoddi4+0x2ae>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d92d      	bls.n	800050a <__udivmoddi4+0x2ae>
 80004ae:	3f02      	subs	r7, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1acb      	subs	r3, r1, r3
 80004b4:	b281      	uxth	r1, r0
 80004b6:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ba:	fb0e 3310 	mls	r3, lr, r0, r3
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb00 f308 	mul.w	r3, r0, r8
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x27e>
 80004ca:	1869      	adds	r1, r5, r1
 80004cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d0:	d217      	bcs.n	8000502 <__udivmoddi4+0x2a6>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d915      	bls.n	8000502 <__udivmoddi4+0x2a6>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4429      	add	r1, r5
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e0:	e73b      	b.n	800035a <__udivmoddi4+0xfe>
 80004e2:	4637      	mov	r7, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e709      	b.n	80002fc <__udivmoddi4+0xa0>
 80004e8:	4607      	mov	r7, r0
 80004ea:	e6e7      	b.n	80002bc <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x8c>
 80004f0:	4541      	cmp	r1, r8
 80004f2:	d2ab      	bcs.n	800044c <__udivmoddi4+0x1f0>
 80004f4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f8:	eb69 020e 	sbc.w	r2, r9, lr
 80004fc:	3801      	subs	r0, #1
 80004fe:	4613      	mov	r3, r2
 8000500:	e7a4      	b.n	800044c <__udivmoddi4+0x1f0>
 8000502:	4660      	mov	r0, ip
 8000504:	e7e9      	b.n	80004da <__udivmoddi4+0x27e>
 8000506:	4618      	mov	r0, r3
 8000508:	e795      	b.n	8000436 <__udivmoddi4+0x1da>
 800050a:	4667      	mov	r7, ip
 800050c:	e7d1      	b.n	80004b2 <__udivmoddi4+0x256>
 800050e:	4681      	mov	r9, r0
 8000510:	e77c      	b.n	800040c <__udivmoddi4+0x1b0>
 8000512:	3802      	subs	r0, #2
 8000514:	442c      	add	r4, r5
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0x14c>
 8000518:	f1ac 0c02 	sub.w	ip, ip, #2
 800051c:	442b      	add	r3, r5
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x124>
 8000520:	4638      	mov	r0, r7
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xda>
 8000524:	4637      	mov	r7, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa0>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_UART_values();
 8000530:	f000 fb1a 	bl	8000b68 <init_UART_values>
  init_CAN_values();
 8000534:	f000 feac 	bl	8001290 <init_CAN_values>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f001 f959 	bl	80017ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f82a 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f974 	bl	800082c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000544:	f000 f924 	bl	8000790 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000548:	f000 f8d4 	bl	80006f4 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 800054c:	f000 f88c 	bl	8000668 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <main+0x58>)
 8000552:	f003 fb59 	bl	8003c08 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_RX_MESSAGE_SIZE);
 8000556:	2201      	movs	r2, #1
 8000558:	490b      	ldr	r1, [pc, #44]	; (8000588 <main+0x5c>)
 800055a:	480c      	ldr	r0, [pc, #48]	; (800058c <main+0x60>)
 800055c:	f004 f91c 	bl	8004798 <HAL_UART_Receive_IT>
  HAL_FDCAN_ConfigTimestampCounter(&hfdcan1, FDCAN_TIMESTAMP_PRESC_1);
 8000560:	2100      	movs	r1, #0
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <main+0x64>)
 8000564:	f001 fc84 	bl	8001e70 <HAL_FDCAN_ConfigTimestampCounter>
  HAL_FDCAN_EnableTimestampCounter(&hfdcan1, FDCAN_TIMESTAMP_INTERNAL);
 8000568:	2101      	movs	r1, #1
 800056a:	4809      	ldr	r0, [pc, #36]	; (8000590 <main+0x64>)
 800056c:	f001 fca4 	bl	8001eb8 <HAL_FDCAN_EnableTimestampCounter>
  HAL_FDCAN_Start(&hfdcan1);
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <main+0x64>)
 8000572:	f001 fcd3 	bl	8001f1c <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, FDCAN_TX_BUFFER0);
 8000576:	2201      	movs	r2, #1
 8000578:	2101      	movs	r1, #1
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <main+0x64>)
 800057c:	f001 fe14 	bl	80021a8 <HAL_FDCAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x54>
 8000582:	bf00      	nop
 8000584:	2000012c 	.word	0x2000012c
 8000588:	20000128 	.word	0x20000128
 800058c:	200001e8 	.word	0x200001e8
 8000590:	20000180 	.word	0x20000180

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b0a4      	sub	sp, #144	; 0x90
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800059e:	2238      	movs	r2, #56	; 0x38
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f005 fae6 	bl	8005b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 fad8 	bl	8005b74 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c8:	f002 faee 	bl	8002ba8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	2340      	movs	r3, #64	; 0x40
 80005d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005de:	2302      	movs	r3, #2
 80005e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005e2:	2306      	movs	r3, #6
 80005e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 48;
 80005e6:	2330      	movs	r3, #48	; 0x30
 80005e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fb84 	bl	8002d10 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800060e:	f000 f959 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2303      	movs	r3, #3
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000626:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800062a:	2101      	movs	r1, #1
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fe87 	bl	8003340 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000638:	f000 f944 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_FDCAN;
 800063c:	f241 0302 	movw	r3, #4098	; 0x1002
 8000640:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4618      	mov	r0, r3
 8000650:	f003 f892 	bl	8003778 <HAL_RCCEx_PeriphCLKConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800065a:	f000 f933 	bl	80008c4 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3790      	adds	r7, #144	; 0x90
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_FDCAN1_Init+0x84>)
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <MX_FDCAN1_Init+0x88>)
 8000670:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_FDCAN1_Init+0x84>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_FDCAN1_Init+0x84>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_FDCAN1_Init+0x84>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_FDCAN1_Init+0x84>)
 8000686:	2200      	movs	r2, #0
 8000688:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_FDCAN1_Init+0x84>)
 800068c:	2200      	movs	r2, #0
 800068e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_FDCAN1_Init+0x84>)
 8000692:	2200      	movs	r2, #0
 8000694:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_FDCAN1_Init+0x84>)
 8000698:	2208      	movs	r2, #8
 800069a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_FDCAN1_Init+0x84>)
 800069e:	2203      	movs	r2, #3
 80006a0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006a4:	2207      	movs	r2, #7
 80006a6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006aa:	2208      	movs	r2, #8
 80006ac:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006b0:	2208      	movs	r2, #8
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006b6:	2203      	movs	r2, #3
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006bc:	220a      	movs	r2, #10
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006c2:	2203      	movs	r2, #3
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006da:	f001 fa6f 	bl	8001bbc <HAL_FDCAN_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80006e4:	f000 f8ee 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000180 	.word	0x20000180
 80006f0:	40006400 	.word	0x40006400

080006f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_TIM3_Init+0x94>)
 8000714:	4a1d      	ldr	r2, [pc, #116]	; (800078c <MX_TIM3_Init+0x98>)
 8000716:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_TIM3_Init+0x94>)
 800071a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800071e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_TIM3_Init+0x94>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_TIM3_Init+0x94>)
 8000728:	2263      	movs	r2, #99	; 0x63
 800072a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_TIM3_Init+0x94>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_TIM3_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000738:	4813      	ldr	r0, [pc, #76]	; (8000788 <MX_TIM3_Init+0x94>)
 800073a:	f003 fa0d 	bl	8003b58 <HAL_TIM_Base_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000744:	f000 f8be 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_TIM3_Init+0x94>)
 8000756:	f003 fc41 	bl	8003fdc <HAL_TIM_ConfigClockSource>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 f8b0 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000764:	2320      	movs	r3, #32
 8000766:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_TIM3_Init+0x94>)
 8000772:	f003 fe63 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800077c:	f000 f8a2 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000012c 	.word	0x2000012c
 800078c:	40000400 	.word	0x40000400

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_USART2_UART_Init+0x94>)
 8000796:	4a24      	ldr	r2, [pc, #144]	; (8000828 <MX_USART2_UART_Init+0x98>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b22      	ldr	r3, [pc, #136]	; (8000824 <MX_USART2_UART_Init+0x94>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007c6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4812      	ldr	r0, [pc, #72]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007dc:	f003 fef6 	bl	80045cc <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80007e6:	f000 f86d 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007ee:	f005 f8b8 	bl	8005962 <HAL_UARTEx_SetTxFifoThreshold>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80007f8:	f000 f864 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	4809      	ldr	r0, [pc, #36]	; (8000824 <MX_USART2_UART_Init+0x94>)
 8000800:	f005 f8ed 	bl	80059de <HAL_UARTEx_SetRxFifoThreshold>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800080a:	f000 f85b 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART2_UART_Init+0x94>)
 8000810:	f005 f86e 	bl	80058f0 <HAL_UARTEx_DisableFifoMode>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800081a:	f000 f853 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200001e8 	.word	0x200001e8
 8000828:	40004400 	.word	0x40004400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_GPIO_Init+0x90>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a1d      	ldr	r2, [pc, #116]	; (80008bc <MX_GPIO_Init+0x90>)
 8000848:	f043 0320 	orr.w	r3, r3, #32
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_GPIO_Init+0x90>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0320 	and.w	r3, r3, #32
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_GPIO_Init+0x90>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <MX_GPIO_Init+0x90>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_GPIO_Init+0x90>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_GPIO_Init+0x90>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <MX_GPIO_Init+0x90>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_GPIO_Init+0x90>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MX_GPIO_Init+0x94>)
 8000892:	f002 f971 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0x94>)
 80008b0:	f001 ffe0 	bl	8002874 <HAL_GPIO_Init>

}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000400 	.word	0x48000400

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_MspInit+0x44>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6613      	str	r3, [r2, #96]	; 0x60
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x44>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6593      	str	r3, [r2, #88]	; 0x58
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800090a:	f002 f9f1 	bl	8002cf0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <HAL_FDCAN_MspInit+0x90>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d131      	bne.n	80009a2 <HAL_FDCAN_MspInit+0x86>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <HAL_FDCAN_MspInit+0x94>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <HAL_FDCAN_MspInit+0x94>)
 8000944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_FDCAN_MspInit+0x94>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <HAL_FDCAN_MspInit+0x94>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <HAL_FDCAN_MspInit+0x94>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <HAL_FDCAN_MspInit+0x94>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800096e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000980:	2309      	movs	r3, #9
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f001 ff71 	bl	8002874 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2015      	movs	r0, #21
 8000998:	f001 f875 	bl	8001a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800099c:	2015      	movs	r0, #21
 800099e:	f001 f88c 	bl	8001aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40006400 	.word	0x40006400
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <HAL_TIM_Base_MspInit+0x44>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d113      	bne.n	80009ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_TIM_Base_MspInit+0x48>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <HAL_TIM_Base_MspInit+0x48>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6593      	str	r3, [r2, #88]	; 0x58
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_TIM_Base_MspInit+0x48>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2103      	movs	r1, #3
 80009e2:	201d      	movs	r0, #29
 80009e4:	f001 f84f 	bl	8001a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009e8:	201d      	movs	r0, #29
 80009ea:	f001 f866 	bl	8001aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40000400 	.word	0x40000400
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	; (8000a8c <HAL_UART_MspInit+0x8c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d130      	bne.n	8000a84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <HAL_UART_MspInit+0x90>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	4a1a      	ldr	r2, [pc, #104]	; (8000a90 <HAL_UART_MspInit+0x90>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_UART_MspInit+0x90>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_UART_MspInit+0x90>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <HAL_UART_MspInit+0x90>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_UART_MspInit+0x90>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a52:	230c      	movs	r3, #12
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a62:	2307      	movs	r3, #7
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f001 ff00 	bl	8002874 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2102      	movs	r1, #2
 8000a78:	2026      	movs	r0, #38	; 0x26
 8000a7a:	f001 f804 	bl	8001a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a7e:	2026      	movs	r0, #38	; 0x26
 8000a80:	f001 f81b 	bl	8001aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 fed4 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <FDCAN1_IT0_IRQHandler+0x14>)
 8000af6:	f001 fc3d 	bl	8002374 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
  CAN_IT_handler();
 8000afa:	f000 fb59 	bl	80011b0 <CAN_IT_handler>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000180 	.word	0x20000180

08000b08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <TIM3_IRQHandler+0x18>)
 8000b0e:	f003 f8e5 	bl	8003cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  UART_RX_queue_polling();
 8000b12:	f000 f8bd 	bl	8000c90 <UART_RX_queue_polling>
  CAN_RX_queue_polling();
 8000b16:	f000 fb81 	bl	800121c <CAN_RX_queue_polling>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000012c 	.word	0x2000012c

08000b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <USART2_IRQHandler+0x14>)
 8000b2a:	f003 ff0d 	bl	8004948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  UART_IT_handler();
 8000b2e:	f000 f851 	bl	8000bd4 <UART_IT_handler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200001e8 	.word	0x200001e8

08000b3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <SystemInit+0x28>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <SystemInit+0x28>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <SystemInit+0x28>)
 8000b52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b56:	609a      	str	r2, [r3, #8]
#endif
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <init_UART_values>:
#define FLASH_USER_START_ADDR		ADDR_FLASH_PAGE_4
#define FLASH_USER_END_ADDR     	(ADDR_FLASH_PAGE_63 + FLASH_PAGE_SIZE - 1)   /* End @ of user Flash area */

// стартовая инициализация счётчиков и буферов UART
void init_UART_values(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	uart_error_state = NO_ERROR;									// ошибка отсутствует
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <init_UART_values+0x20>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
	UART_RX_string_buffer_counter = 0;								// счётчик элемента строки-буфера
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <init_UART_values+0x24>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
	UART_RX_queue_buffer_write_counter = 0;							// обнуляем счётчитк элемента очереди на парсинг, в который ведётся запись
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <init_UART_values+0x28>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	200002cd 	.word	0x200002cd
 8000b8c:	200001e4 	.word	0x200001e4
 8000b90:	200002cc 	.word	0x200002cc

08000b94 <UART_error_handler>:

// обработчик ошибок UART
void UART_error_handler(UARTErrorCode_EnumTypeDef error_type)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	switch (error_type)
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	d810      	bhi.n	8000bc6 <UART_error_handler+0x32>
 8000ba4:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <UART_error_handler+0x18>)
 8000ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000baa:	bf00      	nop
 8000bac:	08000bc5 	.word	0x08000bc5
 8000bb0:	08000bc5 	.word	0x08000bc5
 8000bb4:	08000bc5 	.word	0x08000bc5
 8000bb8:	08000bc5 	.word	0x08000bc5
 8000bbc:	08000bc5 	.word	0x08000bc5
 8000bc0:	08000bc5 	.word	0x08000bc5
	{
	case NO_ERROR:
	{

		break;
 8000bc4:	bf00      	nop
	{

		break;
	}
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <UART_IT_handler>:

// обработчик прерывания с UART (приём данных)
void UART_IT_handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	add_byte_to_string(UART_rx_buffer[0]);													// добавляем принятый байт в строку в очереди на парсинг
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <UART_IT_handler+0x1c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 f80b 	bl	8000bf8 <add_byte_to_string>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_RX_MESSAGE_SIZE);			// взводим функцию для обработки прерывания
 8000be2:	2201      	movs	r2, #1
 8000be4:	4902      	ldr	r1, [pc, #8]	; (8000bf0 <UART_IT_handler+0x1c>)
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <UART_IT_handler+0x20>)
 8000be8:	f003 fdd6 	bl	8004798 <HAL_UART_Receive_IT>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000128 	.word	0x20000128
 8000bf4:	200001e8 	.word	0x200001e8

08000bf8 <add_byte_to_string>:

// добавляем принятый байт в строку-буфер
void add_byte_to_string(uint8_t byte_to_write)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	if (UART_RX_string_buffer_counter >= UART_STRING_MAX_SIZE)								// если достигли максимальной длины строки
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <add_byte_to_string+0x88>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b3f      	cmp	r3, #63	; 0x3f
 8000c08:	d905      	bls.n	8000c16 <add_byte_to_string+0x1e>
	{
		UART_error_handler(MAX_MESSAGE_LENGHT_EXCEEDED);									// ошибка: превышена максимальная длина строки
 8000c0a:	2005      	movs	r0, #5
 8000c0c:	f7ff ffc2 	bl	8000b94 <UART_error_handler>
		UART_RX_string_buffer_counter = 0;													// обнуляем счётчик элемента в строке-буфере
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <add_byte_to_string+0x88>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
	{
		UART_RX_string_buffer_counter = 0;													// обнуляем счётчик элемента в строке-буфере
		message_start_flag = 1;
	}
	*/
	if (byte_to_write == CHAR_CODE_UART_MESSAGE_END)										// если пришёл символ конца сообщения
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b0d      	cmp	r3, #13
 8000c1a:	d11a      	bne.n	8000c52 <add_byte_to_string+0x5a>
	{

		UART_RX_string_lenght_buffer[UART_RX_queue_buffer_write_counter] = UART_RX_string_buffer_counter;	// записываем длину сообщения
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <add_byte_to_string+0x8c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <add_byte_to_string+0x88>)
 8000c24:	7819      	ldrb	r1, [r3, #0]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <add_byte_to_string+0x90>)
 8000c28:	5499      	strb	r1, [r3, r2]
		UART_RX_queue_buffer_write_counter++;												// инкрементируем счётчик элемента буфера-очереди
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <add_byte_to_string+0x8c>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <add_byte_to_string+0x8c>)
 8000c34:	701a      	strb	r2, [r3, #0]
		UART_RX_string_buffer_counter = 0;													// обнуляем счётчик элемента в строке-буфере
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <add_byte_to_string+0x88>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]

		if (UART_RX_queue_buffer_write_counter > RX_QUEUE_BUFFER_SIZE)						// если превысили максимальное количество элементов в буфере-очереди
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <add_byte_to_string+0x8c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d918      	bls.n	8000c76 <add_byte_to_string+0x7e>
		{
			UART_error_handler(RX_QUEUE_OVERFLOW);											// ошибка: очередь на парсинг переполнена
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ffa5 	bl	8000b94 <UART_error_handler>
			UART_RX_queue_buffer_write_counter = 0;											// обнуляем счётчик элемента буфера-очереди
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <add_byte_to_string+0x8c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
			UART_RX_string_buffer_counter = 0;
		}
		UART_RX_queue_buffer[UART_RX_queue_buffer_write_counter][UART_RX_string_buffer_counter] = byte_to_write;		// записываем символ в строку буфера-очереди на парсинг
		UART_RX_string_buffer_counter++;
	}
}
 8000c50:	e011      	b.n	8000c76 <add_byte_to_string+0x7e>
		UART_RX_queue_buffer[UART_RX_queue_buffer_write_counter][UART_RX_string_buffer_counter] = byte_to_write;		// записываем символ в строку буфера-очереди на парсинг
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <add_byte_to_string+0x8c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <add_byte_to_string+0x88>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <add_byte_to_string+0x94>)
 8000c60:	0183      	lsls	r3, r0, #6
 8000c62:	4413      	add	r3, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	701a      	strb	r2, [r3, #0]
		UART_RX_string_buffer_counter++;
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <add_byte_to_string+0x88>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <add_byte_to_string+0x88>)
 8000c74:	701a      	strb	r2, [r3, #0]
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200001e4 	.word	0x200001e4
 8000c84:	200002cc 	.word	0x200002cc
 8000c88:	20000178 	.word	0x20000178
 8000c8c:	20000028 	.word	0x20000028

08000c90 <UART_RX_queue_polling>:

// парсим сообщения из буфера-очереди
void UART_RX_queue_polling(void)
{
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
	if (UART_RX_queue_buffer_write_counter > 0)												// если в буфере-очереди содержится хотя бы одно сообщение
 8000c96:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <UART_RX_queue_polling+0xc8>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d058      	beq.n	8000d50 <UART_RX_queue_polling+0xc0>
	{
		for (int i = 0; i < UART_RX_queue_buffer_write_counter; i++)						// проходимся по всем сообщениям в очереди
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	e04c      	b.n	8000d3e <UART_RX_queue_polling+0xae>
		{
 8000ca4:	466b      	mov	r3, sp
 8000ca6:	461d      	mov	r5, r3
			char tmp_ch_buf[UART_RX_string_lenght_buffer[i] + 1];								// буфер для формирования сообщения на парсинг. Размер буфера равен длине сообщения (без пустых символов)
 8000ca8:	4a2c      	ldr	r2, [pc, #176]	; (8000d5c <UART_RX_queue_polling+0xcc>)
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	1c58      	adds	r0, r3, #1
 8000cb2:	1e43      	subs	r3, r0, #1
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	f04f 0400 	mov.w	r4, #0
 8000cc6:	00d4      	lsls	r4, r2, #3
 8000cc8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ccc:	00cb      	lsls	r3, r1, #3
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	f04f 0400 	mov.w	r4, #0
 8000cde:	00d4      	lsls	r4, r2, #3
 8000ce0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ce4:	00cb      	lsls	r3, r1, #3
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	3307      	adds	r3, #7
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	ebad 0d03 	sub.w	sp, sp, r3
 8000cf2:	466b      	mov	r3, sp
 8000cf4:	3300      	adds	r3, #0
 8000cf6:	603b      	str	r3, [r7, #0]
			for (int ii = 0; ii < sizeof(tmp_ch_buf); ii++)									// переписываем всё сообщение во временный буфер
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e00e      	b.n	8000d1c <UART_RX_queue_polling+0x8c>
			{
				tmp_ch_buf[ii] = UART_RX_queue_buffer[i][ii];
 8000cfe:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <UART_RX_queue_polling+0xd0>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	019b      	lsls	r3, r3, #6
 8000d04:	441a      	add	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4413      	add	r3, r2
 8000d0a:	7819      	ldrb	r1, [r3, #0]
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4413      	add	r3, r2
 8000d12:	460a      	mov	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
			for (int ii = 0; ii < sizeof(tmp_ch_buf); ii++)									// переписываем всё сообщение во временный буфер
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8ec      	bhi.n	8000cfe <UART_RX_queue_polling+0x6e>
			}
			tmp_ch_buf[sizeof(tmp_ch_buf) - 1] = '\0';										// добавляем нуль-символ в конец сообщения
 8000d24:	4603      	mov	r3, r0
 8000d26:	3b01      	subs	r3, #1
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	54d1      	strb	r1, [r2, r3]
			parse_UART_message(tmp_ch_buf);													// отправляем на парсинг текущее сообщение
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f817 	bl	8000d64 <parse_UART_message>
 8000d36:	46ad      	mov	sp, r5
		for (int i = 0; i < UART_RX_queue_buffer_write_counter; i++)						// проходимся по всем сообщениям в очереди
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <UART_RX_queue_polling+0xc8>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4293      	cmp	r3, r2
 8000d48:	dbac      	blt.n	8000ca4 <UART_RX_queue_polling+0x14>
		}
		UART_RX_queue_buffer_write_counter = 0;
 8000d4a:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <UART_RX_queue_polling+0xc8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
	}
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bdb0      	pop	{r4, r5, r7, pc}
 8000d58:	200002cc 	.word	0x200002cc
 8000d5c:	20000178 	.word	0x20000178
 8000d60:	20000028 	.word	0x20000028

08000d64 <parse_UART_message>:

void parse_UART_message(char* UART_buffer_to_parse)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	if (!strcmp(UART_buffer_to_parse, "return_test"))
 8000d6c:	49a8      	ldr	r1, [pc, #672]	; (8001010 <parse_UART_message+0x2ac>)
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fa52 	bl	8000218 <strcmp>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d104      	bne.n	8000d84 <parse_UART_message+0x20>
	{
		complete_and_send_string_to_UART(sizeof(MESSAGE_TEST_VALUE), MESSAGE_TEST_VALUE);
 8000d7a:	49a6      	ldr	r1, [pc, #664]	; (8001014 <parse_UART_message+0x2b0>)
 8000d7c:	2010      	movs	r0, #16
 8000d7e:	f000 f9ad 	bl	80010dc <complete_and_send_string_to_UART>
	}
	else if (UART_buffer_to_parse[0] == 'T')
	{
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_EXTENDED_ID));
	}
}
 8000d82:	e141      	b.n	8001008 <parse_UART_message+0x2a4>
	else if ((!strcmp(UART_buffer_to_parse, "H")) || (!strcmp(UART_buffer_to_parse, "h")) || (!strcmp(UART_buffer_to_parse, "?")))
 8000d84:	49a4      	ldr	r1, [pc, #656]	; (8001018 <parse_UART_message+0x2b4>)
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fa46 	bl	8000218 <strcmp>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00d      	beq.n	8000dae <parse_UART_message+0x4a>
 8000d92:	49a2      	ldr	r1, [pc, #648]	; (800101c <parse_UART_message+0x2b8>)
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fa3f 	bl	8000218 <strcmp>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <parse_UART_message+0x4a>
 8000da0:	499f      	ldr	r1, [pc, #636]	; (8001020 <parse_UART_message+0x2bc>)
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff fa38 	bl	8000218 <strcmp>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d14c      	bne.n	8000e48 <parse_UART_message+0xe4>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_01), MESSAGE_COMMAND_LIST_STRING_01);
 8000dae:	499d      	ldr	r1, [pc, #628]	; (8001024 <parse_UART_message+0x2c0>)
 8000db0:	201b      	movs	r0, #27
 8000db2:	f000 f993 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_02), MESSAGE_COMMAND_LIST_STRING_02);
 8000db6:	499c      	ldr	r1, [pc, #624]	; (8001028 <parse_UART_message+0x2c4>)
 8000db8:	2024      	movs	r0, #36	; 0x24
 8000dba:	f000 f98f 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_03), MESSAGE_COMMAND_LIST_STRING_03);
 8000dbe:	499b      	ldr	r1, [pc, #620]	; (800102c <parse_UART_message+0x2c8>)
 8000dc0:	202d      	movs	r0, #45	; 0x2d
 8000dc2:	f000 f98b 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_04), MESSAGE_COMMAND_LIST_STRING_04);
 8000dc6:	499a      	ldr	r1, [pc, #616]	; (8001030 <parse_UART_message+0x2cc>)
 8000dc8:	2026      	movs	r0, #38	; 0x26
 8000dca:	f000 f987 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_05), MESSAGE_COMMAND_LIST_STRING_05);
 8000dce:	4999      	ldr	r1, [pc, #612]	; (8001034 <parse_UART_message+0x2d0>)
 8000dd0:	2016      	movs	r0, #22
 8000dd2:	f000 f983 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_06), MESSAGE_COMMAND_LIST_STRING_06);
 8000dd6:	4998      	ldr	r1, [pc, #608]	; (8001038 <parse_UART_message+0x2d4>)
 8000dd8:	2015      	movs	r0, #21
 8000dda:	f000 f97f 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_07), MESSAGE_COMMAND_LIST_STRING_07);
 8000dde:	4997      	ldr	r1, [pc, #604]	; (800103c <parse_UART_message+0x2d8>)
 8000de0:	201d      	movs	r0, #29
 8000de2:	f000 f97b 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_08), MESSAGE_COMMAND_LIST_STRING_08);
 8000de6:	4996      	ldr	r1, [pc, #600]	; (8001040 <parse_UART_message+0x2dc>)
 8000de8:	201e      	movs	r0, #30
 8000dea:	f000 f977 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_09), MESSAGE_COMMAND_LIST_STRING_09);
 8000dee:	4995      	ldr	r1, [pc, #596]	; (8001044 <parse_UART_message+0x2e0>)
 8000df0:	201f      	movs	r0, #31
 8000df2:	f000 f973 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_10), MESSAGE_COMMAND_LIST_STRING_10);
 8000df6:	4994      	ldr	r1, [pc, #592]	; (8001048 <parse_UART_message+0x2e4>)
 8000df8:	2031      	movs	r0, #49	; 0x31
 8000dfa:	f000 f96f 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_11), MESSAGE_COMMAND_LIST_STRING_11);
 8000dfe:	4993      	ldr	r1, [pc, #588]	; (800104c <parse_UART_message+0x2e8>)
 8000e00:	2032      	movs	r0, #50	; 0x32
 8000e02:	f000 f96b 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_12), MESSAGE_COMMAND_LIST_STRING_12);
 8000e06:	4992      	ldr	r1, [pc, #584]	; (8001050 <parse_UART_message+0x2ec>)
 8000e08:	2019      	movs	r0, #25
 8000e0a:	f000 f967 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_13), MESSAGE_COMMAND_LIST_STRING_13);
 8000e0e:	4991      	ldr	r1, [pc, #580]	; (8001054 <parse_UART_message+0x2f0>)
 8000e10:	2018      	movs	r0, #24
 8000e12:	f000 f963 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_14), MESSAGE_COMMAND_LIST_STRING_14);
 8000e16:	4990      	ldr	r1, [pc, #576]	; (8001058 <parse_UART_message+0x2f4>)
 8000e18:	201a      	movs	r0, #26
 8000e1a:	f000 f95f 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_15), MESSAGE_COMMAND_LIST_STRING_15);
 8000e1e:	498f      	ldr	r1, [pc, #572]	; (800105c <parse_UART_message+0x2f8>)
 8000e20:	2015      	movs	r0, #21
 8000e22:	f000 f95b 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_16), MESSAGE_COMMAND_LIST_STRING_16);
 8000e26:	498e      	ldr	r1, [pc, #568]	; (8001060 <parse_UART_message+0x2fc>)
 8000e28:	2015      	movs	r0, #21
 8000e2a:	f000 f957 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_17), MESSAGE_COMMAND_LIST_STRING_17);
 8000e2e:	498d      	ldr	r1, [pc, #564]	; (8001064 <parse_UART_message+0x300>)
 8000e30:	2012      	movs	r0, #18
 8000e32:	f000 f953 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_18), MESSAGE_COMMAND_LIST_STRING_18);
 8000e36:	498c      	ldr	r1, [pc, #560]	; (8001068 <parse_UART_message+0x304>)
 8000e38:	200c      	movs	r0, #12
 8000e3a:	f000 f94f 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_19), MESSAGE_COMMAND_LIST_STRING_19);
 8000e3e:	498b      	ldr	r1, [pc, #556]	; (800106c <parse_UART_message+0x308>)
 8000e40:	2023      	movs	r0, #35	; 0x23
 8000e42:	f000 f94b 	bl	80010dc <complete_and_send_string_to_UART>
}
 8000e46:	e0df      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "O"))
 8000e48:	4989      	ldr	r1, [pc, #548]	; (8001070 <parse_UART_message+0x30c>)
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff f9e4 	bl	8000218 <strcmp>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d102      	bne.n	8000e5c <parse_UART_message+0xf8>
		send_end_char_to_UART();
 8000e56:	f000 f933 	bl	80010c0 <send_end_char_to_UART>
}
 8000e5a:	e0d5      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "L"))
 8000e5c:	4985      	ldr	r1, [pc, #532]	; (8001074 <parse_UART_message+0x310>)
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff f9da 	bl	8000218 <strcmp>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d102      	bne.n	8000e70 <parse_UART_message+0x10c>
		send_end_char_to_UART();
 8000e6a:	f000 f929 	bl	80010c0 <send_end_char_to_UART>
}
 8000e6e:	e0cb      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "Y"))
 8000e70:	4981      	ldr	r1, [pc, #516]	; (8001078 <parse_UART_message+0x314>)
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff f9d0 	bl	8000218 <strcmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <parse_UART_message+0x120>
		send_end_char_to_UART();
 8000e7e:	f000 f91f 	bl	80010c0 <send_end_char_to_UART>
}
 8000e82:	e0c1      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "C"))
 8000e84:	497d      	ldr	r1, [pc, #500]	; (800107c <parse_UART_message+0x318>)
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff f9c6 	bl	8000218 <strcmp>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <parse_UART_message+0x134>
		send_end_char_to_UART();
 8000e92:	f000 f915 	bl	80010c0 <send_end_char_to_UART>
}
 8000e96:	e0b7      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S1"))
 8000e98:	4979      	ldr	r1, [pc, #484]	; (8001080 <parse_UART_message+0x31c>)
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff f9bc 	bl	8000218 <strcmp>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d102      	bne.n	8000eac <parse_UART_message+0x148>
		send_end_char_to_UART();
 8000ea6:	f000 f90b 	bl	80010c0 <send_end_char_to_UART>
}
 8000eaa:	e0ad      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S2"))
 8000eac:	4975      	ldr	r1, [pc, #468]	; (8001084 <parse_UART_message+0x320>)
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff f9b2 	bl	8000218 <strcmp>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d102      	bne.n	8000ec0 <parse_UART_message+0x15c>
		send_end_char_to_UART();
 8000eba:	f000 f901 	bl	80010c0 <send_end_char_to_UART>
}
 8000ebe:	e0a3      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S3"))
 8000ec0:	4971      	ldr	r1, [pc, #452]	; (8001088 <parse_UART_message+0x324>)
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff f9a8 	bl	8000218 <strcmp>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <parse_UART_message+0x170>
		send_end_char_to_UART();
 8000ece:	f000 f8f7 	bl	80010c0 <send_end_char_to_UART>
}
 8000ed2:	e099      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S4"))
 8000ed4:	496d      	ldr	r1, [pc, #436]	; (800108c <parse_UART_message+0x328>)
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff f99e 	bl	8000218 <strcmp>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <parse_UART_message+0x184>
		send_end_char_to_UART();
 8000ee2:	f000 f8ed 	bl	80010c0 <send_end_char_to_UART>
}
 8000ee6:	e08f      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S5"))
 8000ee8:	4969      	ldr	r1, [pc, #420]	; (8001090 <parse_UART_message+0x32c>)
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff f994 	bl	8000218 <strcmp>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d102      	bne.n	8000efc <parse_UART_message+0x198>
		send_end_char_to_UART();
 8000ef6:	f000 f8e3 	bl	80010c0 <send_end_char_to_UART>
}
 8000efa:	e085      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S6"))
 8000efc:	4965      	ldr	r1, [pc, #404]	; (8001094 <parse_UART_message+0x330>)
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff f98a 	bl	8000218 <strcmp>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d102      	bne.n	8000f10 <parse_UART_message+0x1ac>
		send_end_char_to_UART();
 8000f0a:	f000 f8d9 	bl	80010c0 <send_end_char_to_UART>
}
 8000f0e:	e07b      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S7"))
 8000f10:	4961      	ldr	r1, [pc, #388]	; (8001098 <parse_UART_message+0x334>)
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff f980 	bl	8000218 <strcmp>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <parse_UART_message+0x1c0>
		send_end_char_to_UART();
 8000f1e:	f000 f8cf 	bl	80010c0 <send_end_char_to_UART>
}
 8000f22:	e071      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S8"))
 8000f24:	495d      	ldr	r1, [pc, #372]	; (800109c <parse_UART_message+0x338>)
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff f976 	bl	8000218 <strcmp>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d102      	bne.n	8000f38 <parse_UART_message+0x1d4>
		send_end_char_to_UART();
 8000f32:	f000 f8c5 	bl	80010c0 <send_end_char_to_UART>
}
 8000f36:	e067      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "Z1"))
 8000f38:	4959      	ldr	r1, [pc, #356]	; (80010a0 <parse_UART_message+0x33c>)
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff f96c 	bl	8000218 <strcmp>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <parse_UART_message+0x1e8>
		send_end_char_to_UART();
 8000f46:	f000 f8bb 	bl	80010c0 <send_end_char_to_UART>
}
 8000f4a:	e05d      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "Z0"))
 8000f4c:	4955      	ldr	r1, [pc, #340]	; (80010a4 <parse_UART_message+0x340>)
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff f962 	bl	8000218 <strcmp>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <parse_UART_message+0x1fc>
		send_end_char_to_UART();
 8000f5a:	f000 f8b1 	bl	80010c0 <send_end_char_to_UART>
}
 8000f5e:	e053      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "F"))
 8000f60:	4951      	ldr	r1, [pc, #324]	; (80010a8 <parse_UART_message+0x344>)
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff f958 	bl	8000218 <strcmp>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d104      	bne.n	8000f78 <parse_UART_message+0x214>
		complete_and_send_string_to_UART(sizeof(MESSAGE_TEST_VALUE), MESSAGE_TEST_VALUE);
 8000f6e:	4929      	ldr	r1, [pc, #164]	; (8001014 <parse_UART_message+0x2b0>)
 8000f70:	2010      	movs	r0, #16
 8000f72:	f000 f8b3 	bl	80010dc <complete_and_send_string_to_UART>
}
 8000f76:	e047      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "V"))
 8000f78:	494c      	ldr	r1, [pc, #304]	; (80010ac <parse_UART_message+0x348>)
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff f94c 	bl	8000218 <strcmp>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d104      	bne.n	8000f90 <parse_UART_message+0x22c>
		complete_and_send_string_to_UART(sizeof(MESSAGE_USB_CAN_VERSION), MESSAGE_USB_CAN_VERSION);
 8000f86:	494a      	ldr	r1, [pc, #296]	; (80010b0 <parse_UART_message+0x34c>)
 8000f88:	2006      	movs	r0, #6
 8000f8a:	f000 f8a7 	bl	80010dc <complete_and_send_string_to_UART>
}
 8000f8e:	e03b      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "N"))
 8000f90:	4948      	ldr	r1, [pc, #288]	; (80010b4 <parse_UART_message+0x350>)
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff f940 	bl	8000218 <strcmp>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d104      	bne.n	8000fa8 <parse_UART_message+0x244>
		complete_and_send_string_to_UART(sizeof(MESSAGE_SERIAL_NUMBER), MESSAGE_SERIAL_NUMBER);
 8000f9e:	4946      	ldr	r1, [pc, #280]	; (80010b8 <parse_UART_message+0x354>)
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	f000 f89b 	bl	80010dc <complete_and_send_string_to_UART>
}
 8000fa6:	e02f      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "RST"))
 8000fa8:	4944      	ldr	r1, [pc, #272]	; (80010bc <parse_UART_message+0x358>)
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff f934 	bl	8000218 <strcmp>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d104      	bne.n	8000fc0 <parse_UART_message+0x25c>
		complete_and_send_string_to_UART(sizeof(MESSAGE_TEST_VALUE), MESSAGE_TEST_VALUE);
 8000fb6:	4917      	ldr	r1, [pc, #92]	; (8001014 <parse_UART_message+0x2b0>)
 8000fb8:	2010      	movs	r0, #16
 8000fba:	f000 f88f 	bl	80010dc <complete_and_send_string_to_UART>
}
 8000fbe:	e023      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (UART_buffer_to_parse[0] == 't')
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b74      	cmp	r3, #116	; 0x74
 8000fc6:	d10d      	bne.n	8000fe4 <parse_UART_message+0x280>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_STANDARD_ID));
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f986 	bl	80012e0 <set_can_frame_parameters>
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f9b0 	bl	8001342 <send_CAN_frame>
}
 8000fe2:	e011      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (UART_buffer_to_parse[0] == 'T')
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b54      	cmp	r3, #84	; 0x54
 8000fea:	d10d      	bne.n	8001008 <parse_UART_message+0x2a4>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_EXTENDED_ID));
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f973 	bl	80012e0 <set_can_frame_parameters>
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f99d 	bl	8001342 <send_CAN_frame>
}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	08005b9c 	.word	0x08005b9c
 8001014:	08005ba8 	.word	0x08005ba8
 8001018:	08005bb8 	.word	0x08005bb8
 800101c:	08005bbc 	.word	0x08005bbc
 8001020:	08005bc0 	.word	0x08005bc0
 8001024:	08005bc4 	.word	0x08005bc4
 8001028:	08005be0 	.word	0x08005be0
 800102c:	08005c04 	.word	0x08005c04
 8001030:	08005c34 	.word	0x08005c34
 8001034:	08005c5c 	.word	0x08005c5c
 8001038:	08005c74 	.word	0x08005c74
 800103c:	08005c8c 	.word	0x08005c8c
 8001040:	08005cac 	.word	0x08005cac
 8001044:	08005ccc 	.word	0x08005ccc
 8001048:	08005cec 	.word	0x08005cec
 800104c:	08005d20 	.word	0x08005d20
 8001050:	08005d54 	.word	0x08005d54
 8001054:	08005d70 	.word	0x08005d70
 8001058:	08005d88 	.word	0x08005d88
 800105c:	08005da4 	.word	0x08005da4
 8001060:	08005dbc 	.word	0x08005dbc
 8001064:	08005dd4 	.word	0x08005dd4
 8001068:	08005de8 	.word	0x08005de8
 800106c:	08005df4 	.word	0x08005df4
 8001070:	08005e18 	.word	0x08005e18
 8001074:	08005e1c 	.word	0x08005e1c
 8001078:	08005e20 	.word	0x08005e20
 800107c:	08005e24 	.word	0x08005e24
 8001080:	08005e28 	.word	0x08005e28
 8001084:	08005e2c 	.word	0x08005e2c
 8001088:	08005e30 	.word	0x08005e30
 800108c:	08005e34 	.word	0x08005e34
 8001090:	08005e38 	.word	0x08005e38
 8001094:	08005e3c 	.word	0x08005e3c
 8001098:	08005e40 	.word	0x08005e40
 800109c:	08005e44 	.word	0x08005e44
 80010a0:	08005e48 	.word	0x08005e48
 80010a4:	08005e4c 	.word	0x08005e4c
 80010a8:	08005e50 	.word	0x08005e50
 80010ac:	08005e54 	.word	0x08005e54
 80010b0:	08005e58 	.word	0x08005e58
 80010b4:	08005e60 	.word	0x08005e60
 80010b8:	08005e64 	.word	0x08005e64
 80010bc:	08005e70 	.word	0x08005e70

080010c0 <send_end_char_to_UART>:

void send_end_char_to_UART(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
	uint8_t tmp_arr_1[1];
	tmp_arr_1[0] = CARRIAGE_RETURN_CHAR;
 80010c6:	230d      	movs	r3, #13
 80010c8:	713b      	strb	r3, [r7, #4]
	send_message_to_UART(sizeof(tmp_arr_1), tmp_arr_1);
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 f850 	bl	8001174 <send_message_to_UART>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <complete_and_send_string_to_UART>:

void complete_and_send_string_to_UART(uint16_t size_of_string, char* string_to_send)
{
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	80fb      	strh	r3, [r7, #6]
 80010e8:	466b      	mov	r3, sp
 80010ea:	461d      	mov	r5, r3
	uint8_t tmp_arr_1[size_of_string];
 80010ec:	88f8      	ldrh	r0, [r7, #6]
 80010ee:	4603      	mov	r3, r0
 80010f0:	3b01      	subs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	b281      	uxth	r1, r0
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	f04f 0400 	mov.w	r4, #0
 8001102:	00d4      	lsls	r4, r2, #3
 8001104:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001108:	00cb      	lsls	r3, r1, #3
 800110a:	b281      	uxth	r1, r0
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	f04f 0400 	mov.w	r4, #0
 8001118:	00d4      	lsls	r4, r2, #3
 800111a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800111e:	00cb      	lsls	r3, r1, #3
 8001120:	4603      	mov	r3, r0
 8001122:	3307      	adds	r3, #7
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	ebad 0d03 	sub.w	sp, sp, r3
 800112c:	466b      	mov	r3, sp
 800112e:	3300      	adds	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(tmp_arr_1); i++)
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	e00b      	b.n	8001150 <complete_and_send_string_to_UART+0x74>
	{
		tmp_arr_1[i] = string_to_send[i];
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	7819      	ldrb	r1, [r3, #0]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	4413      	add	r3, r2
 8001146:	460a      	mov	r2, r1
 8001148:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tmp_arr_1); i++)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	4602      	mov	r2, r0
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8ef      	bhi.n	8001138 <complete_and_send_string_to_UART+0x5c>
	}
	tmp_arr_1[sizeof(tmp_arr_1) - 1] = CARRIAGE_RETURN_CHAR;
 8001158:	4603      	mov	r3, r0
 800115a:	3b01      	subs	r3, #1
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	210d      	movs	r1, #13
 8001160:	54d1      	strb	r1, [r2, r3]
	send_message_to_UART(sizeof(tmp_arr_1), tmp_arr_1);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4619      	mov	r1, r3
 8001166:	f000 f805 	bl	8001174 <send_message_to_UART>
 800116a:	46ad      	mov	sp, r5
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bdb0      	pop	{r4, r5, r7, pc}

08001174 <send_message_to_UART>:

void send_message_to_UART(uint16_t message_size, uint8_t* message_to_send)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	80fb      	strh	r3, [r7, #6]
	for (int ii = 0; ii < message_size; ii++)
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e00a      	b.n	800119c <send_message_to_UART+0x28>
	{
		HAL_UART_Transmit(&huart2, &message_to_send[ii], UART_TX_MESSAGE_SIZE, UART_TIMEOUT);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	18d1      	adds	r1, r2, r3
 800118c:	2364      	movs	r3, #100	; 0x64
 800118e:	2201      	movs	r2, #1
 8001190:	4806      	ldr	r0, [pc, #24]	; (80011ac <send_message_to_UART+0x38>)
 8001192:	f003 fa6b 	bl	800466c <HAL_UART_Transmit>
	for (int ii = 0; ii < message_size; ii++)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbf0      	blt.n	8001186 <send_message_to_UART+0x12>
	}
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200001e8 	.word	0x200001e8

080011b0 <CAN_IT_handler>:

void CAN_IT_handler(void)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b08b      	sub	sp, #44	; 0x2c
 80011b4:	af00      	add	r7, sp, #0
	if (CAN_RX_queue_buffer_write_counter >= sizeof(CAN_RX_data_timestamp_struc_buffer.CAN_RX_data_buffer))
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <CAN_IT_handler+0x60>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b4f      	cmp	r3, #79	; 0x4f
 80011bc:	d902      	bls.n	80011c4 <CAN_IT_handler+0x14>
	{
		CAN_RX_queue_buffer_write_counter = 0;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <CAN_IT_handler+0x60>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
	}

	FDCAN_RxHeaderTypeDef message_header;// = CAN_rx_header_get();
	/* init_int_array_by_zero(sizeof(CAN_RX_data_timestamp_struc_buffer.CAN_RX_data_buffer[CAN_RX_queue_buffer_write_counter]), \
	 CAN_RX_data_timestamp_struc_buffer.CAN_RX_data_buffer[CAN_RX_queue_buffer_write_counter]);	*/	// ??? проверить, надо ли
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &message_header, CAN_RX_data_timestamp_struc_buffer.CAN_RX_data_buffer[CAN_RX_queue_buffer_write_counter]);
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <CAN_IT_handler+0x60>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <CAN_IT_handler+0x64>)
 80011d4:	4413      	add	r3, r2
 80011d6:	463a      	mov	r2, r7
 80011d8:	2140      	movs	r1, #64	; 0x40
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <CAN_IT_handler+0x68>)
 80011dc:	f000 ff0a 	bl	8001ff4 <HAL_FDCAN_GetRxMessage>
	CAN_RX_data_timestamp_struc_buffer.CAN_RX_timestamp_buffer[CAN_RX_queue_buffer_write_counter] = HAL_FDCAN_GetTimestampCounter(&hfdcan1);
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <CAN_IT_handler+0x60>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461c      	mov	r4, r3
 80011e6:	480c      	ldr	r0, [pc, #48]	; (8001218 <CAN_IT_handler+0x68>)
 80011e8:	f000 fe8a 	bl	8001f00 <HAL_FDCAN_GetTimestampCounter>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4619      	mov	r1, r3
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <CAN_IT_handler+0x64>)
 80011f2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80011f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	CAN_RX_queue_buffer_write_counter++;
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <CAN_IT_handler+0x60>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b03      	ldr	r3, [pc, #12]	; (8001210 <CAN_IT_handler+0x60>)
 8001204:	701a      	strb	r2, [r3, #0]

}
 8001206:	bf00      	nop
 8001208:	372c      	adds	r7, #44	; 0x2c
 800120a:	46bd      	mov	sp, r7
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	bf00      	nop
 8001210:	2000017d 	.word	0x2000017d
 8001214:	20000274 	.word	0x20000274
 8001218:	20000180 	.word	0x20000180

0800121c <CAN_RX_queue_polling>:

void CAN_RX_queue_polling(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	if (CAN_RX_queue_buffer_write_counter > 0)
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <CAN_RX_queue_polling+0x54>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d01d      	beq.n	8001266 <CAN_RX_queue_polling+0x4a>
	{
		for (int i = 0; i < CAN_RX_queue_buffer_write_counter; i++)
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	e011      	b.n	8001254 <CAN_RX_queue_polling+0x38>
		{
			parse_CAN_message(CAN_RX_data_timestamp_struc_buffer.CAN_RX_data_buffer[i], CAN_RX_data_timestamp_struc_buffer.CAN_RX_timestamp_buffer[i]);
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <CAN_RX_queue_polling+0x58>)
 800123c:	1898      	adds	r0, r3, r2
 800123e:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <CAN_RX_queue_polling+0x58>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3328      	adds	r3, #40	; 0x28
 8001244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001248:	4619      	mov	r1, r3
 800124a:	f000 f815 	bl	8001278 <parse_CAN_message>
		for (int i = 0; i < CAN_RX_queue_buffer_write_counter; i++)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3301      	adds	r3, #1
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <CAN_RX_queue_polling+0x54>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4293      	cmp	r3, r2
 800125e:	dbe7      	blt.n	8001230 <CAN_RX_queue_polling+0x14>
		}
		CAN_RX_queue_buffer_write_counter = 0;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <CAN_RX_queue_polling+0x54>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
	}
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000017d 	.word	0x2000017d
 8001274:	20000274 	.word	0x20000274

08001278 <parse_CAN_message>:

void parse_CAN_message(uint8_t* CAN_data_buffer_to_parse, uint16_t CAN_timestamp_buffer_to_parse)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]

}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <init_CAN_values>:
	HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &test_header, test_data);
}
*/

void init_CAN_values(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
	CAN_RX_queue_buffer_write_counter = 0;
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <init_CAN_values+0x44>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < sizeof(CAN_RX_data_timestamp_struc_buffer.CAN_RX_data_buffer); i++)			// инициализируем нулями массив очереди на отправку
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	e00d      	b.n	80012be <init_CAN_values+0x2e>
	{
		init_int_array_by_zero(sizeof(CAN_RX_data_timestamp_struc_buffer.CAN_RX_data_buffer[i]), CAN_RX_data_timestamp_struc_buffer.CAN_RX_data_buffer[i]);
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <init_CAN_values+0x48>)
 80012ae:	4413      	add	r3, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	2014      	movs	r0, #20
 80012b4:	f000 fa2a 	bl	800170c <init_int_array_by_zero>
	for (int i = 0; i < sizeof(CAN_RX_data_timestamp_struc_buffer.CAN_RX_data_buffer); i++)			// инициализируем нулями массив очереди на отправку
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3301      	adds	r3, #1
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b4f      	cmp	r3, #79	; 0x4f
 80012c2:	d9ee      	bls.n	80012a2 <init_CAN_values+0x12>
	}

	init_int_array_by_zero(sizeof(CAN_RX_data_timestamp_struc_buffer.CAN_RX_timestamp_buffer), (uint8_t*)CAN_RX_data_timestamp_struc_buffer.CAN_RX_timestamp_buffer);
 80012c4:	4905      	ldr	r1, [pc, #20]	; (80012dc <init_CAN_values+0x4c>)
 80012c6:	2008      	movs	r0, #8
 80012c8:	f000 fa20 	bl	800170c <init_int_array_by_zero>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000017d 	.word	0x2000017d
 80012d8:	20000274 	.word	0x20000274
 80012dc:	200002c4 	.word	0x200002c4

080012e0 <set_can_frame_parameters>:

CAN_ParametersSet_StructTypeDef set_can_frame_parameters(uint32_t id_type_set)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	CAN_ParametersSet_StructTypeDef CAN_frame_parameters;

	switch (id_type_set)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <set_can_frame_parameters+0x18>
 80012f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f4:	d00b      	beq.n	800130e <set_can_frame_parameters+0x2e>
 80012f6:	e016      	b.n	8001326 <set_can_frame_parameters+0x46>
	{
	case FDCAN_STANDARD_ID:
	{
		CAN_frame_parameters.id_type = FDCAN_STANDARD_ID;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
		CAN_frame_parameters.id_lenght_in_bytes = STANDARD_CAN_MESSAGE_ID_LENGHT_BYTE;
 80012fc:	2303      	movs	r3, #3
 80012fe:	733b      	strb	r3, [r7, #12]
		CAN_frame_parameters.id_byte_number = STANDARD_CAN_MESSAGE_ID_BYTE;
 8001300:	2301      	movs	r3, #1
 8001302:	737b      	strb	r3, [r7, #13]
		CAN_frame_parameters.data_lenght_byte_number = STANDARD_CAN_MESSAGE_DATA_LENGHT_BYTE;
 8001304:	2304      	movs	r3, #4
 8001306:	73bb      	strb	r3, [r7, #14]
		CAN_frame_parameters.data_start_byte_number = STANDARD_CAN_MESSAGE_DATA_START_BYTE;
 8001308:	2305      	movs	r3, #5
 800130a:	73fb      	strb	r3, [r7, #15]
		break;
 800130c:	e00b      	b.n	8001326 <set_can_frame_parameters+0x46>
	}
	case FDCAN_EXTENDED_ID:
	{
		CAN_frame_parameters.id_type = FDCAN_EXTENDED_ID;
 800130e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001312:	60bb      	str	r3, [r7, #8]
		CAN_frame_parameters.id_lenght_in_bytes = EXTENDED_CAN_MESSAGE_ID_LENGHT_BYTE;
 8001314:	2308      	movs	r3, #8
 8001316:	733b      	strb	r3, [r7, #12]
		CAN_frame_parameters.id_byte_number = EXTENDED_CAN_MESSAGE_ID_BYTE;
 8001318:	2301      	movs	r3, #1
 800131a:	737b      	strb	r3, [r7, #13]
		CAN_frame_parameters.data_lenght_byte_number = EXTENDED_CAN_MESSAGE_DATA_LENGHT_BYTE;
 800131c:	2309      	movs	r3, #9
 800131e:	73bb      	strb	r3, [r7, #14]
		CAN_frame_parameters.data_start_byte_number = EXTENDED_CAN_MESSAGE_DATA_START_BYTE;
 8001320:	230a      	movs	r3, #10
 8001322:	73fb      	strb	r3, [r7, #15]
		break;
 8001324:	bf00      	nop
	}
	}

	return CAN_frame_parameters;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	461a      	mov	r2, r3
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001332:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <send_CAN_frame>:

void send_CAN_frame(char* can_buffer_to_parse, CAN_ParametersSet_StructTypeDef CAN_frame_parameters_set)
{
 8001342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	e883 0006 	stmia.w	r3, {r1, r2}
 8001352:	466b      	mov	r3, sp
 8001354:	461e      	mov	r6, r3
	uint8_t id_array[CAN_frame_parameters_set.id_lenght_in_bytes];
 8001356:	7a3d      	ldrb	r5, [r7, #8]
 8001358:	462b      	mov	r3, r5
 800135a:	3b01      	subs	r3, #1
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
 800135e:	b2e9      	uxtb	r1, r5
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	f04f 0400 	mov.w	r4, #0
 800136c:	00d4      	lsls	r4, r2, #3
 800136e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001372:	00cb      	lsls	r3, r1, #3
 8001374:	b2e9      	uxtb	r1, r5
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	f04f 0400 	mov.w	r4, #0
 8001382:	00d4      	lsls	r4, r2, #3
 8001384:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001388:	00cb      	lsls	r3, r1, #3
 800138a:	462b      	mov	r3, r5
 800138c:	3307      	adds	r3, #7
 800138e:	08db      	lsrs	r3, r3, #3
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	ebad 0d03 	sub.w	sp, sp, r3
 8001396:	466b      	mov	r3, sp
 8001398:	3300      	adds	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i = 0; i < sizeof(id_array); i++)
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013a0:	e014      	b.n	80013cc <send_CAN_frame+0x8a>
	{
		id_array[i] = convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.id_byte_number + i]);
 80013a2:	7a7b      	ldrb	r3, [r7, #9]
 80013a4:	461a      	mov	r2, r3
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	4413      	add	r3, r2
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f897 	bl	80014e6 <convert_ascii_hex_char_to_int_value>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4619      	mov	r1, r3
 80013bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c0:	4413      	add	r3, r2
 80013c2:	460a      	mov	r2, r1
 80013c4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(id_array); i++)
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	3301      	adds	r3, #1
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013cc:	462a      	mov	r2, r5
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d8e6      	bhi.n	80013a2 <send_CAN_frame+0x60>
	}
	uint32_t identifier = unite_digits_sequence(sizeof(id_array), id_array, ASCII_TO_INT_CONVERT_BITWISE_SHIFT);
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	2204      	movs	r2, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4628      	mov	r0, r5
 80013dc:	f000 f9b1 	bl	8001742 <unite_digits_sequence>
 80013e0:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t data_lenght = CAN_message_DLC_bytes_define(convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_lenght_byte_number]));
 80013e2:	7abb      	ldrb	r3, [r7, #10]
 80013e4:	461a      	mov	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f87a 	bl	80014e6 <convert_ascii_hex_char_to_int_value>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 f88f 	bl	8001518 <CAN_message_DLC_bytes_define>
 80013fa:	6238      	str	r0, [r7, #32]
	uint8_t can_tx_data_buffer[convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_lenght_byte_number])];
 80013fc:	7abb      	ldrb	r3, [r7, #10]
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f86d 	bl	80014e6 <convert_ascii_hex_char_to_int_value>
 800140c:	4603      	mov	r3, r0
 800140e:	461d      	mov	r5, r3
 8001410:	466b      	mov	r3, sp
 8001412:	4698      	mov	r8, r3
 8001414:	462b      	mov	r3, r5
 8001416:	3b01      	subs	r3, #1
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	b2e9      	uxtb	r1, r5
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	f04f 0400 	mov.w	r4, #0
 8001428:	00d4      	lsls	r4, r2, #3
 800142a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800142e:	00cb      	lsls	r3, r1, #3
 8001430:	b2e9      	uxtb	r1, r5
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	f04f 0400 	mov.w	r4, #0
 800143e:	00d4      	lsls	r4, r2, #3
 8001440:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001444:	00cb      	lsls	r3, r1, #3
 8001446:	462b      	mov	r3, r5
 8001448:	3307      	adds	r3, #7
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	ebad 0d03 	sub.w	sp, sp, r3
 8001452:	466b      	mov	r3, sp
 8001454:	3300      	adds	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]

	for (int i = 0; i < (sizeof(can_tx_data_buffer)*2); i++)
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
 800145c:	e031      	b.n	80014c2 <send_CAN_frame+0x180>
	{
		if ((i % 2) == 0)
 800145e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d129      	bne.n	80014bc <send_CAN_frame+0x17a>
		{
			uint8_t value_array[2];
			value_array[0] = convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_start_byte_number + i]);
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	461a      	mov	r2, r3
 800146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146e:	4413      	add	r3, r2
 8001470:	461a      	mov	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 f834 	bl	80014e6 <convert_ascii_hex_char_to_int_value>
 800147e:	4603      	mov	r3, r0
 8001480:	753b      	strb	r3, [r7, #20]
			value_array[1] = convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_start_byte_number + i + 1]);
 8001482:	7afb      	ldrb	r3, [r7, #11]
 8001484:	461a      	mov	r2, r3
 8001486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001488:	4413      	add	r3, r2
 800148a:	3301      	adds	r3, #1
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f827 	bl	80014e6 <convert_ascii_hex_char_to_int_value>
 8001498:	4603      	mov	r3, r0
 800149a:	757b      	strb	r3, [r7, #21]
			can_tx_data_buffer[i/2] = unite_digits_sequence(sizeof(value_array), value_array, ASCII_TO_INT_CONVERT_BITWISE_SHIFT);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2204      	movs	r2, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	2002      	movs	r0, #2
 80014a6:	f000 f94c 	bl	8001742 <unite_digits_sequence>
 80014aa:	4601      	mov	r1, r0
 80014ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ae:	0fda      	lsrs	r2, r3, #31
 80014b0:	4413      	add	r3, r2
 80014b2:	105b      	asrs	r3, r3, #1
 80014b4:	461a      	mov	r2, r3
 80014b6:	b2c9      	uxtb	r1, r1
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	5499      	strb	r1, [r3, r2]
	for (int i = 0; i < (sizeof(can_tx_data_buffer)*2); i++)
 80014bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014be:	3301      	adds	r3, #1
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
 80014c2:	462b      	mov	r3, r5
 80014c4:	005a      	lsls	r2, r3, #1
 80014c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8c8      	bhi.n	800145e <send_CAN_frame+0x11c>
		}
	}

	CAN_transmit_message(CAN_frame_parameters_set.id_type, identifier, data_lenght, can_tx_data_buffer);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	6a3a      	ldr	r2, [r7, #32]
 80014d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d4:	f000 f8f4 	bl	80016c0 <CAN_transmit_message>
 80014d8:	46c5      	mov	sp, r8
 80014da:	46b5      	mov	sp, r6
}
 80014dc:	bf00      	nop
 80014de:	3738      	adds	r7, #56	; 0x38
 80014e0:	46bd      	mov	sp, r7
 80014e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080014e6 <convert_ascii_hex_char_to_int_value>:

uint8_t convert_ascii_hex_char_to_int_value(char char_to_convert)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	71fb      	strb	r3, [r7, #7]
	uint8_t int_value = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]
	if ((int)char_to_convert <= (int)'9')
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b39      	cmp	r3, #57	; 0x39
 80014f8:	d803      	bhi.n	8001502 <convert_ascii_hex_char_to_int_value+0x1c>
	{
		int_value = char_to_convert - '0';
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	3b30      	subs	r3, #48	; 0x30
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	e002      	b.n	8001508 <convert_ascii_hex_char_to_int_value+0x22>
	}
	else
	{
		int_value = char_to_convert - 'A' + 10;
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	3b37      	subs	r3, #55	; 0x37
 8001506:	73fb      	strb	r3, [r7, #15]
	}

	return int_value;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <CAN_message_DLC_bytes_define>:

uint32_t CAN_message_DLC_bytes_define(uint32_t data_lenght_bytes)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	uint32_t DLC_bytes;

	switch (data_lenght_bytes)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b40      	cmp	r3, #64	; 0x40
 8001524:	f200 80c5 	bhi.w	80016b2 <CAN_message_DLC_bytes_define+0x19a>
 8001528:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <CAN_message_DLC_bytes_define+0x18>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001635 	.word	0x08001635
 8001534:	0800163b 	.word	0x0800163b
 8001538:	08001643 	.word	0x08001643
 800153c:	0800164b 	.word	0x0800164b
 8001540:	08001653 	.word	0x08001653
 8001544:	0800165b 	.word	0x0800165b
 8001548:	08001663 	.word	0x08001663
 800154c:	0800166b 	.word	0x0800166b
 8001550:	08001673 	.word	0x08001673
 8001554:	080016b3 	.word	0x080016b3
 8001558:	080016b3 	.word	0x080016b3
 800155c:	080016b3 	.word	0x080016b3
 8001560:	0800167b 	.word	0x0800167b
 8001564:	080016b3 	.word	0x080016b3
 8001568:	080016b3 	.word	0x080016b3
 800156c:	080016b3 	.word	0x080016b3
 8001570:	08001683 	.word	0x08001683
 8001574:	080016b3 	.word	0x080016b3
 8001578:	080016b3 	.word	0x080016b3
 800157c:	080016b3 	.word	0x080016b3
 8001580:	0800168b 	.word	0x0800168b
 8001584:	080016b3 	.word	0x080016b3
 8001588:	080016b3 	.word	0x080016b3
 800158c:	080016b3 	.word	0x080016b3
 8001590:	08001693 	.word	0x08001693
 8001594:	080016b3 	.word	0x080016b3
 8001598:	080016b3 	.word	0x080016b3
 800159c:	080016b3 	.word	0x080016b3
 80015a0:	080016b3 	.word	0x080016b3
 80015a4:	080016b3 	.word	0x080016b3
 80015a8:	080016b3 	.word	0x080016b3
 80015ac:	080016b3 	.word	0x080016b3
 80015b0:	0800169b 	.word	0x0800169b
 80015b4:	080016b3 	.word	0x080016b3
 80015b8:	080016b3 	.word	0x080016b3
 80015bc:	080016b3 	.word	0x080016b3
 80015c0:	080016b3 	.word	0x080016b3
 80015c4:	080016b3 	.word	0x080016b3
 80015c8:	080016b3 	.word	0x080016b3
 80015cc:	080016b3 	.word	0x080016b3
 80015d0:	080016b3 	.word	0x080016b3
 80015d4:	080016b3 	.word	0x080016b3
 80015d8:	080016b3 	.word	0x080016b3
 80015dc:	080016b3 	.word	0x080016b3
 80015e0:	080016b3 	.word	0x080016b3
 80015e4:	080016b3 	.word	0x080016b3
 80015e8:	080016b3 	.word	0x080016b3
 80015ec:	080016b3 	.word	0x080016b3
 80015f0:	080016a3 	.word	0x080016a3
 80015f4:	080016b3 	.word	0x080016b3
 80015f8:	080016b3 	.word	0x080016b3
 80015fc:	080016b3 	.word	0x080016b3
 8001600:	080016b3 	.word	0x080016b3
 8001604:	080016b3 	.word	0x080016b3
 8001608:	080016b3 	.word	0x080016b3
 800160c:	080016b3 	.word	0x080016b3
 8001610:	080016b3 	.word	0x080016b3
 8001614:	080016b3 	.word	0x080016b3
 8001618:	080016b3 	.word	0x080016b3
 800161c:	080016b3 	.word	0x080016b3
 8001620:	080016b3 	.word	0x080016b3
 8001624:	080016b3 	.word	0x080016b3
 8001628:	080016b3 	.word	0x080016b3
 800162c:	080016b3 	.word	0x080016b3
 8001630:	080016ab 	.word	0x080016ab
	{
	case 0:
	{
		DLC_bytes = FDCAN_DLC_BYTES_0;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
		break;
 8001638:	e03b      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 1:
	{
		DLC_bytes = FDCAN_DLC_BYTES_1;
 800163a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163e:	60fb      	str	r3, [r7, #12]
		break;
 8001640:	e037      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 2:
	{
		DLC_bytes = FDCAN_DLC_BYTES_2;
 8001642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001646:	60fb      	str	r3, [r7, #12]
		break;
 8001648:	e033      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 3:
	{
		DLC_bytes = FDCAN_DLC_BYTES_3;
 800164a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800164e:	60fb      	str	r3, [r7, #12]
		break;
 8001650:	e02f      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 4:
	{
		DLC_bytes = FDCAN_DLC_BYTES_4;
 8001652:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001656:	60fb      	str	r3, [r7, #12]
		break;
 8001658:	e02b      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 5:
	{
		DLC_bytes = FDCAN_DLC_BYTES_5;
 800165a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800165e:	60fb      	str	r3, [r7, #12]
		break;
 8001660:	e027      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 6:
	{
		DLC_bytes = FDCAN_DLC_BYTES_6;
 8001662:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001666:	60fb      	str	r3, [r7, #12]
		break;
 8001668:	e023      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 7:
	{
		DLC_bytes = FDCAN_DLC_BYTES_7;
 800166a:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800166e:	60fb      	str	r3, [r7, #12]
		break;
 8001670:	e01f      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 8:
	{
		DLC_bytes = FDCAN_DLC_BYTES_8;
 8001672:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001676:	60fb      	str	r3, [r7, #12]
		break;
 8001678:	e01b      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 12:
	{
		DLC_bytes = FDCAN_DLC_BYTES_12;
 800167a:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800167e:	60fb      	str	r3, [r7, #12]
		break;
 8001680:	e017      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 16:
	{
		DLC_bytes = FDCAN_DLC_BYTES_16;
 8001682:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8001686:	60fb      	str	r3, [r7, #12]
		break;
 8001688:	e013      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 20:
	{
		DLC_bytes = FDCAN_DLC_BYTES_20;
 800168a:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 800168e:	60fb      	str	r3, [r7, #12]
		break;
 8001690:	e00f      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 24:
	{
		DLC_bytes = FDCAN_DLC_BYTES_24;
 8001692:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001696:	60fb      	str	r3, [r7, #12]
		break;
 8001698:	e00b      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 32:
	{
		DLC_bytes = FDCAN_DLC_BYTES_32;
 800169a:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 800169e:	60fb      	str	r3, [r7, #12]
		break;
 80016a0:	e007      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 48:
	{
		DLC_bytes = FDCAN_DLC_BYTES_48;
 80016a2:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80016a6:	60fb      	str	r3, [r7, #12]
		break;
 80016a8:	e003      	b.n	80016b2 <CAN_message_DLC_bytes_define+0x19a>
	}
	case 64:
	{
		DLC_bytes = FDCAN_DLC_BYTES_64;
 80016aa:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80016ae:	60fb      	str	r3, [r7, #12]
		break;
 80016b0:	bf00      	nop
	}
	}

	return DLC_bytes;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <CAN_transmit_message>:

void CAN_transmit_message(uint32_t id_type, uint32_t identifier, uint32_t data_lenght, uint8_t* tx_data)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08e      	sub	sp, #56	; 0x38
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
	FDCAN_TxHeaderTypeDef tx_header;

	tx_header.Identifier = identifier;
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	617b      	str	r3, [r7, #20]
	tx_header.IdType = id_type;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
	tx_header.TxFrameType = FDCAN_DATA_FRAME;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
	tx_header.DataLength = data_lenght;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	623b      	str	r3, [r7, #32]
	tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
	tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
	tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80016ea:	2300      	movs	r3, #0
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
	tx_header.MessageMarker = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &tx_header, tx_data);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <CAN_transmit_message+0x48>)
 80016fc:	f000 fc36 	bl	8001f6c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8001700:	bf00      	nop
 8001702:	3738      	adds	r7, #56	; 0x38
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000180 	.word	0x20000180

0800170c <init_int_array_by_zero>:
	}
}

// инициализируем нулями целочисленный массив
void init_int_array_by_zero(uint16_t array_size, uint8_t* array_pointer)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	80fb      	strh	r3, [r7, #6]
	for (int int_zero_counter = 0; int_zero_counter < array_size; int_zero_counter++)
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	e007      	b.n	800172e <init_int_array_by_zero+0x22>
	{
		*(array_pointer + int_zero_counter) = 0;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	4413      	add	r3, r2
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
	for (int int_zero_counter = 0; int_zero_counter < array_size; int_zero_counter++)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbf3      	blt.n	800171e <init_int_array_by_zero+0x12>
	}
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <unite_digits_sequence>:

uint32_t unite_digits_sequence(uint8_t number_of_values, uint8_t *byte_array_pointer, uint8_t bitwise_shift)
{
 8001742:	b480      	push	{r7}
 8001744:	b085      	sub	sp, #20
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	6039      	str	r1, [r7, #0]
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	4613      	mov	r3, r2
 8001750:	71bb      	strb	r3, [r7, #6]
	uint32_t summary_value = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
	for (int i = number_of_values - 1; i >= 0; i--)
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	3b01      	subs	r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	e014      	b.n	8001788 <unite_digits_sequence+0x46>
	{
		summary_value = summary_value | (byte_array_pointer[i] << ((number_of_values - 1 - i)*bitwise_shift));
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4619      	mov	r1, r3
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	1e5a      	subs	r2, r3, #1
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	79ba      	ldrb	r2, [r7, #6]
 8001772:	fb02 f303 	mul.w	r3, r2, r3
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
	for (int i = number_of_values - 1; i >= 0; i--)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3b01      	subs	r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	dae7      	bge.n	800175e <unite_digits_sequence+0x1c>
	}
	return summary_value;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800179e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017a2:	490e      	ldr	r1, [pc, #56]	; (80017dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <LoopForever+0xe>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b8:	4c0b      	ldr	r4, [pc, #44]	; (80017e8 <LoopForever+0x16>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c6:	f7ff f9b9 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ca:	f004 f9af 	bl	8005b2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ce:	f7fe fead 	bl	800052c <main>

080017d2 <LoopForever>:

LoopForever:
    b LoopForever
 80017d2:	e7fe      	b.n	80017d2 <LoopForever>
  ldr   r0, =_estack
 80017d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017e0:	08005ed4 	.word	0x08005ed4
  ldr r2, =_sbss
 80017e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017e8:	200002d4 	.word	0x200002d4

080017ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>

080017ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 f939 	bl	8001a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 f80e 	bl	8001820 <HAL_InitTick>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	71fb      	strb	r3, [r7, #7]
 800180e:	e001      	b.n	8001814 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001810:	f7ff f860 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001814:	79fb      	ldrb	r3, [r7, #7]

}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_InitTick+0x68>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d022      	beq.n	800187a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_InitTick+0x6c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_InitTick+0x68>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001840:	fbb1 f3f3 	udiv	r3, r1, r3
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f944 	bl	8001ad6 <HAL_SYSTICK_Config>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10f      	bne.n	8001874 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	d809      	bhi.n	800186e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185a:	2200      	movs	r2, #0
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	f04f 30ff 	mov.w	r0, #4294967295
 8001862:	f000 f910 	bl	8001a86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_InitTick+0x70>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e007      	b.n	800187e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e004      	b.n	800187e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e001      	b.n	800187e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000008 	.word	0x20000008
 800188c:	20000000 	.word	0x20000000
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_IncTick+0x1c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x20>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <HAL_IncTick+0x1c>)
 80018a4:	6013      	str	r3, [r2, #0]
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	200002d0 	.word	0x200002d0
 80018b4:	20000008 	.word	0x20000008

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200002d0 	.word	0x200002d0

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4907      	ldr	r1, [pc, #28]	; (800196c <__NVIC_EnableIRQ+0x38>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	; (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a3c:	d301      	bcc.n	8001a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00f      	b.n	8001a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <SysTick_Config+0x40>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f7ff ff8e 	bl	8001970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <SysTick_Config+0x40>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SysTick_Config+0x40>)
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	e000e010 	.word	0xe000e010

08001a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff29 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff40 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff90 	bl	80019c4 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5f 	bl	8001970 <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff33 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffa4 	bl	8001a2c <SysTick_Config>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d00d      	beq.n	8001b22 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2204      	movs	r2, #4
 8001b0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	e047      	b.n	8001bb2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 020e 	bic.w	r2, r2, #14
 8001b30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f003 021f 	and.w	r2, r3, #31
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2101      	movs	r1, #1
 8001b60:	fa01 f202 	lsl.w	r2, r1, r2
 8001b64:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b6e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00c      	beq.n	8001b92 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b90:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
    }
  }
  return status;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e147      	b.n	8001e5e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe fe9a 	bl	800091c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699a      	ldr	r2, [r3, #24]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0210 	bic.w	r2, r2, #16
 8001bf6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf8:	f7ff fe5e 	bl	80018b8 <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001bfe:	e012      	b.n	8001c26 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001c00:	f7ff fe5a 	bl	80018b8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b0a      	cmp	r3, #10
 8001c0c:	d90b      	bls.n	8001c26 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e11b      	b.n	8001e5e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d0e5      	beq.n	8001c00 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c44:	f7ff fe38 	bl	80018b8 <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001c4a:	e012      	b.n	8001c72 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001c4c:	f7ff fe34 	bl	80018b8 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b0a      	cmp	r3, #10
 8001c58:	d90b      	bls.n	8001c72 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0f5      	b.n	8001e5e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0e5      	beq.n	8001c4c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0202 	orr.w	r2, r2, #2
 8001c8e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a74      	ldr	r2, [pc, #464]	; (8001e68 <HAL_FDCAN_Init+0x2ac>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d103      	bne.n	8001ca2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001c9a:	4a74      	ldr	r2, [pc, #464]	; (8001e6c <HAL_FDCAN_Init+0x2b0>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7c1b      	ldrb	r3, [r3, #16]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d108      	bne.n	8001cbc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cb8:	619a      	str	r2, [r3, #24]
 8001cba:	e007      	b.n	8001ccc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cca:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7c5b      	ldrb	r3, [r3, #17]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d108      	bne.n	8001ce6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ce2:	619a      	str	r2, [r3, #24]
 8001ce4:	e007      	b.n	8001cf6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699a      	ldr	r2, [r3, #24]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cf4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7c9b      	ldrb	r3, [r3, #18]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d108      	bne.n	8001d10 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d0c:	619a      	str	r2, [r3, #24]
 8001d0e:	e007      	b.n	8001d20 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699a      	ldr	r2, [r3, #24]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d1e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001d44:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0210 	bic.w	r2, r2, #16
 8001d54:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d108      	bne.n	8001d70 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0204 	orr.w	r2, r2, #4
 8001d6c:	619a      	str	r2, [r3, #24]
 8001d6e:	e02c      	b.n	8001dca <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d028      	beq.n	8001dca <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d01c      	beq.n	8001dba <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d8e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0210 	orr.w	r2, r2, #16
 8001d9e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d110      	bne.n	8001dca <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699a      	ldr	r2, [r3, #24]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0220 	orr.w	r2, r2, #32
 8001db6:	619a      	str	r2, [r3, #24]
 8001db8:	e007      	b.n	8001dca <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699a      	ldr	r2, [r3, #24]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0220 	orr.w	r2, r2, #32
 8001dc8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001dda:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001de2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001df2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001df4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dfe:	d115      	bne.n	8001e2c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001e0e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	3b01      	subs	r3, #1
 8001e16:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001e18:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	3b01      	subs	r3, #1
 8001e22:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001e28:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001e2a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fc44 	bl	80026d0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40006400 	.word	0x40006400
 8001e6c:	40006500 	.word	0x40006500

08001e70 <HAL_FDCAN_ConfigTimestampCounter>:
  * @param  TimestampPrescaler Timestamp Counter Prescaler.
  *         This parameter can be a value of @arg FDCAN_Timestamp_Prescaler.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTimestampCounter(FDCAN_HandleTypeDef *hfdcan, uint32_t TimestampPrescaler)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TIMESTAMP_PRESCALER(TimestampPrescaler));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10b      	bne.n	8001e9e <HAL_FDCAN_ConfigTimestampCounter+0x2e>
  {
    /* Configure prescaler */
    MODIFY_REG(hfdcan->Instance->TSCC, FDCAN_TSCC_TCP, TimestampPrescaler);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	621a      	str	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e006      	b.n	8001eac <HAL_FDCAN_ConfigTimestampCounter+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea2:	f043 0204 	orr.w	r2, r3, #4
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
  }
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_FDCAN_EnableTimestampCounter>:
  * @param  TimestampOperation Timestamp counter operation.
  *         This parameter can be a value of @arg FDCAN_Timestamp.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTimestampCounter(FDCAN_HandleTypeDef *hfdcan, uint32_t TimestampOperation)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TIMESTAMP(TimestampOperation));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10b      	bne.n	8001ee6 <HAL_FDCAN_EnableTimestampCounter+0x2e>
  {
    /* Enable timestamp counter */
    MODIFY_REG(hfdcan->Instance->TSCC, FDCAN_TSCC_TSS, TimestampOperation);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f023 0103 	bic.w	r1, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	621a      	str	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e006      	b.n	8001ef4 <HAL_FDCAN_EnableTimestampCounter+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eea:	f043 0204 	orr.w	r2, r3, #4
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
  }
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_FDCAN_GetTimestampCounter>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Timestamp counter value
  */
uint16_t HAL_FDCAN_GetTimestampCounter(FDCAN_HandleTypeDef *hfdcan)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return (uint16_t)(hfdcan->Instance->TSCV);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d110      	bne.n	8001f52 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e006      	b.n	8001f60 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	f043 0204 	orr.w	r2, r3, #4
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
  }
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d12c      	bne.n	8001fde <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e023      	b.n	8001fec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001fac:	0c1b      	lsrs	r3, r3, #16
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fbde 	bl	800277c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fcc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e006      	b.n	8001fec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe2:	f043 0208 	orr.w	r2, r3, #8
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
  }
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b08b      	sub	sp, #44	; 0x2c
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002008:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800200a:	7efb      	ldrb	r3, [r7, #27]
 800200c:	2b02      	cmp	r3, #2
 800200e:	f040 80bc 	bne.w	800218a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b40      	cmp	r3, #64	; 0x40
 8002016:	d121      	bne.n	800205c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0af      	b.n	8002198 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	e020      	b.n	800209e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002070:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e08d      	b.n	8002198 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d107      	bne.n	80020c2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0c9b      	lsrs	r3, r3, #18
 80020b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e005      	b.n	80020ce <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	3304      	adds	r3, #4
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	0e1b      	lsrs	r3, r3, #24
 8002120:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0fda      	lsrs	r2, r3, #31
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	3304      	adds	r3, #4
 8002136:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
 8002140:	e00a      	b.n	8002158 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	441a      	add	r2, r3
 8002148:	6839      	ldr	r1, [r7, #0]
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	440b      	add	r3, r1
 800214e:	7812      	ldrb	r2, [r2, #0]
 8002150:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	3301      	adds	r3, #1
 8002156:	623b      	str	r3, [r7, #32]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0c1b      	lsrs	r3, r3, #16
 800215e:	4a11      	ldr	r2, [pc, #68]	; (80021a4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	461a      	mov	r2, r3
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	4293      	cmp	r3, r2
 8002168:	d3eb      	bcc.n	8002142 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b40      	cmp	r3, #64	; 0x40
 800216e:	d105      	bne.n	800217c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800217a:	e004      	b.n	8002186 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e006      	b.n	8002198 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218e:	f043 0208 	orr.w	r2, r3, #8
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
  }
}
 8002198:	4618      	mov	r0, r3
 800219a:	372c      	adds	r7, #44	; 0x2c
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	08005e9c 	.word	0x08005e9c

080021a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021ba:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d003      	beq.n	80021ca <HAL_FDCAN_ActivateNotification+0x22>
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	f040 80c8 	bne.w	800235a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d004      	beq.n	80021e6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d03b      	beq.n	800225e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d031      	beq.n	800225e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d027      	beq.n	800225e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d01d      	beq.n	800225e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002228:	2b00      	cmp	r3, #0
 800222a:	d004      	beq.n	8002236 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	d013      	beq.n	800225e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800223c:	2b00      	cmp	r3, #0
 800223e:	d004      	beq.n	800224a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00c      	beq.n	800226e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	d107      	bne.n	800226e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	2b00      	cmp	r3, #0
 8002276:	d004      	beq.n	8002282 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d13b      	bne.n	80022fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002288:	2b00      	cmp	r3, #0
 800228a:	d004      	beq.n	8002296 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d131      	bne.n	80022fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d127      	bne.n	80022fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d11d      	bne.n	80022fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d113      	bne.n	80022fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d004      	beq.n	80022e6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00c      	beq.n	800230a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d007      	beq.n	800230a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0202 	orr.w	r2, r2, #2
 8002308:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	2b00      	cmp	r3, #0
 8002312:	d009      	beq.n	8002328 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	430a      	orrs	r2, r1
 8002324:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	430a      	orrs	r2, r1
 8002342:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	430a      	orrs	r2, r1
 8002354:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e006      	b.n	8002368 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235e:	f043 0202 	orr.w	r2, r3, #2
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
  }
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002382:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002390:	4013      	ands	r3, r2
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	6a3a      	ldr	r2, [r7, #32]
 80023a8:	4013      	ands	r3, r2
 80023aa:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023b6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ca:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80023ce:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023e6:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00d      	beq.n	800241e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2240      	movs	r2, #64	; 0x40
 8002416:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f939 	bl	8002690 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01b      	beq.n	8002464 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d014      	beq.n	8002464 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002442:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800245a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800245c:	6939      	ldr	r1, [r7, #16]
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8f7 	bl	8002652 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002470:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f8b6 	bl	80025e6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a3a      	ldr	r2, [r7, #32]
 8002486:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002488:	6a39      	ldr	r1, [r7, #32]
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f8b6 	bl	80025fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800249e:	69f9      	ldr	r1, [r7, #28]
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f8b6 	bl	8002612 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00e      	beq.n	80024d2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f8ab 	bl	8002628 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01a      	beq.n	8002516 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d013      	beq.n	8002516 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80024f6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4013      	ands	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800250e:	68f9      	ldr	r1, [r7, #12]
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f893 	bl	800263c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00e      	beq.n	8002542 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800253a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f893 	bl	8002668 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00e      	beq.n	800256e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002566:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f887 	bl	800267c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d011      	beq.n	80025a0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002592:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002598:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80025ae:	6979      	ldr	r1, [r7, #20]
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f881 	bl	80026b8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d009      	beq.n	80025d0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f863 	bl	80026a4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80025de:	bf00      	nop
 80025e0:	3728      	adds	r7, #40	; 0x28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80026da:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ea:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f2:	041a      	lsls	r2, r3, #16
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002710:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	061a      	lsls	r2, r3, #24
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e005      	b.n	800275e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3304      	adds	r3, #4
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	429a      	cmp	r2, r3
 8002768:	d3f3      	bcc.n	8002752 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	4000a400 	.word	0x4000a400

0800277c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800279a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e00a      	b.n	80027be <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80027b0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80027b6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80027b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027bc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80027c8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80027ce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80027d4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	3304      	adds	r3, #4
 80027fa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	3304      	adds	r3, #4
 8002806:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	e020      	b.n	8002850 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3303      	adds	r3, #3
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3302      	adds	r3, #2
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	440b      	add	r3, r1
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002826:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3301      	adds	r3, #1
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	440b      	add	r3, r1
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002834:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	440a      	add	r2, r1
 800283c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800283e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	3304      	adds	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3304      	adds	r3, #4
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	4a06      	ldr	r2, [pc, #24]	; (8002870 <FDCAN_CopyMessageToRAM+0xf4>)
 8002858:	5cd3      	ldrb	r3, [r2, r3]
 800285a:	461a      	mov	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4293      	cmp	r3, r2
 8002860:	d3d5      	bcc.n	800280e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002862:	bf00      	nop
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	08005e9c 	.word	0x08005e9c

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002882:	e15a      	b.n	8002b3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 814c 	beq.w	8002b34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d00b      	beq.n	80028bc <HAL_GPIO_Init+0x48>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d007      	beq.n	80028bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b0:	2b11      	cmp	r3, #17
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b12      	cmp	r3, #18
 80028ba:	d130      	bne.n	800291e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028f2:	2201      	movs	r2, #1
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	f003 0201 	and.w	r2, r3, #1
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0xea>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b12      	cmp	r3, #18
 800295c:	d123      	bne.n	80029a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	220f      	movs	r2, #15
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	08da      	lsrs	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3208      	adds	r2, #8
 80029a0:	6939      	ldr	r1, [r7, #16]
 80029a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2203      	movs	r2, #3
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0203 	and.w	r2, r3, #3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80a6 	beq.w	8002b34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e8:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <HAL_GPIO_Init+0x2e4>)
 80029ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ec:	4a5a      	ldr	r2, [pc, #360]	; (8002b58 <HAL_GPIO_Init+0x2e4>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6613      	str	r3, [r2, #96]	; 0x60
 80029f4:	4b58      	ldr	r3, [pc, #352]	; (8002b58 <HAL_GPIO_Init+0x2e4>)
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a00:	4a56      	ldr	r2, [pc, #344]	; (8002b5c <HAL_GPIO_Init+0x2e8>)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a2a:	d01f      	beq.n	8002a6c <HAL_GPIO_Init+0x1f8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a4c      	ldr	r2, [pc, #304]	; (8002b60 <HAL_GPIO_Init+0x2ec>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d019      	beq.n	8002a68 <HAL_GPIO_Init+0x1f4>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a4b      	ldr	r2, [pc, #300]	; (8002b64 <HAL_GPIO_Init+0x2f0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d013      	beq.n	8002a64 <HAL_GPIO_Init+0x1f0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a4a      	ldr	r2, [pc, #296]	; (8002b68 <HAL_GPIO_Init+0x2f4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00d      	beq.n	8002a60 <HAL_GPIO_Init+0x1ec>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a49      	ldr	r2, [pc, #292]	; (8002b6c <HAL_GPIO_Init+0x2f8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d007      	beq.n	8002a5c <HAL_GPIO_Init+0x1e8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a48      	ldr	r2, [pc, #288]	; (8002b70 <HAL_GPIO_Init+0x2fc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d101      	bne.n	8002a58 <HAL_GPIO_Init+0x1e4>
 8002a54:	2305      	movs	r3, #5
 8002a56:	e00a      	b.n	8002a6e <HAL_GPIO_Init+0x1fa>
 8002a58:	2306      	movs	r3, #6
 8002a5a:	e008      	b.n	8002a6e <HAL_GPIO_Init+0x1fa>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	e006      	b.n	8002a6e <HAL_GPIO_Init+0x1fa>
 8002a60:	2303      	movs	r3, #3
 8002a62:	e004      	b.n	8002a6e <HAL_GPIO_Init+0x1fa>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e002      	b.n	8002a6e <HAL_GPIO_Init+0x1fa>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_GPIO_Init+0x1fa>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	f002 0203 	and.w	r2, r2, #3
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	4093      	lsls	r3, r2
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a7e:	4937      	ldr	r1, [pc, #220]	; (8002b5c <HAL_GPIO_Init+0x2e8>)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a8c:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_GPIO_Init+0x300>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ab0:	4a30      	ldr	r2, [pc, #192]	; (8002b74 <HAL_GPIO_Init+0x300>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <HAL_GPIO_Init+0x300>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ada:	4a26      	ldr	r2, [pc, #152]	; (8002b74 <HAL_GPIO_Init+0x300>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <HAL_GPIO_Init+0x300>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b04:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_GPIO_Init+0x300>)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <HAL_GPIO_Init+0x300>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b2e:	4a11      	ldr	r2, [pc, #68]	; (8002b74 <HAL_GPIO_Init+0x300>)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3301      	adds	r3, #1
 8002b38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f47f ae9d 	bne.w	8002884 <HAL_GPIO_Init+0x10>
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	48000400 	.word	0x48000400
 8002b64:	48000800 	.word	0x48000800
 8002b68:	48000c00 	.word	0x48000c00
 8002b6c:	48001000 	.word	0x48001000
 8002b70:	48001400 	.word	0x48001400
 8002b74:	40010400 	.word	0x40010400

08002b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
 8002b84:	4613      	mov	r3, r2
 8002b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b94:	e002      	b.n	8002b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d141      	bne.n	8002c3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bb6:	4b4b      	ldr	r3, [pc, #300]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc2:	d131      	bne.n	8002c28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bc4:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bca:	4a46      	ldr	r2, [pc, #280]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd4:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bdc:	4a41      	ldr	r2, [pc, #260]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002be4:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2232      	movs	r2, #50	; 0x32
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	4a3f      	ldr	r2, [pc, #252]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	0c9b      	lsrs	r3, r3, #18
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bfa:	e002      	b.n	8002c02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c02:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	d102      	bne.n	8002c16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f2      	bne.n	8002bfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c16:	4b33      	ldr	r3, [pc, #204]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c22:	d158      	bne.n	8002cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e057      	b.n	8002cd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c28:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c2e:	4a2d      	ldr	r2, [pc, #180]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c38:	e04d      	b.n	8002cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c40:	d141      	bne.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c42:	4b28      	ldr	r3, [pc, #160]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4e:	d131      	bne.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c50:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c56:	4a23      	ldr	r2, [pc, #140]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c60:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c68:	4a1e      	ldr	r2, [pc, #120]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2232      	movs	r2, #50	; 0x32
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	0c9b      	lsrs	r3, r3, #18
 8002c82:	3301      	adds	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c86:	e002      	b.n	8002c8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9a:	d102      	bne.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f2      	bne.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cae:	d112      	bne.n	8002cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e011      	b.n	8002cd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002cc4:	e007      	b.n	8002cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cc6:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cce:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	431bde83 	.word	0x431bde83

08002cf0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfe:	6093      	str	r3, [r2, #8]
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40007000 	.word	0x40007000

08002d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e308      	b.n	8003334 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d075      	beq.n	8002e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2e:	4ba3      	ldr	r3, [pc, #652]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d38:	4ba0      	ldr	r3, [pc, #640]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	d102      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3e>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d002      	beq.n	8002d54 <HAL_RCC_OscConfig+0x44>
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	4b99      	ldr	r3, [pc, #612]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d05b      	beq.n	8002e18 <HAL_RCC_OscConfig+0x108>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d157      	bne.n	8002e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e2e3      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d106      	bne.n	8002d84 <HAL_RCC_OscConfig+0x74>
 8002d76:	4b91      	ldr	r3, [pc, #580]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a90      	ldr	r2, [pc, #576]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e01d      	b.n	8002dc0 <HAL_RCC_OscConfig+0xb0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x98>
 8002d8e:	4b8b      	ldr	r3, [pc, #556]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a8a      	ldr	r2, [pc, #552]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b88      	ldr	r3, [pc, #544]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a87      	ldr	r2, [pc, #540]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0xb0>
 8002da8:	4b84      	ldr	r3, [pc, #528]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a83      	ldr	r2, [pc, #524]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b81      	ldr	r3, [pc, #516]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a80      	ldr	r2, [pc, #512]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fd76 	bl	80018b8 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fd72 	bl	80018b8 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e2a8      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de2:	4b76      	ldr	r3, [pc, #472]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xc0>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe fd62 	bl	80018b8 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df8:	f7fe fd5e 	bl	80018b8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e294      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e0a:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0xe8>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d075      	beq.n	8002f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e26:	4b65      	ldr	r3, [pc, #404]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e30:	4b62      	ldr	r3, [pc, #392]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b0c      	cmp	r3, #12
 8002e3e:	d102      	bne.n	8002e46 <HAL_RCC_OscConfig+0x136>
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_OscConfig+0x13c>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d11f      	bne.n	8002e8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e4c:	4b5b      	ldr	r3, [pc, #364]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_OscConfig+0x154>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e267      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e64:	4b55      	ldr	r3, [pc, #340]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	061b      	lsls	r3, r3, #24
 8002e72:	4952      	ldr	r1, [pc, #328]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e78:	4b51      	ldr	r3, [pc, #324]	; (8002fc0 <HAL_RCC_OscConfig+0x2b0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fe fccf 	bl	8001820 <HAL_InitTick>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d043      	beq.n	8002f10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e253      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d023      	beq.n	8002edc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e94:	4b49      	ldr	r3, [pc, #292]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a48      	ldr	r2, [pc, #288]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fd0a 	bl	80018b8 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fd06 	bl	80018b8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e23c      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eba:	4b40      	ldr	r3, [pc, #256]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	061b      	lsls	r3, r3, #24
 8002ed4:	4939      	ldr	r1, [pc, #228]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
 8002eda:	e01a      	b.n	8002f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002edc:	4b37      	ldr	r3, [pc, #220]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a36      	ldr	r2, [pc, #216]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002ee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fce6 	bl	80018b8 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7fe fce2 	bl	80018b8 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e218      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f02:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x1e0>
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d03c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01c      	beq.n	8002f60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f26:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2c:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fe fcbf 	bl	80018b8 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe fcbb 	bl	80018b8 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e1f1      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0ef      	beq.n	8002f3e <HAL_RCC_OscConfig+0x22e>
 8002f5e:	e01b      	b.n	8002f98 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f60:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f66:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe fca2 	bl	80018b8 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe fc9e 	bl	80018b8 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1d4      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ef      	bne.n	8002f78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80ab 	beq.w	80030fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002faa:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2b4>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e005      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2b6>
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	20000004 	.word	0x20000004
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00d      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fca:	4baf      	ldr	r3, [pc, #700]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fce:	4aae      	ldr	r2, [pc, #696]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8002fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd6:	4bac      	ldr	r3, [pc, #688]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe6:	4ba9      	ldr	r3, [pc, #676]	; (800328c <HAL_RCC_OscConfig+0x57c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d118      	bne.n	8003024 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff2:	4ba6      	ldr	r3, [pc, #664]	; (800328c <HAL_RCC_OscConfig+0x57c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4aa5      	ldr	r2, [pc, #660]	; (800328c <HAL_RCC_OscConfig+0x57c>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fc5b 	bl	80018b8 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003006:	f7fe fc57 	bl	80018b8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e18d      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003018:	4b9c      	ldr	r3, [pc, #624]	; (800328c <HAL_RCC_OscConfig+0x57c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d108      	bne.n	800303e <HAL_RCC_OscConfig+0x32e>
 800302c:	4b96      	ldr	r3, [pc, #600]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	4a95      	ldr	r2, [pc, #596]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800303c:	e024      	b.n	8003088 <HAL_RCC_OscConfig+0x378>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b05      	cmp	r3, #5
 8003044:	d110      	bne.n	8003068 <HAL_RCC_OscConfig+0x358>
 8003046:	4b90      	ldr	r3, [pc, #576]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	4a8e      	ldr	r2, [pc, #568]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003056:	4b8c      	ldr	r3, [pc, #560]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	4a8a      	ldr	r2, [pc, #552]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003066:	e00f      	b.n	8003088 <HAL_RCC_OscConfig+0x378>
 8003068:	4b87      	ldr	r3, [pc, #540]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	4a86      	ldr	r2, [pc, #536]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003078:	4b83      	ldr	r3, [pc, #524]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	4a82      	ldr	r2, [pc, #520]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003080:	f023 0304 	bic.w	r3, r3, #4
 8003084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d016      	beq.n	80030be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe fc12 	bl	80018b8 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7fe fc0e 	bl	80018b8 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e142      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ae:	4b76      	ldr	r3, [pc, #472]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ed      	beq.n	8003098 <HAL_RCC_OscConfig+0x388>
 80030bc:	e015      	b.n	80030ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030be:	f7fe fbfb 	bl	80018b8 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030c4:	e00a      	b.n	80030dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fe fbf7 	bl	80018b8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e12b      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030dc:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ed      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ea:	7ffb      	ldrb	r3, [r7, #31]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f0:	4b65      	ldr	r3, [pc, #404]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	4a64      	ldr	r2, [pc, #400]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d03c      	beq.n	8003182 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01c      	beq.n	800314a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003110:	4b5d      	ldr	r3, [pc, #372]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003116:	4a5c      	ldr	r2, [pc, #368]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fe fbca 	bl	80018b8 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003128:	f7fe fbc6 	bl	80018b8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e0fc      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800313a:	4b53      	ldr	r3, [pc, #332]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800313c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ef      	beq.n	8003128 <HAL_RCC_OscConfig+0x418>
 8003148:	e01b      	b.n	8003182 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800314a:	4b4f      	ldr	r3, [pc, #316]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800314c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003150:	4a4d      	ldr	r2, [pc, #308]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fe fbad 	bl	80018b8 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003162:	f7fe fba9 	bl	80018b8 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e0df      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003174:	4b44      	ldr	r3, [pc, #272]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1ef      	bne.n	8003162 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80d3 	beq.w	8003332 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800318c:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b0c      	cmp	r3, #12
 8003196:	f000 808d 	beq.w	80032b4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d15a      	bne.n	8003258 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a2:	4b39      	ldr	r3, [pc, #228]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a38      	ldr	r2, [pc, #224]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 80031a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fe fb83 	bl	80018b8 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe fb7f 	bl	80018b8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0b5      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c8:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d4:	4b2c      	ldr	r3, [pc, #176]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HAL_RCC_OscConfig+0x580>)
 80031da:	4013      	ands	r3, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6a11      	ldr	r1, [r2, #32]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031e4:	3a01      	subs	r2, #1
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	4311      	orrs	r1, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031ee:	0212      	lsls	r2, r2, #8
 80031f0:	4311      	orrs	r1, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031f6:	0852      	lsrs	r2, r2, #1
 80031f8:	3a01      	subs	r2, #1
 80031fa:	0552      	lsls	r2, r2, #21
 80031fc:	4311      	orrs	r1, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003202:	0852      	lsrs	r2, r2, #1
 8003204:	3a01      	subs	r2, #1
 8003206:	0652      	lsls	r2, r2, #25
 8003208:	4311      	orrs	r1, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800320e:	06d2      	lsls	r2, r2, #27
 8003210:	430a      	orrs	r2, r1
 8003212:	491d      	ldr	r1, [pc, #116]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003214:	4313      	orrs	r3, r2
 8003216:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800321e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003222:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003224:	4b18      	ldr	r3, [pc, #96]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a17      	ldr	r2, [pc, #92]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800322a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe fb42 	bl	80018b8 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003238:	f7fe fb3e 	bl	80018b8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e074      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324a:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x528>
 8003256:	e06c      	b.n	8003332 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800325e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003262:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a07      	ldr	r2, [pc, #28]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <HAL_RCC_OscConfig+0x578>)
 8003276:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe fb1a 	bl	80018b8 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003286:	e00e      	b.n	80032a6 <HAL_RCC_OscConfig+0x596>
 8003288:	40021000 	.word	0x40021000
 800328c:	40007000 	.word	0x40007000
 8003290:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003294:	f7fe fb10 	bl	80018b8 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e046      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a6:	4b25      	ldr	r3, [pc, #148]	; (800333c <HAL_RCC_OscConfig+0x62c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x584>
 80032b2:	e03e      	b.n	8003332 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e039      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80032c0:	4b1e      	ldr	r3, [pc, #120]	; (800333c <HAL_RCC_OscConfig+0x62c>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f003 0203 	and.w	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d12c      	bne.n	800332e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	3b01      	subs	r3, #1
 80032e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d123      	bne.n	800332e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d11b      	bne.n	800332e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003302:	429a      	cmp	r2, r3
 8003304:	d113      	bne.n	800332e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	3b01      	subs	r3, #1
 8003314:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d109      	bne.n	800332e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003324:	085b      	lsrs	r3, r3, #1
 8003326:	3b01      	subs	r3, #1
 8003328:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000

08003340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e11e      	b.n	8003596 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b91      	ldr	r3, [pc, #580]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d910      	bls.n	8003388 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b8e      	ldr	r3, [pc, #568]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 020f 	bic.w	r2, r3, #15
 800336e:	498c      	ldr	r1, [pc, #560]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b8a      	ldr	r3, [pc, #552]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e106      	b.n	8003596 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d073      	beq.n	800347c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d129      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339c:	4b81      	ldr	r3, [pc, #516]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0f4      	b.n	8003596 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033ac:	f000 f99e 	bl	80036ec <RCC_GetSysClockFreqFromPLLSource>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4a7c      	ldr	r2, [pc, #496]	; (80035a8 <HAL_RCC_ClockConfig+0x268>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d93f      	bls.n	800343a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033ba:	4b7a      	ldr	r3, [pc, #488]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d033      	beq.n	800343a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d12f      	bne.n	800343a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033da:	4b72      	ldr	r3, [pc, #456]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e2:	4a70      	ldr	r2, [pc, #448]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 80033e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	e024      	b.n	800343a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f8:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0c6      	b.n	8003596 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003408:	4b66      	ldr	r3, [pc, #408]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0be      	b.n	8003596 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003418:	f000 f8ce 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 800341c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4a61      	ldr	r2, [pc, #388]	; (80035a8 <HAL_RCC_ClockConfig+0x268>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d909      	bls.n	800343a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003426:	4b5f      	ldr	r3, [pc, #380]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800342e:	4a5d      	ldr	r2, [pc, #372]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 8003430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003434:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800343a:	4b5a      	ldr	r3, [pc, #360]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f023 0203 	bic.w	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4957      	ldr	r1, [pc, #348]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 8003448:	4313      	orrs	r3, r2
 800344a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800344c:	f7fe fa34 	bl	80018b8 <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	e00a      	b.n	800346a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003454:	f7fe fa30 	bl	80018b8 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e095      	b.n	8003596 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	4b4e      	ldr	r3, [pc, #312]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 020c 	and.w	r2, r3, #12
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	429a      	cmp	r2, r3
 800347a:	d1eb      	bne.n	8003454 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d023      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003494:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a42      	ldr	r2, [pc, #264]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 800349a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800349e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80034ac:	4b3d      	ldr	r3, [pc, #244]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80034b4:	4a3b      	ldr	r2, [pc, #236]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 80034b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034bc:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4936      	ldr	r1, [pc, #216]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b80      	cmp	r3, #128	; 0x80
 80034d4:	d105      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034d6:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	4a32      	ldr	r2, [pc, #200]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 80034dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e2:	4b2f      	ldr	r3, [pc, #188]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d21d      	bcs.n	800352c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f0:	4b2b      	ldr	r3, [pc, #172]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f023 020f 	bic.w	r2, r3, #15
 80034f8:	4929      	ldr	r1, [pc, #164]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003500:	f7fe f9da 	bl	80018b8 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	e00a      	b.n	800351e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003508:	f7fe f9d6 	bl	80018b8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e03b      	b.n	8003596 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_RCC_ClockConfig+0x260>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d1ed      	bne.n	8003508 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003538:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4917      	ldr	r1, [pc, #92]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d009      	beq.n	800356a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003556:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	490f      	ldr	r1, [pc, #60]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800356a:	f000 f825 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 800356e:	4601      	mov	r1, r0
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <HAL_RCC_ClockConfig+0x264>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	4a0c      	ldr	r2, [pc, #48]	; (80035ac <HAL_RCC_ClockConfig+0x26c>)
 800357c:	5cd3      	ldrb	r3, [r2, r3]
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	fa21 f303 	lsr.w	r3, r1, r3
 8003586:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <HAL_RCC_ClockConfig+0x270>)
 8003588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <HAL_RCC_ClockConfig+0x274>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe f946 	bl	8001820 <HAL_InitTick>
 8003594:	4603      	mov	r3, r0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40022000 	.word	0x40022000
 80035a4:	40021000 	.word	0x40021000
 80035a8:	04c4b400 	.word	0x04c4b400
 80035ac:	08005e84 	.word	0x08005e84
 80035b0:	20000000 	.word	0x20000000
 80035b4:	20000004 	.word	0x20000004

080035b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035be:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d102      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035ca:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	e047      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035d0:	4b27      	ldr	r3, [pc, #156]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d102      	bne.n	80035e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035dc:	4b26      	ldr	r3, [pc, #152]	; (8003678 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	e03e      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035e2:	4b23      	ldr	r3, [pc, #140]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	d136      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	3301      	adds	r3, #1
 8003604:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d10c      	bne.n	8003626 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800360c:	4a1a      	ldr	r2, [pc, #104]	; (8003678 <HAL_RCC_GetSysClockFreq+0xc0>)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	4a16      	ldr	r2, [pc, #88]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003616:	68d2      	ldr	r2, [r2, #12]
 8003618:	0a12      	lsrs	r2, r2, #8
 800361a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	617b      	str	r3, [r7, #20]
      break;
 8003624:	e00c      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003626:	4a13      	ldr	r2, [pc, #76]	; (8003674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	fbb2 f3f3 	udiv	r3, r2, r3
 800362e:	4a10      	ldr	r2, [pc, #64]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003630:	68d2      	ldr	r2, [r2, #12]
 8003632:	0a12      	lsrs	r2, r2, #8
 8003634:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]
      break;
 800363e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	0e5b      	lsrs	r3, r3, #25
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	3301      	adds	r3, #1
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	e001      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003660:	693b      	ldr	r3, [r7, #16]
}
 8003662:	4618      	mov	r0, r3
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	00f42400 	.word	0x00f42400
 8003678:	007a1200 	.word	0x007a1200

0800367c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_RCC_GetHCLKFreq+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000000 	.word	0x20000000

08003694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003698:	f7ff fff0 	bl	800367c <HAL_RCC_GetHCLKFreq>
 800369c:	4601      	mov	r1, r0
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	08005e94 	.word	0x08005e94

080036c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036c4:	f7ff ffda 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036c8:	4601      	mov	r1, r0
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0adb      	lsrs	r3, r3, #11
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036d6:	5cd3      	ldrb	r3, [r2, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000
 80036e8:	08005e94 	.word	0x08005e94

080036ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036f2:	4b1e      	ldr	r3, [pc, #120]	; (800376c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	3301      	adds	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d10c      	bne.n	800372a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003710:	4a17      	ldr	r2, [pc, #92]	; (8003770 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	4a14      	ldr	r2, [pc, #80]	; (800376c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800371a:	68d2      	ldr	r2, [r2, #12]
 800371c:	0a12      	lsrs	r2, r2, #8
 800371e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	617b      	str	r3, [r7, #20]
    break;
 8003728:	e00c      	b.n	8003744 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800372a:	4a12      	ldr	r2, [pc, #72]	; (8003774 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003732:	4a0e      	ldr	r2, [pc, #56]	; (800376c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003734:	68d2      	ldr	r2, [r2, #12]
 8003736:	0a12      	lsrs	r2, r2, #8
 8003738:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]
    break;
 8003742:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	0e5b      	lsrs	r3, r3, #25
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800375e:	687b      	ldr	r3, [r7, #4]
}
 8003760:	4618      	mov	r0, r3
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40021000 	.word	0x40021000
 8003770:	007a1200 	.word	0x007a1200
 8003774:	00f42400 	.word	0x00f42400

08003778 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003780:	2300      	movs	r3, #0
 8003782:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003784:	2300      	movs	r3, #0
 8003786:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8098 	beq.w	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003796:	2300      	movs	r3, #0
 8003798:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379a:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10d      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	4b40      	ldr	r3, [pc, #256]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	4a3f      	ldr	r2, [pc, #252]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6593      	str	r3, [r2, #88]	; 0x58
 80037b2:	4b3d      	ldr	r3, [pc, #244]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037be:	2301      	movs	r3, #1
 80037c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037c2:	4b3a      	ldr	r3, [pc, #232]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a39      	ldr	r2, [pc, #228]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037ce:	f7fe f873 	bl	80018b8 <HAL_GetTick>
 80037d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037d4:	e009      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d6:	f7fe f86f 	bl	80018b8 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d902      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	74fb      	strb	r3, [r7, #19]
        break;
 80037e8:	e005      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0ef      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d159      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037fc:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003806:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01e      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	429a      	cmp	r2, r3
 8003816:	d019      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003818:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003822:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003824:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	4a1f      	ldr	r2, [pc, #124]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	4a1b      	ldr	r2, [pc, #108]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800383c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003844:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d016      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7fe f82f 	bl	80018b8 <HAL_GetTick>
 800385a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385c:	e00b      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fe f82b 	bl	80018b8 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d902      	bls.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	74fb      	strb	r3, [r7, #19]
            break;
 8003874:	e006      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ec      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	4903      	ldr	r1, [pc, #12]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038a0:	e008      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038a2:	7cfb      	ldrb	r3, [r7, #19]
 80038a4:	74bb      	strb	r3, [r7, #18]
 80038a6:	e005      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b4:	7c7b      	ldrb	r3, [r7, #17]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d105      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ba:	4ba6      	ldr	r3, [pc, #664]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038be:	4aa5      	ldr	r2, [pc, #660]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038d2:	4ba0      	ldr	r3, [pc, #640]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f023 0203 	bic.w	r2, r3, #3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	499c      	ldr	r1, [pc, #624]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038f4:	4b97      	ldr	r3, [pc, #604]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fa:	f023 020c 	bic.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	4994      	ldr	r1, [pc, #592]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003916:	4b8f      	ldr	r3, [pc, #572]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	498b      	ldr	r1, [pc, #556]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003938:	4b86      	ldr	r3, [pc, #536]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	4983      	ldr	r1, [pc, #524]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800395a:	4b7e      	ldr	r3, [pc, #504]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	497a      	ldr	r1, [pc, #488]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800397c:	4b75      	ldr	r3, [pc, #468]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	4972      	ldr	r1, [pc, #456]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800399e:	4b6d      	ldr	r3, [pc, #436]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4969      	ldr	r1, [pc, #420]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039c0:	4b64      	ldr	r3, [pc, #400]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4961      	ldr	r1, [pc, #388]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039e2:	4b5c      	ldr	r3, [pc, #368]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	4958      	ldr	r1, [pc, #352]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d015      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a04:	4b53      	ldr	r3, [pc, #332]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	4950      	ldr	r1, [pc, #320]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a22:	d105      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a24:	4b4b      	ldr	r3, [pc, #300]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4a4a      	ldr	r2, [pc, #296]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d015      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a3c:	4b45      	ldr	r3, [pc, #276]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	4942      	ldr	r1, [pc, #264]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a5c:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4a3c      	ldr	r2, [pc, #240]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a66:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a74:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	4934      	ldr	r1, [pc, #208]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a94:	4b2f      	ldr	r3, [pc, #188]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a2e      	ldr	r2, [pc, #184]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aac:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aba:	4926      	ldr	r1, [pc, #152]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003acc:	4b21      	ldr	r3, [pc, #132]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a20      	ldr	r2, [pc, #128]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ad6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d015      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	4918      	ldr	r1, [pc, #96]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b02:	d105      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	490a      	ldr	r1, [pc, #40]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b3a:	d105      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b48:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000

08003b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e049      	b.n	8003bfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fc ff18 	bl	80009b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f000 fb24 	bl	80041e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d001      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e04a      	b.n	8003cb6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d018      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x6c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4a:	d013      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x6c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00e      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x6c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1c      	ldr	r2, [pc, #112]	; (8003ccc <HAL_TIM_Base_Start_IT+0xc4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d009      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x6c>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x6c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a19      	ldr	r2, [pc, #100]	; (8003cd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d115      	bne.n	8003ca0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b06      	cmp	r3, #6
 8003c84:	d015      	beq.n	8003cb2 <HAL_TIM_Base_Start_IT+0xaa>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8c:	d011      	beq.n	8003cb2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9e:	e008      	b.n	8003cb2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e000      	b.n	8003cb4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40013400 	.word	0x40013400
 8003cd4:	40014000 	.word	0x40014000
 8003cd8:	00010007 	.word	0x00010007

08003cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d122      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d11b      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0202 	mvn.w	r2, #2
 8003d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa42 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa34 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fa45 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d122      	bne.n	8003d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d11b      	bne.n	8003d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0204 	mvn.w	r2, #4
 8003d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa18 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8003d78:	e005      	b.n	8003d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa0a 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 fa1b 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d122      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d11b      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0208 	mvn.w	r2, #8
 8003db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2204      	movs	r2, #4
 8003db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f9ee 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8003dcc:	e005      	b.n	8003dda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f9e0 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f9f1 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d122      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d11b      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0210 	mvn.w	r2, #16
 8003e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2208      	movs	r2, #8
 8003e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f9c4 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8003e20:	e005      	b.n	8003e2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f9b6 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f9c7 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d10e      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d107      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0201 	mvn.w	r2, #1
 8003e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f990 	bl	8004180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6a:	2b80      	cmp	r3, #128	; 0x80
 8003e6c:	d10e      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d107      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fb64 	bl	8004554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9a:	d10e      	bne.n	8003eba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d107      	bne.n	8003eba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fb57 	bl	8004568 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d10e      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d107      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f975 	bl	80041d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d10e      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d107      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0220 	mvn.w	r2, #32
 8003f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fb17 	bl	8004540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f20:	d10f      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f30:	d107      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fb1d 	bl	800457c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f50:	d10f      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f60:	d107      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fb0f 	bl	8004590 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f80:	d10f      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f90:	d107      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fb01 	bl	80045a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fc0:	d107      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 faf3 	bl	80045b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_TIM_ConfigClockSource+0x18>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e0b9      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x18c>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004016:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800401e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b70      	cmp	r3, #112	; 0x70
 800402e:	d02e      	beq.n	800408e <HAL_TIM_ConfigClockSource+0xb2>
 8004030:	2b70      	cmp	r3, #112	; 0x70
 8004032:	d812      	bhi.n	800405a <HAL_TIM_ConfigClockSource+0x7e>
 8004034:	2b30      	cmp	r3, #48	; 0x30
 8004036:	f000 8084 	beq.w	8004142 <HAL_TIM_ConfigClockSource+0x166>
 800403a:	2b30      	cmp	r3, #48	; 0x30
 800403c:	d806      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x70>
 800403e:	2b10      	cmp	r3, #16
 8004040:	d07f      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x166>
 8004042:	2b20      	cmp	r3, #32
 8004044:	d07d      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x166>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d07b      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800404a:	e084      	b.n	8004156 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800404c:	2b50      	cmp	r3, #80	; 0x50
 800404e:	d048      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x106>
 8004050:	2b60      	cmp	r3, #96	; 0x60
 8004052:	d056      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x126>
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d064      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8004058:	e07d      	b.n	8004156 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800405a:	4a45      	ldr	r2, [pc, #276]	; (8004170 <HAL_TIM_ConfigClockSource+0x194>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d070      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x166>
 8004060:	4a43      	ldr	r2, [pc, #268]	; (8004170 <HAL_TIM_ConfigClockSource+0x194>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d809      	bhi.n	800407a <HAL_TIM_ConfigClockSource+0x9e>
 8004066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406a:	d027      	beq.n	80040bc <HAL_TIM_ConfigClockSource+0xe0>
 800406c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004070:	d067      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x166>
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004076:	d06d      	beq.n	8004154 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004078:	e06d      	b.n	8004156 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800407a:	4a3e      	ldr	r2, [pc, #248]	; (8004174 <HAL_TIM_ConfigClockSource+0x198>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d060      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x166>
 8004080:	4a3d      	ldr	r2, [pc, #244]	; (8004178 <HAL_TIM_ConfigClockSource+0x19c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d05d      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x166>
 8004086:	4a3d      	ldr	r2, [pc, #244]	; (800417c <HAL_TIM_ConfigClockSource+0x1a0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d05a      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x166>
      break;
 800408c:	e063      	b.n	8004156 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6899      	ldr	r1, [r3, #8]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f000 f9ad 	bl	80043fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	609a      	str	r2, [r3, #8]
      break;
 80040ba:	e04c      	b.n	8004156 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6899      	ldr	r1, [r3, #8]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f000 f996 	bl	80043fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040de:	609a      	str	r2, [r3, #8]
      break;
 80040e0:	e039      	b.n	8004156 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f000 f908 	bl	8004304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2150      	movs	r1, #80	; 0x50
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f961 	bl	80043c2 <TIM_ITRx_SetConfig>
      break;
 8004100:	e029      	b.n	8004156 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	461a      	mov	r2, r3
 8004110:	f000 f927 	bl	8004362 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2160      	movs	r1, #96	; 0x60
 800411a:	4618      	mov	r0, r3
 800411c:	f000 f951 	bl	80043c2 <TIM_ITRx_SetConfig>
      break;
 8004120:	e019      	b.n	8004156 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6859      	ldr	r1, [r3, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	461a      	mov	r2, r3
 8004130:	f000 f8e8 	bl	8004304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2140      	movs	r1, #64	; 0x40
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f941 	bl	80043c2 <TIM_ITRx_SetConfig>
      break;
 8004140:	e009      	b.n	8004156 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f000 f938 	bl	80043c2 <TIM_ITRx_SetConfig>
        break;
 8004152:	e000      	b.n	8004156 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8004154:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	00100020 	.word	0x00100020
 8004174:	00100040 	.word	0x00100040
 8004178:	00100070 	.word	0x00100070
 800417c:	00100030 	.word	0x00100030

08004180 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a3c      	ldr	r2, [pc, #240]	; (80042e8 <TIM_Base_SetConfig+0x104>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00f      	beq.n	800421c <TIM_Base_SetConfig+0x38>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004202:	d00b      	beq.n	800421c <TIM_Base_SetConfig+0x38>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a39      	ldr	r2, [pc, #228]	; (80042ec <TIM_Base_SetConfig+0x108>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d007      	beq.n	800421c <TIM_Base_SetConfig+0x38>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a38      	ldr	r2, [pc, #224]	; (80042f0 <TIM_Base_SetConfig+0x10c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_Base_SetConfig+0x38>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a37      	ldr	r2, [pc, #220]	; (80042f4 <TIM_Base_SetConfig+0x110>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d108      	bne.n	800422e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a2d      	ldr	r2, [pc, #180]	; (80042e8 <TIM_Base_SetConfig+0x104>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01b      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423c:	d017      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2a      	ldr	r2, [pc, #168]	; (80042ec <TIM_Base_SetConfig+0x108>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a29      	ldr	r2, [pc, #164]	; (80042f0 <TIM_Base_SetConfig+0x10c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00f      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a28      	ldr	r2, [pc, #160]	; (80042f4 <TIM_Base_SetConfig+0x110>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00b      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a27      	ldr	r2, [pc, #156]	; (80042f8 <TIM_Base_SetConfig+0x114>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d007      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a26      	ldr	r2, [pc, #152]	; (80042fc <TIM_Base_SetConfig+0x118>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a25      	ldr	r2, [pc, #148]	; (8004300 <TIM_Base_SetConfig+0x11c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d108      	bne.n	8004280 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <TIM_Base_SetConfig+0x104>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00f      	beq.n	80042cc <TIM_Base_SetConfig+0xe8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a11      	ldr	r2, [pc, #68]	; (80042f4 <TIM_Base_SetConfig+0x110>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00b      	beq.n	80042cc <TIM_Base_SetConfig+0xe8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a10      	ldr	r2, [pc, #64]	; (80042f8 <TIM_Base_SetConfig+0x114>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d007      	beq.n	80042cc <TIM_Base_SetConfig+0xe8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a0f      	ldr	r2, [pc, #60]	; (80042fc <TIM_Base_SetConfig+0x118>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_Base_SetConfig+0xe8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <TIM_Base_SetConfig+0x11c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d103      	bne.n	80042d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	615a      	str	r2, [r3, #20]
}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800
 80042f4:	40013400 	.word	0x40013400
 80042f8:	40014000 	.word	0x40014000
 80042fc:	40014400 	.word	0x40014400
 8004300:	40014800 	.word	0x40014800

08004304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0201 	bic.w	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800432e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f023 030a 	bic.w	r3, r3, #10
 8004340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004362:	b480      	push	{r7}
 8004364:	b087      	sub	sp, #28
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f023 0210 	bic.w	r2, r3, #16
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800438c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	031b      	lsls	r3, r3, #12
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800439e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80043d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f043 0307 	orr.w	r3, r3, #7
 80043e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	609a      	str	r2, [r3, #8]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	021a      	lsls	r2, r3, #8
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	431a      	orrs	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4313      	orrs	r3, r2
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	609a      	str	r2, [r3, #8]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004450:	2302      	movs	r3, #2
 8004452:	e065      	b.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2c      	ldr	r2, [pc, #176]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2b      	ldr	r2, [pc, #172]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d108      	bne.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800448e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80044a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1b      	ldr	r2, [pc, #108]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d018      	beq.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ca:	d013      	beq.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a18      	ldr	r2, [pc, #96]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00e      	beq.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a17      	ldr	r2, [pc, #92]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a12      	ldr	r2, [pc, #72]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d004      	beq.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a13      	ldr	r2, [pc, #76]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d10c      	bne.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	4313      	orrs	r3, r2
 8004504:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	40012c00 	.word	0x40012c00
 8004530:	40013400 	.word	0x40013400
 8004534:	40000400 	.word	0x40000400
 8004538:	40000800 	.word	0x40000800
 800453c:	40014000 	.word	0x40014000

08004540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e042      	b.n	8004664 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fc fa05 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2224      	movs	r2, #36	; 0x24
 80045fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0201 	bic.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fb38 	bl	8004c84 <UART_SetConfig>
 8004614:	4603      	mov	r3, r0
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e022      	b.n	8004664 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fdd4 	bl	80051d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800463a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800464a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fe5b 	bl	8005318 <UART_CheckIdleState>
 8004662:	4603      	mov	r3, r0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	4613      	mov	r3, r2
 800467a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004682:	2b20      	cmp	r3, #32
 8004684:	f040 8083 	bne.w	800478e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_UART_Transmit+0x28>
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e07b      	b.n	8004790 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Transmit+0x3a>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e074      	b.n	8004790 <HAL_UART_Transmit+0x124>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2221      	movs	r2, #33	; 0x21
 80046ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046be:	f7fd f8fb 	bl	80018b8 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	88fa      	ldrh	r2, [r7, #6]
 80046c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	88fa      	ldrh	r2, [r7, #6]
 80046d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d108      	bne.n	80046f0 <HAL_UART_Transmit+0x84>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d104      	bne.n	80046f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e003      	b.n	80046f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004700:	e02c      	b.n	800475c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2200      	movs	r2, #0
 800470a:	2180      	movs	r1, #128	; 0x80
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fe4b 	bl	80053a8 <UART_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e039      	b.n	8004790 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	3302      	adds	r3, #2
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	e007      	b.n	800474a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	3301      	adds	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1cc      	bne.n	8004702 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2200      	movs	r2, #0
 8004770:	2140      	movs	r1, #64	; 0x40
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fe18 	bl	80053a8 <UART_WaitOnFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e006      	b.n	8004790 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e000      	b.n	8004790 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	f040 80bc 	bne.w	800492a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_UART_Receive_IT+0x26>
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0b4      	b.n	800492c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_Receive_IT+0x38>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e0ad      	b.n	800492c <HAL_UART_Receive_IT+0x194>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	88fa      	ldrh	r2, [r7, #6]
 80047e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fc:	d10e      	bne.n	800481c <HAL_UART_Receive_IT+0x84>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d105      	bne.n	8004812 <HAL_UART_Receive_IT+0x7a>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f240 12ff 	movw	r2, #511	; 0x1ff
 800480c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004810:	e02d      	b.n	800486e <HAL_UART_Receive_IT+0xd6>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	22ff      	movs	r2, #255	; 0xff
 8004816:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800481a:	e028      	b.n	800486e <HAL_UART_Receive_IT+0xd6>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10d      	bne.n	8004840 <HAL_UART_Receive_IT+0xa8>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <HAL_UART_Receive_IT+0x9e>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	22ff      	movs	r2, #255	; 0xff
 8004830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004834:	e01b      	b.n	800486e <HAL_UART_Receive_IT+0xd6>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	227f      	movs	r2, #127	; 0x7f
 800483a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800483e:	e016      	b.n	800486e <HAL_UART_Receive_IT+0xd6>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004848:	d10d      	bne.n	8004866 <HAL_UART_Receive_IT+0xce>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d104      	bne.n	800485c <HAL_UART_Receive_IT+0xc4>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	227f      	movs	r2, #127	; 0x7f
 8004856:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800485a:	e008      	b.n	800486e <HAL_UART_Receive_IT+0xd6>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	223f      	movs	r2, #63	; 0x3f
 8004860:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004864:	e003      	b.n	800486e <HAL_UART_Receive_IT+0xd6>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2222      	movs	r2, #34	; 0x22
 800487a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004896:	d12a      	bne.n	80048ee <HAL_UART_Receive_IT+0x156>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800489e:	88fa      	ldrh	r2, [r7, #6]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d324      	bcc.n	80048ee <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ac:	d107      	bne.n	80048be <HAL_UART_Receive_IT+0x126>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d103      	bne.n	80048be <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <HAL_UART_Receive_IT+0x1a0>)
 80048ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80048bc:	e002      	b.n	80048c4 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4a1e      	ldr	r2, [pc, #120]	; (800493c <HAL_UART_Receive_IT+0x1a4>)
 80048c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048da:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	e01b      	b.n	8004926 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	d107      	bne.n	8004908 <HAL_UART_Receive_IT+0x170>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d103      	bne.n	8004908 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a0f      	ldr	r2, [pc, #60]	; (8004940 <HAL_UART_Receive_IT+0x1a8>)
 8004904:	66da      	str	r2, [r3, #108]	; 0x6c
 8004906:	e002      	b.n	800490e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a0e      	ldr	r2, [pc, #56]	; (8004944 <HAL_UART_Receive_IT+0x1ac>)
 800490c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004924:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	e000      	b.n	800492c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800492a:	2302      	movs	r3, #2
  }
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	080057ad 	.word	0x080057ad
 800493c:	080056a5 	.word	0x080056a5
 8004940:	080055f9 	.word	0x080055f9
 8004944:	0800554f 	.word	0x0800554f

08004948 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	f640 030f 	movw	r3, #2063	; 0x80f
 800496e:	4013      	ands	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d118      	bne.n	80049aa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d013      	beq.n	80049aa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d104      	bne.n	8004996 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8145 	beq.w	8004c2a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	4798      	blx	r3
      }
      return;
 80049a8:	e13f      	b.n	8004c2a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80e8 	beq.w	8004b82 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4ba1      	ldr	r3, [pc, #644]	; (8004c3c <HAL_UART_IRQHandler+0x2f4>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d105      	bne.n	80049c8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4ba0      	ldr	r3, [pc, #640]	; (8004c40 <HAL_UART_IRQHandler+0x2f8>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80dd 	beq.w	8004b82 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d010      	beq.n	80049f4 <HAL_UART_IRQHandler+0xac>
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00b      	beq.n	80049f4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2201      	movs	r2, #1
 80049e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ea:	f043 0201 	orr.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d010      	beq.n	8004a20 <HAL_UART_IRQHandler+0xd8>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00b      	beq.n	8004a20 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f043 0204 	orr.w	r2, r3, #4
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d010      	beq.n	8004a4c <HAL_UART_IRQHandler+0x104>
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00b      	beq.n	8004a4c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2204      	movs	r2, #4
 8004a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a42:	f043 0202 	orr.w	r2, r3, #2
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d015      	beq.n	8004a82 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4b76      	ldr	r3, [pc, #472]	; (8004c3c <HAL_UART_IRQHandler+0x2f4>)
 8004a64:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2208      	movs	r2, #8
 8004a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a78:	f043 0208 	orr.w	r2, r3, #8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d011      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x168>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa6:	f043 0220 	orr.w	r2, r3, #32
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80b9 	beq.w	8004c2e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d011      	beq.n	8004aea <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d004      	beq.n	8004b0a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d031      	beq.n	8004b6e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fccc 	bl	80054a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b40      	cmp	r3, #64	; 0x40
 8004b1c:	d123      	bne.n	8004b66 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d013      	beq.n	8004b5e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3a:	4a42      	ldr	r2, [pc, #264]	; (8004c44 <HAL_UART_IRQHandler+0x2fc>)
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fc ffd3 	bl	8001aee <HAL_DMA_Abort_IT>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d017      	beq.n	8004b7e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5c:	e00f      	b.n	8004b7e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f886 	bl	8004c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	e00b      	b.n	8004b7e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f882 	bl	8004c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6c:	e007      	b.n	8004b7e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f87e 	bl	8004c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004b7c:	e057      	b.n	8004c2e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7e:	bf00      	nop
    return;
 8004b80:	e055      	b.n	8004c2e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x260>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fe87 	bl	80058b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ba6:	e045      	b.n	8004c34 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d012      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d008      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d031      	beq.n	8004c32 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
    }
    return;
 8004bd6:	e02c      	b.n	8004c32 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_UART_IRQHandler+0x2ac>
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fc94 	bl	800551a <UART_EndTransmit_IT>
    return;
 8004bf2:	e01f      	b.n	8004c34 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_UART_IRQHandler+0x2c8>
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fe67 	bl	80058dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c0e:	e011      	b.n	8004c34 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00c      	beq.n	8004c34 <HAL_UART_IRQHandler+0x2ec>
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	da09      	bge.n	8004c34 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fe51 	bl	80058c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c26:	bf00      	nop
 8004c28:	e004      	b.n	8004c34 <HAL_UART_IRQHandler+0x2ec>
      return;
 8004c2a:	bf00      	nop
 8004c2c:	e002      	b.n	8004c34 <HAL_UART_IRQHandler+0x2ec>
    return;
 8004c2e:	bf00      	nop
 8004c30:	e000      	b.n	8004c34 <HAL_UART_IRQHandler+0x2ec>
    return;
 8004c32:	bf00      	nop
  }
}
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	10000001 	.word	0x10000001
 8004c40:	04000120 	.word	0x04000120
 8004c44:	080054ef 	.word	0x080054ef

08004c48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c84:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004c88:	b088      	sub	sp, #32
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4bb0      	ldr	r3, [pc, #704]	; (8004f7c <UART_SetConfig+0x2f8>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6812      	ldr	r2, [r2, #0]
 8004cc2:	69f9      	ldr	r1, [r7, #28]
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4aa5      	ldr	r2, [pc, #660]	; (8004f80 <UART_SetConfig+0x2fc>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d004      	beq.n	8004cf8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d02:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	69f9      	ldr	r1, [r7, #28]
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	f023 010f 	bic.w	r1, r3, #15
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a96      	ldr	r2, [pc, #600]	; (8004f84 <UART_SetConfig+0x300>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d121      	bne.n	8004d74 <UART_SetConfig+0xf0>
 8004d30:	4b95      	ldr	r3, [pc, #596]	; (8004f88 <UART_SetConfig+0x304>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d816      	bhi.n	8004d6c <UART_SetConfig+0xe8>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <UART_SetConfig+0xc0>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d61 	.word	0x08004d61
 8004d4c:	08004d5b 	.word	0x08004d5b
 8004d50:	08004d67 	.word	0x08004d67
 8004d54:	2301      	movs	r3, #1
 8004d56:	76fb      	strb	r3, [r7, #27]
 8004d58:	e0be      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	76fb      	strb	r3, [r7, #27]
 8004d5e:	e0bb      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004d60:	2304      	movs	r3, #4
 8004d62:	76fb      	strb	r3, [r7, #27]
 8004d64:	e0b8      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004d66:	2308      	movs	r3, #8
 8004d68:	76fb      	strb	r3, [r7, #27]
 8004d6a:	e0b5      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	76fb      	strb	r3, [r7, #27]
 8004d70:	bf00      	nop
 8004d72:	e0b1      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a84      	ldr	r2, [pc, #528]	; (8004f8c <UART_SetConfig+0x308>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d134      	bne.n	8004de8 <UART_SetConfig+0x164>
 8004d7e:	4b82      	ldr	r3, [pc, #520]	; (8004f88 <UART_SetConfig+0x304>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f003 030c 	and.w	r3, r3, #12
 8004d88:	2b0c      	cmp	r3, #12
 8004d8a:	d829      	bhi.n	8004de0 <UART_SetConfig+0x15c>
 8004d8c:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0x110>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004dc9 	.word	0x08004dc9
 8004d98:	08004de1 	.word	0x08004de1
 8004d9c:	08004de1 	.word	0x08004de1
 8004da0:	08004de1 	.word	0x08004de1
 8004da4:	08004dd5 	.word	0x08004dd5
 8004da8:	08004de1 	.word	0x08004de1
 8004dac:	08004de1 	.word	0x08004de1
 8004db0:	08004de1 	.word	0x08004de1
 8004db4:	08004dcf 	.word	0x08004dcf
 8004db8:	08004de1 	.word	0x08004de1
 8004dbc:	08004de1 	.word	0x08004de1
 8004dc0:	08004de1 	.word	0x08004de1
 8004dc4:	08004ddb 	.word	0x08004ddb
 8004dc8:	2300      	movs	r3, #0
 8004dca:	76fb      	strb	r3, [r7, #27]
 8004dcc:	e084      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	76fb      	strb	r3, [r7, #27]
 8004dd2:	e081      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	76fb      	strb	r3, [r7, #27]
 8004dd8:	e07e      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004dda:	2308      	movs	r3, #8
 8004ddc:	76fb      	strb	r3, [r7, #27]
 8004dde:	e07b      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004de0:	2310      	movs	r3, #16
 8004de2:	76fb      	strb	r3, [r7, #27]
 8004de4:	bf00      	nop
 8004de6:	e077      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a68      	ldr	r2, [pc, #416]	; (8004f90 <UART_SetConfig+0x30c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d120      	bne.n	8004e34 <UART_SetConfig+0x1b0>
 8004df2:	4b65      	ldr	r3, [pc, #404]	; (8004f88 <UART_SetConfig+0x304>)
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d00f      	beq.n	8004e20 <UART_SetConfig+0x19c>
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d802      	bhi.n	8004e0a <UART_SetConfig+0x186>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <UART_SetConfig+0x190>
 8004e08:	e010      	b.n	8004e2c <UART_SetConfig+0x1a8>
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d005      	beq.n	8004e1a <UART_SetConfig+0x196>
 8004e0e:	2b30      	cmp	r3, #48	; 0x30
 8004e10:	d009      	beq.n	8004e26 <UART_SetConfig+0x1a2>
 8004e12:	e00b      	b.n	8004e2c <UART_SetConfig+0x1a8>
 8004e14:	2300      	movs	r3, #0
 8004e16:	76fb      	strb	r3, [r7, #27]
 8004e18:	e05e      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	76fb      	strb	r3, [r7, #27]
 8004e1e:	e05b      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004e20:	2304      	movs	r3, #4
 8004e22:	76fb      	strb	r3, [r7, #27]
 8004e24:	e058      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004e26:	2308      	movs	r3, #8
 8004e28:	76fb      	strb	r3, [r7, #27]
 8004e2a:	e055      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004e2c:	2310      	movs	r3, #16
 8004e2e:	76fb      	strb	r3, [r7, #27]
 8004e30:	bf00      	nop
 8004e32:	e051      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a56      	ldr	r2, [pc, #344]	; (8004f94 <UART_SetConfig+0x310>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d120      	bne.n	8004e80 <UART_SetConfig+0x1fc>
 8004e3e:	4b52      	ldr	r3, [pc, #328]	; (8004f88 <UART_SetConfig+0x304>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d00f      	beq.n	8004e6c <UART_SetConfig+0x1e8>
 8004e4c:	2b40      	cmp	r3, #64	; 0x40
 8004e4e:	d802      	bhi.n	8004e56 <UART_SetConfig+0x1d2>
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <UART_SetConfig+0x1dc>
 8004e54:	e010      	b.n	8004e78 <UART_SetConfig+0x1f4>
 8004e56:	2b80      	cmp	r3, #128	; 0x80
 8004e58:	d005      	beq.n	8004e66 <UART_SetConfig+0x1e2>
 8004e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e5c:	d009      	beq.n	8004e72 <UART_SetConfig+0x1ee>
 8004e5e:	e00b      	b.n	8004e78 <UART_SetConfig+0x1f4>
 8004e60:	2300      	movs	r3, #0
 8004e62:	76fb      	strb	r3, [r7, #27]
 8004e64:	e038      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004e66:	2302      	movs	r3, #2
 8004e68:	76fb      	strb	r3, [r7, #27]
 8004e6a:	e035      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	76fb      	strb	r3, [r7, #27]
 8004e70:	e032      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004e72:	2308      	movs	r3, #8
 8004e74:	76fb      	strb	r3, [r7, #27]
 8004e76:	e02f      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	76fb      	strb	r3, [r7, #27]
 8004e7c:	bf00      	nop
 8004e7e:	e02b      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a3e      	ldr	r2, [pc, #248]	; (8004f80 <UART_SetConfig+0x2fc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d124      	bne.n	8004ed4 <UART_SetConfig+0x250>
 8004e8a:	4b3f      	ldr	r3, [pc, #252]	; (8004f88 <UART_SetConfig+0x304>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e98:	d012      	beq.n	8004ec0 <UART_SetConfig+0x23c>
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d802      	bhi.n	8004ea6 <UART_SetConfig+0x222>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <UART_SetConfig+0x230>
 8004ea4:	e012      	b.n	8004ecc <UART_SetConfig+0x248>
 8004ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eaa:	d006      	beq.n	8004eba <UART_SetConfig+0x236>
 8004eac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eb0:	d009      	beq.n	8004ec6 <UART_SetConfig+0x242>
 8004eb2:	e00b      	b.n	8004ecc <UART_SetConfig+0x248>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	76fb      	strb	r3, [r7, #27]
 8004eb8:	e00e      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	76fb      	strb	r3, [r7, #27]
 8004ebe:	e00b      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	76fb      	strb	r3, [r7, #27]
 8004ec4:	e008      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	76fb      	strb	r3, [r7, #27]
 8004eca:	e005      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	76fb      	strb	r3, [r7, #27]
 8004ed0:	bf00      	nop
 8004ed2:	e001      	b.n	8004ed8 <UART_SetConfig+0x254>
 8004ed4:	2310      	movs	r3, #16
 8004ed6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a28      	ldr	r2, [pc, #160]	; (8004f80 <UART_SetConfig+0x2fc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	f040 80a1 	bne.w	8005026 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ee4:	7efb      	ldrb	r3, [r7, #27]
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d823      	bhi.n	8004f32 <UART_SetConfig+0x2ae>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <UART_SetConfig+0x26c>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f33 	.word	0x08004f33
 8004ef8:	08004f1d 	.word	0x08004f1d
 8004efc:	08004f33 	.word	0x08004f33
 8004f00:	08004f23 	.word	0x08004f23
 8004f04:	08004f33 	.word	0x08004f33
 8004f08:	08004f33 	.word	0x08004f33
 8004f0c:	08004f33 	.word	0x08004f33
 8004f10:	08004f2b 	.word	0x08004f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f14:	f7fe fbbe 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8004f18:	6178      	str	r0, [r7, #20]
        break;
 8004f1a:	e00f      	b.n	8004f3c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	; (8004f98 <UART_SetConfig+0x314>)
 8004f1e:	617b      	str	r3, [r7, #20]
        break;
 8004f20:	e00c      	b.n	8004f3c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f22:	f7fe fb49 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 8004f26:	6178      	str	r0, [r7, #20]
        break;
 8004f28:	e008      	b.n	8004f3c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f2e:	617b      	str	r3, [r7, #20]
        break;
 8004f30:	e004      	b.n	8004f3c <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	76bb      	strb	r3, [r7, #26]
        break;
 8004f3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 8130 	beq.w	80051a4 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	4a14      	ldr	r2, [pc, #80]	; (8004f9c <UART_SetConfig+0x318>)
 8004f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d305      	bcc.n	8004f74 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d915      	bls.n	8004fa0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	76bb      	strb	r3, [r7, #26]
 8004f78:	e114      	b.n	80051a4 <UART_SetConfig+0x520>
 8004f7a:	bf00      	nop
 8004f7c:	cfff69f3 	.word	0xcfff69f3
 8004f80:	40008000 	.word	0x40008000
 8004f84:	40013800 	.word	0x40013800
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40004400 	.word	0x40004400
 8004f90:	40004800 	.word	0x40004800
 8004f94:	40004c00 	.word	0x40004c00
 8004f98:	00f42400 	.word	0x00f42400
 8004f9c:	08005eac 	.word	0x08005eac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f04f 0100 	mov.w	r1, #0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	4a87      	ldr	r2, [pc, #540]	; (80051cc <UART_SetConfig+0x548>)
 8004fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f04f 0400 	mov.w	r4, #0
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4623      	mov	r3, r4
 8004fbc:	f7fb f936 	bl	800022c <__aeabi_uldivmod>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	f04f 0400 	mov.w	r4, #0
 8004fd0:	0214      	lsls	r4, r2, #8
 8004fd2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004fd6:	020b      	lsls	r3, r1, #8
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6852      	ldr	r2, [r2, #4]
 8004fdc:	0852      	lsrs	r2, r2, #1
 8004fde:	4611      	mov	r1, r2
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	eb13 0b01 	adds.w	fp, r3, r1
 8004fe8:	eb44 0c02 	adc.w	ip, r4, r2
 8004fec:	4658      	mov	r0, fp
 8004fee:	4661      	mov	r1, ip
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f04f 0400 	mov.w	r4, #0
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4623      	mov	r3, r4
 8004ffc:	f7fb f916 	bl	800022c <__aeabi_uldivmod>
 8005000:	4603      	mov	r3, r0
 8005002:	460c      	mov	r4, r1
 8005004:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800500c:	d308      	bcc.n	8005020 <UART_SetConfig+0x39c>
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005014:	d204      	bcs.n	8005020 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	60da      	str	r2, [r3, #12]
 800501e:	e0c1      	b.n	80051a4 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	76bb      	strb	r3, [r7, #26]
 8005024:	e0be      	b.n	80051a4 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800502e:	d164      	bne.n	80050fa <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8005030:	7efb      	ldrb	r3, [r7, #27]
 8005032:	2b08      	cmp	r3, #8
 8005034:	d827      	bhi.n	8005086 <UART_SetConfig+0x402>
 8005036:	a201      	add	r2, pc, #4	; (adr r2, 800503c <UART_SetConfig+0x3b8>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	08005061 	.word	0x08005061
 8005040:	08005069 	.word	0x08005069
 8005044:	08005071 	.word	0x08005071
 8005048:	08005087 	.word	0x08005087
 800504c:	08005077 	.word	0x08005077
 8005050:	08005087 	.word	0x08005087
 8005054:	08005087 	.word	0x08005087
 8005058:	08005087 	.word	0x08005087
 800505c:	0800507f 	.word	0x0800507f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005060:	f7fe fb18 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8005064:	6178      	str	r0, [r7, #20]
        break;
 8005066:	e013      	b.n	8005090 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005068:	f7fe fb2a 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 800506c:	6178      	str	r0, [r7, #20]
        break;
 800506e:	e00f      	b.n	8005090 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005070:	4b57      	ldr	r3, [pc, #348]	; (80051d0 <UART_SetConfig+0x54c>)
 8005072:	617b      	str	r3, [r7, #20]
        break;
 8005074:	e00c      	b.n	8005090 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005076:	f7fe fa9f 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 800507a:	6178      	str	r0, [r7, #20]
        break;
 800507c:	e008      	b.n	8005090 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800507e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005082:	617b      	str	r3, [r7, #20]
        break;
 8005084:	e004      	b.n	8005090 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	76bb      	strb	r3, [r7, #26]
        break;
 800508e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8086 	beq.w	80051a4 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	4a4b      	ldr	r2, [pc, #300]	; (80051cc <UART_SetConfig+0x548>)
 800509e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050a2:	461a      	mov	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80050aa:	005a      	lsls	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	441a      	add	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	b29b      	uxth	r3, r3
 80050be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b0f      	cmp	r3, #15
 80050c4:	d916      	bls.n	80050f4 <UART_SetConfig+0x470>
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050cc:	d212      	bcs.n	80050f4 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	f023 030f 	bic.w	r3, r3, #15
 80050d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	b29b      	uxth	r3, r3
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	89fb      	ldrh	r3, [r7, #14]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	89fa      	ldrh	r2, [r7, #14]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	e057      	b.n	80051a4 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	76bb      	strb	r3, [r7, #26]
 80050f8:	e054      	b.n	80051a4 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050fa:	7efb      	ldrb	r3, [r7, #27]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d828      	bhi.n	8005152 <UART_SetConfig+0x4ce>
 8005100:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <UART_SetConfig+0x484>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	0800512d 	.word	0x0800512d
 800510c:	08005135 	.word	0x08005135
 8005110:	0800513d 	.word	0x0800513d
 8005114:	08005153 	.word	0x08005153
 8005118:	08005143 	.word	0x08005143
 800511c:	08005153 	.word	0x08005153
 8005120:	08005153 	.word	0x08005153
 8005124:	08005153 	.word	0x08005153
 8005128:	0800514b 	.word	0x0800514b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800512c:	f7fe fab2 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8005130:	6178      	str	r0, [r7, #20]
        break;
 8005132:	e013      	b.n	800515c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005134:	f7fe fac4 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 8005138:	6178      	str	r0, [r7, #20]
        break;
 800513a:	e00f      	b.n	800515c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800513c:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <UART_SetConfig+0x54c>)
 800513e:	617b      	str	r3, [r7, #20]
        break;
 8005140:	e00c      	b.n	800515c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005142:	f7fe fa39 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 8005146:	6178      	str	r0, [r7, #20]
        break;
 8005148:	e008      	b.n	800515c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514e:	617b      	str	r3, [r7, #20]
        break;
 8005150:	e004      	b.n	800515c <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	76bb      	strb	r3, [r7, #26]
        break;
 800515a:	bf00      	nop
    }

    if (pclk != 0U)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d020      	beq.n	80051a4 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	4a19      	ldr	r2, [pc, #100]	; (80051cc <UART_SetConfig+0x548>)
 8005168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800516c:	461a      	mov	r2, r3
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	fbb3 f2f2 	udiv	r2, r3, r2
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	441a      	add	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	b29b      	uxth	r3, r3
 8005186:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2b0f      	cmp	r3, #15
 800518c:	d908      	bls.n	80051a0 <UART_SetConfig+0x51c>
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005194:	d204      	bcs.n	80051a0 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	60da      	str	r2, [r3, #12]
 800519e:	e001      	b.n	80051a4 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80051c0:	7ebb      	ldrb	r3, [r7, #26]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80051cc:	08005eac 	.word	0x08005eac
 80051d0:	00f42400 	.word	0x00f42400

080051d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01a      	beq.n	80052ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052d2:	d10a      	bne.n	80052ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]
  }
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af02      	add	r7, sp, #8
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005328:	f7fc fac6 	bl	80018b8 <HAL_GetTick>
 800532c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b08      	cmp	r3, #8
 800533a:	d10e      	bne.n	800535a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800533c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f82c 	bl	80053a8 <UART_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e022      	b.n	80053a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b04      	cmp	r3, #4
 8005366:	d10e      	bne.n	8005386 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f816 	bl	80053a8 <UART_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e00c      	b.n	80053a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b8:	e062      	b.n	8005480 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d05e      	beq.n	8005480 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c2:	f7fc fa79 	bl	80018b8 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d302      	bcc.n	80053d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d11d      	bne.n	8005414 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053e6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0201 	bic.w	r2, r2, #1
 80053f6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2220      	movs	r2, #32
 8005404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e045      	b.n	80054a0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d02e      	beq.n	8005480 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800542c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005430:	d126      	bne.n	8005480 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800543a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800544a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0201 	bic.w	r2, r2, #1
 800545a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e00f      	b.n	80054a0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69da      	ldr	r2, [r3, #28]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4013      	ands	r3, r2
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	429a      	cmp	r2, r3
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	429a      	cmp	r2, r3
 800549c:	d08d      	beq.n	80053ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6812      	ldr	r2, [r2, #0]
 80054ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f7ff fbaf 	bl	8004c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005530:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff fb81 	bl	8004c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005546:	bf00      	nop
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800555c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005564:	2b22      	cmp	r3, #34	; 0x22
 8005566:	d13b      	bne.n	80055e0 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005570:	89bb      	ldrh	r3, [r7, #12]
 8005572:	b2d9      	uxtb	r1, r3
 8005574:	89fb      	ldrh	r3, [r7, #14]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557c:	400a      	ands	r2, r1
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d122      	bne.n	80055f0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055b8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff fb3f 	bl	8004c5c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055de:	e007      	b.n	80055f0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0208 	orr.w	r2, r2, #8
 80055ee:	619a      	str	r2, [r3, #24]
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005606:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560e:	2b22      	cmp	r3, #34	; 0x22
 8005610:	d13b      	bne.n	800568a <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005620:	89ba      	ldrh	r2, [r7, #12]
 8005622:	89fb      	ldrh	r3, [r7, #14]
 8005624:	4013      	ands	r3, r2
 8005626:	b29a      	uxth	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005630:	1c9a      	adds	r2, r3, #2
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d122      	bne.n	800569a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005662:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff faea 	bl	8004c5c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005688:	e007      	b.n	800569a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699a      	ldr	r2, [r3, #24]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0208 	orr.w	r2, r2, #8
 8005698:	619a      	str	r2, [r3, #24]
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80056b2:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ba:	2b22      	cmp	r3, #34	; 0x22
 80056bc:	d168      	bne.n	8005790 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80056c4:	81fb      	strh	r3, [r7, #14]
 80056c6:	e03f      	b.n	8005748 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056d0:	893b      	ldrh	r3, [r7, #8]
 80056d2:	b2d9      	uxtb	r1, r3
 80056d4:	89bb      	ldrh	r3, [r7, #12]
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056dc:	400a      	ands	r2, r1
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d11b      	bne.n	8005742 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005718:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff fa8d 	bl	8004c5c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005742:	89fb      	ldrh	r3, [r7, #14]
 8005744:	3b01      	subs	r3, #1
 8005746:	81fb      	strh	r3, [r7, #14]
 8005748:	89fb      	ldrh	r3, [r7, #14]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1bc      	bne.n	80056c8 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005754:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005756:	897b      	ldrh	r3, [r7, #10]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d021      	beq.n	80057a0 <UART_RxISR_8BIT_FIFOEN+0xfc>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005762:	897a      	ldrh	r2, [r7, #10]
 8005764:	429a      	cmp	r2, r3
 8005766:	d21b      	bcs.n	80057a0 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005776:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a0b      	ldr	r2, [pc, #44]	; (80057a8 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800577c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0220 	orr.w	r2, r2, #32
 800578c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800578e:	e007      	b.n	80057a0 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0208 	orr.w	r2, r2, #8
 800579e:	619a      	str	r2, [r3, #24]
}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	0800554f 	.word	0x0800554f

080057ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80057ba:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c2:	2b22      	cmp	r3, #34	; 0x22
 80057c4:	d168      	bne.n	8005898 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80057cc:	82fb      	strh	r3, [r7, #22]
 80057ce:	e03f      	b.n	8005850 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057dc:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80057de:	8a3a      	ldrh	r2, [r7, #16]
 80057e0:	8abb      	ldrh	r3, [r7, #20]
 80057e2:	4013      	ands	r3, r2
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ee:	1c9a      	adds	r2, r3, #2
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d11b      	bne.n	800584a <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005820:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6812      	ldr	r2, [r2, #0]
 800582c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7ff fa09 	bl	8004c5c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800584a:	8afb      	ldrh	r3, [r7, #22]
 800584c:	3b01      	subs	r3, #1
 800584e:	82fb      	strh	r3, [r7, #22]
 8005850:	8afb      	ldrh	r3, [r7, #22]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1bc      	bne.n	80057d0 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800585c:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800585e:	8a7b      	ldrh	r3, [r7, #18]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d021      	beq.n	80058a8 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800586a:	8a7a      	ldrh	r2, [r7, #18]
 800586c:	429a      	cmp	r2, r3
 800586e:	d21b      	bcs.n	80058a8 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800587e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a0b      	ldr	r2, [pc, #44]	; (80058b0 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8005884:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0220 	orr.w	r2, r2, #32
 8005894:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005896:	e007      	b.n	80058a8 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0208 	orr.w	r2, r2, #8
 80058a6:	619a      	str	r2, [r3, #24]
}
 80058a8:	bf00      	nop
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	080055f9 	.word	0x080055f9

080058b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_UARTEx_DisableFifoMode+0x16>
 8005902:	2302      	movs	r3, #2
 8005904:	e027      	b.n	8005956 <HAL_UARTEx_DisableFifoMode+0x66>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2224      	movs	r2, #36	; 0x24
 8005912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0201 	bic.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005934:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2220      	movs	r2, #32
 8005948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005976:	2302      	movs	r3, #2
 8005978:	e02d      	b.n	80059d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2224      	movs	r2, #36	; 0x24
 8005986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f850 	bl	8005a5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e02d      	b.n	8005a52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2224      	movs	r2, #36	; 0x24
 8005a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0201 	bic.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f812 	bl	8005a5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
	...

08005a5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b089      	sub	sp, #36	; 0x24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005a64:	4a2f      	ldr	r2, [pc, #188]	; (8005b24 <UARTEx_SetNbDataToProcess+0xc8>)
 8005a66:	f107 0314 	add.w	r3, r7, #20
 8005a6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a6e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005a72:	4a2d      	ldr	r2, [pc, #180]	; (8005b28 <UARTEx_SetNbDataToProcess+0xcc>)
 8005a74:	f107 030c 	add.w	r3, r7, #12
 8005a78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a7c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d108      	bne.n	8005a9a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a98:	e03d      	b.n	8005b16 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	0e5b      	lsrs	r3, r3, #25
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	0f5b      	lsrs	r3, r3, #29
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ac2:	7fbb      	ldrb	r3, [r7, #30]
 8005ac4:	7f3a      	ldrb	r2, [r7, #28]
 8005ac6:	f107 0120 	add.w	r1, r7, #32
 8005aca:	440a      	add	r2, r1
 8005acc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005ad0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ad4:	7f3a      	ldrb	r2, [r7, #28]
 8005ad6:	f107 0120 	add.w	r1, r7, #32
 8005ada:	440a      	add	r2, r1
 8005adc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aec:	7ffb      	ldrb	r3, [r7, #31]
 8005aee:	7f7a      	ldrb	r2, [r7, #29]
 8005af0:	f107 0120 	add.w	r1, r7, #32
 8005af4:	440a      	add	r2, r1
 8005af6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005afe:	7f7a      	ldrb	r2, [r7, #29]
 8005b00:	f107 0120 	add.w	r1, r7, #32
 8005b04:	440a      	add	r2, r1
 8005b06:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b16:	bf00      	nop
 8005b18:	3724      	adds	r7, #36	; 0x24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	08005e74 	.word	0x08005e74
 8005b28:	08005e7c 	.word	0x08005e7c

08005b2c <__libc_init_array>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	4e0d      	ldr	r6, [pc, #52]	; (8005b64 <__libc_init_array+0x38>)
 8005b30:	4c0d      	ldr	r4, [pc, #52]	; (8005b68 <__libc_init_array+0x3c>)
 8005b32:	1ba4      	subs	r4, r4, r6
 8005b34:	10a4      	asrs	r4, r4, #2
 8005b36:	2500      	movs	r5, #0
 8005b38:	42a5      	cmp	r5, r4
 8005b3a:	d109      	bne.n	8005b50 <__libc_init_array+0x24>
 8005b3c:	4e0b      	ldr	r6, [pc, #44]	; (8005b6c <__libc_init_array+0x40>)
 8005b3e:	4c0c      	ldr	r4, [pc, #48]	; (8005b70 <__libc_init_array+0x44>)
 8005b40:	f000 f820 	bl	8005b84 <_init>
 8005b44:	1ba4      	subs	r4, r4, r6
 8005b46:	10a4      	asrs	r4, r4, #2
 8005b48:	2500      	movs	r5, #0
 8005b4a:	42a5      	cmp	r5, r4
 8005b4c:	d105      	bne.n	8005b5a <__libc_init_array+0x2e>
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b54:	4798      	blx	r3
 8005b56:	3501      	adds	r5, #1
 8005b58:	e7ee      	b.n	8005b38 <__libc_init_array+0xc>
 8005b5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b5e:	4798      	blx	r3
 8005b60:	3501      	adds	r5, #1
 8005b62:	e7f2      	b.n	8005b4a <__libc_init_array+0x1e>
 8005b64:	08005ecc 	.word	0x08005ecc
 8005b68:	08005ecc 	.word	0x08005ecc
 8005b6c:	08005ecc 	.word	0x08005ecc
 8005b70:	08005ed0 	.word	0x08005ed0

08005b74 <memset>:
 8005b74:	4402      	add	r2, r0
 8005b76:	4603      	mov	r3, r0
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d100      	bne.n	8005b7e <memset+0xa>
 8005b7c:	4770      	bx	lr
 8005b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b82:	e7f9      	b.n	8005b78 <memset+0x4>

08005b84 <_init>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	bf00      	nop
 8005b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8a:	bc08      	pop	{r3}
 8005b8c:	469e      	mov	lr, r3
 8005b8e:	4770      	bx	lr

08005b90 <_fini>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	bf00      	nop
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr
