
project_12_CAN_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d78  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08006f50  08006f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800725c  0800725c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800725c  0800725c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007264  08007264  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001178  2000000c  0800727c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001184  0800727c  00021184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d55  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028dd  00000000  00000000  00037d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e0  00000000  00000000  0003a670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  0003ba50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000200de  00000000  00000000  0003ccf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f04e  00000000  00000000  0005cdd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cde97  00000000  00000000  0006be24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139cbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005598  00000000  00000000  00139d38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006f38 	.word	0x08006f38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006f38 	.word	0x08006f38

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b972 	b.w	8000528 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9e08      	ldr	r6, [sp, #32]
 8000262:	4604      	mov	r4, r0
 8000264:	4688      	mov	r8, r1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d14b      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026a:	428a      	cmp	r2, r1
 800026c:	4615      	mov	r5, r2
 800026e:	d967      	bls.n	8000340 <__udivmoddi4+0xe4>
 8000270:	fab2 f282 	clz	r2, r2
 8000274:	b14a      	cbz	r2, 800028a <__udivmoddi4+0x2e>
 8000276:	f1c2 0720 	rsb	r7, r2, #32
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	fa20 f707 	lsr.w	r7, r0, r7
 8000282:	4095      	lsls	r5, r2
 8000284:	ea47 0803 	orr.w	r8, r7, r3
 8000288:	4094      	lsls	r4, r2
 800028a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028e:	0c23      	lsrs	r3, r4, #16
 8000290:	fbb8 f7fe 	udiv	r7, r8, lr
 8000294:	fa1f fc85 	uxth.w	ip, r5
 8000298:	fb0e 8817 	mls	r8, lr, r7, r8
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	fb07 f10c 	mul.w	r1, r7, ip
 80002a4:	4299      	cmp	r1, r3
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x60>
 80002a8:	18eb      	adds	r3, r5, r3
 80002aa:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ae:	f080 811b 	bcs.w	80004e8 <__udivmoddi4+0x28c>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 8118 	bls.w	80004e8 <__udivmoddi4+0x28c>
 80002b8:	3f02      	subs	r7, #2
 80002ba:	442b      	add	r3, r5
 80002bc:	1a5b      	subs	r3, r3, r1
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002cc:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d0:	45a4      	cmp	ip, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x8c>
 80002d4:	192c      	adds	r4, r5, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x290>
 80002de:	45a4      	cmp	ip, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x290>
 80002e4:	3802      	subs	r0, #2
 80002e6:	442c      	add	r4, r5
 80002e8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ec:	eba4 040c 	sub.w	r4, r4, ip
 80002f0:	2700      	movs	r7, #0
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa0>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0xbe>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80eb 	beq.w	80004e2 <__udivmoddi4+0x286>
 800030c:	2700      	movs	r7, #0
 800030e:	e9c6 0100 	strd	r0, r1, [r6]
 8000312:	4638      	mov	r0, r7
 8000314:	4639      	mov	r1, r7
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f783 	clz	r7, r3
 800031e:	2f00      	cmp	r7, #0
 8000320:	d147      	bne.n	80003b2 <__udivmoddi4+0x156>
 8000322:	428b      	cmp	r3, r1
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xd0>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2c4>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb61 0303 	sbc.w	r3, r1, r3
 8000332:	2001      	movs	r0, #1
 8000334:	4698      	mov	r8, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d0e0      	beq.n	80002fc <__udivmoddi4+0xa0>
 800033a:	e9c6 4800 	strd	r4, r8, [r6]
 800033e:	e7dd      	b.n	80002fc <__udivmoddi4+0xa0>
 8000340:	b902      	cbnz	r2, 8000344 <__udivmoddi4+0xe8>
 8000342:	deff      	udf	#255	; 0xff
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	2a00      	cmp	r2, #0
 800034a:	f040 808f 	bne.w	800046c <__udivmoddi4+0x210>
 800034e:	1b49      	subs	r1, r1, r5
 8000350:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000354:	fa1f f885 	uxth.w	r8, r5
 8000358:	2701      	movs	r7, #1
 800035a:	fbb1 fcfe 	udiv	ip, r1, lr
 800035e:	0c23      	lsrs	r3, r4, #16
 8000360:	fb0e 111c 	mls	r1, lr, ip, r1
 8000364:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000368:	fb08 f10c 	mul.w	r1, r8, ip
 800036c:	4299      	cmp	r1, r3
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x124>
 8000370:	18eb      	adds	r3, r5, r3
 8000372:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x122>
 8000378:	4299      	cmp	r1, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2bc>
 800037e:	4684      	mov	ip, r0
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	b2a3      	uxth	r3, r4
 8000384:	fbb1 f0fe 	udiv	r0, r1, lr
 8000388:	fb0e 1410 	mls	r4, lr, r0, r1
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	fb08 f800 	mul.w	r8, r8, r0
 8000394:	45a0      	cmp	r8, r4
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x14c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x14a>
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	f200 80b6 	bhi.w	8000512 <__udivmoddi4+0x2b6>
 80003a6:	4618      	mov	r0, r3
 80003a8:	eba4 0408 	sub.w	r4, r4, r8
 80003ac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b0:	e79f      	b.n	80002f2 <__udivmoddi4+0x96>
 80003b2:	f1c7 0c20 	rsb	ip, r7, #32
 80003b6:	40bb      	lsls	r3, r7
 80003b8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003bc:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c0:	fa01 f407 	lsl.w	r4, r1, r7
 80003c4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003cc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d0:	4325      	orrs	r5, r4
 80003d2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d6:	0c2c      	lsrs	r4, r5, #16
 80003d8:	fb08 3319 	mls	r3, r8, r9, r3
 80003dc:	fa1f fa8e 	uxth.w	sl, lr
 80003e0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e4:	fb09 f40a 	mul.w	r4, r9, sl
 80003e8:	429c      	cmp	r4, r3
 80003ea:	fa02 f207 	lsl.w	r2, r2, r7
 80003ee:	fa00 f107 	lsl.w	r1, r0, r7
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b0>
 80003f4:	eb1e 0303 	adds.w	r3, lr, r3
 80003f8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003fc:	f080 8087 	bcs.w	800050e <__udivmoddi4+0x2b2>
 8000400:	429c      	cmp	r4, r3
 8000402:	f240 8084 	bls.w	800050e <__udivmoddi4+0x2b2>
 8000406:	f1a9 0902 	sub.w	r9, r9, #2
 800040a:	4473      	add	r3, lr
 800040c:	1b1b      	subs	r3, r3, r4
 800040e:	b2ad      	uxth	r5, r5
 8000410:	fbb3 f0f8 	udiv	r0, r3, r8
 8000414:	fb08 3310 	mls	r3, r8, r0, r3
 8000418:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800041c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000420:	45a2      	cmp	sl, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1da>
 8000424:	eb1e 0404 	adds.w	r4, lr, r4
 8000428:	f100 33ff 	add.w	r3, r0, #4294967295
 800042c:	d26b      	bcs.n	8000506 <__udivmoddi4+0x2aa>
 800042e:	45a2      	cmp	sl, r4
 8000430:	d969      	bls.n	8000506 <__udivmoddi4+0x2aa>
 8000432:	3802      	subs	r0, #2
 8000434:	4474      	add	r4, lr
 8000436:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043a:	fba0 8902 	umull	r8, r9, r0, r2
 800043e:	eba4 040a 	sub.w	r4, r4, sl
 8000442:	454c      	cmp	r4, r9
 8000444:	46c2      	mov	sl, r8
 8000446:	464b      	mov	r3, r9
 8000448:	d354      	bcc.n	80004f4 <__udivmoddi4+0x298>
 800044a:	d051      	beq.n	80004f0 <__udivmoddi4+0x294>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2c8>
 8000450:	ebb1 050a 	subs.w	r5, r1, sl
 8000454:	eb64 0403 	sbc.w	r4, r4, r3
 8000458:	fa04 fc0c 	lsl.w	ip, r4, ip
 800045c:	40fd      	lsrs	r5, r7
 800045e:	40fc      	lsrs	r4, r7
 8000460:	ea4c 0505 	orr.w	r5, ip, r5
 8000464:	e9c6 5400 	strd	r5, r4, [r6]
 8000468:	2700      	movs	r7, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa0>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f703 	lsr.w	r7, r0, r3
 8000474:	4095      	lsls	r5, r2
 8000476:	fa01 f002 	lsl.w	r0, r1, r2
 800047a:	fa21 f303 	lsr.w	r3, r1, r3
 800047e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000482:	4338      	orrs	r0, r7
 8000484:	0c01      	lsrs	r1, r0, #16
 8000486:	fbb3 f7fe 	udiv	r7, r3, lr
 800048a:	fa1f f885 	uxth.w	r8, r5
 800048e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb07 f308 	mul.w	r3, r7, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x256>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f107 3cff 	add.w	ip, r7, #4294967295
 80004a8:	d22f      	bcs.n	800050a <__udivmoddi4+0x2ae>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d92d      	bls.n	800050a <__udivmoddi4+0x2ae>
 80004ae:	3f02      	subs	r7, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1acb      	subs	r3, r1, r3
 80004b4:	b281      	uxth	r1, r0
 80004b6:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ba:	fb0e 3310 	mls	r3, lr, r0, r3
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb00 f308 	mul.w	r3, r0, r8
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x27e>
 80004ca:	1869      	adds	r1, r5, r1
 80004cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d0:	d217      	bcs.n	8000502 <__udivmoddi4+0x2a6>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d915      	bls.n	8000502 <__udivmoddi4+0x2a6>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4429      	add	r1, r5
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e0:	e73b      	b.n	800035a <__udivmoddi4+0xfe>
 80004e2:	4637      	mov	r7, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e709      	b.n	80002fc <__udivmoddi4+0xa0>
 80004e8:	4607      	mov	r7, r0
 80004ea:	e6e7      	b.n	80002bc <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x8c>
 80004f0:	4541      	cmp	r1, r8
 80004f2:	d2ab      	bcs.n	800044c <__udivmoddi4+0x1f0>
 80004f4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f8:	eb69 020e 	sbc.w	r2, r9, lr
 80004fc:	3801      	subs	r0, #1
 80004fe:	4613      	mov	r3, r2
 8000500:	e7a4      	b.n	800044c <__udivmoddi4+0x1f0>
 8000502:	4660      	mov	r0, ip
 8000504:	e7e9      	b.n	80004da <__udivmoddi4+0x27e>
 8000506:	4618      	mov	r0, r3
 8000508:	e795      	b.n	8000436 <__udivmoddi4+0x1da>
 800050a:	4667      	mov	r7, ip
 800050c:	e7d1      	b.n	80004b2 <__udivmoddi4+0x256>
 800050e:	4681      	mov	r9, r0
 8000510:	e77c      	b.n	800040c <__udivmoddi4+0x1b0>
 8000512:	3802      	subs	r0, #2
 8000514:	442c      	add	r4, r5
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0x14c>
 8000518:	f1ac 0c02 	sub.w	ip, ip, #2
 800051c:	442b      	add	r3, r5
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x124>
 8000520:	4638      	mov	r0, r7
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xda>
 8000524:	4637      	mov	r7, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa0>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <_ZNK5Queue7IsEmptyEv>:
	bool Push(uint8_t* data, uint8_t size, uint8_t priority);
	bool IsFull() const
	{
		return (Count == UART_TX_QUEUE_BUFFER_SIZE);
	}
	bool IsEmpty() const
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	{
		return (Count == 0);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf0c      	ite	eq
 800053c:	2301      	moveq	r3, #1
 800053e:	2300      	movne	r3, #0
 8000540:	b2db      	uxtb	r3, r3
	}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <_ZN3MSGC1Ev>:
struct MSG
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2200      	movs	r2, #0
 8000562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <_ZN5QueueC1Ev>:
struct Queue
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3304      	adds	r3, #4
 8000586:	2417      	movs	r4, #23
 8000588:	461d      	mov	r5, r3
 800058a:	2c00      	cmp	r4, #0
 800058c:	db05      	blt.n	800059a <_ZN5QueueC1Ev+0x26>
 800058e:	4628      	mov	r0, r5
 8000590:	f7ff ffdd 	bl	800054e <_ZN3MSGC1Ev>
 8000594:	3542      	adds	r5, #66	; 0x42
 8000596:	3c01      	subs	r4, #1
 8000598:	e7f7      	b.n	800058a <_ZN5QueueC1Ev+0x16>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bdb0      	pop	{r4, r5, r7, pc}

080005b4 <add_message_to_UART_TX_queue>:
Queue UARTQueueTX;

extern "C"
{
	void add_message_to_UART_TX_queue(uint8_t* message_data_pointer, uint8_t message_size, uint8_t message_priority)
	{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08e      	sub	sp, #56	; 0x38
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	70fb      	strb	r3, [r7, #3]
 80005c0:	4613      	mov	r3, r2
 80005c2:	70bb      	strb	r3, [r7, #2]
		uint8_t tmp_buff[40];
		for (int i = 0; i < (int)sizeof(tmp_buff); i++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	637b      	str	r3, [r7, #52]	; 0x34
 80005c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ca:	2b27      	cmp	r3, #39	; 0x27
 80005cc:	dc0d      	bgt.n	80005ea <add_message_to_UART_TX_queue+0x36>
		{
			tmp_buff[i] = message_data_pointer[i];
 80005ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	4413      	add	r3, r2
 80005d4:	7819      	ldrb	r1, [r3, #0]
 80005d6:	f107 020c 	add.w	r2, r7, #12
 80005da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005dc:	4413      	add	r3, r2
 80005de:	460a      	mov	r2, r1
 80005e0:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < (int)sizeof(tmp_buff); i++)
 80005e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005e4:	3301      	adds	r3, #1
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
 80005e8:	e7ee      	b.n	80005c8 <add_message_to_UART_TX_queue+0x14>
		}

		UARTQueueTX.Push(message_data_pointer, message_size, message_priority);
 80005ea:	78bb      	ldrb	r3, [r7, #2]
 80005ec:	78fa      	ldrb	r2, [r7, #3]
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <add_message_to_UART_TX_queue+0x4c>)
 80005f2:	f000 fb30 	bl	8000c56 <_ZN5Queue4PushEPhhh>
	}
 80005f6:	bf00      	nop
 80005f8:	3738      	adds	r7, #56	; 0x38
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000028 	.word	0x20000028

08000604 <send_messages_from_UART_TX_queue>:

	void send_messages_from_UART_TX_queue(void)
	{
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
		if (!UARTQueueTX.IsEmpty())
 800060a:	4836      	ldr	r0, [pc, #216]	; (80006e4 <send_messages_from_UART_TX_queue+0xe0>)
 800060c:	f7ff ff8e 	bl	800052c <_ZNK5Queue7IsEmptyEv>
 8000610:	4603      	mov	r3, r0
 8000612:	f083 0301 	eor.w	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d05e      	beq.n	80006da <send_messages_from_UART_TX_queue+0xd6>
		{
			for (int i = UARTQueueTX.GetIndex; i != UARTQueueTX.PutIndex; i++)
 800061c:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <send_messages_from_UART_TX_queue+0xe0>)
 800061e:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <send_messages_from_UART_TX_queue+0xe0>)
 8000626:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	d054      	beq.n	80006da <send_messages_from_UART_TX_queue+0xd6>
				}
				uint8_t tmp_arr_3[UARTQueueTX.Msgs[i].Size];
				UARTQueueTX.Pop(tmp_arr_3, sizeof(tmp_arr_3));
				send_message_to_UART(sizeof(tmp_arr_3), (uint8_t*)tmp_arr_3);
				UARTQueueTX.Msgs[i].Size = 0;
			}
 8000630:	466b      	mov	r3, sp
 8000632:	461e      	mov	r6, r3
				if (i == UART_TX_QUEUE_BUFFER_SIZE)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b18      	cmp	r3, #24
 8000638:	d101      	bne.n	800063e <send_messages_from_UART_TX_queue+0x3a>
					i = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
				uint8_t tmp_arr_3[UARTQueueTX.Msgs[i].Size];
 800063e:	4929      	ldr	r1, [pc, #164]	; (80006e4 <send_messages_from_UART_TX_queue+0xe0>)
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	4613      	mov	r3, r2
 8000644:	015b      	lsls	r3, r3, #5
 8000646:	4413      	add	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	440b      	add	r3, r1
 800064c:	3345      	adds	r3, #69	; 0x45
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	1e5d      	subs	r5, r3, #1
 8000652:	60bd      	str	r5, [r7, #8]
 8000654:	462b      	mov	r3, r5
 8000656:	3301      	adds	r3, #1
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 0200 	mov.w	r2, #0
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	f04f 0400 	mov.w	r4, #0
 8000666:	00d4      	lsls	r4, r2, #3
 8000668:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800066c:	00cb      	lsls	r3, r1, #3
 800066e:	462b      	mov	r3, r5
 8000670:	3301      	adds	r3, #1
 8000672:	4619      	mov	r1, r3
 8000674:	f04f 0200 	mov.w	r2, #0
 8000678:	f04f 0300 	mov.w	r3, #0
 800067c:	f04f 0400 	mov.w	r4, #0
 8000680:	00d4      	lsls	r4, r2, #3
 8000682:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000686:	00cb      	lsls	r3, r1, #3
 8000688:	462b      	mov	r3, r5
 800068a:	3301      	adds	r3, #1
 800068c:	3307      	adds	r3, #7
 800068e:	08db      	lsrs	r3, r3, #3
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	ebad 0d03 	sub.w	sp, sp, r3
 8000696:	466b      	mov	r3, sp
 8000698:	3300      	adds	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
				UARTQueueTX.Pop(tmp_arr_3, sizeof(tmp_arr_3));
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	b2eb      	uxtb	r3, r5
 80006a0:	3301      	adds	r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	480f      	ldr	r0, [pc, #60]	; (80006e4 <send_messages_from_UART_TX_queue+0xe0>)
 80006a8:	f000 fa76 	bl	8000b98 <_ZN5Queue3PopEPhh>
				send_message_to_UART(sizeof(tmp_arr_3), (uint8_t*)tmp_arr_3);
 80006ac:	b2ab      	uxth	r3, r5
 80006ae:	3301      	adds	r3, #1
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f8e8 	bl	800188c <send_message_to_UART>
				UARTQueueTX.Msgs[i].Size = 0;
 80006bc:	4909      	ldr	r1, [pc, #36]	; (80006e4 <send_messages_from_UART_TX_queue+0xe0>)
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	4613      	mov	r3, r2
 80006c2:	015b      	lsls	r3, r3, #5
 80006c4:	4413      	add	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	440b      	add	r3, r1
 80006ca:	3345      	adds	r3, #69	; 0x45
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	46b5      	mov	sp, r6
			for (int i = UARTQueueTX.GetIndex; i != UARTQueueTX.PutIndex; i++)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	e7a4      	b.n	8000624 <send_messages_from_UART_TX_queue+0x20>
		}
	}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000028 	.word	0x20000028

080006e8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d107      	bne.n	8000708 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006fe:	4293      	cmp	r3, r2
 8000700:	d102      	bne.n	8000708 <_Z41__static_initialization_and_destruction_0ii+0x20>
Queue UARTQueueTX;
 8000702:	4803      	ldr	r0, [pc, #12]	; (8000710 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000704:	f7ff ff36 	bl	8000574 <_ZN5QueueC1Ev>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000028 	.word	0x20000028

08000714 <_GLOBAL__sub_I_UARTQueueTX>:
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
 8000718:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff ffe3 	bl	80006e8 <_Z41__static_initialization_and_destruction_0ii>
 8000722:	bd80      	pop	{r7, pc}

08000724 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_UART_values();
 8000728:	f000 fc68 	bl	8000ffc <init_UART_values>
  init_CAN_values();
 800072c:	f001 fc0e 	bl	8001f4c <init_CAN_values>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f002 f8d3 	bl	80028da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000734:	f000 f832 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f000 f9ca 	bl	8000ad0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800073c:	f000 f97a 	bl	8000a34 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000740:	f000 f92a 	bl	8000998 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8000744:	f000 f894 	bl	8000870 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000748:	f000 f8d8 	bl	80008fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800074c:	480e      	ldr	r0, [pc, #56]	; (8000788 <main+0x64>)
 800074e:	f004 fc35 	bl	8004fbc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <main+0x68>)
 8000754:	f004 fc32 	bl	8004fbc <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_RX_MESSAGE_SIZE);
 8000758:	2201      	movs	r2, #1
 800075a:	490d      	ldr	r1, [pc, #52]	; (8000790 <main+0x6c>)
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <main+0x70>)
 800075e:	f005 f9f5 	bl	8005b4c <HAL_UART_Receive_IT>
  init_CAN_filter();
 8000762:	f001 ff99 	bl	8002698 <init_CAN_filter>
  HAL_FDCAN_ConfigTimestampCounter(&hfdcan1, FDCAN_TIMESTAMP_PRESC_1);
 8000766:	2100      	movs	r1, #0
 8000768:	480b      	ldr	r0, [pc, #44]	; (8000798 <main+0x74>)
 800076a:	f002 fc9a 	bl	80030a2 <HAL_FDCAN_ConfigTimestampCounter>
  HAL_FDCAN_EnableTimestampCounter(&hfdcan1, FDCAN_TIMESTAMP_INTERNAL);
 800076e:	2101      	movs	r1, #1
 8000770:	4809      	ldr	r0, [pc, #36]	; (8000798 <main+0x74>)
 8000772:	f002 fcba 	bl	80030ea <HAL_FDCAN_EnableTimestampCounter>
  HAL_FDCAN_Start(&hfdcan1);
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <main+0x74>)
 8000778:	f002 fce9 	bl	800314e <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, FDCAN_TX_BUFFER0);
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <main+0x74>)
 8000782:	f002 feeb 	bl	800355c <HAL_FDCAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000786:	e7fe      	b.n	8000786 <main+0x62>
 8000788:	200009a0 	.word	0x200009a0
 800078c:	200010a4 	.word	0x200010a4
 8000790:	20000770 	.word	0x20000770
 8000794:	200010f0 	.word	0x200010f0
 8000798:	20000ed4 	.word	0x20000ed4

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a4      	sub	sp, #144	; 0x90
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007a6:	2238      	movs	r2, #56	; 0x38
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f006 fbbc 	bl	8006f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	463b      	mov	r3, r7
 80007c2:	2244      	movs	r2, #68	; 0x44
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f006 fbae 	bl	8006f28 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007d0:	f003 fbc4 	bl	8003f5c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e6:	2302      	movs	r3, #2
 80007e8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007ea:	2306      	movs	r3, #6
 80007ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 48;
 80007ee:	2330      	movs	r3, #48	; 0x30
 80007f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800080a:	4618      	mov	r0, r3
 800080c:	f003 fc5a 	bl	80040c4 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000816:	f000 f9a7 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2303      	movs	r3, #3
 8000820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800082e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000832:	2101      	movs	r1, #1
 8000834:	4618      	mov	r0, r3
 8000836:	f003 ff5d 	bl	80046f4 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000840:	f000 f992 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_FDCAN;
 8000844:	f241 0302 	movw	r3, #4098	; 0x1002
 8000848:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800084e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	4618      	mov	r0, r3
 8000858:	f004 f968 	bl	8004b2c <HAL_RCCEx_PeriphCLKConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000862:	f000 f981 	bl	8000b68 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3790      	adds	r7, #144	; 0x90
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 8000876:	4a20      	ldr	r2, [pc, #128]	; (80008f8 <MX_FDCAN1_Init+0x88>)
 8000878:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 800088e:	2200      	movs	r2, #0
 8000890:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 8000894:	2200      	movs	r2, #0
 8000896:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 800089a:	2200      	movs	r2, #0
 800089c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 80008a0:	2208      	movs	r2, #8
 80008a2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 80008a6:	2203      	movs	r2, #3
 80008a8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 80008ac:	220d      	movs	r2, #13
 80008ae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 80008b8:	2208      	movs	r2, #8
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 80008be:	2203      	movs	r2, #3
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 80008c4:	220a      	movs	r2, #10
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 80008ca:	2203      	movs	r2, #3
 80008cc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 80008dc:	2200      	movs	r2, #0
 80008de:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_FDCAN1_Init+0x84>)
 80008e2:	f002 f9f9 	bl	8002cd8 <HAL_FDCAN_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80008ec:	f000 f93c 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000ed4 	.word	0x20000ed4
 80008f8:	40006400 	.word	0x40006400

080008fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800091a:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_TIM2_Init+0x98>)
 800091c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000920:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_TIM2_Init+0x98>)
 8000924:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000928:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_TIM2_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_TIM2_Init+0x98>)
 8000932:	2209      	movs	r2, #9
 8000934:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_TIM2_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_TIM2_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000942:	4814      	ldr	r0, [pc, #80]	; (8000994 <MX_TIM2_Init+0x98>)
 8000944:	f004 fae2 	bl	8004f0c <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800094e:	f000 f90b 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000956:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4619      	mov	r1, r3
 800095e:	480d      	ldr	r0, [pc, #52]	; (8000994 <MX_TIM2_Init+0x98>)
 8000960:	f004 fd16 	bl	8005390 <HAL_TIM_ConfigClockSource>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800096a:	f000 f8fd 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800096e:	2320      	movs	r3, #32
 8000970:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4619      	mov	r1, r3
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <MX_TIM2_Init+0x98>)
 800097c:	f004 ff38 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000986:	f000 f8ef 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	3720      	adds	r7, #32
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200010a4 	.word	0x200010a4

08000998 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_TIM3_Init+0x94>)
 80009b8:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <MX_TIM3_Init+0x98>)
 80009ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_TIM3_Init+0x94>)
 80009be:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80009c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_TIM3_Init+0x94>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_TIM3_Init+0x94>)
 80009cc:	2263      	movs	r2, #99	; 0x63
 80009ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_TIM3_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_TIM3_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009dc:	4813      	ldr	r0, [pc, #76]	; (8000a2c <MX_TIM3_Init+0x94>)
 80009de:	f004 fa95 	bl	8004f0c <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009e8:	f000 f8be 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4619      	mov	r1, r3
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_TIM3_Init+0x94>)
 80009fa:	f004 fcc9 	bl	8005390 <HAL_TIM_ConfigClockSource>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a04:	f000 f8b0 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a08:	2320      	movs	r3, #32
 8000a0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_TIM3_Init+0x94>)
 8000a16:	f004 feeb 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f8a2 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200009a0 	.word	0x200009a0
 8000a30:	40000400 	.word	0x40000400

08000a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a38:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a3a:	4a24      	ldr	r2, [pc, #144]	; (8000acc <MX_USART2_UART_Init+0x98>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a6a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7e:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a80:	f004 ff7e 	bl	8005980 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000a8a:	f000 f86d 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000a92:	f006 f940 	bl	8006d16 <HAL_UARTEx_SetTxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000a9c:	f000 f864 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000aa4:	f006 f975 	bl	8006d92 <HAL_UARTEx_SetRxFifoThreshold>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000aae:	f000 f85b 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USART2_UART_Init+0x94>)
 8000ab4:	f006 f8f6 	bl	8006ca4 <HAL_UARTEx_DisableFifoMode>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000abe:	f000 f853 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200010f0 	.word	0x200010f0
 8000acc:	40004400 	.word	0x40004400

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <MX_GPIO_Init+0x90>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <MX_GPIO_Init+0x90>)
 8000aec:	f043 0320 	orr.w	r3, r3, #32
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_GPIO_Init+0x90>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_GPIO_Init+0x90>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <MX_GPIO_Init+0x90>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_GPIO_Init+0x90>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_GPIO_Init+0x90>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <MX_GPIO_Init+0x90>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_GPIO_Init+0x90>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <MX_GPIO_Init+0x94>)
 8000b36:	f003 f9f9 	bl	8003f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4619      	mov	r1, r3
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_GPIO_Init+0x94>)
 8000b54:	f003 f868 	bl	8003c28 <HAL_GPIO_Init>

}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000400 	.word	0x48000400

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_ZNK5Queue6IsFullEv>:
	bool IsFull() const
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
		return (Count == UART_TX_QUEUE_BUFFER_SIZE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b18      	cmp	r3, #24
 8000b84:	bf0c      	ite	eq
 8000b86:	2301      	moveq	r3, #1
 8000b88:	2300      	movne	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
	}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_ZN5Queue3PopEPhh>:

/*
 * Извлечь сообщение из общей очереди
 */
bool Queue::Pop(uint8_t* data, uint8_t size)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	71fb      	strb	r3, [r7, #7]
	if (size < Msgs[GetIndex].Size)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
 8000bac:	68f9      	ldr	r1, [r7, #12]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	015b      	lsls	r3, r3, #5
 8000bb2:	4413      	add	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	440b      	add	r3, r1
 8000bb8:	3345      	adds	r3, #69	; 0x45
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d201      	bcs.n	8000bc6 <_ZN5Queue3PopEPhh+0x2e>
	{
		return false;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e043      	b.n	8000c4e <_ZN5Queue3PopEPhh+0xb6>
	}

	if (IsEmpty())
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f7ff fcb0 	bl	800052c <_ZNK5Queue7IsEmptyEv>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <_ZN5Queue3PopEPhh+0x3e>
		return false;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e03b      	b.n	8000c4e <_ZN5Queue3PopEPhh+0xb6>

	for (int i  = 0; i < Msgs[GetIndex].Size; i++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
 8000be0:	68f9      	ldr	r1, [r7, #12]
 8000be2:	4613      	mov	r3, r2
 8000be4:	015b      	lsls	r3, r3, #5
 8000be6:	4413      	add	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	440b      	add	r3, r1
 8000bec:	3345      	adds	r3, #69	; 0x45
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	da14      	bge.n	8000c22 <_ZN5Queue3PopEPhh+0x8a>
	{
		data[i] = Msgs[GetIndex].Buffer[i];
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	4419      	add	r1, r3
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	4613      	mov	r3, r2
 8000c08:	015b      	lsls	r3, r3, #5
 8000c0a:	4413      	add	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	18c2      	adds	r2, r0, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	4413      	add	r3, r2
 8000c14:	3304      	adds	r3, #4
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	700b      	strb	r3, [r1, #0]
	for (int i  = 0; i < Msgs[GetIndex].Size; i++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	e7db      	b.n	8000bda <_ZN5Queue3PopEPhh+0x42>
	}

	GetIndex++;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
	if (GetIndex == UART_TX_QUEUE_BUFFER_SIZE)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 8000c36:	2b18      	cmp	r3, #24
 8000c38:	d103      	bne.n	8000c42 <_ZN5Queue3PopEPhh+0xaa>
		GetIndex = 0;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634

	Count--;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	1e5a      	subs	r2, r3, #1
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	601a      	str	r2, [r3, #0]
	return true;
 8000c4c:	2301      	movs	r3, #1
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <_ZN5Queue4PushEPhhh>:

/*
 * Добавить сообщение в очередь на отправку
 */
bool Queue::Push(uint8_t* data, uint8_t size, uint8_t priority)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	4611      	mov	r1, r2
 8000c62:	461a      	mov	r2, r3
 8000c64:	460b      	mov	r3, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	if (IsFull())
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f7ff ff82 	bl	8000b76 <_ZNK5Queue6IsFullEv>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <_ZN5Queue4PushEPhhh+0x26>
		return false;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e049      	b.n	8000d10 <_ZN5Queue4PushEPhhh+0xba>

	Msgs[PutIndex].Priority = priority;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f8d3 2638 	ldr.w	r2, [r3, #1592]	; 0x638
 8000c82:	68f9      	ldr	r1, [r7, #12]
 8000c84:	4613      	mov	r3, r2
 8000c86:	015b      	lsls	r3, r3, #5
 8000c88:	4413      	add	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	440b      	add	r3, r1
 8000c8e:	3344      	adds	r3, #68	; 0x44
 8000c90:	79ba      	ldrb	r2, [r7, #6]
 8000c92:	701a      	strb	r2, [r3, #0]
	Msgs[PutIndex].Size = size;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f8d3 2638 	ldr.w	r2, [r3, #1592]	; 0x638
 8000c9a:	68f9      	ldr	r1, [r7, #12]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	015b      	lsls	r3, r3, #5
 8000ca0:	4413      	add	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3345      	adds	r3, #69	; 0x45
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	da15      	bge.n	8000ce4 <_ZN5Queue4PushEPhhh+0x8e>
		Msgs[PutIndex].Buffer[i] = data[i];
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	f8d2 2638 	ldr.w	r2, [r2, #1592]	; 0x638
 8000cc4:	7818      	ldrb	r0, [r3, #0]
 8000cc6:	68f9      	ldr	r1, [r7, #12]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	015b      	lsls	r3, r3, #5
 8000ccc:	4413      	add	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	18ca      	adds	r2, r1, r3
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	4602      	mov	r2, r0
 8000cda:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	e7e5      	b.n	8000cb0 <_ZN5Queue4PushEPhhh+0x5a>

	PutIndex++;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
	if (PutIndex == UART_TX_QUEUE_BUFFER_SIZE)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
 8000cf8:	2b18      	cmp	r3, #24
 8000cfa:	d103      	bne.n	8000d04 <_ZN5Queue4PushEPhhh+0xae>
		PutIndex = 0;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638

	Count++;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	601a      	str	r2, [r3, #0]
	return true;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6593      	str	r3, [r2, #88]	; 0x58
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x44>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d4e:	f003 f9a9 	bl	80040a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <HAL_FDCAN_MspInit+0x90>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d131      	bne.n	8000de6 <HAL_FDCAN_MspInit+0x86>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d82:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <HAL_FDCAN_MspInit+0x94>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <HAL_FDCAN_MspInit+0x94>)
 8000d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_FDCAN_MspInit+0x94>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_FDCAN_MspInit+0x94>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <HAL_FDCAN_MspInit+0x94>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_FDCAN_MspInit+0x94>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000db2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000dc4:	2309      	movs	r3, #9
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f002 ff29 	bl	8003c28 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2102      	movs	r1, #2
 8000dda:	2015      	movs	r0, #21
 8000ddc:	f001 fedd 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000de0:	2015      	movs	r0, #21
 8000de2:	f001 fef4 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40006400 	.word	0x40006400
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e08:	d114      	bne.n	8000e34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_TIM_Base_MspInit+0x78>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	4a18      	ldr	r2, [pc, #96]	; (8000e70 <HAL_TIM_Base_MspInit+0x78>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6593      	str	r3, [r2, #88]	; 0x58
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_TIM_Base_MspInit+0x78>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2104      	movs	r1, #4
 8000e26:	201c      	movs	r0, #28
 8000e28:	f001 feb7 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e2c:	201c      	movs	r0, #28
 8000e2e:	f001 fece 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e32:	e018      	b.n	8000e66 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_TIM_Base_MspInit+0x7c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d113      	bne.n	8000e66 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_TIM_Base_MspInit+0x78>)
 8000e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_TIM_Base_MspInit+0x78>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6593      	str	r3, [r2, #88]	; 0x58
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_TIM_Base_MspInit+0x78>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2103      	movs	r1, #3
 8000e5a:	201d      	movs	r0, #29
 8000e5c:	f001 fe9d 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e60:	201d      	movs	r0, #29
 8000e62:	f001 feb4 	bl	8002bce <HAL_NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40000400 	.word	0x40000400

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <HAL_UART_MspInit+0x8c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d130      	bne.n	8000efc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <HAL_UART_MspInit+0x90>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <HAL_UART_MspInit+0x90>)
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_UART_MspInit+0x90>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_UART_MspInit+0x90>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_UART_MspInit+0x90>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_UART_MspInit+0x90>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eda:	2307      	movs	r3, #7
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f002 fe9e 	bl	8003c28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2101      	movs	r1, #1
 8000ef0:	2026      	movs	r0, #38	; 0x26
 8000ef2:	f001 fe52 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ef6:	2026      	movs	r0, #38	; 0x26
 8000ef8:	f001 fe69 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40004400 	.word	0x40004400
 8000f08:	40021000 	.word	0x40021000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <MemManage_Handler+0x4>

08000f26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f60:	f001 fd0e 	bl	8002980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <FDCAN1_IT0_IRQHandler+0x14>)
 8000f6e:	f002 fbdb 	bl	8003728 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
  CAN_IT_handler();
 8000f72:	f000 fca9 	bl	80018c8 <CAN_IT_handler>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000ed4 	.word	0x20000ed4

08000f80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <TIM2_IRQHandler+0x18>)
 8000f86:	f004 f883 	bl	8005090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  send_messages_from_UART_TX_queue();
 8000f8a:	f7ff fb3b 	bl	8000604 <send_messages_from_UART_TX_queue>
  send_messages_from_CAN_TX_queue();
 8000f8e:	f001 fb1d 	bl	80025cc <send_messages_from_CAN_TX_queue>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200010a4 	.word	0x200010a4

08000f9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <TIM3_IRQHandler+0x18>)
 8000fa2:	f004 f875 	bl	8005090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  UART_RX_queue_polling();
 8000fa6:	f000 f8b9 	bl	800111c <UART_RX_queue_polling>
  CAN_RX_queue_polling();
 8000faa:	f000 fcdd 	bl	8001968 <CAN_RX_queue_polling>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200009a0 	.word	0x200009a0

08000fb8 <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */

void USART2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <USART2_IRQHandler+0x14>)
 8000fbe:	f004 fe9d 	bl	8005cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  UART_IT_handler();
 8000fc2:	f000 f845 	bl	8001050 <UART_IT_handler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200010f0 	.word	0x200010f0

08000fd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <SystemInit+0x28>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <SystemInit+0x28>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SystemInit+0x28>)
 8000fe6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fea:	609a      	str	r2, [r3, #8]
#endif
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <init_UART_values>:

/*
 * стартовая инициализация счётчиков и буферов UART
 */
void init_UART_values(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
	uart_error_state = UART_NO_ERROR;									// ошибка отсутствует
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <init_UART_values+0x38>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
	UART_RX_string_buffer_counter = 0;								// счётчик элемента строки-буфера
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <init_UART_values+0x3c>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
	UART_RX_put_index = 0;							// обнуляем счётчитк элемента очереди на парсинг, в который ведётся запись
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <init_UART_values+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
	UART_RX_get_index = 0;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <init_UART_values+0x44>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	UART_TX_put_index = 0;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <init_UART_values+0x48>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
	UART_TX_get_index = 0;
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <init_UART_values+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
	timestamp_enabled = TRUE;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <init_UART_values+0x50>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	2000117e 	.word	0x2000117e
 8001038:	20000f38 	.word	0x20000f38
 800103c:	2000117c 	.word	0x2000117c
 8001040:	20000ece 	.word	0x20000ece
 8001044:	2000117d 	.word	0x2000117d
 8001048:	200010a0 	.word	0x200010a0
 800104c:	20000ecd 	.word	0x20000ecd

08001050 <UART_IT_handler>:

/*
 * Обработчик прерываний UART (вызывается при приёме сообщения)
 */
void UART_IT_handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	add_byte_to_string(UART_rx_buffer[0]);														// добавляем принятый байт в строку в очереди на парсинг
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <UART_IT_handler+0x1c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f80b 	bl	8001074 <add_byte_to_string>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_RX_MESSAGE_SIZE);				// взводим функцию для обработки прерывания
 800105e:	2201      	movs	r2, #1
 8001060:	4902      	ldr	r1, [pc, #8]	; (800106c <UART_IT_handler+0x1c>)
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <UART_IT_handler+0x20>)
 8001064:	f004 fd72 	bl	8005b4c <HAL_UART_Receive_IT>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000770 	.word	0x20000770
 8001070:	200010f0 	.word	0x200010f0

08001074 <add_byte_to_string>:

/*
 * Добавляем принятый байт в строку буфера
 */
void add_byte_to_string(uint8_t byte_to_write)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	if (UART_RX_string_buffer_counter >= UART_STRING_MAX_SIZE)									// если достигли максимальной длины строки
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <add_byte_to_string+0x9c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b3f      	cmp	r3, #63	; 0x3f
 8001084:	d902      	bls.n	800108c <add_byte_to_string+0x18>
	{
		UART_RX_string_buffer_counter = 0;														// обнуляем счётчик элемента в строке-буфере
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <add_byte_to_string+0x9c>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
	}
	if (byte_to_write == CHAR_CODE_UART_MESSAGE_END)											// если пришёл символ конца сообщения
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	2b0d      	cmp	r3, #13
 8001090:	d11c      	bne.n	80010cc <add_byte_to_string+0x58>
		if (UART_RX_queue_buffer[UART_RX_put_index].message_size != 0)							// если в данной строке буфера уже содерится сообщение
		{
																								// вызываем обработку ошибки
			// !!! error
		}
		UART_RX_queue_buffer[UART_RX_put_index].message_size = UART_RX_string_buffer_counter;	// записываем размер строки
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <add_byte_to_string+0xa0>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4619      	mov	r1, r3
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <add_byte_to_string+0x9c>)
 800109a:	7818      	ldrb	r0, [r3, #0]
 800109c:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <add_byte_to_string+0xa4>)
 800109e:	460b      	mov	r3, r1
 80010a0:	019b      	lsls	r3, r3, #6
 80010a2:	440b      	add	r3, r1
 80010a4:	4413      	add	r3, r2
 80010a6:	4602      	mov	r2, r0
 80010a8:	701a      	strb	r2, [r3, #0]
		UART_RX_put_index++;																	// инкрементируем счётчик строки в буфере строк
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <add_byte_to_string+0xa0>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <add_byte_to_string+0xa0>)
 80010b4:	701a      	strb	r2, [r3, #0]
		UART_RX_string_buffer_counter = 0;														// обнуляем счётчик символа в строке
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <add_byte_to_string+0x9c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
		if (UART_RX_put_index >= UART_RX_QUEUE_BUFFER_SIZE)										// если превысили максимальное количество строк в буфере
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <add_byte_to_string+0xa0>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d91f      	bls.n	8001104 <add_byte_to_string+0x90>
		{
			UART_RX_put_index = 0;																// обнуляем счётчик строк в буфере
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <add_byte_to_string+0xa0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
			UART_RX_string_buffer_counter = 0;													// возвращаемся в начало строки
		}
		UART_RX_queue_buffer[UART_RX_put_index].message_data[UART_RX_string_buffer_counter] = byte_to_write;		// записываем символ в строку буфера
		UART_RX_string_buffer_counter++;														// инкрементируем индекс символа в строке
	}
}
 80010ca:	e01b      	b.n	8001104 <add_byte_to_string+0x90>
		if (UART_RX_string_buffer_counter >= (sizeof(UART_RX_queue_buffer->message_data)))		// если превысили размер строки
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <add_byte_to_string+0x9c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b3f      	cmp	r3, #63	; 0x3f
 80010d2:	d902      	bls.n	80010da <add_byte_to_string+0x66>
			UART_RX_string_buffer_counter = 0;													// возвращаемся в начало строки
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <add_byte_to_string+0x9c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
		UART_RX_queue_buffer[UART_RX_put_index].message_data[UART_RX_string_buffer_counter] = byte_to_write;		// записываем символ в строку буфера
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <add_byte_to_string+0xa0>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4619      	mov	r1, r3
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <add_byte_to_string+0x9c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <add_byte_to_string+0xa4>)
 80010e8:	460b      	mov	r3, r1
 80010ea:	019b      	lsls	r3, r3, #6
 80010ec:	440b      	add	r3, r1
 80010ee:	4413      	add	r3, r2
 80010f0:	4403      	add	r3, r0
 80010f2:	3301      	adds	r3, #1
 80010f4:	79fa      	ldrb	r2, [r7, #7]
 80010f6:	701a      	strb	r2, [r3, #0]
		UART_RX_string_buffer_counter++;														// инкрементируем индекс символа в строке
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <add_byte_to_string+0x9c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <add_byte_to_string+0x9c>)
 8001102:	701a      	strb	r2, [r3, #0]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000f38 	.word	0x20000f38
 8001114:	2000117c 	.word	0x2000117c
 8001118:	20000668 	.word	0x20000668

0800111c <UART_RX_queue_polling>:

/*
 * парсим сообщения из буфера-очереди (вызывается по прерыванию с таймера)
 */
void UART_RX_queue_polling(void)
{
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
	if (UART_RX_get_index != UART_RX_put_index)													// если в буфере-очереди содержится хотя бы одно сообщение
 8001122:	4b3a      	ldr	r3, [pc, #232]	; (800120c <UART_RX_queue_polling+0xf0>)
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <UART_RX_queue_polling+0xf4>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d063      	beq.n	80011f6 <UART_RX_queue_polling+0xda>
	{
 800112e:	466b      	mov	r3, sp
 8001130:	461d      	mov	r5, r3
		char tmp_ch_buf[UART_RX_queue_buffer[UART_RX_get_index].message_size + 1];				// буфер для формирования сообщения на парсинг. Размер буфера равен длине сообщения (без пустых символов)
 8001132:	4b36      	ldr	r3, [pc, #216]	; (800120c <UART_RX_queue_polling+0xf0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4a36      	ldr	r2, [pc, #216]	; (8001214 <UART_RX_queue_polling+0xf8>)
 800113a:	460b      	mov	r3, r1
 800113c:	019b      	lsls	r3, r3, #6
 800113e:	440b      	add	r3, r1
 8001140:	4413      	add	r3, r2
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	1c58      	adds	r0, r3, #1
 8001146:	1e43      	subs	r3, r0, #1
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	4603      	mov	r3, r0
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	f04f 0400 	mov.w	r4, #0
 800115a:	00d4      	lsls	r4, r2, #3
 800115c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001160:	00cb      	lsls	r3, r1, #3
 8001162:	4603      	mov	r3, r0
 8001164:	4619      	mov	r1, r3
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	f04f 0400 	mov.w	r4, #0
 8001172:	00d4      	lsls	r4, r2, #3
 8001174:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001178:	00cb      	lsls	r3, r1, #3
 800117a:	4603      	mov	r3, r0
 800117c:	3307      	adds	r3, #7
 800117e:	08db      	lsrs	r3, r3, #3
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	ebad 0d03 	sub.w	sp, sp, r3
 8001186:	466b      	mov	r3, sp
 8001188:	3300      	adds	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
		for (int ii = 0; ii < sizeof(tmp_ch_buf); ii++)									   	 	// переписываем всё сообщение во временный буфер
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	e013      	b.n	80011ba <UART_RX_queue_polling+0x9e>
		{
			tmp_ch_buf[ii] = UART_RX_queue_buffer[UART_RX_get_index].message_data[ii];
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <UART_RX_queue_polling+0xf0>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <UART_RX_queue_polling+0xf8>)
 800119a:	460b      	mov	r3, r1
 800119c:	019b      	lsls	r3, r3, #6
 800119e:	440b      	add	r3, r1
 80011a0:	441a      	add	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	3301      	adds	r3, #1
 80011a8:	7819      	ldrb	r1, [r3, #0]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	460a      	mov	r2, r1
 80011b2:	701a      	strb	r2, [r3, #0]
		for (int ii = 0; ii < sizeof(tmp_ch_buf); ii++)									   	 	// переписываем всё сообщение во временный буфер
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4602      	mov	r2, r0
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d8e7      	bhi.n	8001192 <UART_RX_queue_polling+0x76>
		}
		tmp_ch_buf[sizeof(tmp_ch_buf) - 1] = '\0';												// добавляем нуль-символ в конец сообщения
 80011c2:	4603      	mov	r3, r0
 80011c4:	3b01      	subs	r3, #1
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	2100      	movs	r1, #0
 80011ca:	54d1      	strb	r1, [r2, r3]
		parse_UART_message(tmp_ch_buf);															// отправляем на парсинг текущее сообщение
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f822 	bl	8001218 <parse_UART_message>
		UART_RX_queue_buffer[UART_RX_get_index].message_size = 0;								// обнуляем размер строки в буфере (считаем, что обнулённые строки пустые)
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <UART_RX_queue_polling+0xf0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <UART_RX_queue_polling+0xf8>)
 80011dc:	460b      	mov	r3, r1
 80011de:	019b      	lsls	r3, r3, #6
 80011e0:	440b      	add	r3, r1
 80011e2:	4413      	add	r3, r2
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
		UART_RX_get_index++;																	// инкрементируем индекс взятия из буфера
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <UART_RX_queue_polling+0xf0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <UART_RX_queue_polling+0xf0>)
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	46ad      	mov	sp, r5
	}
	if (UART_RX_get_index == UART_RX_QUEUE_BUFFER_SIZE)											// если дошли до конца буфера
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <UART_RX_queue_polling+0xf0>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d102      	bne.n	8001204 <UART_RX_queue_polling+0xe8>
	{
		UART_RX_get_index = 0;																	// возвращаемся в начало буфера
 80011fe:	4b03      	ldr	r3, [pc, #12]	; (800120c <UART_RX_queue_polling+0xf0>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
	}
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bdb0      	pop	{r4, r5, r7, pc}
 800120c:	20000ece 	.word	0x20000ece
 8001210:	2000117c 	.word	0x2000117c
 8001214:	20000668 	.word	0x20000668

08001218 <parse_UART_message>:

/*
 * Парсим сообщение, полученное по UART
 */
void parse_UART_message(char* UART_buffer_to_parse)
{
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b0a2      	sub	sp, #136	; 0x88
 800121c:	af08      	add	r7, sp, #32
 800121e:	6078      	str	r0, [r7, #4]
	if ((!strcmp(UART_buffer_to_parse, "H")) || (!strcmp(UART_buffer_to_parse, "h")) || (!strcmp(UART_buffer_to_parse, "?")))			// вернуть список поддерживаемых команд
 8001220:	49b8      	ldr	r1, [pc, #736]	; (8001504 <parse_UART_message+0x2ec>)
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7fe fff8 	bl	8000218 <strcmp>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00d      	beq.n	800124a <parse_UART_message+0x32>
 800122e:	49b6      	ldr	r1, [pc, #728]	; (8001508 <parse_UART_message+0x2f0>)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7fe fff1 	bl	8000218 <strcmp>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <parse_UART_message+0x32>
 800123c:	49b3      	ldr	r1, [pc, #716]	; (800150c <parse_UART_message+0x2f4>)
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7fe ffea 	bl	8000218 <strcmp>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d15f      	bne.n	800130a <parse_UART_message+0xf2>
	{
		put_string_to_UART(sizeof(COMMAND_LIST_01), COMMAND_LIST_01, TX_PRIORITY_3);
 800124a:	2203      	movs	r2, #3
 800124c:	49b0      	ldr	r1, [pc, #704]	; (8001510 <parse_UART_message+0x2f8>)
 800124e:	201b      	movs	r0, #27
 8001250:	f000 facb 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_02), COMMAND_LIST_02, TX_PRIORITY_3);
 8001254:	2203      	movs	r2, #3
 8001256:	49af      	ldr	r1, [pc, #700]	; (8001514 <parse_UART_message+0x2fc>)
 8001258:	2024      	movs	r0, #36	; 0x24
 800125a:	f000 fac6 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_03), COMMAND_LIST_03, TX_PRIORITY_3);
 800125e:	2203      	movs	r2, #3
 8001260:	49ad      	ldr	r1, [pc, #692]	; (8001518 <parse_UART_message+0x300>)
 8001262:	202d      	movs	r0, #45	; 0x2d
 8001264:	f000 fac1 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_04), COMMAND_LIST_04, TX_PRIORITY_3);
 8001268:	2203      	movs	r2, #3
 800126a:	49ac      	ldr	r1, [pc, #688]	; (800151c <parse_UART_message+0x304>)
 800126c:	2026      	movs	r0, #38	; 0x26
 800126e:	f000 fabc 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_05), COMMAND_LIST_05, TX_PRIORITY_3);
 8001272:	2203      	movs	r2, #3
 8001274:	49aa      	ldr	r1, [pc, #680]	; (8001520 <parse_UART_message+0x308>)
 8001276:	2016      	movs	r0, #22
 8001278:	f000 fab7 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_06), COMMAND_LIST_06, TX_PRIORITY_3);
 800127c:	2203      	movs	r2, #3
 800127e:	49a9      	ldr	r1, [pc, #676]	; (8001524 <parse_UART_message+0x30c>)
 8001280:	2015      	movs	r0, #21
 8001282:	f000 fab2 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_07), COMMAND_LIST_07, TX_PRIORITY_3);
 8001286:	2203      	movs	r2, #3
 8001288:	49a7      	ldr	r1, [pc, #668]	; (8001528 <parse_UART_message+0x310>)
 800128a:	201d      	movs	r0, #29
 800128c:	f000 faad 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_08), COMMAND_LIST_08, TX_PRIORITY_3);
 8001290:	2203      	movs	r2, #3
 8001292:	49a6      	ldr	r1, [pc, #664]	; (800152c <parse_UART_message+0x314>)
 8001294:	201e      	movs	r0, #30
 8001296:	f000 faa8 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_09), COMMAND_LIST_09, TX_PRIORITY_3);
 800129a:	2203      	movs	r2, #3
 800129c:	49a4      	ldr	r1, [pc, #656]	; (8001530 <parse_UART_message+0x318>)
 800129e:	201f      	movs	r0, #31
 80012a0:	f000 faa3 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_10), COMMAND_LIST_10, TX_PRIORITY_3);
 80012a4:	2203      	movs	r2, #3
 80012a6:	49a3      	ldr	r1, [pc, #652]	; (8001534 <parse_UART_message+0x31c>)
 80012a8:	2031      	movs	r0, #49	; 0x31
 80012aa:	f000 fa9e 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_11), COMMAND_LIST_11, TX_PRIORITY_3);
 80012ae:	2203      	movs	r2, #3
 80012b0:	49a1      	ldr	r1, [pc, #644]	; (8001538 <parse_UART_message+0x320>)
 80012b2:	2032      	movs	r0, #50	; 0x32
 80012b4:	f000 fa99 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_12), COMMAND_LIST_12, TX_PRIORITY_3);
 80012b8:	2203      	movs	r2, #3
 80012ba:	49a0      	ldr	r1, [pc, #640]	; (800153c <parse_UART_message+0x324>)
 80012bc:	2019      	movs	r0, #25
 80012be:	f000 fa94 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_13), COMMAND_LIST_13, TX_PRIORITY_3);
 80012c2:	2203      	movs	r2, #3
 80012c4:	499e      	ldr	r1, [pc, #632]	; (8001540 <parse_UART_message+0x328>)
 80012c6:	2018      	movs	r0, #24
 80012c8:	f000 fa8f 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_14), COMMAND_LIST_14, TX_PRIORITY_3);
 80012cc:	2203      	movs	r2, #3
 80012ce:	499d      	ldr	r1, [pc, #628]	; (8001544 <parse_UART_message+0x32c>)
 80012d0:	201a      	movs	r0, #26
 80012d2:	f000 fa8a 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_15), COMMAND_LIST_15, TX_PRIORITY_3);
 80012d6:	2203      	movs	r2, #3
 80012d8:	499b      	ldr	r1, [pc, #620]	; (8001548 <parse_UART_message+0x330>)
 80012da:	2015      	movs	r0, #21
 80012dc:	f000 fa85 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_16), COMMAND_LIST_16, TX_PRIORITY_3);
 80012e0:	2203      	movs	r2, #3
 80012e2:	499a      	ldr	r1, [pc, #616]	; (800154c <parse_UART_message+0x334>)
 80012e4:	2015      	movs	r0, #21
 80012e6:	f000 fa80 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_17), COMMAND_LIST_17, TX_PRIORITY_3);
 80012ea:	2203      	movs	r2, #3
 80012ec:	4998      	ldr	r1, [pc, #608]	; (8001550 <parse_UART_message+0x338>)
 80012ee:	2012      	movs	r0, #18
 80012f0:	f000 fa7b 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_18), COMMAND_LIST_18, TX_PRIORITY_3);
 80012f4:	2203      	movs	r2, #3
 80012f6:	4997      	ldr	r1, [pc, #604]	; (8001554 <parse_UART_message+0x33c>)
 80012f8:	200c      	movs	r0, #12
 80012fa:	f000 fa76 	bl	80017ea <put_string_to_UART>
		put_string_to_UART(sizeof(COMMAND_LIST_19), COMMAND_LIST_19, TX_PRIORITY_3);
 80012fe:	2203      	movs	r2, #3
 8001300:	4995      	ldr	r1, [pc, #596]	; (8001558 <parse_UART_message+0x340>)
 8001302:	2023      	movs	r0, #35	; 0x23
 8001304:	f000 fa71 	bl	80017ea <put_string_to_UART>
	}
	else if (UART_buffer_to_parse[0] == BEL_CHAR)
	{
		// !!!
	}
}
 8001308:	e248      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "O"))									// открыть канал в normal mode
 800130a:	4994      	ldr	r1, [pc, #592]	; (800155c <parse_UART_message+0x344>)
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7fe ff83 	bl	8000218 <strcmp>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d108      	bne.n	800132a <parse_UART_message+0x112>
		CAN_mode_change(&hfdcan1, FDCAN_MODE_NORMAL);								// изменить режим канала
 8001318:	2100      	movs	r1, #0
 800131a:	4891      	ldr	r0, [pc, #580]	; (8001560 <parse_UART_message+0x348>)
 800131c:	f001 f8cd 	bl	80024ba <CAN_mode_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения			// возвращаем символ конца сообщения
 8001320:	2103      	movs	r1, #3
 8001322:	200d      	movs	r0, #13
 8001324:	f000 fa4c 	bl	80017c0 <put_single_char_to_UART>
}
 8001328:	e238      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "L"))									// открыть канал в listen only mode
 800132a:	498e      	ldr	r1, [pc, #568]	; (8001564 <parse_UART_message+0x34c>)
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7fe ff73 	bl	8000218 <strcmp>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d108      	bne.n	800134a <parse_UART_message+0x132>
		CAN_mode_change(&hfdcan1, FDCAN_MODE_BUS_MONITORING);						// изменить режим канала
 8001338:	2102      	movs	r1, #2
 800133a:	4889      	ldr	r0, [pc, #548]	; (8001560 <parse_UART_message+0x348>)
 800133c:	f001 f8bd 	bl	80024ba <CAN_mode_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 8001340:	2103      	movs	r1, #3
 8001342:	200d      	movs	r0, #13
 8001344:	f000 fa3c 	bl	80017c0 <put_single_char_to_UART>
}
 8001348:	e228      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "Y"))									// открыть канал в loopback mode
 800134a:	4987      	ldr	r1, [pc, #540]	; (8001568 <parse_UART_message+0x350>)
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7fe ff63 	bl	8000218 <strcmp>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d108      	bne.n	800136a <parse_UART_message+0x152>
		CAN_mode_change(&hfdcan1, FDCAN_MODE_EXTERNAL_LOOPBACK);					// изменить режим канала
 8001358:	2104      	movs	r1, #4
 800135a:	4881      	ldr	r0, [pc, #516]	; (8001560 <parse_UART_message+0x348>)
 800135c:	f001 f8ad 	bl	80024ba <CAN_mode_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 8001360:	2103      	movs	r1, #3
 8001362:	200d      	movs	r0, #13
 8001364:	f000 fa2c 	bl	80017c0 <put_single_char_to_UART>
}
 8001368:	e218      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "C"))									// закрыть канал
 800136a:	4980      	ldr	r1, [pc, #512]	; (800156c <parse_UART_message+0x354>)
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7fe ff53 	bl	8000218 <strcmp>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d107      	bne.n	8001388 <parse_UART_message+0x170>
		HAL_FDCAN_Stop(&hfdcan1);													// выключить CAN
 8001378:	4879      	ldr	r0, [pc, #484]	; (8001560 <parse_UART_message+0x348>)
 800137a:	f001 ff10 	bl	800319e <HAL_FDCAN_Stop>
		put_single_char_to_UART(BEL_CHAR, TX_PRIORITY_3);							// возвращаем символ BEL
 800137e:	2103      	movs	r1, #3
 8001380:	2007      	movs	r0, #7
 8001382:	f000 fa1d 	bl	80017c0 <put_single_char_to_UART>
}
 8001386:	e209      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "S1"))									// установить битрейт CAN 20k
 8001388:	4979      	ldr	r1, [pc, #484]	; (8001570 <parse_UART_message+0x358>)
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7fe ff44 	bl	8000218 <strcmp>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10c      	bne.n	80013b0 <parse_UART_message+0x198>
		CAN_baudrate_change(&hfdcan1, CAN_20_KBIT_PRESCALER, CAN_20_KBIT_SJW, CAN_20_KBIT_SEG1, CAN_20_KBIT_SEG2);			// изменить битрейт
 8001396:	2302      	movs	r3, #2
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	230d      	movs	r3, #13
 800139c:	2203      	movs	r2, #3
 800139e:	21c8      	movs	r1, #200	; 0xc8
 80013a0:	486f      	ldr	r0, [pc, #444]	; (8001560 <parse_UART_message+0x348>)
 80013a2:	f001 f89f 	bl	80024e4 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 80013a6:	2103      	movs	r1, #3
 80013a8:	200d      	movs	r0, #13
 80013aa:	f000 fa09 	bl	80017c0 <put_single_char_to_UART>
}
 80013ae:	e1f5      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "S2"))									// установить битрейт CAN 50k
 80013b0:	4970      	ldr	r1, [pc, #448]	; (8001574 <parse_UART_message+0x35c>)
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7fe ff30 	bl	8000218 <strcmp>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10c      	bne.n	80013d8 <parse_UART_message+0x1c0>
		CAN_baudrate_change(&hfdcan1, CAN_50_KBIT_PRESCALER, CAN_50_KBIT_SJW, CAN_50_KBIT_SEG1, CAN_50_KBIT_SEG2);			// изменить битрейт
 80013be:	2302      	movs	r3, #2
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	230d      	movs	r3, #13
 80013c4:	2203      	movs	r2, #3
 80013c6:	2150      	movs	r1, #80	; 0x50
 80013c8:	4865      	ldr	r0, [pc, #404]	; (8001560 <parse_UART_message+0x348>)
 80013ca:	f001 f88b 	bl	80024e4 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 80013ce:	2103      	movs	r1, #3
 80013d0:	200d      	movs	r0, #13
 80013d2:	f000 f9f5 	bl	80017c0 <put_single_char_to_UART>
}
 80013d6:	e1e1      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "S3"))									// установить битрейт CAN 100k
 80013d8:	4967      	ldr	r1, [pc, #412]	; (8001578 <parse_UART_message+0x360>)
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7fe ff1c 	bl	8000218 <strcmp>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10c      	bne.n	8001400 <parse_UART_message+0x1e8>
		CAN_baudrate_change(&hfdcan1, CAN_100_KBIT_PRESCALER, CAN_100_KBIT_SJW, CAN_100_KBIT_SEG1, CAN_100_KBIT_SEG2);		// изменить битрейт
 80013e6:	2302      	movs	r3, #2
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	230d      	movs	r3, #13
 80013ec:	2203      	movs	r2, #3
 80013ee:	2128      	movs	r1, #40	; 0x28
 80013f0:	485b      	ldr	r0, [pc, #364]	; (8001560 <parse_UART_message+0x348>)
 80013f2:	f001 f877 	bl	80024e4 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 80013f6:	2103      	movs	r1, #3
 80013f8:	200d      	movs	r0, #13
 80013fa:	f000 f9e1 	bl	80017c0 <put_single_char_to_UART>
}
 80013fe:	e1cd      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "S4"))									// установить битрейт CAN 125k
 8001400:	495e      	ldr	r1, [pc, #376]	; (800157c <parse_UART_message+0x364>)
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7fe ff08 	bl	8000218 <strcmp>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10c      	bne.n	8001428 <parse_UART_message+0x210>
		CAN_baudrate_change(&hfdcan1, CAN_125_KBIT_PRESCALER, CAN_125_KBIT_SJW, CAN_125_KBIT_SEG1, CAN_125_KBIT_SEG2);		// изменить битрейт
 800140e:	2302      	movs	r3, #2
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	230d      	movs	r3, #13
 8001414:	2203      	movs	r2, #3
 8001416:	2120      	movs	r1, #32
 8001418:	4851      	ldr	r0, [pc, #324]	; (8001560 <parse_UART_message+0x348>)
 800141a:	f001 f863 	bl	80024e4 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 800141e:	2103      	movs	r1, #3
 8001420:	200d      	movs	r0, #13
 8001422:	f000 f9cd 	bl	80017c0 <put_single_char_to_UART>
}
 8001426:	e1b9      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "S5"))									// установить битрейт CAN 250k
 8001428:	4955      	ldr	r1, [pc, #340]	; (8001580 <parse_UART_message+0x368>)
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7fe fef4 	bl	8000218 <strcmp>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10c      	bne.n	8001450 <parse_UART_message+0x238>
		CAN_baudrate_change(&hfdcan1, CAN_250_KBIT_PRESCALER, CAN_250_KBIT_SJW, CAN_250_KBIT_SEG1, CAN_250_KBIT_SEG2);		// изменить битрейт
 8001436:	2302      	movs	r3, #2
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	230d      	movs	r3, #13
 800143c:	2203      	movs	r2, #3
 800143e:	2110      	movs	r1, #16
 8001440:	4847      	ldr	r0, [pc, #284]	; (8001560 <parse_UART_message+0x348>)
 8001442:	f001 f84f 	bl	80024e4 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 8001446:	2103      	movs	r1, #3
 8001448:	200d      	movs	r0, #13
 800144a:	f000 f9b9 	bl	80017c0 <put_single_char_to_UART>
}
 800144e:	e1a5      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "S6"))									// установить битрейт CAN 500k
 8001450:	494c      	ldr	r1, [pc, #304]	; (8001584 <parse_UART_message+0x36c>)
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7fe fee0 	bl	8000218 <strcmp>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10c      	bne.n	8001478 <parse_UART_message+0x260>
		CAN_baudrate_change(&hfdcan1, CAN_500_KBIT_PRESCALER, CAN_500_KBIT_SJW, CAN_500_KBIT_SEG1, CAN_500_KBIT_SEG2);		// изменить битрейт
 800145e:	2302      	movs	r3, #2
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	230d      	movs	r3, #13
 8001464:	2203      	movs	r2, #3
 8001466:	2108      	movs	r1, #8
 8001468:	483d      	ldr	r0, [pc, #244]	; (8001560 <parse_UART_message+0x348>)
 800146a:	f001 f83b 	bl	80024e4 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 800146e:	2103      	movs	r1, #3
 8001470:	200d      	movs	r0, #13
 8001472:	f000 f9a5 	bl	80017c0 <put_single_char_to_UART>
}
 8001476:	e191      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "S7"))									// установить битрейт CAN 800k
 8001478:	4943      	ldr	r1, [pc, #268]	; (8001588 <parse_UART_message+0x370>)
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7fe fecc 	bl	8000218 <strcmp>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10c      	bne.n	80014a0 <parse_UART_message+0x288>
		CAN_baudrate_change(&hfdcan1, CAN_800_KBIT_PRESCALER, CAN_800_KBIT_SJW, CAN_800_KBIT_SEG1, CAN_800_KBIT_SEG2);		// изменить битрейт
 8001486:	2302      	movs	r3, #2
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	230d      	movs	r3, #13
 800148c:	2203      	movs	r2, #3
 800148e:	2105      	movs	r1, #5
 8001490:	4833      	ldr	r0, [pc, #204]	; (8001560 <parse_UART_message+0x348>)
 8001492:	f001 f827 	bl	80024e4 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 8001496:	2103      	movs	r1, #3
 8001498:	200d      	movs	r0, #13
 800149a:	f000 f991 	bl	80017c0 <put_single_char_to_UART>
}
 800149e:	e17d      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "S8"))									// установить битрейт CAN 1m
 80014a0:	493a      	ldr	r1, [pc, #232]	; (800158c <parse_UART_message+0x374>)
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7fe feb8 	bl	8000218 <strcmp>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10c      	bne.n	80014c8 <parse_UART_message+0x2b0>
		CAN_baudrate_change(&hfdcan1, CAN_1000_KBIT_PRESCALER, CAN_1000_KBIT_SJW, CAN_1000_KBIT_SEG1, CAN_1000_KBIT_SEG2);	// изменить битрейт
 80014ae:	2302      	movs	r3, #2
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	230d      	movs	r3, #13
 80014b4:	2203      	movs	r2, #3
 80014b6:	2104      	movs	r1, #4
 80014b8:	4829      	ldr	r0, [pc, #164]	; (8001560 <parse_UART_message+0x348>)
 80014ba:	f001 f813 	bl	80024e4 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 80014be:	2103      	movs	r1, #3
 80014c0:	200d      	movs	r0, #13
 80014c2:	f000 f97d 	bl	80017c0 <put_single_char_to_UART>
}
 80014c6:	e169      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "Z1"))									// включить timestamp для принимаемых сообщений
 80014c8:	4931      	ldr	r1, [pc, #196]	; (8001590 <parse_UART_message+0x378>)
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7fe fea4 	bl	8000218 <strcmp>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <parse_UART_message+0x2ce>
		timestamp_enabled = TRUE;													// включить timestamp
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <parse_UART_message+0x37c>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 80014dc:	2103      	movs	r1, #3
 80014de:	200d      	movs	r0, #13
 80014e0:	f000 f96e 	bl	80017c0 <put_single_char_to_UART>
}
 80014e4:	e15a      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "Z0"))									// выключить timestamp для принимаемых сообщений
 80014e6:	492c      	ldr	r1, [pc, #176]	; (8001598 <parse_UART_message+0x380>)
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7fe fe95 	bl	8000218 <strcmp>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d153      	bne.n	800159c <parse_UART_message+0x384>
		timestamp_enabled = FALSE;													// выключить timestamp
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <parse_UART_message+0x37c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 80014fa:	2103      	movs	r1, #3
 80014fc:	200d      	movs	r0, #13
 80014fe:	f000 f95f 	bl	80017c0 <put_single_char_to_UART>
}
 8001502:	e14b      	b.n	800179c <parse_UART_message+0x584>
 8001504:	08006f50 	.word	0x08006f50
 8001508:	08006f54 	.word	0x08006f54
 800150c:	08006f58 	.word	0x08006f58
 8001510:	08006f5c 	.word	0x08006f5c
 8001514:	08006f78 	.word	0x08006f78
 8001518:	08006f9c 	.word	0x08006f9c
 800151c:	08006fcc 	.word	0x08006fcc
 8001520:	08006ff4 	.word	0x08006ff4
 8001524:	0800700c 	.word	0x0800700c
 8001528:	08007024 	.word	0x08007024
 800152c:	08007044 	.word	0x08007044
 8001530:	08007064 	.word	0x08007064
 8001534:	08007084 	.word	0x08007084
 8001538:	080070b8 	.word	0x080070b8
 800153c:	080070ec 	.word	0x080070ec
 8001540:	08007108 	.word	0x08007108
 8001544:	08007120 	.word	0x08007120
 8001548:	0800713c 	.word	0x0800713c
 800154c:	08007154 	.word	0x08007154
 8001550:	0800716c 	.word	0x0800716c
 8001554:	08007180 	.word	0x08007180
 8001558:	0800718c 	.word	0x0800718c
 800155c:	080071b0 	.word	0x080071b0
 8001560:	20000ed4 	.word	0x20000ed4
 8001564:	080071b4 	.word	0x080071b4
 8001568:	080071b8 	.word	0x080071b8
 800156c:	080071bc 	.word	0x080071bc
 8001570:	080071c0 	.word	0x080071c0
 8001574:	080071c4 	.word	0x080071c4
 8001578:	080071c8 	.word	0x080071c8
 800157c:	080071cc 	.word	0x080071cc
 8001580:	080071d0 	.word	0x080071d0
 8001584:	080071d4 	.word	0x080071d4
 8001588:	080071d8 	.word	0x080071d8
 800158c:	080071dc 	.word	0x080071dc
 8001590:	080071e0 	.word	0x080071e0
 8001594:	20000ecd 	.word	0x20000ecd
 8001598:	080071e4 	.word	0x080071e4
	else if (!strcmp(UART_buffer_to_parse, "F"))									// получить статус ошибок шины CAN
 800159c:	4981      	ldr	r1, [pc, #516]	; (80017a4 <parse_UART_message+0x58c>)
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7fe fe3a 	bl	8000218 <strcmp>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d135      	bne.n	8001616 <parse_UART_message+0x3fe>
		init_char_array_by_zero(sizeof(error_code_tmp), error_code_tmp);			// инициализируем его нулями
 80015aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ae:	4619      	mov	r1, r3
 80015b0:	2003      	movs	r0, #3
 80015b2:	f000 ff3a 	bl	800242a <init_char_array_by_zero>
		HAL_FDCAN_GetProtocolStatus(&hfdcan1, &protocol_status);					// получаем статус CAN
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	487a      	ldr	r0, [pc, #488]	; (80017a8 <parse_UART_message+0x590>)
 80015be:	f001 ff7d 	bl	80034bc <HAL_FDCAN_GetProtocolStatus>
		error_code_tmp[0] = status_flag_byte_1(protocol_status);					// задаём старший байт статуса CAN
 80015c2:	466d      	mov	r5, sp
 80015c4:	f107 0418 	add.w	r4, r7, #24
 80015c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015cc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80015d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015da:	f001 f90f 	bl	80027fc <status_flag_byte_1>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		error_code_tmp[1] = status_flag_byte_0(protocol_status);					// задаём младший байт статуса CAN
 80015e4:	466d      	mov	r5, sp
 80015e6:	f107 0418 	add.w	r4, r7, #24
 80015ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80015f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015fc:	f001 f8dc 	bl	80027b8 <status_flag_byte_0>
 8001600:	4603      	mov	r3, r0
 8001602:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		put_string_to_UART(sizeof(error_code_tmp), error_code_tmp, TX_PRIORITY_3);	// отправляем байты статуса по UART
 8001606:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800160a:	2203      	movs	r2, #3
 800160c:	4619      	mov	r1, r3
 800160e:	2003      	movs	r0, #3
 8001610:	f000 f8eb 	bl	80017ea <put_string_to_UART>
}
 8001614:	e0c2      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "V"))									// получить версию USB-CAN адаптера
 8001616:	4965      	ldr	r1, [pc, #404]	; (80017ac <parse_UART_message+0x594>)
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7fe fdfd 	bl	8000218 <strcmp>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <parse_UART_message+0x418>
		put_string_to_UART(sizeof(MESSAGE_FIRMWARE_VERSION), MESSAGE_FIRMWARE_VERSION, TX_PRIORITY_3);	// отправляем версию адаптера
 8001624:	2203      	movs	r2, #3
 8001626:	4962      	ldr	r1, [pc, #392]	; (80017b0 <parse_UART_message+0x598>)
 8001628:	2006      	movs	r0, #6
 800162a:	f000 f8de 	bl	80017ea <put_string_to_UART>
}
 800162e:	e0b5      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "N"))									// получить серийный номер USB-CAN адаптера
 8001630:	4960      	ldr	r1, [pc, #384]	; (80017b4 <parse_UART_message+0x59c>)
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7fe fdf0 	bl	8000218 <strcmp>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d105      	bne.n	800164a <parse_UART_message+0x432>
		put_string_to_UART(sizeof(MESSAGE_SERIAL_NUMBER), MESSAGE_SERIAL_NUMBER, TX_PRIORITY_3);	// отправляем серийный номер
 800163e:	2203      	movs	r2, #3
 8001640:	495d      	ldr	r1, [pc, #372]	; (80017b8 <parse_UART_message+0x5a0>)
 8001642:	200a      	movs	r0, #10
 8001644:	f000 f8d1 	bl	80017ea <put_string_to_UART>
}
 8001648:	e0a8      	b.n	800179c <parse_UART_message+0x584>
	else if (!strcmp(UART_buffer_to_parse, "RST"))									// перезагрузить адаптер
 800164a:	495c      	ldr	r1, [pc, #368]	; (80017bc <parse_UART_message+0x5a4>)
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7fe fde3 	bl	8000218 <strcmp>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <parse_UART_message+0x446>
		HAL_NVIC_SystemReset();														// вызваем HAL-функцию перезагрузки
 8001658:	f001 fac7 	bl	8002bea <HAL_NVIC_SystemReset>
}
 800165c:	e09e      	b.n	800179c <parse_UART_message+0x584>
	else if (UART_buffer_to_parse[0] == 't')										// передать стандартное CAN-сообщение (11 бит)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b74      	cmp	r3, #116	; 0x74
 8001664:	d115      	bne.n	8001692 <parse_UART_message+0x47a>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_STANDARD_ID, FDCAN_DATA_FRAME));	// посылаем сообщение
 8001666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fc92 	bl	8001f98 <set_can_frame_parameters>
 8001674:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001678:	cb0e      	ldmia	r3, {r1, r2, r3}
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fccb 	bl	8002016 <send_CAN_frame>
		put_single_char_to_UART('z', TX_PRIORITY_3);								// возвращаем символ подтвеждения передачи сообщения
 8001680:	2103      	movs	r1, #3
 8001682:	207a      	movs	r0, #122	; 0x7a
 8001684:	f000 f89c 	bl	80017c0 <put_single_char_to_UART>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 8001688:	2103      	movs	r1, #3
 800168a:	200d      	movs	r0, #13
 800168c:	f000 f898 	bl	80017c0 <put_single_char_to_UART>
}
 8001690:	e084      	b.n	800179c <parse_UART_message+0x584>
	else if (UART_buffer_to_parse[0] == 'r')										// передать стандартный remote request (11 бит) по шине CAN
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b72      	cmp	r3, #114	; 0x72
 8001698:	d116      	bne.n	80016c8 <parse_UART_message+0x4b0>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_STANDARD_ID, FDCAN_REMOTE_FRAME));	// посылаем remote frame
 800169a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800169e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fc77 	bl	8001f98 <set_can_frame_parameters>
 80016aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 fcb0 	bl	8002016 <send_CAN_frame>
		put_single_char_to_UART('z', TX_PRIORITY_3);								// возвращаем символ подтверждения передачи запроса
 80016b6:	2103      	movs	r1, #3
 80016b8:	207a      	movs	r0, #122	; 0x7a
 80016ba:	f000 f881 	bl	80017c0 <put_single_char_to_UART>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 80016be:	2103      	movs	r1, #3
 80016c0:	200d      	movs	r0, #13
 80016c2:	f000 f87d 	bl	80017c0 <put_single_char_to_UART>
}
 80016c6:	e069      	b.n	800179c <parse_UART_message+0x584>
	else if (UART_buffer_to_parse[0] == 'T')										// передать расширенное CAN-сообщение
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b54      	cmp	r3, #84	; 0x54
 80016ce:	d116      	bne.n	80016fe <parse_UART_message+0x4e6>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_EXTENDED_ID, FDCAN_DATA_FRAME));	// посылаем сообщение
 80016d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016d4:	2200      	movs	r2, #0
 80016d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fc5c 	bl	8001f98 <set_can_frame_parameters>
 80016e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fc95 	bl	8002016 <send_CAN_frame>
		put_single_char_to_UART('Z', TX_PRIORITY_3);								// возвращаем символ подтвеждения передачи сообщения
 80016ec:	2103      	movs	r1, #3
 80016ee:	205a      	movs	r0, #90	; 0x5a
 80016f0:	f000 f866 	bl	80017c0 <put_single_char_to_UART>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 80016f4:	2103      	movs	r1, #3
 80016f6:	200d      	movs	r0, #13
 80016f8:	f000 f862 	bl	80017c0 <put_single_char_to_UART>
}
 80016fc:	e04e      	b.n	800179c <parse_UART_message+0x584>
	else if (UART_buffer_to_parse[0] == 'R')										// передать стандартный remote request (29 бит) по шине CAN
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b52      	cmp	r3, #82	; 0x52
 8001704:	d117      	bne.n	8001736 <parse_UART_message+0x51e>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_EXTENDED_ID, FDCAN_REMOTE_FRAME));	// посылаем remote frame
 8001706:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800170a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800170e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fc40 	bl	8001f98 <set_can_frame_parameters>
 8001718:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800171c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fc79 	bl	8002016 <send_CAN_frame>
		put_single_char_to_UART('Z', TX_PRIORITY_3);								// возвращаем символ подтверждения передачи запроса
 8001724:	2103      	movs	r1, #3
 8001726:	205a      	movs	r0, #90	; 0x5a
 8001728:	f000 f84a 	bl	80017c0 <put_single_char_to_UART>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 800172c:	2103      	movs	r1, #3
 800172e:	200d      	movs	r0, #13
 8001730:	f000 f846 	bl	80017c0 <put_single_char_to_UART>
}
 8001734:	e032      	b.n	800179c <parse_UART_message+0x584>
	else if (UART_buffer_to_parse[0] == 's')										// установить нестандартный битрейт CAN
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b73      	cmp	r3, #115	; 0x73
 800173c:	d103      	bne.n	8001746 <parse_UART_message+0x52e>
		set_non_standard_CAN_bitrate(UART_buffer_to_parse);							// устанавливаем битрейт
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fbba 	bl	8001eb8 <set_non_standard_CAN_bitrate>
}
 8001744:	e02a      	b.n	800179c <parse_UART_message+0x584>
	else if (UART_buffer_to_parse[0] == 'm')										// задать acceptance mask
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b6d      	cmp	r3, #109	; 0x6d
 800174c:	d111      	bne.n	8001772 <parse_UART_message+0x55a>
		update_CAN_acceptance_mask(count_string_lenght(&UART_buffer_to_parse[1]), &UART_buffer_to_parse[1]);	// задаём acceptance mask
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3301      	adds	r3, #1
 8001752:	4618      	mov	r0, r3
 8001754:	f000 ff84 	bl	8002660 <count_string_lenght>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3301      	adds	r3, #1
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f000 ffc0 	bl	80026e8 <update_CAN_acceptance_mask>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 8001768:	2103      	movs	r1, #3
 800176a:	200d      	movs	r0, #13
 800176c:	f000 f828 	bl	80017c0 <put_single_char_to_UART>
}
 8001770:	e014      	b.n	800179c <parse_UART_message+0x584>
	else if (UART_buffer_to_parse[0] == 'M')										// задать acceptance code
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b4d      	cmp	r3, #77	; 0x4d
 8001778:	d110      	bne.n	800179c <parse_UART_message+0x584>
		update_CAN_acceptance_code(count_string_lenght(&UART_buffer_to_parse[1]), &UART_buffer_to_parse[1]);	// задаём acceptance code
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3301      	adds	r3, #1
 800177e:	4618      	mov	r0, r3
 8001780:	f000 ff6e 	bl	8002660 <count_string_lenght>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3301      	adds	r3, #1
 800178c:	4619      	mov	r1, r3
 800178e:	4610      	mov	r0, r2
 8001790:	f000 ffde 	bl	8002750 <update_CAN_acceptance_code>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, TX_PRIORITY_3);			// возвращаем символ конца сообщения
 8001794:	2103      	movs	r1, #3
 8001796:	200d      	movs	r0, #13
 8001798:	f000 f812 	bl	80017c0 <put_single_char_to_UART>
}
 800179c:	bf00      	nop
 800179e:	3768      	adds	r7, #104	; 0x68
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdb0      	pop	{r4, r5, r7, pc}
 80017a4:	080071e8 	.word	0x080071e8
 80017a8:	20000ed4 	.word	0x20000ed4
 80017ac:	080071ec 	.word	0x080071ec
 80017b0:	080071f0 	.word	0x080071f0
 80017b4:	080071f8 	.word	0x080071f8
 80017b8:	080071fc 	.word	0x080071fc
 80017bc:	08007208 	.word	0x08007208

080017c0 <put_single_char_to_UART>:

/*
 * Добавляем один символ в очередь на отправку по UART
 */
void put_single_char_to_UART(uint8_t char_code_to_send, uint8_t message_priority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	460a      	mov	r2, r1
 80017ca:	71fb      	strb	r3, [r7, #7]
 80017cc:	4613      	mov	r3, r2
 80017ce:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp_arr_1[1];
	tmp_arr_1[0] = char_code_to_send;
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	733b      	strb	r3, [r7, #12]
	add_message_to_UART_TX_queue(tmp_arr_1, sizeof(tmp_arr_1), message_priority);
 80017d4:	79ba      	ldrb	r2, [r7, #6]
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	2101      	movs	r1, #1
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fee9 	bl	80005b4 <add_message_to_UART_TX_queue>
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <put_string_to_UART>:


void put_string_to_UART(uint16_t size_of_string, char* string_to_send, uint8_t message_priority)
{
 80017ea:	b5b0      	push	{r4, r5, r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	6039      	str	r1, [r7, #0]
 80017f4:	80fb      	strh	r3, [r7, #6]
 80017f6:	4613      	mov	r3, r2
 80017f8:	717b      	strb	r3, [r7, #5]
 80017fa:	466b      	mov	r3, sp
 80017fc:	461d      	mov	r5, r3
	uint8_t tmp_arr_1[size_of_string];
 80017fe:	88f8      	ldrh	r0, [r7, #6]
 8001800:	4603      	mov	r3, r0
 8001802:	3b01      	subs	r3, #1
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	b281      	uxth	r1, r0
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	f04f 0400 	mov.w	r4, #0
 8001814:	00d4      	lsls	r4, r2, #3
 8001816:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800181a:	00cb      	lsls	r3, r1, #3
 800181c:	b281      	uxth	r1, r0
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	f04f 0400 	mov.w	r4, #0
 800182a:	00d4      	lsls	r4, r2, #3
 800182c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001830:	00cb      	lsls	r3, r1, #3
 8001832:	4603      	mov	r3, r0
 8001834:	3307      	adds	r3, #7
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	ebad 0d03 	sub.w	sp, sp, r3
 800183e:	466b      	mov	r3, sp
 8001840:	3300      	adds	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(tmp_arr_1); i++)
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e00b      	b.n	8001862 <put_string_to_UART+0x78>
	{
		tmp_arr_1[i] = string_to_send[i];
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	7819      	ldrb	r1, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	4413      	add	r3, r2
 8001858:	460a      	mov	r2, r1
 800185a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tmp_arr_1); i++)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	4602      	mov	r2, r0
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	429a      	cmp	r2, r3
 8001868:	d8ef      	bhi.n	800184a <put_string_to_UART+0x60>
	}
	tmp_arr_1[sizeof(tmp_arr_1) - 1] = CARRIAGE_RETURN_CHAR;
 800186a:	4603      	mov	r3, r0
 800186c:	3b01      	subs	r3, #1
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	210d      	movs	r1, #13
 8001872:	54d1      	strb	r1, [r2, r3]
	add_message_to_UART_TX_queue(tmp_arr_1, sizeof(tmp_arr_1), message_priority);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	b2c1      	uxtb	r1, r0
 8001878:	797a      	ldrb	r2, [r7, #5]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe9a 	bl	80005b4 <add_message_to_UART_TX_queue>
 8001880:	46ad      	mov	sp, r5
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800188c <send_message_to_UART>:

void send_message_to_UART(uint16_t message_size, uint8_t* message_to_send)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	80fb      	strh	r3, [r7, #6]
	for (int ii = 0; ii < message_size; ii++)
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e00a      	b.n	80018b4 <send_message_to_UART+0x28>
	{
		HAL_UART_Transmit(&huart2, &message_to_send[ii], UART_TX_MESSAGE_SIZE, UART_TIMEOUT);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	18d1      	adds	r1, r2, r3
 80018a4:	2364      	movs	r3, #100	; 0x64
 80018a6:	2201      	movs	r2, #1
 80018a8:	4806      	ldr	r0, [pc, #24]	; (80018c4 <send_message_to_UART+0x38>)
 80018aa:	f004 f8b9 	bl	8005a20 <HAL_UART_Transmit>
	for (int ii = 0; ii < message_size; ii++)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbf0      	blt.n	800189e <send_message_to_UART+0x12>
	}
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200010f0 	.word	0x200010f0

080018c8 <CAN_IT_handler>:

void CAN_IT_handler(void)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef rx_flag = HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_header_buffer, \
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <CAN_IT_handler+0x8c>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	019b      	lsls	r3, r3, #6
 80018d4:	4a20      	ldr	r2, [pc, #128]	; (8001958 <CAN_IT_handler+0x90>)
 80018d6:	1899      	adds	r1, r3, r2
							CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_data_buffer);
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <CAN_IT_handler+0x8c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	019b      	lsls	r3, r3, #6
 80018de:	3328      	adds	r3, #40	; 0x28
 80018e0:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <CAN_IT_handler+0x90>)
 80018e2:	4413      	add	r3, r2
	HAL_StatusTypeDef rx_flag = HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_header_buffer, \
 80018e4:	460a      	mov	r2, r1
 80018e6:	2140      	movs	r1, #64	; 0x40
 80018e8:	481c      	ldr	r0, [pc, #112]	; (800195c <CAN_IT_handler+0x94>)
 80018ea:	f001 fd0d 	bl	8003308 <HAL_FDCAN_GetRxMessage>
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]

	if (CAN_RX_success_flag == 0)
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <CAN_IT_handler+0x98>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	f083 0301 	eor.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <CAN_IT_handler+0x44>
	{
		if (rx_flag == HAL_OK)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <CAN_IT_handler+0x44>
		{
			CAN_RX_success_flag = 1;
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <CAN_IT_handler+0x98>)
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (timestamp_enabled)
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <CAN_IT_handler+0x9c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00d      	beq.n	8001930 <CAN_IT_handler+0x68>
	{
		CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_timestamp_buffer = HAL_FDCAN_GetTimestampCounter(&hfdcan1);
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <CAN_IT_handler+0x8c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461c      	mov	r4, r3
 800191a:	4810      	ldr	r0, [pc, #64]	; (800195c <CAN_IT_handler+0x94>)
 800191c:	f001 fc09 	bl	8003132 <HAL_FDCAN_GetTimestampCounter>
 8001920:	4603      	mov	r3, r0
 8001922:	4619      	mov	r1, r3
 8001924:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <CAN_IT_handler+0x90>)
 8001926:	01a3      	lsls	r3, r4, #6
 8001928:	4413      	add	r3, r2
 800192a:	333c      	adds	r3, #60	; 0x3c
 800192c:	460a      	mov	r2, r1
 800192e:	801a      	strh	r2, [r3, #0]
	}

	CAN_RX_put_index++;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <CAN_IT_handler+0x8c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <CAN_IT_handler+0x8c>)
 800193a:	701a      	strb	r2, [r3, #0]

	if (CAN_RX_put_index >= CAN_RX_QUEUE_BUFFER_SIZE)
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <CAN_IT_handler+0x8c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d902      	bls.n	800194a <CAN_IT_handler+0x82>
	{
		CAN_RX_put_index = 0;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <CAN_IT_handler+0x8c>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
	}
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	bd90      	pop	{r4, r7, pc}
 8001952:	bf00      	nop
 8001954:	2000076c 	.word	0x2000076c
 8001958:	20000fa0 	.word	0x20000fa0
 800195c:	20000ed4 	.word	0x20000ed4
 8001960:	20000ecf 	.word	0x20000ecf
 8001964:	20000ecd 	.word	0x20000ecd

08001968 <CAN_RX_queue_polling>:

void CAN_RX_queue_polling(void)
{
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	b08d      	sub	sp, #52	; 0x34
 800196c:	af0c      	add	r7, sp, #48	; 0x30
	if (CAN_RX_get_index != CAN_RX_put_index)
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <CAN_RX_queue_polling+0x5c>)
 8001970:	781a      	ldrb	r2, [r3, #0]
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <CAN_RX_queue_polling+0x60>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d019      	beq.n	80019ae <CAN_RX_queue_polling+0x46>
	{
		parse_CAN_message(CAN_RX_queue_buffer[CAN_RX_get_index]);
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <CAN_RX_queue_polling+0x5c>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	4a13      	ldr	r2, [pc, #76]	; (80019cc <CAN_RX_queue_polling+0x64>)
 8001980:	019b      	lsls	r3, r3, #6
 8001982:	18d6      	adds	r6, r2, r3
 8001984:	466d      	mov	r5, sp
 8001986:	f106 0410 	add.w	r4, r6, #16
 800198a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001992:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001996:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800199a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800199e:	f000 f817 	bl	80019d0 <parse_CAN_message>
		CAN_RX_get_index++;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <CAN_RX_queue_polling+0x5c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <CAN_RX_queue_polling+0x5c>)
 80019ac:	701a      	strb	r2, [r3, #0]
	}
	if (CAN_RX_get_index >= CAN_RX_QUEUE_BUFFER_SIZE)
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <CAN_RX_queue_polling+0x5c>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d902      	bls.n	80019bc <CAN_RX_queue_polling+0x54>
	{
		CAN_RX_get_index = 0;
 80019b6:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <CAN_RX_queue_polling+0x5c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
	}
}
 80019bc:	bf00      	nop
 80019be:	3704      	adds	r7, #4
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c4:	2000099c 	.word	0x2000099c
 80019c8:	2000076c 	.word	0x2000076c
 80019cc:	20000fa0 	.word	0x20000fa0

080019d0 <parse_CAN_message>:

/*
 * Парсим CAN-сообщение
 */
void parse_CAN_message(CAN_RX_DataBuffer_StructTypeDef CAN_message_struct_to_parse)
{
 80019d0:	b084      	sub	sp, #16
 80019d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019d6:	b090      	sub	sp, #64	; 0x40
 80019d8:	af00      	add	r7, sp, #0
 80019da:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80019de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80019e2:	466b      	mov	r3, sp
 80019e4:	4699      	mov	r9, r3
	uint8_t id_lenght;																		// длина CAN ID
	char message_type_char;																	// символ типа сообщения (стандартное или расширенное)
	char message_end_char = CARRIAGE_RETURN_CHAR;											// символ конца сообщения
 80019e6:	230d      	movs	r3, #13
 80019e8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t data_lenght;																	// длина данных в сообщении
	if (CAN_message_struct_to_parse.CAN_RX_header_buffer.IdType == FDCAN_STANDARD_ID)		// если стандартный CAN ID
 80019ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <parse_CAN_message+0x30>
	{
		id_lenght = STANDARD_CAN_ID_LENGHT;													// задаём стандартную длину CAN ID
 80019f2:	2303      	movs	r3, #3
 80019f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		message_type_char = 't';															// задаём символ стандартного сообщения
 80019f8:	2374      	movs	r3, #116	; 0x74
 80019fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80019fe:	e005      	b.n	8001a0c <parse_CAN_message+0x3c>
	}
	else
	{
		id_lenght = EXTENDED_CAN_ID_LENGHT;													// иначе задаём увеличенную длину CAN ID
 8001a00:	2308      	movs	r3, #8
 8001a02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		message_type_char = 'T';															// задаём символ расширенного сообщения
 8001a06:	2354      	movs	r3, #84	; 0x54
 8001a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}
	data_lenght = CAN_message_data_lenght_define(CAN_message_struct_to_parse.CAN_RX_header_buffer.DataLength)*2;									// определяем длину данных
 8001a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fbfc 	bl	800220c <CAN_message_data_lenght_define>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t id_array[id_lenght];																													// массив, содержащий ID сообщения
 8001a1e:	f897 802a 	ldrb.w	r8, [r7, #42]	; 0x2a
 8001a22:	4643      	mov	r3, r8
 8001a24:	3b01      	subs	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	fa5f f188 	uxtb.w	r1, r8
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	f04f 0400 	mov.w	r4, #0
 8001a38:	00d4      	lsls	r4, r2, #3
 8001a3a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001a3e:	00cb      	lsls	r3, r1, #3
 8001a40:	fa5f f188 	uxtb.w	r1, r8
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f04f 0400 	mov.w	r4, #0
 8001a50:	00d4      	lsls	r4, r2, #3
 8001a52:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001a56:	00cb      	lsls	r3, r1, #3
 8001a58:	4643      	mov	r3, r8
 8001a5a:	3307      	adds	r3, #7
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	ebad 0d03 	sub.w	sp, sp, r3
 8001a64:	466b      	mov	r3, sp
 8001a66:	3300      	adds	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
	convert_int_value_to_ascii_hex_char_array(sizeof(id_array), id_array, CAN_message_struct_to_parse.CAN_RX_header_buffer.Identifier);				// получаем значени ID
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4640      	mov	r0, r8
 8001a72:	f000 f9f5 	bl	8001e60 <convert_int_value_to_ascii_hex_char_array>
	uint8_t data_array[data_lenght];																												// массив данных
 8001a76:	f897 6028 	ldrb.w	r6, [r7, #40]	; 0x28
 8001a7a:	4633      	mov	r3, r6
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	b2f1      	uxtb	r1, r6
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	f04f 0400 	mov.w	r4, #0
 8001a8e:	00d4      	lsls	r4, r2, #3
 8001a90:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001a94:	00cb      	lsls	r3, r1, #3
 8001a96:	b2f1      	uxtb	r1, r6
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	f04f 0400 	mov.w	r4, #0
 8001aa4:	00d4      	lsls	r4, r2, #3
 8001aa6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001aaa:	00cb      	lsls	r3, r1, #3
 8001aac:	4633      	mov	r3, r6
 8001aae:	3307      	adds	r3, #7
 8001ab0:	08db      	lsrs	r3, r3, #3
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	ebad 0d03 	sub.w	sp, sp, r3
 8001ab8:	466b      	mov	r3, sp
 8001aba:	3300      	adds	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < sizeof(data_array); i++)																									// проходимся по массиву данных
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac2:	e021      	b.n	8001b08 <parse_CAN_message+0x138>
	{
		if ((i % 2) == 0)																															// для чётных i
 8001ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d119      	bne.n	8001b02 <parse_CAN_message+0x132>
		{
			uint8_t tmp_arr_2[2];																													// создаём массив из двух элементов
			convert_int_value_to_ascii_hex_char_array(sizeof(tmp_arr_2), tmp_arr_2, CAN_message_struct_to_parse.CAN_RX_data_buffer[i/2]);			// заполняем массив !!!
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	0fda      	lsrs	r2, r3, #31
 8001ad2:	4413      	add	r3, r2
 8001ad4:	105b      	asrs	r3, r3, #1
 8001ad6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ada:	4413      	add	r3, r2
 8001adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f000 f9ba 	bl	8001e60 <convert_int_value_to_ascii_hex_char_array>
			data_array[i] = tmp_arr_2[0];
 8001aec:	7839      	ldrb	r1, [r7, #0]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af2:	4413      	add	r3, r2
 8001af4:	460a      	mov	r2, r1
 8001af6:	701a      	strb	r2, [r3, #0]
			data_array[i + 1] = tmp_arr_2[1];
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	3301      	adds	r3, #1
 8001afc:	7879      	ldrb	r1, [r7, #1]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(data_array); i++)																									// проходимся по массиву данных
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	3301      	adds	r3, #1
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b08:	4632      	mov	r2, r6
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d8d9      	bhi.n	8001ac4 <parse_CAN_message+0xf4>
		}
	}
	uint8_t timestamp_array[CAN_TIMESTAMP_SIZE];
	uint8_t timestamp_size_variable;
	if (timestamp_enabled)
 8001b10:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <parse_CAN_message+0x300>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00c      	beq.n	8001b32 <parse_CAN_message+0x162>
	{
		timestamp_size_variable = CAN_TIMESTAMP_SIZE;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		convert_int_value_to_ascii_hex_char_array(sizeof(timestamp_array), timestamp_array, CAN_message_struct_to_parse.CAN_RX_timestamp_buffer);
 8001b1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001b22:	461a      	mov	r2, r3
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2004      	movs	r0, #4
 8001b2c:	f000 f998 	bl	8001e60 <convert_int_value_to_ascii_hex_char_array>
 8001b30:	e002      	b.n	8001b38 <parse_CAN_message+0x168>
	}
	else
	{
		timestamp_size_variable = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	}
	uint8_t CAN_to_UART_message_buffer[sizeof(message_type_char) + id_lenght + CAN_DATA_LENGHT_BYTE_SIZE + data_lenght + timestamp_size_variable + sizeof(message_end_char)];
 8001b38:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001b3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b40:	441a      	add	r2, r3
 8001b42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001b46:	4413      	add	r3, r2
 8001b48:	1cdd      	adds	r5, r3, #3
 8001b4a:	466b      	mov	r3, sp
 8001b4c:	469a      	mov	sl, r3
 8001b4e:	462b      	mov	r3, r5
 8001b50:	3b01      	subs	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	4629      	mov	r1, r5
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	f04f 0400 	mov.w	r4, #0
 8001b62:	00d4      	lsls	r4, r2, #3
 8001b64:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001b68:	00cb      	lsls	r3, r1, #3
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	f04f 0400 	mov.w	r4, #0
 8001b78:	00d4      	lsls	r4, r2, #3
 8001b7a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001b7e:	00cb      	lsls	r3, r1, #3
 8001b80:	1deb      	adds	r3, r5, #7
 8001b82:	08db      	lsrs	r3, r3, #3
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	ebad 0d03 	sub.w	sp, sp, r3
 8001b8a:	466b      	mov	r3, sp
 8001b8c:	3300      	adds	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
	uint8_t message_element_counter = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t cycle_start_value_tmp = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
	CAN_to_UART_message_buffer[0] = message_type_char;
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001ba0:	701a      	strb	r2, [r3, #0]
	message_element_counter++;
 8001ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	cycle_start_value_tmp = message_element_counter;
 8001bac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bb0:	73fb      	strb	r3, [r7, #15]
	for (int i = message_element_counter; i < (sizeof(id_array) + cycle_start_value_tmp); i++)
 8001bb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8001bb8:	e011      	b.n	8001bde <parse_CAN_message+0x20e>
	{
		CAN_to_UART_message_buffer[i] = id_array[i - cycle_start_value_tmp];
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	6a3a      	ldr	r2, [r7, #32]
 8001bc2:	5cd1      	ldrb	r1, [r2, r3]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc8:	4413      	add	r3, r2
 8001bca:	460a      	mov	r2, r1
 8001bcc:	701a      	strb	r2, [r3, #0]
		message_element_counter++;
 8001bce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = message_element_counter; i < (sizeof(id_array) + cycle_start_value_tmp); i++)
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bda:	3301      	adds	r3, #1
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bde:	4642      	mov	r2, r8
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	441a      	add	r2, r3
 8001be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d8e7      	bhi.n	8001bba <parse_CAN_message+0x1ea>
	}
	uint8_t data_lengt_tmp_buff = convert_data_lenght_to_DLC_code(data_lenght/2);
 8001bea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bee:	085b      	lsrs	r3, r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f86e 	bl	8001cd4 <convert_data_lenght_to_DLC_code>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	73bb      	strb	r3, [r7, #14]
	uint8_t CAN_DLS_char_array[1];
	convert_int_value_to_ascii_hex_char_array(sizeof(CAN_DLS_char_array), CAN_DLS_char_array, data_lengt_tmp_buff);
 8001bfc:	7bba      	ldrb	r2, [r7, #14]
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	2001      	movs	r0, #1
 8001c04:	f000 f92c 	bl	8001e60 <convert_int_value_to_ascii_hex_char_array>
	CAN_to_UART_message_buffer[message_element_counter] = CAN_DLS_char_array[0];
 8001c08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c0c:	7939      	ldrb	r1, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	54d1      	strb	r1, [r2, r3]
	message_element_counter++;
 8001c12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c16:	3301      	adds	r3, #1
 8001c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	cycle_start_value_tmp = message_element_counter;
 8001c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c20:	73fb      	strb	r3, [r7, #15]
	for (int i = message_element_counter; i < (sizeof(data_array) + cycle_start_value_tmp); i++)
 8001c22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c28:	e011      	b.n	8001c4e <parse_CAN_message+0x27e>
	{
		CAN_to_UART_message_buffer[i] = data_array[i - cycle_start_value_tmp];
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	5cd1      	ldrb	r1, [r2, r3]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	4413      	add	r3, r2
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	701a      	strb	r2, [r3, #0]
		message_element_counter++;
 8001c3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c42:	3301      	adds	r3, #1
 8001c44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = message_element_counter; i < (sizeof(data_array) + cycle_start_value_tmp); i++)
 8001c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c4e:	4632      	mov	r2, r6
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	441a      	add	r2, r3
 8001c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d8e7      	bhi.n	8001c2a <parse_CAN_message+0x25a>
	}
	if (timestamp_enabled)
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <parse_CAN_message+0x300>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d020      	beq.n	8001ca4 <parse_CAN_message+0x2d4>
	{
		cycle_start_value_tmp = message_element_counter;
 8001c62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c66:	73fb      	strb	r3, [r7, #15]
		for (int i = message_element_counter; i < (sizeof(timestamp_array) + cycle_start_value_tmp); i++)
 8001c68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c6e:	e014      	b.n	8001c9a <parse_CAN_message+0x2ca>
		{
			CAN_to_UART_message_buffer[i] = timestamp_array[i - cycle_start_value_tmp];
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c84:	4413      	add	r3, r2
 8001c86:	460a      	mov	r2, r1
 8001c88:	701a      	strb	r2, [r3, #0]
			message_element_counter++;
 8001c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		for (int i = message_element_counter; i < (sizeof(timestamp_array) + cycle_start_value_tmp); i++)
 8001c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c96:	3301      	adds	r3, #1
 8001c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	1d1a      	adds	r2, r3, #4
 8001c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d8e5      	bhi.n	8001c70 <parse_CAN_message+0x2a0>
		}
	}
	CAN_to_UART_message_buffer[message_element_counter] = message_end_char;
 8001ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8001cae:	54d1      	strb	r1, [r2, r3]
	add_message_to_UART_TX_queue(CAN_to_UART_message_buffer, sizeof(CAN_to_UART_message_buffer), TX_PRIORITY_3);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	b2e9      	uxtb	r1, r5
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc7c 	bl	80005b4 <add_message_to_UART_TX_queue>
 8001cbc:	46d5      	mov	sp, sl
 8001cbe:	46cd      	mov	sp, r9
}
 8001cc0:	bf00      	nop
 8001cc2:	3740      	adds	r7, #64	; 0x40
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cca:	b004      	add	sp, #16
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000ecd 	.word	0x20000ecd

08001cd4 <convert_data_lenght_to_DLC_code>:

uint8_t convert_data_lenght_to_DLC_code(uint8_t value_to_convert)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
	uint8_t DLC_code;
	switch (value_to_convert)
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	2b40      	cmp	r3, #64	; 0x40
 8001ce2:	f200 80b5 	bhi.w	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
 8001ce6:	a201      	add	r2, pc, #4	; (adr r2, 8001cec <convert_data_lenght_to_DLC_code+0x18>)
 8001ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cec:	08001df1 	.word	0x08001df1
 8001cf0:	08001df7 	.word	0x08001df7
 8001cf4:	08001dfd 	.word	0x08001dfd
 8001cf8:	08001e03 	.word	0x08001e03
 8001cfc:	08001e09 	.word	0x08001e09
 8001d00:	08001e0f 	.word	0x08001e0f
 8001d04:	08001e15 	.word	0x08001e15
 8001d08:	08001e1b 	.word	0x08001e1b
 8001d0c:	08001e21 	.word	0x08001e21
 8001d10:	08001e51 	.word	0x08001e51
 8001d14:	08001e51 	.word	0x08001e51
 8001d18:	08001e51 	.word	0x08001e51
 8001d1c:	08001e27 	.word	0x08001e27
 8001d20:	08001e51 	.word	0x08001e51
 8001d24:	08001e51 	.word	0x08001e51
 8001d28:	08001e51 	.word	0x08001e51
 8001d2c:	08001e2d 	.word	0x08001e2d
 8001d30:	08001e51 	.word	0x08001e51
 8001d34:	08001e51 	.word	0x08001e51
 8001d38:	08001e51 	.word	0x08001e51
 8001d3c:	08001e33 	.word	0x08001e33
 8001d40:	08001e51 	.word	0x08001e51
 8001d44:	08001e51 	.word	0x08001e51
 8001d48:	08001e51 	.word	0x08001e51
 8001d4c:	08001e39 	.word	0x08001e39
 8001d50:	08001e51 	.word	0x08001e51
 8001d54:	08001e51 	.word	0x08001e51
 8001d58:	08001e51 	.word	0x08001e51
 8001d5c:	08001e51 	.word	0x08001e51
 8001d60:	08001e51 	.word	0x08001e51
 8001d64:	08001e51 	.word	0x08001e51
 8001d68:	08001e51 	.word	0x08001e51
 8001d6c:	08001e3f 	.word	0x08001e3f
 8001d70:	08001e51 	.word	0x08001e51
 8001d74:	08001e51 	.word	0x08001e51
 8001d78:	08001e51 	.word	0x08001e51
 8001d7c:	08001e51 	.word	0x08001e51
 8001d80:	08001e51 	.word	0x08001e51
 8001d84:	08001e51 	.word	0x08001e51
 8001d88:	08001e51 	.word	0x08001e51
 8001d8c:	08001e51 	.word	0x08001e51
 8001d90:	08001e51 	.word	0x08001e51
 8001d94:	08001e51 	.word	0x08001e51
 8001d98:	08001e51 	.word	0x08001e51
 8001d9c:	08001e51 	.word	0x08001e51
 8001da0:	08001e51 	.word	0x08001e51
 8001da4:	08001e51 	.word	0x08001e51
 8001da8:	08001e51 	.word	0x08001e51
 8001dac:	08001e45 	.word	0x08001e45
 8001db0:	08001e51 	.word	0x08001e51
 8001db4:	08001e51 	.word	0x08001e51
 8001db8:	08001e51 	.word	0x08001e51
 8001dbc:	08001e51 	.word	0x08001e51
 8001dc0:	08001e51 	.word	0x08001e51
 8001dc4:	08001e51 	.word	0x08001e51
 8001dc8:	08001e51 	.word	0x08001e51
 8001dcc:	08001e51 	.word	0x08001e51
 8001dd0:	08001e51 	.word	0x08001e51
 8001dd4:	08001e51 	.word	0x08001e51
 8001dd8:	08001e51 	.word	0x08001e51
 8001ddc:	08001e51 	.word	0x08001e51
 8001de0:	08001e51 	.word	0x08001e51
 8001de4:	08001e51 	.word	0x08001e51
 8001de8:	08001e51 	.word	0x08001e51
 8001dec:	08001e4b 	.word	0x08001e4b
	{
	case 0:
	{
		DLC_code = 0x0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
		break;
 8001df4:	e02c      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 1:
	{
		DLC_code = 0x1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
		break;
 8001dfa:	e029      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 2:
	{
		DLC_code = 0x2;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	73fb      	strb	r3, [r7, #15]
		break;
 8001e00:	e026      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 3:
	{
		DLC_code = 0x3;
 8001e02:	2303      	movs	r3, #3
 8001e04:	73fb      	strb	r3, [r7, #15]
		break;
 8001e06:	e023      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 4:
	{
		DLC_code = 0x4;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	73fb      	strb	r3, [r7, #15]
		break;
 8001e0c:	e020      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 5:
	{
		DLC_code = 0x5;
 8001e0e:	2305      	movs	r3, #5
 8001e10:	73fb      	strb	r3, [r7, #15]
		break;
 8001e12:	e01d      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 6:
	{
		DLC_code = 0x6;
 8001e14:	2306      	movs	r3, #6
 8001e16:	73fb      	strb	r3, [r7, #15]
		break;
 8001e18:	e01a      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 7:
	{
		DLC_code = 0x7;
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	73fb      	strb	r3, [r7, #15]
		break;
 8001e1e:	e017      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 8:
	{
		DLC_code = 0x8;
 8001e20:	2308      	movs	r3, #8
 8001e22:	73fb      	strb	r3, [r7, #15]
		break;
 8001e24:	e014      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 12:
	{
		DLC_code = 0x9;
 8001e26:	2309      	movs	r3, #9
 8001e28:	73fb      	strb	r3, [r7, #15]
		break;
 8001e2a:	e011      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 16:
	{
		DLC_code = 0xA;
 8001e2c:	230a      	movs	r3, #10
 8001e2e:	73fb      	strb	r3, [r7, #15]
		break;
 8001e30:	e00e      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 20:
	{
		DLC_code = 0xB;
 8001e32:	230b      	movs	r3, #11
 8001e34:	73fb      	strb	r3, [r7, #15]
		break;
 8001e36:	e00b      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 24:
	{
		DLC_code = 0xC;
 8001e38:	230c      	movs	r3, #12
 8001e3a:	73fb      	strb	r3, [r7, #15]
		break;
 8001e3c:	e008      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 32:
	{
		DLC_code = 0xD;
 8001e3e:	230d      	movs	r3, #13
 8001e40:	73fb      	strb	r3, [r7, #15]
		break;
 8001e42:	e005      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 48:
	{
		DLC_code = 0xE;
 8001e44:	230e      	movs	r3, #14
 8001e46:	73fb      	strb	r3, [r7, #15]
		break;
 8001e48:	e002      	b.n	8001e50 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 64:
	{
		DLC_code = 0xF;
 8001e4a:	230f      	movs	r3, #15
 8001e4c:	73fb      	strb	r3, [r7, #15]
		break;
 8001e4e:	bf00      	nop
	}
	}
	return DLC_code;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop

08001e60 <convert_int_value_to_ascii_hex_char_array>:

void convert_int_value_to_ascii_hex_char_array(uint8_t size_of_array, uint8_t* array, uint32_t value)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size_of_array; i++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e018      	b.n	8001ea6 <convert_int_value_to_ascii_hex_char_array+0x46>
	{
		*(array + (sizeof(uint8_t) * i)) = (value >> ((size_of_array - i - 1) * INT_TO_ASCII_CONVERT_BITWISE_SHIFT)) & 0xF;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f002 020f 	and.w	r2, r2, #15
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]
		int_to_char(array + (sizeof(uint8_t) * i));
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4413      	add	r3, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f83a 	bl	8001f14 <int_to_char>
	for (int i = 0; i < size_of_array; i++)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	dbe2      	blt.n	8001e74 <convert_int_value_to_ascii_hex_char_array+0x14>
	}
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <set_non_standard_CAN_bitrate>:

void set_non_standard_CAN_bitrate(char* UART_message)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	6078      	str	r0, [r7, #4]
	uint32_t tmp_prescaler = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_PRESCALER_SIZE, &UART_message[NON_STAND_CAN_PRESCALER_INDEX]);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	2003      	movs	r0, #3
 8001ec8:	f000 f950 	bl	800216c <convert_hex_char_sequence_to_int_value>
 8001ecc:	6178      	str	r0, [r7, #20]
	uint32_t tmp_SJW = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_SJW_SIZE, &UART_message[NON_STAND_CAN_SJW_INDEX]);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3308      	adds	r3, #8
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	2002      	movs	r0, #2
 8001ed6:	f000 f949 	bl	800216c <convert_hex_char_sequence_to_int_value>
 8001eda:	6138      	str	r0, [r7, #16]
	uint32_t tmp_seg1 = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_SEG1_SIZE, &UART_message[NON_STAND_CAN_SEG1_INDEX]);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f000 f942 	bl	800216c <convert_hex_char_sequence_to_int_value>
 8001ee8:	60f8      	str	r0, [r7, #12]
	uint32_t tmp_seg2 = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_SEG2_SIZE, &UART_message[NON_STAND_CAN_SEG2_INDEX]);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3306      	adds	r3, #6
 8001eee:	4619      	mov	r1, r3
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f000 f93b 	bl	800216c <convert_hex_char_sequence_to_int_value>
 8001ef6:	60b8      	str	r0, [r7, #8]
	CAN_baudrate_change(&hfdcan1, tmp_prescaler, tmp_SJW, tmp_seg1, tmp_seg2);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	6979      	ldr	r1, [r7, #20]
 8001f02:	4803      	ldr	r0, [pc, #12]	; (8001f10 <set_non_standard_CAN_bitrate+0x58>)
 8001f04:	f000 faee 	bl	80024e4 <CAN_baudrate_change>
}
 8001f08:	bf00      	nop
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000ed4 	.word	0x20000ed4

08001f14 <int_to_char>:

void int_to_char(uint8_t* variable_pointer)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	if (*variable_pointer <= 9)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b09      	cmp	r3, #9
 8001f22:	d806      	bhi.n	8001f32 <int_to_char+0x1e>
	{
		*variable_pointer = *variable_pointer + 0x30;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	3330      	adds	r3, #48	; 0x30
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*variable_pointer = *variable_pointer + 0x40 - 9;
	}
}
 8001f30:	e005      	b.n	8001f3e <int_to_char+0x2a>
		*variable_pointer = *variable_pointer + 0x40 - 9;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	3337      	adds	r3, #55	; 0x37
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	701a      	strb	r2, [r3, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <init_CAN_values>:

void init_CAN_values(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
	CAN_RX_put_index = 0;
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <init_CAN_values+0x34>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
	CAN_RX_get_index = 0;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <init_CAN_values+0x38>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
	CAN_TX_put_index = 0;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <init_CAN_values+0x3c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
	CAN_TX_get_index = 0;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <init_CAN_values+0x40>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
	CAN_TX_success_flag = 0;
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <init_CAN_values+0x44>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
	CAN_RX_success_flag = 0;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <init_CAN_values+0x48>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	2000076c 	.word	0x2000076c
 8001f84:	2000099c 	.word	0x2000099c
 8001f88:	20000ed0 	.word	0x20000ed0
 8001f8c:	20000664 	.word	0x20000664
 8001f90:	20000ecc 	.word	0x20000ecc
 8001f94:	20000ecf 	.word	0x20000ecf

08001f98 <set_can_frame_parameters>:

CAN_ParametersSet_StructTypeDef set_can_frame_parameters(uint32_t id_type_set, uint32_t frame_type_set)
{
 8001f98:	b490      	push	{r4, r7}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
	CAN_ParametersSet_StructTypeDef CAN_frame_parameters;
	switch (id_type_set)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <set_can_frame_parameters+0x1a>
 8001faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fae:	d00b      	beq.n	8001fc8 <set_can_frame_parameters+0x30>
 8001fb0:	e016      	b.n	8001fe0 <set_can_frame_parameters+0x48>
	{
	case FDCAN_STANDARD_ID:
	{
		CAN_frame_parameters.id_type = FDCAN_STANDARD_ID;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
		CAN_frame_parameters.id_lenght_in_bytes = STANDARD_CAN_MESSAGE_ID_LENGHT_BYTE;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	773b      	strb	r3, [r7, #28]
		CAN_frame_parameters.id_byte_number = STANDARD_CAN_MESSAGE_ID_BYTE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	777b      	strb	r3, [r7, #29]
		CAN_frame_parameters.data_lenght_byte_number = STANDARD_CAN_MESSAGE_DATA_LENGHT_BYTE;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	77bb      	strb	r3, [r7, #30]
		CAN_frame_parameters.data_start_byte_number = STANDARD_CAN_MESSAGE_DATA_START_BYTE;
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	77fb      	strb	r3, [r7, #31]
		break;
 8001fc6:	e00b      	b.n	8001fe0 <set_can_frame_parameters+0x48>
	}
	case FDCAN_EXTENDED_ID:
	{
		CAN_frame_parameters.id_type = FDCAN_EXTENDED_ID;
 8001fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fcc:	617b      	str	r3, [r7, #20]
		CAN_frame_parameters.id_lenght_in_bytes = EXTENDED_CAN_MESSAGE_ID_LENGHT_BYTE;
 8001fce:	2308      	movs	r3, #8
 8001fd0:	773b      	strb	r3, [r7, #28]
		CAN_frame_parameters.id_byte_number = EXTENDED_CAN_MESSAGE_ID_BYTE;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	777b      	strb	r3, [r7, #29]
		CAN_frame_parameters.data_lenght_byte_number = EXTENDED_CAN_MESSAGE_DATA_LENGHT_BYTE;
 8001fd6:	2309      	movs	r3, #9
 8001fd8:	77bb      	strb	r3, [r7, #30]
		CAN_frame_parameters.data_start_byte_number = EXTENDED_CAN_MESSAGE_DATA_START_BYTE;
 8001fda:	230a      	movs	r3, #10
 8001fdc:	77fb      	strb	r3, [r7, #31]
		break;
 8001fde:	bf00      	nop
	}
	}
	switch (frame_type_set)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <set_can_frame_parameters+0x56>
 8001fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fea:	d003      	beq.n	8001ff4 <set_can_frame_parameters+0x5c>
 8001fec:	e006      	b.n	8001ffc <set_can_frame_parameters+0x64>
	{
	case FDCAN_DATA_FRAME:
	{
		CAN_frame_parameters.frame_type = FDCAN_DATA_FRAME;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
		break;
 8001ff2:	e003      	b.n	8001ffc <set_can_frame_parameters+0x64>
	}
	case FDCAN_REMOTE_FRAME:
	{
		CAN_frame_parameters.frame_type = FDCAN_REMOTE_FRAME;
 8001ff4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ff8:	61bb      	str	r3, [r7, #24]
		break;
 8001ffa:	bf00      	nop
	}
	}
	return CAN_frame_parameters;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	461c      	mov	r4, r3
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002008:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bc90      	pop	{r4, r7}
 8002014:	4770      	bx	lr

08002016 <send_CAN_frame>:

void send_CAN_frame(char* can_buffer_to_parse, CAN_ParametersSet_StructTypeDef CAN_frame_parameters_set)
{
 8002016:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002018:	b08d      	sub	sp, #52	; 0x34
 800201a:	af02      	add	r7, sp, #8
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	4638      	mov	r0, r7
 8002020:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002024:	466b      	mov	r3, sp
 8002026:	461e      	mov	r6, r3
	uint32_t identifier = convert_hex_char_sequence_to_int_value(CAN_frame_parameters_set.id_lenght_in_bytes, &can_buffer_to_parse[CAN_frame_parameters_set.id_byte_number]);
 8002028:	7a3a      	ldrb	r2, [r7, #8]
 800202a:	7a7b      	ldrb	r3, [r7, #9]
 800202c:	4619      	mov	r1, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	440b      	add	r3, r1
 8002032:	4619      	mov	r1, r3
 8002034:	4610      	mov	r0, r2
 8002036:	f000 f899 	bl	800216c <convert_hex_char_sequence_to_int_value>
 800203a:	6238      	str	r0, [r7, #32]
	uint32_t data_lenght = CAN_TX_message_DLC_bytes_define(convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_lenght_byte_number]));
 800203c:	7abb      	ldrb	r3, [r7, #10]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f878 	bl	800213c <convert_ascii_hex_char_to_int_value>
 800204c:	4603      	mov	r3, r0
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f958 	bl	8002304 <CAN_TX_message_DLC_bytes_define>
 8002054:	61f8      	str	r0, [r7, #28]
	uint8_t can_tx_data_buffer[convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_lenght_byte_number])];
 8002056:	7abb      	ldrb	r3, [r7, #10]
 8002058:	461a      	mov	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f86b 	bl	800213c <convert_ascii_hex_char_to_int_value>
 8002066:	4603      	mov	r3, r0
 8002068:	461d      	mov	r5, r3
 800206a:	462b      	mov	r3, r5
 800206c:	3b01      	subs	r3, #1
 800206e:	61bb      	str	r3, [r7, #24]
 8002070:	b2e9      	uxtb	r1, r5
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	f04f 0400 	mov.w	r4, #0
 800207e:	00d4      	lsls	r4, r2, #3
 8002080:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002084:	00cb      	lsls	r3, r1, #3
 8002086:	b2e9      	uxtb	r1, r5
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	f04f 0400 	mov.w	r4, #0
 8002094:	00d4      	lsls	r4, r2, #3
 8002096:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800209a:	00cb      	lsls	r3, r1, #3
 800209c:	462b      	mov	r3, r5
 800209e:	3307      	adds	r3, #7
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	ebad 0d03 	sub.w	sp, sp, r3
 80020a8:	ab02      	add	r3, sp, #8
 80020aa:	3300      	adds	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < (sizeof(can_tx_data_buffer)*2); i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	e031      	b.n	8002118 <send_CAN_frame+0x102>
	{
		if ((i % 2) == 0)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d129      	bne.n	8002112 <send_CAN_frame+0xfc>
		{
			uint8_t value_array[2];
			value_array[0] = convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_start_byte_number + i]);
 80020be:	7afb      	ldrb	r3, [r7, #11]
 80020c0:	461a      	mov	r2, r3
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	4413      	add	r3, r2
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f834 	bl	800213c <convert_ascii_hex_char_to_int_value>
 80020d4:	4603      	mov	r3, r0
 80020d6:	743b      	strb	r3, [r7, #16]
			value_array[1] = convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_start_byte_number + i + 1]);
 80020d8:	7afb      	ldrb	r3, [r7, #11]
 80020da:	461a      	mov	r2, r3
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	4413      	add	r3, r2
 80020e0:	3301      	adds	r3, #1
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4413      	add	r3, r2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 f827 	bl	800213c <convert_ascii_hex_char_to_int_value>
 80020ee:	4603      	mov	r3, r0
 80020f0:	747b      	strb	r3, [r7, #17]
			can_tx_data_buffer[i/2] = unite_digits_sequence(sizeof(value_array), value_array, ASCII_TO_INT_CONVERT_BITWISE_SHIFT);
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	2204      	movs	r2, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	2002      	movs	r0, #2
 80020fc:	f000 f9b0 	bl	8002460 <unite_digits_sequence>
 8002100:	4601      	mov	r1, r0
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	0fda      	lsrs	r2, r3, #31
 8002106:	4413      	add	r3, r2
 8002108:	105b      	asrs	r3, r3, #1
 800210a:	461a      	mov	r2, r3
 800210c:	b2c9      	uxtb	r1, r1
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	5499      	strb	r1, [r3, r2]
	for (int i = 0; i < (sizeof(can_tx_data_buffer)*2); i++)
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	3301      	adds	r3, #1
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
 8002118:	462b      	mov	r3, r5
 800211a:	005a      	lsls	r2, r3, #1
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	429a      	cmp	r2, r3
 8002120:	d8c8      	bhi.n	80020b4 <send_CAN_frame+0x9e>
		}
	}
	CAN_transmit_message(CAN_frame_parameters_set.id_type, CAN_frame_parameters_set.frame_type, identifier, data_lenght, can_tx_data_buffer);
 8002122:	6838      	ldr	r0, [r7, #0]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	6a3a      	ldr	r2, [r7, #32]
 800212e:	f000 f959 	bl	80023e4 <CAN_transmit_message>
 8002132:	46b5      	mov	sp, r6
}
 8002134:	bf00      	nop
 8002136:	372c      	adds	r7, #44	; 0x2c
 8002138:	46bd      	mov	sp, r7
 800213a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800213c <convert_ascii_hex_char_to_int_value>:

uint8_t convert_ascii_hex_char_to_int_value(char char_to_convert)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
	uint8_t int_value = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
	if ((int)char_to_convert <= (int)'9')
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2b39      	cmp	r3, #57	; 0x39
 800214e:	d803      	bhi.n	8002158 <convert_ascii_hex_char_to_int_value+0x1c>
	{
		int_value = char_to_convert - '0';
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	3b30      	subs	r3, #48	; 0x30
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	e002      	b.n	800215e <convert_ascii_hex_char_to_int_value+0x22>
	}
	else
	{
		int_value = char_to_convert - 'A' + 10;
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	3b37      	subs	r3, #55	; 0x37
 800215c:	73fb      	strb	r3, [r7, #15]
	}
	return int_value;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <convert_hex_char_sequence_to_int_value>:

uint32_t convert_hex_char_sequence_to_int_value(uint8_t number_of_chars, char* char_array_pointer)
{
 800216c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	6039      	str	r1, [r7, #0]
 8002176:	71fb      	strb	r3, [r7, #7]
 8002178:	466b      	mov	r3, sp
 800217a:	461e      	mov	r6, r3
	uint8_t tmp_arr_2[number_of_chars];
 800217c:	79fd      	ldrb	r5, [r7, #7]
 800217e:	462b      	mov	r3, r5
 8002180:	3b01      	subs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	b2e9      	uxtb	r1, r5
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	f04f 0400 	mov.w	r4, #0
 8002192:	00d4      	lsls	r4, r2, #3
 8002194:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002198:	00cb      	lsls	r3, r1, #3
 800219a:	b2e9      	uxtb	r1, r5
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	f04f 0400 	mov.w	r4, #0
 80021a8:	00d4      	lsls	r4, r2, #3
 80021aa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80021ae:	00cb      	lsls	r3, r1, #3
 80021b0:	462b      	mov	r3, r5
 80021b2:	3307      	adds	r3, #7
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	ebad 0d03 	sub.w	sp, sp, r3
 80021bc:	466b      	mov	r3, sp
 80021be:	3300      	adds	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(tmp_arr_2); i++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e010      	b.n	80021ea <convert_hex_char_sequence_to_int_value+0x7e>
	{
		tmp_arr_2[i] = convert_ascii_hex_char_to_int_value(char_array_pointer[i]);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffb3 	bl	800213c <convert_ascii_hex_char_to_int_value>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4619      	mov	r1, r3
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	4413      	add	r3, r2
 80021e0:	460a      	mov	r2, r1
 80021e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tmp_arr_2); i++)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3301      	adds	r3, #1
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	462a      	mov	r2, r5
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d8ea      	bhi.n	80021c8 <convert_hex_char_sequence_to_int_value+0x5c>
	}
	uint32_t return_int_value = unite_digits_sequence(sizeof(tmp_arr_2), tmp_arr_2, ASCII_TO_INT_CONVERT_BITWISE_SHIFT);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2204      	movs	r2, #4
 80021f6:	4619      	mov	r1, r3
 80021f8:	4628      	mov	r0, r5
 80021fa:	f000 f931 	bl	8002460 <unite_digits_sequence>
 80021fe:	60b8      	str	r0, [r7, #8]
	return return_int_value;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	46b5      	mov	sp, r6
}
 8002204:	4618      	mov	r0, r3
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800220c <CAN_message_data_lenght_define>:

uint32_t CAN_message_data_lenght_define(uint32_t data_lenght_code)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	uint32_t lenght_bytes;
	switch (data_lenght_code)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800221a:	d051      	beq.n	80022c0 <CAN_message_data_lenght_define+0xb4>
 800221c:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8002220:	d818      	bhi.n	8002254 <CAN_message_data_lenght_define+0x48>
 8002222:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002226:	d03f      	beq.n	80022a8 <CAN_message_data_lenght_define+0x9c>
 8002228:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800222c:	d808      	bhi.n	8002240 <CAN_message_data_lenght_define+0x34>
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002232:	d033      	beq.n	800229c <CAN_message_data_lenght_define+0x90>
 8002234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002238:	d033      	beq.n	80022a2 <CAN_message_data_lenght_define+0x96>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d02b      	beq.n	8002296 <CAN_message_data_lenght_define+0x8a>
 800223e:	e05a      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002244:	d036      	beq.n	80022b4 <CAN_message_data_lenght_define+0xa8>
 8002246:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800224a:	d036      	beq.n	80022ba <CAN_message_data_lenght_define+0xae>
 800224c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002250:	d02d      	beq.n	80022ae <CAN_message_data_lenght_define+0xa2>
 8002252:	e050      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
 8002254:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8002258:	d03e      	beq.n	80022d8 <CAN_message_data_lenght_define+0xcc>
 800225a:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 800225e:	d809      	bhi.n	8002274 <CAN_message_data_lenght_define+0x68>
 8002260:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8002264:	d032      	beq.n	80022cc <CAN_message_data_lenght_define+0xc0>
 8002266:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800226a:	d032      	beq.n	80022d2 <CAN_message_data_lenght_define+0xc6>
 800226c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002270:	d029      	beq.n	80022c6 <CAN_message_data_lenght_define+0xba>
 8002272:	e040      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
 8002274:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8002278:	d034      	beq.n	80022e4 <CAN_message_data_lenght_define+0xd8>
 800227a:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 800227e:	d803      	bhi.n	8002288 <CAN_message_data_lenght_define+0x7c>
 8002280:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002284:	d02b      	beq.n	80022de <CAN_message_data_lenght_define+0xd2>
 8002286:	e036      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
 8002288:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800228c:	d02d      	beq.n	80022ea <CAN_message_data_lenght_define+0xde>
 800228e:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8002292:	d02d      	beq.n	80022f0 <CAN_message_data_lenght_define+0xe4>
 8002294:	e02f      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	{
	case FDCAN_DLC_BYTES_0:
	{
		lenght_bytes = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
		break;
 800229a:	e02c      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_1:
	{
		lenght_bytes = 1;
 800229c:	2301      	movs	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
		break;
 80022a0:	e029      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_2:
	{
		lenght_bytes = 2;
 80022a2:	2302      	movs	r3, #2
 80022a4:	60fb      	str	r3, [r7, #12]
		break;
 80022a6:	e026      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_3:
	{
		lenght_bytes = 3;
 80022a8:	2303      	movs	r3, #3
 80022aa:	60fb      	str	r3, [r7, #12]
		break;
 80022ac:	e023      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_4:
	{
		lenght_bytes = 4;
 80022ae:	2304      	movs	r3, #4
 80022b0:	60fb      	str	r3, [r7, #12]
		break;
 80022b2:	e020      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_5:
	{
		lenght_bytes = 5;
 80022b4:	2305      	movs	r3, #5
 80022b6:	60fb      	str	r3, [r7, #12]
		break;
 80022b8:	e01d      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_6:
	{
		lenght_bytes = 6;
 80022ba:	2306      	movs	r3, #6
 80022bc:	60fb      	str	r3, [r7, #12]
		break;
 80022be:	e01a      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_7:
	{
		lenght_bytes = 7;
 80022c0:	2307      	movs	r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]
		break;
 80022c4:	e017      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_8:
	{
		lenght_bytes = 8;
 80022c6:	2308      	movs	r3, #8
 80022c8:	60fb      	str	r3, [r7, #12]
		break;
 80022ca:	e014      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_12:
	{
		lenght_bytes = 12;
 80022cc:	230c      	movs	r3, #12
 80022ce:	60fb      	str	r3, [r7, #12]
		break;
 80022d0:	e011      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_16:
	{
		lenght_bytes = 16;
 80022d2:	2310      	movs	r3, #16
 80022d4:	60fb      	str	r3, [r7, #12]
		break;
 80022d6:	e00e      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_20:
	{
		lenght_bytes = 20;
 80022d8:	2314      	movs	r3, #20
 80022da:	60fb      	str	r3, [r7, #12]
		break;
 80022dc:	e00b      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_24:
	{
		lenght_bytes = 24;
 80022de:	2318      	movs	r3, #24
 80022e0:	60fb      	str	r3, [r7, #12]
		break;
 80022e2:	e008      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_32:
	{
		lenght_bytes = 32;
 80022e4:	2320      	movs	r3, #32
 80022e6:	60fb      	str	r3, [r7, #12]
		break;
 80022e8:	e005      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_48:
	{
		lenght_bytes = 48;
 80022ea:	2330      	movs	r3, #48	; 0x30
 80022ec:	60fb      	str	r3, [r7, #12]
		break;
 80022ee:	e002      	b.n	80022f6 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_64:
	{
		lenght_bytes = 64;
 80022f0:	2340      	movs	r3, #64	; 0x40
 80022f2:	60fb      	str	r3, [r7, #12]
		break;
 80022f4:	bf00      	nop
	}
	}
	return lenght_bytes;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <CAN_TX_message_DLC_bytes_define>:

uint32_t CAN_TX_message_DLC_bytes_define(uint32_t data_lenght_bytes)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	uint32_t DLC_bytes;
	switch (data_lenght_bytes)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b0f      	cmp	r3, #15
 8002310:	d861      	bhi.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
 8002312:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <CAN_TX_message_DLC_bytes_define+0x14>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	08002359 	.word	0x08002359
 800231c:	0800235f 	.word	0x0800235f
 8002320:	08002367 	.word	0x08002367
 8002324:	0800236f 	.word	0x0800236f
 8002328:	08002377 	.word	0x08002377
 800232c:	0800237f 	.word	0x0800237f
 8002330:	08002387 	.word	0x08002387
 8002334:	0800238f 	.word	0x0800238f
 8002338:	08002397 	.word	0x08002397
 800233c:	0800239f 	.word	0x0800239f
 8002340:	080023a7 	.word	0x080023a7
 8002344:	080023af 	.word	0x080023af
 8002348:	080023b7 	.word	0x080023b7
 800234c:	080023bf 	.word	0x080023bf
 8002350:	080023c7 	.word	0x080023c7
 8002354:	080023cf 	.word	0x080023cf
	{
	case 0x0:
	{
		DLC_bytes = FDCAN_DLC_BYTES_0;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
		break;
 800235c:	e03b      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x1:
	{
		DLC_bytes = FDCAN_DLC_BYTES_1;
 800235e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002362:	60fb      	str	r3, [r7, #12]
		break;
 8002364:	e037      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x2:
	{
		DLC_bytes = FDCAN_DLC_BYTES_2;
 8002366:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236a:	60fb      	str	r3, [r7, #12]
		break;
 800236c:	e033      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x3:
	{
		DLC_bytes = FDCAN_DLC_BYTES_3;
 800236e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002372:	60fb      	str	r3, [r7, #12]
		break;
 8002374:	e02f      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x4:
	{
		DLC_bytes = FDCAN_DLC_BYTES_4;
 8002376:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800237a:	60fb      	str	r3, [r7, #12]
		break;
 800237c:	e02b      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x5:
	{
		DLC_bytes = FDCAN_DLC_BYTES_5;
 800237e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002382:	60fb      	str	r3, [r7, #12]
		break;
 8002384:	e027      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x6:
	{
		DLC_bytes = FDCAN_DLC_BYTES_6;
 8002386:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800238a:	60fb      	str	r3, [r7, #12]
		break;
 800238c:	e023      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x7:
	{
		DLC_bytes = FDCAN_DLC_BYTES_7;
 800238e:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8002392:	60fb      	str	r3, [r7, #12]
		break;
 8002394:	e01f      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x8:
	{
		DLC_bytes = FDCAN_DLC_BYTES_8;
 8002396:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800239a:	60fb      	str	r3, [r7, #12]
		break;
 800239c:	e01b      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x9:
	{
		DLC_bytes = FDCAN_DLC_BYTES_12;
 800239e:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 80023a2:	60fb      	str	r3, [r7, #12]
		break;
 80023a4:	e017      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xA:
	{
		DLC_bytes = FDCAN_DLC_BYTES_16;
 80023a6:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 80023aa:	60fb      	str	r3, [r7, #12]
		break;
 80023ac:	e013      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xB:
	{
		DLC_bytes = FDCAN_DLC_BYTES_20;
 80023ae:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 80023b2:	60fb      	str	r3, [r7, #12]
		break;
 80023b4:	e00f      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xC:
	{
		DLC_bytes = FDCAN_DLC_BYTES_24;
 80023b6:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80023ba:	60fb      	str	r3, [r7, #12]
		break;
 80023bc:	e00b      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xD:
	{
		DLC_bytes = FDCAN_DLC_BYTES_32;
 80023be:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 80023c2:	60fb      	str	r3, [r7, #12]
		break;
 80023c4:	e007      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xE:
	{
		DLC_bytes = FDCAN_DLC_BYTES_48;
 80023c6:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80023ca:	60fb      	str	r3, [r7, #12]
		break;
 80023cc:	e003      	b.n	80023d6 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xF:
	{
		DLC_bytes = FDCAN_DLC_BYTES_64;
 80023ce:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80023d2:	60fb      	str	r3, [r7, #12]
		break;
 80023d4:	bf00      	nop
	}
	}
	return DLC_bytes;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <CAN_transmit_message>:

void CAN_transmit_message(uint32_t id_type, uint32_t frame_type, uint32_t identifier, uint32_t data_lenght, uint8_t* tx_data)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08e      	sub	sp, #56	; 0x38
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
	FDCAN_TxHeaderTypeDef tx_header;
	tx_header.Identifier = identifier;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	617b      	str	r3, [r7, #20]
	tx_header.IdType = id_type;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
	tx_header.TxFrameType = frame_type;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	61fb      	str	r3, [r7, #28]
	tx_header.DataLength = data_lenght;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	623b      	str	r3, [r7, #32]
	tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
	tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002406:	2300      	movs	r3, #0
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
	tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 800240a:	2300      	movs	r3, #0
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
	tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800240e:	2300      	movs	r3, #0
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
	tx_header.MessageMarker = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
	add_message_to_CAN_TX_queue(&tx_header, tx_data);
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f881 	bl	8002524 <add_message_to_CAN_TX_queue>
}
 8002422:	bf00      	nop
 8002424:	3738      	adds	r7, #56	; 0x38
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <init_char_array_by_zero>:

// инициализируем нулями символьный массив
void init_char_array_by_zero(uint16_t array_size, char* array_pointer)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	6039      	str	r1, [r7, #0]
 8002434:	80fb      	strh	r3, [r7, #6]
	for (int int_char_counter = 0; int_char_counter < (array_size); int_char_counter++)
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	e007      	b.n	800244c <init_char_array_by_zero+0x22>
	{
		*(array_pointer + (int_char_counter*(sizeof(char)))) = '0';
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	4413      	add	r3, r2
 8002442:	2230      	movs	r2, #48	; 0x30
 8002444:	701a      	strb	r2, [r3, #0]
	for (int int_char_counter = 0; int_char_counter < (array_size); int_char_counter++)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3301      	adds	r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	429a      	cmp	r2, r3
 8002452:	dbf3      	blt.n	800243c <init_char_array_by_zero+0x12>
	}
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <unite_digits_sequence>:
		*(array_pointer + int_zero_counter) = 0;
	}
}

uint32_t unite_digits_sequence(uint8_t number_of_values, uint8_t *byte_array_pointer, uint8_t bitwise_shift)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
 800246c:	4613      	mov	r3, r2
 800246e:	71bb      	strb	r3, [r7, #6]
	uint32_t summary_value = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
	for (int i = number_of_values - 1; i >= 0; i--)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	3b01      	subs	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	e014      	b.n	80024a6 <unite_digits_sequence+0x46>
	{
		summary_value = summary_value | (byte_array_pointer[i] << ((number_of_values - 1 - i)*bitwise_shift));
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	1e5a      	subs	r2, r3, #1
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	79ba      	ldrb	r2, [r7, #6]
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	461a      	mov	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
	for (int i = number_of_values - 1; i >= 0; i--)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	dae7      	bge.n	800247c <unite_digits_sequence+0x1c>
	}
	return summary_value;
 80024ac:	68fb      	ldr	r3, [r7, #12]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <CAN_mode_change>:

void CAN_mode_change(FDCAN_HandleTypeDef *hfdcan, uint32_t required_mode)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
	HAL_FDCAN_Stop(hfdcan);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fe6a 	bl	800319e <HAL_FDCAN_Stop>
	hfdcan->Init.Mode = required_mode;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	60da      	str	r2, [r3, #12]
	HAL_FDCAN_Init(hfdcan);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fc01 	bl	8002cd8 <HAL_FDCAN_Init>
	HAL_FDCAN_Start(hfdcan);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fe39 	bl	800314e <HAL_FDCAN_Start>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <CAN_baudrate_change>:

void CAN_baudrate_change(FDCAN_HandleTypeDef *hfdcan, uint32_t prescaler, uint32_t SJW, uint32_t seg1, uint32_t seg2)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
	HAL_FDCAN_Stop(hfdcan);
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fe53 	bl	800319e <HAL_FDCAN_Stop>
	hfdcan->Init.NominalPrescaler = prescaler;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	615a      	str	r2, [r3, #20]
	hfdcan->Init.NominalSyncJumpWidth = SJW;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	619a      	str	r2, [r3, #24]
	hfdcan->Init.NominalTimeSeg1 = seg1;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	61da      	str	r2, [r3, #28]
	hfdcan->Init.NominalTimeSeg2 = seg2;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	621a      	str	r2, [r3, #32]
	HAL_FDCAN_Init(hfdcan);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fbe1 	bl	8002cd8 <HAL_FDCAN_Init>
	HAL_FDCAN_Start(hfdcan);
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fe19 	bl	800314e <HAL_FDCAN_Start>
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <add_message_to_CAN_TX_queue>:

void add_message_to_CAN_TX_queue(FDCAN_TxHeaderTypeDef *tx_header_pointer, uint8_t *tx_data_pointer)
{
 8002524:	b5b0      	push	{r4, r5, r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
	CAN_TX_queue_buffer[CAN_TX_put_index].message_header = *tx_header_pointer;
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <add_message_to_CAN_TX_queue+0xa0>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	4619      	mov	r1, r3
 8002534:	4a24      	ldr	r2, [pc, #144]	; (80025c8 <add_message_to_CAN_TX_queue+0xa4>)
 8002536:	2334      	movs	r3, #52	; 0x34
 8002538:	fb03 f301 	mul.w	r3, r3, r1
 800253c:	441a      	add	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4614      	mov	r4, r2
 8002542:	461d      	mov	r5, r3
 8002544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < CAN_message_data_lenght_define(CAN_TX_queue_buffer[CAN_TX_put_index].message_header.DataLength); i++)
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e013      	b.n	800257e <add_message_to_CAN_TX_queue+0x5a>
	{
		CAN_TX_queue_buffer[CAN_TX_put_index].message_data[i] = tx_data_pointer[i];
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <add_message_to_CAN_TX_queue+0xa0>)
 800255e:	7812      	ldrb	r2, [r2, #0]
 8002560:	4610      	mov	r0, r2
 8002562:	7819      	ldrb	r1, [r3, #0]
 8002564:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <add_message_to_CAN_TX_queue+0xa4>)
 8002566:	2334      	movs	r3, #52	; 0x34
 8002568:	fb03 f300 	mul.w	r3, r3, r0
 800256c:	441a      	add	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4413      	add	r3, r2
 8002572:	3324      	adds	r3, #36	; 0x24
 8002574:	460a      	mov	r2, r1
 8002576:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CAN_message_data_lenght_define(CAN_TX_queue_buffer[CAN_TX_put_index].message_header.DataLength); i++)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3301      	adds	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <add_message_to_CAN_TX_queue+0xa0>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	4619      	mov	r1, r3
 8002584:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <add_message_to_CAN_TX_queue+0xa4>)
 8002586:	2334      	movs	r3, #52	; 0x34
 8002588:	fb03 f301 	mul.w	r3, r3, r1
 800258c:	4413      	add	r3, r2
 800258e:	330c      	adds	r3, #12
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fe3a 	bl	800220c <CAN_message_data_lenght_define>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d8da      	bhi.n	8002556 <add_message_to_CAN_TX_queue+0x32>
	}
	CAN_TX_put_index++;
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <add_message_to_CAN_TX_queue+0xa0>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	3301      	adds	r3, #1
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <add_message_to_CAN_TX_queue+0xa0>)
 80025aa:	701a      	strb	r2, [r3, #0]
	if (CAN_TX_put_index > CAN_TX_QUEUE_BUFFER_SIZE)
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <add_message_to_CAN_TX_queue+0xa0>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b18      	cmp	r3, #24
 80025b2:	d902      	bls.n	80025ba <add_message_to_CAN_TX_queue+0x96>
	{
		CAN_TX_put_index = 0;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <add_message_to_CAN_TX_queue+0xa0>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
	}
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bdb0      	pop	{r4, r5, r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000ed0 	.word	0x20000ed0
 80025c8:	200009ec 	.word	0x200009ec

080025cc <send_messages_from_CAN_TX_queue>:

void send_messages_from_CAN_TX_queue(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
	if (CAN_TX_get_index != CAN_TX_put_index)
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <send_messages_from_CAN_TX_queue+0x80>)
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <send_messages_from_CAN_TX_queue+0x84>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d02a      	beq.n	8002634 <send_messages_from_CAN_TX_queue+0x68>
	{
		HAL_StatusTypeDef tx_flag = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_TX_queue_buffer[CAN_TX_get_index].message_header, &CAN_TX_queue_buffer[CAN_TX_get_index].message_data[0]);
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <send_messages_from_CAN_TX_queue+0x80>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	2334      	movs	r3, #52	; 0x34
 80025e6:	fb03 f302 	mul.w	r3, r3, r2
 80025ea:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <send_messages_from_CAN_TX_queue+0x88>)
 80025ec:	1899      	adds	r1, r3, r2
 80025ee:	4b17      	ldr	r3, [pc, #92]	; (800264c <send_messages_from_CAN_TX_queue+0x80>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	2334      	movs	r3, #52	; 0x34
 80025f6:	fb03 f302 	mul.w	r3, r3, r2
 80025fa:	3320      	adds	r3, #32
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <send_messages_from_CAN_TX_queue+0x88>)
 80025fe:	4413      	add	r3, r2
 8002600:	3304      	adds	r3, #4
 8002602:	461a      	mov	r2, r3
 8002604:	4814      	ldr	r0, [pc, #80]	; (8002658 <send_messages_from_CAN_TX_queue+0x8c>)
 8002606:	f000 fe3a 	bl	800327e <HAL_FDCAN_AddMessageToTxFifoQ>
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
		if (CAN_TX_success_flag == 0)
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <send_messages_from_CAN_TX_queue+0x90>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f083 0301 	eor.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <send_messages_from_CAN_TX_queue+0x5c>
		{
			if (tx_flag == HAL_OK)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <send_messages_from_CAN_TX_queue+0x5c>
			{
				CAN_TX_success_flag = 1;
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <send_messages_from_CAN_TX_queue+0x90>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
			}
		}
		CAN_TX_get_index++;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <send_messages_from_CAN_TX_queue+0x80>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	3301      	adds	r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <send_messages_from_CAN_TX_queue+0x80>)
 8002632:	701a      	strb	r2, [r3, #0]
	}
	if (CAN_TX_get_index >= CAN_TX_QUEUE_BUFFER_SIZE)
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <send_messages_from_CAN_TX_queue+0x80>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b17      	cmp	r3, #23
 800263a:	d902      	bls.n	8002642 <send_messages_from_CAN_TX_queue+0x76>
	{
		CAN_TX_get_index = 0;
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <send_messages_from_CAN_TX_queue+0x80>)
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
	}
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000664 	.word	0x20000664
 8002650:	20000ed0 	.word	0x20000ed0
 8002654:	200009ec 	.word	0x200009ec
 8002658:	20000ed4 	.word	0x20000ed4
 800265c:	20000ecc 	.word	0x20000ecc

08002660 <count_string_lenght>:

uint8_t count_string_lenght(char* ch_string)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	uint8_t number_of_chars = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
	while (ch_string[number_of_chars] != '\0')
 800266c:	e005      	b.n	800267a <count_string_lenght+0x1a>
	{
		number_of_chars++;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	3301      	adds	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
		if (number_of_chars == UART_STRING_MAX_SIZE)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d006      	beq.n	8002688 <count_string_lenght+0x28>
	while (ch_string[number_of_chars] != '\0')
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	4413      	add	r3, r2
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f3      	bne.n	800266e <count_string_lenght+0xe>
 8002686:	e000      	b.n	800268a <count_string_lenght+0x2a>
		{
			break;
 8002688:	bf00      	nop
		}
	}
	return number_of_chars;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <init_CAN_filter>:

void init_CAN_filter(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af02      	add	r7, sp, #8
	filter_config.IdType = FDCAN_STANDARD_ID;	//FDCAN_STANDARD_ID;
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <init_CAN_filter+0x48>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
	filter_config.FilterIndex = 0;
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <init_CAN_filter+0x48>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	605a      	str	r2, [r3, #4]
	filter_config.FilterType = FDCAN_FILTER_MASK;
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <init_CAN_filter+0x48>)
 80026ac:	2202      	movs	r2, #2
 80026ae:	609a      	str	r2, [r3, #8]
	filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <init_CAN_filter+0x48>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	60da      	str	r2, [r3, #12]
	filter_config.FilterID1 = 0x0;
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <init_CAN_filter+0x48>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
	filter_config.FilterID2 = 0x0;
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <init_CAN_filter+0x48>)
 80026be:	2200      	movs	r2, #0
 80026c0:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 80026c2:	4907      	ldr	r1, [pc, #28]	; (80026e0 <init_CAN_filter+0x48>)
 80026c4:	4807      	ldr	r0, [pc, #28]	; (80026e4 <init_CAN_filter+0x4c>)
 80026c6:	f000 fc61 	bl	8002f8c <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
 80026ca:	2300      	movs	r3, #0
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2300      	movs	r3, #0
 80026d0:	2202      	movs	r2, #2
 80026d2:	2102      	movs	r1, #2
 80026d4:	4803      	ldr	r0, [pc, #12]	; (80026e4 <init_CAN_filter+0x4c>)
 80026d6:	f000 fcb3 	bl	8003040 <HAL_FDCAN_ConfigGlobalFilter>
	//HAL_FDCAN_ConfigExtendedIdMask(&hfdcan1, 0);
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000984 	.word	0x20000984
 80026e4:	20000ed4 	.word	0x20000ed4

080026e8 <update_CAN_acceptance_mask>:

/*
 * Меняем CAN-маску
 */
void update_CAN_acceptance_mask(uint8_t string_size, char* string_pointer)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	71fb      	strb	r3, [r7, #7]
	switch (string_size)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d002      	beq.n	8002700 <update_CAN_acceptance_mask+0x18>
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d00f      	beq.n	800271e <update_CAN_acceptance_mask+0x36>
		filter_config.FilterID2 = convert_hex_char_sequence_to_int_value(CAN_MASK_LENGHT_EXTENDED, string_pointer);
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
		break;
	}
	}
}
 80026fe:	e01e      	b.n	800273e <update_CAN_acceptance_mask+0x56>
		filter_config.IdType = FDCAN_STANDARD_ID;
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <update_CAN_acceptance_mask+0x60>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
		filter_config.FilterID2 = convert_hex_char_sequence_to_int_value(CAN_MASK_LENGHT_STANDARD, string_pointer);
 8002706:	6839      	ldr	r1, [r7, #0]
 8002708:	2003      	movs	r0, #3
 800270a:	f7ff fd2f 	bl	800216c <convert_hex_char_sequence_to_int_value>
 800270e:	4602      	mov	r2, r0
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <update_CAN_acceptance_mask+0x60>)
 8002712:	615a      	str	r2, [r3, #20]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 8002714:	490c      	ldr	r1, [pc, #48]	; (8002748 <update_CAN_acceptance_mask+0x60>)
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <update_CAN_acceptance_mask+0x64>)
 8002718:	f000 fc38 	bl	8002f8c <HAL_FDCAN_ConfigFilter>
		break;
 800271c:	e00f      	b.n	800273e <update_CAN_acceptance_mask+0x56>
		filter_config.IdType = FDCAN_EXTENDED_ID;
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <update_CAN_acceptance_mask+0x60>)
 8002720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002724:	601a      	str	r2, [r3, #0]
		filter_config.FilterID2 = convert_hex_char_sequence_to_int_value(CAN_MASK_LENGHT_EXTENDED, string_pointer);
 8002726:	6839      	ldr	r1, [r7, #0]
 8002728:	2008      	movs	r0, #8
 800272a:	f7ff fd1f 	bl	800216c <convert_hex_char_sequence_to_int_value>
 800272e:	4602      	mov	r2, r0
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <update_CAN_acceptance_mask+0x60>)
 8002732:	615a      	str	r2, [r3, #20]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 8002734:	4904      	ldr	r1, [pc, #16]	; (8002748 <update_CAN_acceptance_mask+0x60>)
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <update_CAN_acceptance_mask+0x64>)
 8002738:	f000 fc28 	bl	8002f8c <HAL_FDCAN_ConfigFilter>
		break;
 800273c:	bf00      	nop
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000984 	.word	0x20000984
 800274c:	20000ed4 	.word	0x20000ed4

08002750 <update_CAN_acceptance_code>:

void update_CAN_acceptance_code(uint8_t string_size, char* string_pointer)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
	switch (string_size)
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d002      	beq.n	8002768 <update_CAN_acceptance_code+0x18>
 8002762:	2b08      	cmp	r3, #8
 8002764:	d00f      	beq.n	8002786 <update_CAN_acceptance_code+0x36>
		filter_config.FilterID1 = convert_hex_char_sequence_to_int_value(CAN_CODE_LENGHT_EXTENDED, string_pointer);
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
		break;
	}
	}
}
 8002766:	e01e      	b.n	80027a6 <update_CAN_acceptance_code+0x56>
		filter_config.IdType = FDCAN_STANDARD_ID;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <update_CAN_acceptance_code+0x60>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
		filter_config.FilterID1 = convert_hex_char_sequence_to_int_value(CAN_CODE_LENGHT_STANDARD, string_pointer);
 800276e:	6839      	ldr	r1, [r7, #0]
 8002770:	2003      	movs	r0, #3
 8002772:	f7ff fcfb 	bl	800216c <convert_hex_char_sequence_to_int_value>
 8002776:	4602      	mov	r2, r0
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <update_CAN_acceptance_code+0x60>)
 800277a:	611a      	str	r2, [r3, #16]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800277c:	490c      	ldr	r1, [pc, #48]	; (80027b0 <update_CAN_acceptance_code+0x60>)
 800277e:	480d      	ldr	r0, [pc, #52]	; (80027b4 <update_CAN_acceptance_code+0x64>)
 8002780:	f000 fc04 	bl	8002f8c <HAL_FDCAN_ConfigFilter>
		break;
 8002784:	e00f      	b.n	80027a6 <update_CAN_acceptance_code+0x56>
		filter_config.IdType = FDCAN_EXTENDED_ID;
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <update_CAN_acceptance_code+0x60>)
 8002788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800278c:	601a      	str	r2, [r3, #0]
		filter_config.FilterID1 = convert_hex_char_sequence_to_int_value(CAN_CODE_LENGHT_EXTENDED, string_pointer);
 800278e:	6839      	ldr	r1, [r7, #0]
 8002790:	2008      	movs	r0, #8
 8002792:	f7ff fceb 	bl	800216c <convert_hex_char_sequence_to_int_value>
 8002796:	4602      	mov	r2, r0
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <update_CAN_acceptance_code+0x60>)
 800279a:	611a      	str	r2, [r3, #16]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800279c:	4904      	ldr	r1, [pc, #16]	; (80027b0 <update_CAN_acceptance_code+0x60>)
 800279e:	4805      	ldr	r0, [pc, #20]	; (80027b4 <update_CAN_acceptance_code+0x64>)
 80027a0:	f000 fbf4 	bl	8002f8c <HAL_FDCAN_ConfigFilter>
		break;
 80027a4:	bf00      	nop
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000984 	.word	0x20000984
 80027b4:	20000ed4 	.word	0x20000ed4

080027b8 <status_flag_byte_0>:

char status_flag_byte_0(FDCAN_ProtocolStatusTypeDef protocol_status)
{
 80027b8:	b084      	sub	sp, #16
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	f107 0c10 	add.w	ip, r7, #16
 80027c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t value_tmp = protocol_status.LastErrorCode;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	71fb      	strb	r3, [r7, #7]
	value_tmp = value_tmp | (CAN_TX_success_flag << 3);
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <status_flag_byte_0+0x40>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	b25a      	sxtb	r2, r3
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	4313      	orrs	r3, r2
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	71fb      	strb	r3, [r7, #7]
	return convert_int_value_to_ascii_char(value_tmp);
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 f839 	bl	8002858 <convert_int_value_to_ascii_char>
 80027e6:	4603      	mov	r3, r0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027f2:	b004      	add	sp, #16
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000ecc 	.word	0x20000ecc

080027fc <status_flag_byte_1>:

char status_flag_byte_1(FDCAN_ProtocolStatusTypeDef protocol_status)
{
 80027fc:	b084      	sub	sp, #16
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	f107 0c10 	add.w	ip, r7, #16
 8002808:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t value_tmp = CAN_RX_success_flag;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <status_flag_byte_1+0x58>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	71fb      	strb	r3, [r7, #7]
	value_tmp = value_tmp | (protocol_status.ErrorPassive << 1);
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	4313      	orrs	r3, r2
 800281e:	71fb      	strb	r3, [r7, #7]
	value_tmp = value_tmp | (protocol_status.Warning << 2);
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	b2da      	uxtb	r2, r3
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	4313      	orrs	r3, r2
 800282c:	71fb      	strb	r3, [r7, #7]
	value_tmp = value_tmp | (protocol_status.BusOff << 3);
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	b2db      	uxtb	r3, r3
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	b2da      	uxtb	r2, r3
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	4313      	orrs	r3, r2
 800283a:	71fb      	strb	r3, [r7, #7]
	return convert_int_value_to_ascii_char(value_tmp);
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f80a 	bl	8002858 <convert_int_value_to_ascii_char>
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002850:	b004      	add	sp, #16
 8002852:	4770      	bx	lr
 8002854:	20000ecf 	.word	0x20000ecf

08002858 <convert_int_value_to_ascii_char>:

char convert_int_value_to_ascii_char(uint8_t int_value)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
	char value_return = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]
	if (int_value < 10)
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	2b09      	cmp	r3, #9
 800286a:	d803      	bhi.n	8002874 <convert_int_value_to_ascii_char+0x1c>
	{
		value_return = int_value + '0';
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	3330      	adds	r3, #48	; 0x30
 8002870:	73fb      	strb	r3, [r7, #15]
 8002872:	e002      	b.n	800287a <convert_int_value_to_ascii_char+0x22>
	}
	else
	{
		value_return = int_value + 'A' - 10;
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	3337      	adds	r3, #55	; 0x37
 8002878:	73fb      	strb	r3, [r7, #15]
	}
	return value_return;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002888:	480d      	ldr	r0, [pc, #52]	; (80028c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800288a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800288c:	480d      	ldr	r0, [pc, #52]	; (80028c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800288e:	490e      	ldr	r1, [pc, #56]	; (80028c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002890:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <LoopForever+0xe>)
  movs r3, #0
 8002892:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002894:	e002      	b.n	800289c <LoopCopyDataInit>

08002896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800289a:	3304      	adds	r3, #4

0800289c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800289c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800289e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a0:	d3f9      	bcc.n	8002896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028a2:	4a0b      	ldr	r2, [pc, #44]	; (80028d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028a4:	4c0b      	ldr	r4, [pc, #44]	; (80028d4 <LoopForever+0x16>)
  movs r3, #0
 80028a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a8:	e001      	b.n	80028ae <LoopFillZerobss>

080028aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028ac:	3204      	adds	r2, #4

080028ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b0:	d3fb      	bcc.n	80028aa <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028b2:	f7fe fb8d 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028b6:	f004 fb13 	bl	8006ee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028ba:	f7fd ff33 	bl	8000724 <main>

080028be <LoopForever>:

LoopForever:
    b LoopForever
 80028be:	e7fe      	b.n	80028be <LoopForever>
  ldr   r0, =_estack
 80028c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80028c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80028cc:	08007270 	.word	0x08007270
  ldr r2, =_sbss
 80028d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80028d4:	20001184 	.word	0x20001184

080028d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028d8:	e7fe      	b.n	80028d8 <ADC1_2_IRQHandler>

080028da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f000 f94d 	bl	8002b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ea:	2000      	movs	r0, #0
 80028ec:	f000 f80e 	bl	800290c <HAL_InitTick>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	71fb      	strb	r3, [r7, #7]
 80028fa:	e001      	b.n	8002900 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028fc:	f7fe fa0c 	bl	8000d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002900:	79fb      	ldrb	r3, [r7, #7]

}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002918:	4b16      	ldr	r3, [pc, #88]	; (8002974 <HAL_InitTick+0x68>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d022      	beq.n	8002966 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002920:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_InitTick+0x6c>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_InitTick+0x68>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800292c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	4618      	mov	r0, r3
 8002936:	f000 f95c 	bl	8002bf2 <HAL_SYSTICK_Config>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10f      	bne.n	8002960 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b0f      	cmp	r3, #15
 8002944:	d809      	bhi.n	800295a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002946:	2200      	movs	r2, #0
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	f04f 30ff 	mov.w	r0, #4294967295
 800294e:	f000 f924 	bl	8002b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002952:	4a0a      	ldr	r2, [pc, #40]	; (800297c <HAL_InitTick+0x70>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	e007      	b.n	800296a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	e004      	b.n	800296a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	e001      	b.n	800296a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800296a:	7bfb      	ldrb	r3, [r7, #15]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000008 	.word	0x20000008
 8002978:	20000000 	.word	0x20000000
 800297c:	20000004 	.word	0x20000004

08002980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_IncTick+0x1c>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_IncTick+0x20>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4413      	add	r3, r2
 800298e:	4a03      	ldr	r2, [pc, #12]	; (800299c <HAL_IncTick+0x1c>)
 8002990:	6013      	str	r3, [r2, #0]
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	20001180 	.word	0x20001180
 80029a0:	20000008 	.word	0x20000008

080029a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return uwTick;
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_GetTick+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20001180 	.word	0x20001180

080029bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ee:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	60d3      	str	r3, [r2, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <__NVIC_GetPriorityGrouping+0x18>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 0307 	and.w	r3, r3, #7
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db0b      	blt.n	8002a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <__NVIC_EnableIRQ+0x38>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2001      	movs	r0, #1
 8002a42:	fa00 f202 	lsl.w	r2, r0, r2
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	db0a      	blt.n	8002a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	490c      	ldr	r1, [pc, #48]	; (8002aa8 <__NVIC_SetPriority+0x4c>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	0112      	lsls	r2, r2, #4
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a84:	e00a      	b.n	8002a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4908      	ldr	r1, [pc, #32]	; (8002aac <__NVIC_SetPriority+0x50>)
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	3b04      	subs	r3, #4
 8002a94:	0112      	lsls	r2, r2, #4
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	440b      	add	r3, r1
 8002a9a:	761a      	strb	r2, [r3, #24]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000e100 	.word	0xe000e100
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f1c3 0307 	rsb	r3, r3, #7
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	bf28      	it	cs
 8002ace:	2304      	movcs	r3, #4
 8002ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d902      	bls.n	8002ae0 <NVIC_EncodePriority+0x30>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3b03      	subs	r3, #3
 8002ade:	e000      	b.n	8002ae2 <NVIC_EncodePriority+0x32>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	401a      	ands	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af8:	f04f 31ff 	mov.w	r1, #4294967295
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	43d9      	mvns	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	4313      	orrs	r3, r2
         );
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3724      	adds	r7, #36	; 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b1c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <__NVIC_SystemReset+0x20>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b28:	4903      	ldr	r1, [pc, #12]	; (8002b38 <__NVIC_SystemReset+0x20>)
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <__NVIC_SystemReset+0x24>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60cb      	str	r3, [r1, #12]
 8002b30:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <__NVIC_SystemReset+0x1c>
 8002b38:	e000ed00 	.word	0xe000ed00
 8002b3c:	05fa0004 	.word	0x05fa0004

08002b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b50:	d301      	bcc.n	8002b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00f      	b.n	8002b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <SysTick_Config+0x40>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5e:	210f      	movs	r1, #15
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	f7ff ff7a 	bl	8002a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <SysTick_Config+0x40>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <SysTick_Config+0x40>)
 8002b70:	2207      	movs	r2, #7
 8002b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	e000e010 	.word	0xe000e010

08002b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff15 	bl	80029bc <__NVIC_SetPriorityGrouping>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba8:	f7ff ff2c 	bl	8002a04 <__NVIC_GetPriorityGrouping>
 8002bac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff ff7c 	bl	8002ab0 <NVIC_EncodePriority>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff4b 	bl	8002a5c <__NVIC_SetPriority>
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff1f 	bl	8002a20 <__NVIC_EnableIRQ>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002bee:	f7ff ff93 	bl	8002b18 <__NVIC_SystemReset>

08002bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffa0 	bl	8002b40 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d00d      	beq.n	8002c3e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2204      	movs	r2, #4
 8002c26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
 8002c3c:	e047      	b.n	8002cce <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 020e 	bic.w	r2, r2, #14
 8002c4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c80:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c8a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00c      	beq.n	8002cae <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ca2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002cac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
    }
  }
  return status;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e147      	b.n	8002f7a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe f82e 	bl	8000d60 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0210 	bic.w	r2, r2, #16
 8002d12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d14:	f7ff fe46 	bl	80029a4 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002d1a:	e012      	b.n	8002d42 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002d1c:	f7ff fe42 	bl	80029a4 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b0a      	cmp	r3, #10
 8002d28:	d90b      	bls.n	8002d42 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2203      	movs	r2, #3
 8002d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e11b      	b.n	8002f7a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d0e5      	beq.n	8002d1c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d60:	f7ff fe20 	bl	80029a4 <HAL_GetTick>
 8002d64:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d66:	e012      	b.n	8002d8e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002d68:	f7ff fe1c 	bl	80029a4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b0a      	cmp	r3, #10
 8002d74:	d90b      	bls.n	8002d8e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2203      	movs	r2, #3
 8002d86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0f5      	b.n	8002f7a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0e5      	beq.n	8002d68 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0202 	orr.w	r2, r2, #2
 8002daa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a74      	ldr	r2, [pc, #464]	; (8002f84 <HAL_FDCAN_Init+0x2ac>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d103      	bne.n	8002dbe <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002db6:	4a74      	ldr	r2, [pc, #464]	; (8002f88 <HAL_FDCAN_Init+0x2b0>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7c1b      	ldrb	r3, [r3, #16]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d108      	bne.n	8002dd8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd4:	619a      	str	r2, [r3, #24]
 8002dd6:	e007      	b.n	8002de8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	7c5b      	ldrb	r3, [r3, #17]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d108      	bne.n	8002e02 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dfe:	619a      	str	r2, [r3, #24]
 8002e00:	e007      	b.n	8002e12 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e10:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7c9b      	ldrb	r3, [r3, #18]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d108      	bne.n	8002e2c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e28:	619a      	str	r2, [r3, #24]
 8002e2a:	e007      	b.n	8002e3c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e3a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002e60:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0210 	bic.w	r2, r2, #16
 8002e70:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d108      	bne.n	8002e8c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0204 	orr.w	r2, r2, #4
 8002e88:	619a      	str	r2, [r3, #24]
 8002e8a:	e02c      	b.n	8002ee6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d028      	beq.n	8002ee6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d01c      	beq.n	8002ed6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eaa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0210 	orr.w	r2, r2, #16
 8002eba:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d110      	bne.n	8002ee6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0220 	orr.w	r2, r2, #32
 8002ed2:	619a      	str	r2, [r3, #24]
 8002ed4:	e007      	b.n	8002ee6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699a      	ldr	r2, [r3, #24]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0220 	orr.w	r2, r2, #32
 8002ee4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ef6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002efe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002f0e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002f10:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f1a:	d115      	bne.n	8002f48 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	3b01      	subs	r3, #1
 8002f28:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f2a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	3b01      	subs	r3, #1
 8002f32:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002f34:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002f44:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f46:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fd90 	bl	8003a84 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40006400 	.word	0x40006400
 8002f88:	40006500 	.word	0x40006500

08002f8c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f9c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d002      	beq.n	8002faa <HAL_FDCAN_ConfigFilter+0x1e>
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d13d      	bne.n	8003026 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d119      	bne.n	8002fe6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002fbe:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002fc6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e01d      	b.n	8003022 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	075a      	lsls	r2, r3, #29
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	079a      	lsls	r2, r3, #30
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3304      	adds	r3, #4
 800301a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e006      	b.n	8003034 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302a:	f043 0202 	orr.w	r2, r3, #2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
  }
}
 8003034:	4618      	mov	r0, r3
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d116      	bne.n	8003088 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003062:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	011a      	lsls	r2, r3, #4
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	431a      	orrs	r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	431a      	orrs	r2, r3
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	431a      	orrs	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e006      	b.n	8003096 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308c:	f043 0204 	orr.w	r2, r3, #4
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_FDCAN_ConfigTimestampCounter>:
  * @param  TimestampPrescaler Timestamp Counter Prescaler.
  *         This parameter can be a value of @arg FDCAN_Timestamp_Prescaler.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTimestampCounter(FDCAN_HandleTypeDef *hfdcan, uint32_t TimestampPrescaler)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TIMESTAMP_PRESCALER(TimestampPrescaler));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10b      	bne.n	80030d0 <HAL_FDCAN_ConfigTimestampCounter+0x2e>
  {
    /* Configure prescaler */
    MODIFY_REG(hfdcan->Instance->TSCC, FDCAN_TSCC_TCP, TimestampPrescaler);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	621a      	str	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e006      	b.n	80030de <HAL_FDCAN_ConfigTimestampCounter+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d4:	f043 0204 	orr.w	r2, r3, #4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
  }
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_FDCAN_EnableTimestampCounter>:
  * @param  TimestampOperation Timestamp counter operation.
  *         This parameter can be a value of @arg FDCAN_Timestamp.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTimestampCounter(FDCAN_HandleTypeDef *hfdcan, uint32_t TimestampOperation)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TIMESTAMP(TimestampOperation));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10b      	bne.n	8003118 <HAL_FDCAN_EnableTimestampCounter+0x2e>
  {
    /* Enable timestamp counter */
    MODIFY_REG(hfdcan->Instance->TSCC, FDCAN_TSCC_TSS, TimestampOperation);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f023 0103 	bic.w	r1, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	621a      	str	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	e006      	b.n	8003126 <HAL_FDCAN_EnableTimestampCounter+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311c:	f043 0204 	orr.w	r2, r3, #4
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_FDCAN_GetTimestampCounter>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Timestamp counter value
  */
uint16_t HAL_FDCAN_GetTimestampCounter(FDCAN_HandleTypeDef *hfdcan)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  return (uint16_t)(hfdcan->Instance->TSCV);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	b29b      	uxth	r3, r3
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d110      	bne.n	8003184 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e006      	b.n	8003192 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d156      	bne.n	8003264 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699a      	ldr	r2, [r3, #24]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031c6:	e011      	b.n	80031ec <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b0a      	cmp	r3, #10
 80031cc:	d90b      	bls.n	80031e6 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d2:	f043 0201 	orr.w	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2203      	movs	r2, #3
 80031de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e045      	b.n	8003272 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3301      	adds	r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0e6      	beq.n	80031c8 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0210 	bic.w	r2, r2, #16
 800320c:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800320e:	e011      	b.n	8003234 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b0a      	cmp	r3, #10
 8003214:	d90b      	bls.n	800322e <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2203      	movs	r2, #3
 8003226:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e021      	b.n	8003272 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3301      	adds	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b08      	cmp	r3, #8
 8003240:	d0e6      	beq.n	8003210 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699a      	ldr	r2, [r3, #24]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0202 	orr.w	r2, r2, #2
 8003250:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e006      	b.n	8003272 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003268:	f043 0208 	orr.w	r2, r3, #8
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b086      	sub	sp, #24
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d12c      	bne.n	80032f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800329e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e023      	b.n	80032fe <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fc2f 	bl	8003b30 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2101      	movs	r1, #1
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	fa01 f202 	lsl.w	r2, r1, r2
 80032de:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80032e2:	2201      	movs	r2, #1
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e006      	b.n	80032fe <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f4:	f043 0208 	orr.w	r2, r3, #8
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003308:	b480      	push	{r7}
 800330a:	b08b      	sub	sp, #44	; 0x2c
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800331c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800331e:	7efb      	ldrb	r3, [r7, #27]
 8003320:	2b02      	cmp	r3, #2
 8003322:	f040 80bc 	bne.w	800349e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d121      	bne.n	8003370 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	2b00      	cmp	r3, #0
 800333a:	d107      	bne.n	800334c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0af      	b.n	80034ac <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	440b      	add	r3, r1
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
 800336e:	e020      	b.n	80033b2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	2b00      	cmp	r3, #0
 800337e:	d107      	bne.n	8003390 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003384:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e08d      	b.n	80034ac <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	440b      	add	r3, r1
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d107      	bne.n	80033d6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	0c9b      	lsrs	r3, r3, #18
 80033cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e005      	b.n	80033e2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	3304      	adds	r3, #4
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	0e1b      	lsrs	r3, r3, #24
 8003434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	0fda      	lsrs	r2, r3, #31
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	3304      	adds	r3, #4
 800344a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003450:	2300      	movs	r3, #0
 8003452:	623b      	str	r3, [r7, #32]
 8003454:	e00a      	b.n	800346c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	441a      	add	r2, r3
 800345c:	6839      	ldr	r1, [r7, #0]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	440b      	add	r3, r1
 8003462:	7812      	ldrb	r2, [r2, #0]
 8003464:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	3301      	adds	r3, #1
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8003474:	5cd3      	ldrb	r3, [r2, r3]
 8003476:	461a      	mov	r2, r3
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	4293      	cmp	r3, r2
 800347c:	d3eb      	bcc.n	8003456 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b40      	cmp	r3, #64	; 0x40
 8003482:	d105      	bne.n	8003490 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800348e:	e004      	b.n	800349a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	e006      	b.n	80034ac <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a2:	f043 0208 	orr.w	r2, r3, #8
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	372c      	adds	r7, #44	; 0x2c
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	08007234 	.word	0x08007234

080034bc <HAL_FDCAN_GetProtocolStatus>:
  *         the configuration information for the specified FDCAN.
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(FDCAN_HandleTypeDef *hfdcan, FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0207 	and.w	r2, r3, #7
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f003 0207 	and.w	r2, r3, #7
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0218 	and.w	r2, r3, #24
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	f003 0201 	and.w	r2, r3, #1
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	099b      	lsrs	r3, r3, #6
 80034fe:	f003 0201 	and.w	r2, r3, #1
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	09db      	lsrs	r3, r3, #7
 800350a:	f003 0201 	and.w	r2, r3, #1
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	0adb      	lsrs	r3, r3, #11
 8003516:	f003 0201 	and.w	r2, r3, #1
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	0b1b      	lsrs	r3, r3, #12
 8003522:	f003 0201 	and.w	r2, r3, #1
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	0b5b      	lsrs	r3, r3, #13
 800352e:	f003 0201 	and.w	r2, r3, #1
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	0b9b      	lsrs	r3, r3, #14
 800353a:	f003 0201 	and.w	r2, r3, #1
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800356e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d003      	beq.n	800357e <HAL_FDCAN_ActivateNotification+0x22>
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2b02      	cmp	r3, #2
 800357a:	f040 80c8 	bne.w	800370e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d03b      	beq.n	8003612 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d004      	beq.n	80035ae <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d031      	beq.n	8003612 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d004      	beq.n	80035c2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d027      	beq.n	8003612 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d004      	beq.n	80035d6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01d      	beq.n	8003612 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d004      	beq.n	80035ea <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d013      	beq.n	8003612 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d004      	beq.n	80035fe <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00c      	beq.n	8003622 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	2b00      	cmp	r3, #0
 800362a:	d004      	beq.n	8003636 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d13b      	bne.n	80036ae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d131      	bne.n	80036ae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d127      	bne.n	80036ae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003664:	2b00      	cmp	r3, #0
 8003666:	d004      	beq.n	8003672 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d11d      	bne.n	80036ae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	d113      	bne.n	80036ae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800368c:	2b00      	cmp	r3, #0
 800368e:	d004      	beq.n	800369a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00c      	beq.n	80036be <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0202 	orr.w	r2, r2, #2
 80036bc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d009      	beq.n	80036dc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	430a      	orrs	r2, r1
 8003708:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	e006      	b.n	800371c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003712:	f043 0202 	orr.w	r2, r3, #2
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
  }
}
 800371c:	4618      	mov	r0, r3
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003736:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003744:	4013      	ands	r3, r2
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	6a3a      	ldr	r2, [r7, #32]
 800375c:	4013      	ands	r3, r2
 800375e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800376a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	4013      	ands	r3, r2
 8003776:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8003782:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003796:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800379a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4013      	ands	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d006      	beq.n	80037d2 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2240      	movs	r2, #64	; 0x40
 80037ca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f939 	bl	8003a44 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01b      	beq.n	8003818 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d014      	beq.n	8003818 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037f6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4013      	ands	r3, r2
 8003804:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800380e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003810:	6939      	ldr	r1, [r7, #16]
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8f7 	bl	8003a06 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003824:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003826:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f8b6 	bl	800399a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6a3a      	ldr	r2, [r7, #32]
 800383a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800383c:	6a39      	ldr	r1, [r7, #32]
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f8b6 	bl	80039b0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003852:	69f9      	ldr	r1, [r7, #28]
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f8b6 	bl	80039c6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00e      	beq.n	8003886 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800387e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8ab 	bl	80039dc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01a      	beq.n	80038ca <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d013      	beq.n	80038ca <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80038aa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4013      	ands	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80038c2:	68f9      	ldr	r1, [r7, #12]
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f893 	bl	80039f0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038ee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f893 	bl	8003a1c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00e      	beq.n	8003922 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800391a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f887 	bl	8003a30 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d011      	beq.n	8003954 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003946:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d007      	beq.n	800396a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003962:	6979      	ldr	r1, [r7, #20]
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f881 	bl	8003a6c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d009      	beq.n	8003984 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f863 	bl	8003a58 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003992:	bf00      	nop
 8003994:	3728      	adds	r7, #40	; 0x28
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003a8c:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003a8e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a9e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	041a      	lsls	r2, r3, #16
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ac4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	061a      	lsls	r2, r3, #24
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	e005      	b.n	8003b12 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d3f3      	bcc.n	8003b06 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	4000a400 	.word	0x4000a400

08003b30 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	; 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003b4e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	e00a      	b.n	8003b72 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003b64:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003b6a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b70:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003b7c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003b82:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003b88:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	440b      	add	r3, r1
 8003ba2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	3304      	adds	r3, #4
 8003bae:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	e020      	b.n	8003c04 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	3303      	adds	r3, #3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	440b      	add	r3, r1
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003bda:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3301      	adds	r3, #1
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	440b      	add	r3, r1
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003be8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	440a      	add	r2, r1
 8003bf0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003bf2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	3304      	adds	r3, #4
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	4a06      	ldr	r2, [pc, #24]	; (8003c24 <FDCAN_CopyMessageToRAM+0xf4>)
 8003c0c:	5cd3      	ldrb	r3, [r2, r3]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d3d5      	bcc.n	8003bc2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8003c16:	bf00      	nop
 8003c18:	3724      	adds	r7, #36	; 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	08007234 	.word	0x08007234

08003c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c36:	e15a      	b.n	8003eee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	fa01 f303 	lsl.w	r3, r1, r3
 8003c44:	4013      	ands	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 814c 	beq.w	8003ee8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d00b      	beq.n	8003c70 <HAL_GPIO_Init+0x48>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d007      	beq.n	8003c70 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c64:	2b11      	cmp	r3, #17
 8003c66:	d003      	beq.n	8003c70 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b12      	cmp	r3, #18
 8003c6e:	d130      	bne.n	8003cd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	f003 0201 	and.w	r2, r3, #1
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	2203      	movs	r2, #3
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d003      	beq.n	8003d12 <HAL_GPIO_Init+0xea>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b12      	cmp	r3, #18
 8003d10:	d123      	bne.n	8003d5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	08da      	lsrs	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3208      	adds	r2, #8
 8003d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	220f      	movs	r2, #15
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	08da      	lsrs	r2, r3, #3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3208      	adds	r2, #8
 8003d54:	6939      	ldr	r1, [r7, #16]
 8003d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	2203      	movs	r2, #3
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 0203 	and.w	r2, r3, #3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80a6 	beq.w	8003ee8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d9c:	4b5b      	ldr	r3, [pc, #364]	; (8003f0c <HAL_GPIO_Init+0x2e4>)
 8003d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da0:	4a5a      	ldr	r2, [pc, #360]	; (8003f0c <HAL_GPIO_Init+0x2e4>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6613      	str	r3, [r2, #96]	; 0x60
 8003da8:	4b58      	ldr	r3, [pc, #352]	; (8003f0c <HAL_GPIO_Init+0x2e4>)
 8003daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003db4:	4a56      	ldr	r2, [pc, #344]	; (8003f10 <HAL_GPIO_Init+0x2e8>)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	089b      	lsrs	r3, r3, #2
 8003dba:	3302      	adds	r3, #2
 8003dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	220f      	movs	r2, #15
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dde:	d01f      	beq.n	8003e20 <HAL_GPIO_Init+0x1f8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a4c      	ldr	r2, [pc, #304]	; (8003f14 <HAL_GPIO_Init+0x2ec>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d019      	beq.n	8003e1c <HAL_GPIO_Init+0x1f4>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a4b      	ldr	r2, [pc, #300]	; (8003f18 <HAL_GPIO_Init+0x2f0>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <HAL_GPIO_Init+0x1f0>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a4a      	ldr	r2, [pc, #296]	; (8003f1c <HAL_GPIO_Init+0x2f4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00d      	beq.n	8003e14 <HAL_GPIO_Init+0x1ec>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a49      	ldr	r2, [pc, #292]	; (8003f20 <HAL_GPIO_Init+0x2f8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d007      	beq.n	8003e10 <HAL_GPIO_Init+0x1e8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a48      	ldr	r2, [pc, #288]	; (8003f24 <HAL_GPIO_Init+0x2fc>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d101      	bne.n	8003e0c <HAL_GPIO_Init+0x1e4>
 8003e08:	2305      	movs	r3, #5
 8003e0a:	e00a      	b.n	8003e22 <HAL_GPIO_Init+0x1fa>
 8003e0c:	2306      	movs	r3, #6
 8003e0e:	e008      	b.n	8003e22 <HAL_GPIO_Init+0x1fa>
 8003e10:	2304      	movs	r3, #4
 8003e12:	e006      	b.n	8003e22 <HAL_GPIO_Init+0x1fa>
 8003e14:	2303      	movs	r3, #3
 8003e16:	e004      	b.n	8003e22 <HAL_GPIO_Init+0x1fa>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e002      	b.n	8003e22 <HAL_GPIO_Init+0x1fa>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <HAL_GPIO_Init+0x1fa>
 8003e20:	2300      	movs	r3, #0
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	f002 0203 	and.w	r2, r2, #3
 8003e28:	0092      	lsls	r2, r2, #2
 8003e2a:	4093      	lsls	r3, r2
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e32:	4937      	ldr	r1, [pc, #220]	; (8003f10 <HAL_GPIO_Init+0x2e8>)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	3302      	adds	r3, #2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e40:	4b39      	ldr	r3, [pc, #228]	; (8003f28 <HAL_GPIO_Init+0x300>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e64:	4a30      	ldr	r2, [pc, #192]	; (8003f28 <HAL_GPIO_Init+0x300>)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003e6a:	4b2f      	ldr	r3, [pc, #188]	; (8003f28 <HAL_GPIO_Init+0x300>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e8e:	4a26      	ldr	r2, [pc, #152]	; (8003f28 <HAL_GPIO_Init+0x300>)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e94:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <HAL_GPIO_Init+0x300>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <HAL_GPIO_Init+0x300>)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ebe:	4b1a      	ldr	r3, [pc, #104]	; (8003f28 <HAL_GPIO_Init+0x300>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ee2:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <HAL_GPIO_Init+0x300>)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3301      	adds	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f47f ae9d 	bne.w	8003c38 <HAL_GPIO_Init+0x10>
  }
}
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40010000 	.word	0x40010000
 8003f14:	48000400 	.word	0x48000400
 8003f18:	48000800 	.word	0x48000800
 8003f1c:	48000c00 	.word	0x48000c00
 8003f20:	48001000 	.word	0x48001000
 8003f24:	48001400 	.word	0x48001400
 8003f28:	40010400 	.word	0x40010400

08003f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	807b      	strh	r3, [r7, #2]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f3c:	787b      	ldrb	r3, [r7, #1]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f42:	887a      	ldrh	r2, [r7, #2]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f48:	e002      	b.n	8003f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d141      	bne.n	8003fee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f6a:	4b4b      	ldr	r3, [pc, #300]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f76:	d131      	bne.n	8003fdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f78:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7e:	4a46      	ldr	r2, [pc, #280]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f88:	4b43      	ldr	r3, [pc, #268]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f90:	4a41      	ldr	r2, [pc, #260]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f98:	4b40      	ldr	r3, [pc, #256]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2232      	movs	r2, #50	; 0x32
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	4a3f      	ldr	r2, [pc, #252]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	0c9b      	lsrs	r3, r3, #18
 8003faa:	3301      	adds	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fae:	e002      	b.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fb6:	4b38      	ldr	r3, [pc, #224]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc2:	d102      	bne.n	8003fca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f2      	bne.n	8003fb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fca:	4b33      	ldr	r3, [pc, #204]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd6:	d158      	bne.n	800408a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e057      	b.n	800408c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fdc:	4b2e      	ldr	r3, [pc, #184]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe2:	4a2d      	ldr	r2, [pc, #180]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fec:	e04d      	b.n	800408a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff4:	d141      	bne.n	800407a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004002:	d131      	bne.n	8004068 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004004:	4b24      	ldr	r3, [pc, #144]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400a:	4a23      	ldr	r2, [pc, #140]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004010:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004014:	4b20      	ldr	r3, [pc, #128]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800401c:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004022:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004024:	4b1d      	ldr	r3, [pc, #116]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2232      	movs	r2, #50	; 0x32
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	0c9b      	lsrs	r3, r3, #18
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800403a:	e002      	b.n	8004042 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3b01      	subs	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004042:	4b15      	ldr	r3, [pc, #84]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404e:	d102      	bne.n	8004056 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f2      	bne.n	800403c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004062:	d112      	bne.n	800408a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e011      	b.n	800408c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004078:	e007      	b.n	800408a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800407a:	4b07      	ldr	r3, [pc, #28]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004082:	4a05      	ldr	r2, [pc, #20]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004084:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004088:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40007000 	.word	0x40007000
 800409c:	20000000 	.word	0x20000000
 80040a0:	431bde83 	.word	0x431bde83

080040a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040b2:	6093      	str	r3, [r2, #8]
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40007000 	.word	0x40007000

080040c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e308      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d075      	beq.n	80041ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e2:	4ba3      	ldr	r3, [pc, #652]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040ec:	4ba0      	ldr	r3, [pc, #640]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b0c      	cmp	r3, #12
 80040fa:	d102      	bne.n	8004102 <HAL_RCC_OscConfig+0x3e>
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d002      	beq.n	8004108 <HAL_RCC_OscConfig+0x44>
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d10b      	bne.n	8004120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	4b99      	ldr	r3, [pc, #612]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d05b      	beq.n	80041cc <HAL_RCC_OscConfig+0x108>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d157      	bne.n	80041cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e2e3      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004128:	d106      	bne.n	8004138 <HAL_RCC_OscConfig+0x74>
 800412a:	4b91      	ldr	r3, [pc, #580]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a90      	ldr	r2, [pc, #576]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e01d      	b.n	8004174 <HAL_RCC_OscConfig+0xb0>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0x98>
 8004142:	4b8b      	ldr	r3, [pc, #556]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a8a      	ldr	r2, [pc, #552]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	4b88      	ldr	r3, [pc, #544]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a87      	ldr	r2, [pc, #540]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e00b      	b.n	8004174 <HAL_RCC_OscConfig+0xb0>
 800415c:	4b84      	ldr	r3, [pc, #528]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a83      	ldr	r2, [pc, #524]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b81      	ldr	r3, [pc, #516]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a80      	ldr	r2, [pc, #512]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800416e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d013      	beq.n	80041a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fe fc12 	bl	80029a4 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004184:	f7fe fc0e 	bl	80029a4 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e2a8      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004196:	4b76      	ldr	r3, [pc, #472]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0xc0>
 80041a2:	e014      	b.n	80041ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fe fbfe 	bl	80029a4 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fe fbfa 	bl	80029a4 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	; 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e294      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041be:	4b6c      	ldr	r3, [pc, #432]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0xe8>
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d075      	beq.n	80042c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041da:	4b65      	ldr	r3, [pc, #404]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041e4:	4b62      	ldr	r3, [pc, #392]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	d102      	bne.n	80041fa <HAL_RCC_OscConfig+0x136>
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d002      	beq.n	8004200 <HAL_RCC_OscConfig+0x13c>
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d11f      	bne.n	8004240 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004200:	4b5b      	ldr	r3, [pc, #364]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_RCC_OscConfig+0x154>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e267      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004218:	4b55      	ldr	r3, [pc, #340]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	061b      	lsls	r3, r3, #24
 8004226:	4952      	ldr	r1, [pc, #328]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	4313      	orrs	r3, r2
 800422a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800422c:	4b51      	ldr	r3, [pc, #324]	; (8004374 <HAL_RCC_OscConfig+0x2b0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe fb6b 	bl	800290c <HAL_InitTick>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d043      	beq.n	80042c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e253      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d023      	beq.n	8004290 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004248:	4b49      	ldr	r3, [pc, #292]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a48      	ldr	r2, [pc, #288]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800424e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fe fba6 	bl	80029a4 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800425c:	f7fe fba2 	bl	80029a4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e23c      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800426e:	4b40      	ldr	r3, [pc, #256]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427a:	4b3d      	ldr	r3, [pc, #244]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	061b      	lsls	r3, r3, #24
 8004288:	4939      	ldr	r1, [pc, #228]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
 800428e:	e01a      	b.n	80042c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004290:	4b37      	ldr	r3, [pc, #220]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a36      	ldr	r2, [pc, #216]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800429a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fe fb82 	bl	80029a4 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a4:	f7fe fb7e 	bl	80029a4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e218      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042b6:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x1e0>
 80042c2:	e000      	b.n	80042c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d03c      	beq.n	800434c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01c      	beq.n	8004314 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042da:	4b25      	ldr	r3, [pc, #148]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e0:	4a23      	ldr	r2, [pc, #140]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fe fb5b 	bl	80029a4 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f2:	f7fe fb57 	bl	80029a4 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e1f1      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004304:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ef      	beq.n	80042f2 <HAL_RCC_OscConfig+0x22e>
 8004312:	e01b      	b.n	800434c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004314:	4b16      	ldr	r3, [pc, #88]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800431a:	4a15      	ldr	r2, [pc, #84]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fe fb3e 	bl	80029a4 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432c:	f7fe fb3a 	bl	80029a4 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e1d4      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ef      	bne.n	800432c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80ab 	beq.w	80044b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435a:	2300      	movs	r3, #0
 800435c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800435e:	4b04      	ldr	r3, [pc, #16]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_RCC_OscConfig+0x2b4>
 800436a:	2301      	movs	r3, #1
 800436c:	e005      	b.n	800437a <HAL_RCC_OscConfig+0x2b6>
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000
 8004374:	20000004 	.word	0x20000004
 8004378:	2300      	movs	r3, #0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00d      	beq.n	800439a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	4baf      	ldr	r3, [pc, #700]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004382:	4aae      	ldr	r2, [pc, #696]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004388:	6593      	str	r3, [r2, #88]	; 0x58
 800438a:	4bac      	ldr	r3, [pc, #688]	; (800463c <HAL_RCC_OscConfig+0x578>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004396:	2301      	movs	r3, #1
 8004398:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800439a:	4ba9      	ldr	r3, [pc, #676]	; (8004640 <HAL_RCC_OscConfig+0x57c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d118      	bne.n	80043d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a6:	4ba6      	ldr	r3, [pc, #664]	; (8004640 <HAL_RCC_OscConfig+0x57c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4aa5      	ldr	r2, [pc, #660]	; (8004640 <HAL_RCC_OscConfig+0x57c>)
 80043ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b2:	f7fe faf7 	bl	80029a4 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ba:	f7fe faf3 	bl	80029a4 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e18d      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043cc:	4b9c      	ldr	r3, [pc, #624]	; (8004640 <HAL_RCC_OscConfig+0x57c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0f0      	beq.n	80043ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d108      	bne.n	80043f2 <HAL_RCC_OscConfig+0x32e>
 80043e0:	4b96      	ldr	r3, [pc, #600]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e6:	4a95      	ldr	r2, [pc, #596]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043f0:	e024      	b.n	800443c <HAL_RCC_OscConfig+0x378>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	d110      	bne.n	800441c <HAL_RCC_OscConfig+0x358>
 80043fa:	4b90      	ldr	r3, [pc, #576]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	4a8e      	ldr	r2, [pc, #568]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004402:	f043 0304 	orr.w	r3, r3, #4
 8004406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800440a:	4b8c      	ldr	r3, [pc, #560]	; (800463c <HAL_RCC_OscConfig+0x578>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004410:	4a8a      	ldr	r2, [pc, #552]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800441a:	e00f      	b.n	800443c <HAL_RCC_OscConfig+0x378>
 800441c:	4b87      	ldr	r3, [pc, #540]	; (800463c <HAL_RCC_OscConfig+0x578>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	4a86      	ldr	r2, [pc, #536]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800442c:	4b83      	ldr	r3, [pc, #524]	; (800463c <HAL_RCC_OscConfig+0x578>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	4a82      	ldr	r2, [pc, #520]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004434:	f023 0304 	bic.w	r3, r3, #4
 8004438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d016      	beq.n	8004472 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fe faae 	bl	80029a4 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fe faaa 	bl	80029a4 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e142      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004462:	4b76      	ldr	r3, [pc, #472]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0ed      	beq.n	800444c <HAL_RCC_OscConfig+0x388>
 8004470:	e015      	b.n	800449e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004472:	f7fe fa97 	bl	80029a4 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004478:	e00a      	b.n	8004490 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447a:	f7fe fa93 	bl	80029a4 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f241 3288 	movw	r2, #5000	; 0x1388
 8004488:	4293      	cmp	r3, r2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e12b      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004490:	4b6a      	ldr	r3, [pc, #424]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1ed      	bne.n	800447a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800449e:	7ffb      	ldrb	r3, [r7, #31]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d105      	bne.n	80044b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a4:	4b65      	ldr	r3, [pc, #404]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	4a64      	ldr	r2, [pc, #400]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80044aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d03c      	beq.n	8004536 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01c      	beq.n	80044fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044c4:	4b5d      	ldr	r3, [pc, #372]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80044c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ca:	4a5c      	ldr	r2, [pc, #368]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d4:	f7fe fa66 	bl	80029a4 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044dc:	f7fe fa62 	bl	80029a4 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e0fc      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ee:	4b53      	ldr	r3, [pc, #332]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80044f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0ef      	beq.n	80044dc <HAL_RCC_OscConfig+0x418>
 80044fc:	e01b      	b.n	8004536 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044fe:	4b4f      	ldr	r3, [pc, #316]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004504:	4a4d      	ldr	r2, [pc, #308]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450e:	f7fe fa49 	bl	80029a4 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004516:	f7fe fa45 	bl	80029a4 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e0df      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004528:	4b44      	ldr	r3, [pc, #272]	; (800463c <HAL_RCC_OscConfig+0x578>)
 800452a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1ef      	bne.n	8004516 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80d3 	beq.w	80046e6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004540:	4b3e      	ldr	r3, [pc, #248]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 030c 	and.w	r3, r3, #12
 8004548:	2b0c      	cmp	r3, #12
 800454a:	f000 808d 	beq.w	8004668 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d15a      	bne.n	800460c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004556:	4b39      	ldr	r3, [pc, #228]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a38      	ldr	r2, [pc, #224]	; (800463c <HAL_RCC_OscConfig+0x578>)
 800455c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004562:	f7fe fa1f 	bl	80029a4 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800456a:	f7fe fa1b 	bl	80029a4 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e0b5      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457c:	4b2f      	ldr	r3, [pc, #188]	; (800463c <HAL_RCC_OscConfig+0x578>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f0      	bne.n	800456a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004588:	4b2c      	ldr	r3, [pc, #176]	; (800463c <HAL_RCC_OscConfig+0x578>)
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <HAL_RCC_OscConfig+0x580>)
 800458e:	4013      	ands	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6a11      	ldr	r1, [r2, #32]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004598:	3a01      	subs	r2, #1
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045a2:	0212      	lsls	r2, r2, #8
 80045a4:	4311      	orrs	r1, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045aa:	0852      	lsrs	r2, r2, #1
 80045ac:	3a01      	subs	r2, #1
 80045ae:	0552      	lsls	r2, r2, #21
 80045b0:	4311      	orrs	r1, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045b6:	0852      	lsrs	r2, r2, #1
 80045b8:	3a01      	subs	r2, #1
 80045ba:	0652      	lsls	r2, r2, #25
 80045bc:	4311      	orrs	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045c2:	06d2      	lsls	r2, r2, #27
 80045c4:	430a      	orrs	r2, r1
 80045c6:	491d      	ldr	r1, [pc, #116]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045cc:	4b1b      	ldr	r3, [pc, #108]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1a      	ldr	r2, [pc, #104]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d8:	4b18      	ldr	r3, [pc, #96]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a17      	ldr	r2, [pc, #92]	; (800463c <HAL_RCC_OscConfig+0x578>)
 80045de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fe f9de 	bl	80029a4 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fe f9da 	bl	80029a4 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e074      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x528>
 800460a:	e06c      	b.n	80046e6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_OscConfig+0x578>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a0a      	ldr	r2, [pc, #40]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004616:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004618:	4b08      	ldr	r3, [pc, #32]	; (800463c <HAL_RCC_OscConfig+0x578>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a07      	ldr	r2, [pc, #28]	; (800463c <HAL_RCC_OscConfig+0x578>)
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <HAL_RCC_OscConfig+0x578>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a04      	ldr	r2, [pc, #16]	; (800463c <HAL_RCC_OscConfig+0x578>)
 800462a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800462e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004632:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fe f9b6 	bl	80029a4 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800463a:	e00e      	b.n	800465a <HAL_RCC_OscConfig+0x596>
 800463c:	40021000 	.word	0x40021000
 8004640:	40007000 	.word	0x40007000
 8004644:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004648:	f7fe f9ac 	bl	80029a4 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e046      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800465a:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <HAL_RCC_OscConfig+0x62c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x584>
 8004666:	e03e      	b.n	80046e6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e039      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004674:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <HAL_RCC_OscConfig+0x62c>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f003 0203 	and.w	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	429a      	cmp	r2, r3
 8004686:	d12c      	bne.n	80046e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	3b01      	subs	r3, #1
 8004694:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d123      	bne.n	80046e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d11b      	bne.n	80046e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d113      	bne.n	80046e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	085b      	lsrs	r3, r3, #1
 80046c6:	3b01      	subs	r3, #1
 80046c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d109      	bne.n	80046e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	3b01      	subs	r3, #1
 80046dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000

080046f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e11e      	b.n	800494a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800470c:	4b91      	ldr	r3, [pc, #580]	; (8004954 <HAL_RCC_ClockConfig+0x260>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d910      	bls.n	800473c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	4b8e      	ldr	r3, [pc, #568]	; (8004954 <HAL_RCC_ClockConfig+0x260>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 020f 	bic.w	r2, r3, #15
 8004722:	498c      	ldr	r1, [pc, #560]	; (8004954 <HAL_RCC_ClockConfig+0x260>)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	4313      	orrs	r3, r2
 8004728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b8a      	ldr	r3, [pc, #552]	; (8004954 <HAL_RCC_ClockConfig+0x260>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e106      	b.n	800494a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d073      	beq.n	8004830 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d129      	bne.n	80047a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004750:	4b81      	ldr	r3, [pc, #516]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0f4      	b.n	800494a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004760:	f000 f99e 	bl	8004aa0 <RCC_GetSysClockFreqFromPLLSource>
 8004764:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4a7c      	ldr	r2, [pc, #496]	; (800495c <HAL_RCC_ClockConfig+0x268>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d93f      	bls.n	80047ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800476e:	4b7a      	ldr	r3, [pc, #488]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004782:	2b00      	cmp	r3, #0
 8004784:	d033      	beq.n	80047ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800478a:	2b00      	cmp	r3, #0
 800478c:	d12f      	bne.n	80047ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800478e:	4b72      	ldr	r3, [pc, #456]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004796:	4a70      	ldr	r2, [pc, #448]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 8004798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e024      	b.n	80047ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d107      	bne.n	80047bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ac:	4b6a      	ldr	r3, [pc, #424]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0c6      	b.n	800494a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047bc:	4b66      	ldr	r3, [pc, #408]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0be      	b.n	800494a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80047cc:	f000 f8ce 	bl	800496c <HAL_RCC_GetSysClockFreq>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4a61      	ldr	r2, [pc, #388]	; (800495c <HAL_RCC_ClockConfig+0x268>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d909      	bls.n	80047ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047da:	4b5f      	ldr	r3, [pc, #380]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047e2:	4a5d      	ldr	r2, [pc, #372]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 80047e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047ea:	2380      	movs	r3, #128	; 0x80
 80047ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ee:	4b5a      	ldr	r3, [pc, #360]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f023 0203 	bic.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4957      	ldr	r1, [pc, #348]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004800:	f7fe f8d0 	bl	80029a4 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	e00a      	b.n	800481e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004808:	f7fe f8cc 	bl	80029a4 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e095      	b.n	800494a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481e:	4b4e      	ldr	r3, [pc, #312]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 020c 	and.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	429a      	cmp	r2, r3
 800482e:	d1eb      	bne.n	8004808 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d023      	beq.n	8004884 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004848:	4b43      	ldr	r3, [pc, #268]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4a42      	ldr	r2, [pc, #264]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 800484e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004852:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004860:	4b3d      	ldr	r3, [pc, #244]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004868:	4a3b      	ldr	r2, [pc, #236]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 800486a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800486e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004870:	4b39      	ldr	r3, [pc, #228]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4936      	ldr	r1, [pc, #216]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
 8004882:	e008      	b.n	8004896 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b80      	cmp	r3, #128	; 0x80
 8004888:	d105      	bne.n	8004896 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800488a:	4b33      	ldr	r3, [pc, #204]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	4a32      	ldr	r2, [pc, #200]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 8004890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004894:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004896:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <HAL_RCC_ClockConfig+0x260>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d21d      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a4:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_RCC_ClockConfig+0x260>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f023 020f 	bic.w	r2, r3, #15
 80048ac:	4929      	ldr	r1, [pc, #164]	; (8004954 <HAL_RCC_ClockConfig+0x260>)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048b4:	f7fe f876 	bl	80029a4 <HAL_GetTick>
 80048b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ba:	e00a      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048bc:	f7fe f872 	bl	80029a4 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e03b      	b.n	800494a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d2:	4b20      	ldr	r3, [pc, #128]	; (8004954 <HAL_RCC_ClockConfig+0x260>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1ed      	bne.n	80048bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4917      	ldr	r1, [pc, #92]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490f      	ldr	r1, [pc, #60]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800491e:	f000 f825 	bl	800496c <HAL_RCC_GetSysClockFreq>
 8004922:	4601      	mov	r1, r0
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <HAL_RCC_ClockConfig+0x264>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	4a0c      	ldr	r2, [pc, #48]	; (8004960 <HAL_RCC_ClockConfig+0x26c>)
 8004930:	5cd3      	ldrb	r3, [r2, r3]
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	fa21 f303 	lsr.w	r3, r1, r3
 800493a:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <HAL_RCC_ClockConfig+0x270>)
 800493c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <HAL_RCC_ClockConfig+0x274>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fd ffe2 	bl	800290c <HAL_InitTick>
 8004948:	4603      	mov	r3, r0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40022000 	.word	0x40022000
 8004958:	40021000 	.word	0x40021000
 800495c:	04c4b400 	.word	0x04c4b400
 8004960:	0800721c 	.word	0x0800721c
 8004964:	20000000 	.word	0x20000000
 8004968:	20000004 	.word	0x20000004

0800496c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004972:	4b2c      	ldr	r3, [pc, #176]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	2b04      	cmp	r3, #4
 800497c:	d102      	bne.n	8004984 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800497e:	4b2a      	ldr	r3, [pc, #168]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	e047      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b08      	cmp	r3, #8
 800498e:	d102      	bne.n	8004996 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004990:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	e03e      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004996:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b0c      	cmp	r3, #12
 80049a0:	d136      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049a2:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049ac:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	091b      	lsrs	r3, r3, #4
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	3301      	adds	r3, #1
 80049b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d10c      	bne.n	80049da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049c0:	4a1a      	ldr	r2, [pc, #104]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ca:	68d2      	ldr	r2, [r2, #12]
 80049cc:	0a12      	lsrs	r2, r2, #8
 80049ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049d2:	fb02 f303 	mul.w	r3, r2, r3
 80049d6:	617b      	str	r3, [r7, #20]
      break;
 80049d8:	e00c      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049da:	4a13      	ldr	r2, [pc, #76]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e2:	4a10      	ldr	r2, [pc, #64]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e4:	68d2      	ldr	r2, [r2, #12]
 80049e6:	0a12      	lsrs	r2, r2, #8
 80049e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049ec:	fb02 f303 	mul.w	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]
      break;
 80049f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	0e5b      	lsrs	r3, r3, #25
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	3301      	adds	r3, #1
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	e001      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a14:	693b      	ldr	r3, [r7, #16]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
 8004a28:	00f42400 	.word	0x00f42400
 8004a2c:	007a1200 	.word	0x007a1200

08004a30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a36:	681b      	ldr	r3, [r3, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000000 	.word	0x20000000

08004a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a4c:	f7ff fff0 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a50:	4601      	mov	r1, r0
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	4a04      	ldr	r2, [pc, #16]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a5e:	5cd3      	ldrb	r3, [r2, r3]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	0800722c 	.word	0x0800722c

08004a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a78:	f7ff ffda 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a7c:	4601      	mov	r1, r0
 8004a7e:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0adb      	lsrs	r3, r3, #11
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a8a:	5cd3      	ldrb	r3, [r2, r3]
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	0800722c 	.word	0x0800722c

08004aa0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aa6:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ab0:	4b1b      	ldr	r3, [pc, #108]	; (8004b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	3301      	adds	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d10c      	bne.n	8004ade <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ac4:	4a17      	ldr	r2, [pc, #92]	; (8004b24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004acc:	4a14      	ldr	r2, [pc, #80]	; (8004b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ace:	68d2      	ldr	r2, [r2, #12]
 8004ad0:	0a12      	lsrs	r2, r2, #8
 8004ad2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	617b      	str	r3, [r7, #20]
    break;
 8004adc:	e00c      	b.n	8004af8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ade:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	4a0e      	ldr	r2, [pc, #56]	; (8004b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ae8:	68d2      	ldr	r2, [r2, #12]
 8004aea:	0a12      	lsrs	r2, r2, #8
 8004aec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004af0:	fb02 f303 	mul.w	r3, r2, r3
 8004af4:	617b      	str	r3, [r7, #20]
    break;
 8004af6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	0e5b      	lsrs	r3, r3, #25
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	3301      	adds	r3, #1
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b12:	687b      	ldr	r3, [r7, #4]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40021000 	.word	0x40021000
 8004b24:	007a1200 	.word	0x007a1200
 8004b28:	00f42400 	.word	0x00f42400

08004b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b34:	2300      	movs	r3, #0
 8004b36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b38:	2300      	movs	r3, #0
 8004b3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8098 	beq.w	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b4e:	4b43      	ldr	r3, [pc, #268]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10d      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b5a:	4b40      	ldr	r3, [pc, #256]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	4a3f      	ldr	r2, [pc, #252]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b64:	6593      	str	r3, [r2, #88]	; 0x58
 8004b66:	4b3d      	ldr	r3, [pc, #244]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b72:	2301      	movs	r3, #1
 8004b74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b76:	4b3a      	ldr	r3, [pc, #232]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a39      	ldr	r2, [pc, #228]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b82:	f7fd ff0f 	bl	80029a4 <HAL_GetTick>
 8004b86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b88:	e009      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8a:	f7fd ff0b 	bl	80029a4 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d902      	bls.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b9c:	e005      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b9e:	4b30      	ldr	r3, [pc, #192]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0ef      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004baa:	7cfb      	ldrb	r3, [r7, #19]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d159      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bb0:	4b2a      	ldr	r3, [pc, #168]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01e      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d019      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bcc:	4b23      	ldr	r3, [pc, #140]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bd8:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004be8:	4b1c      	ldr	r3, [pc, #112]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bee:	4a1b      	ldr	r2, [pc, #108]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bf8:	4a18      	ldr	r2, [pc, #96]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d016      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0a:	f7fd fecb 	bl	80029a4 <HAL_GetTick>
 8004c0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c10:	e00b      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c12:	f7fd fec7 	bl	80029a4 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d902      	bls.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	74fb      	strb	r3, [r7, #19]
            break;
 8004c28:	e006      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0ec      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c38:	7cfb      	ldrb	r3, [r7, #19]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c3e:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	4903      	ldr	r1, [pc, #12]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c54:	e008      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c56:	7cfb      	ldrb	r3, [r7, #19]
 8004c58:	74bb      	strb	r3, [r7, #18]
 8004c5a:	e005      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c68:	7c7b      	ldrb	r3, [r7, #17]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d105      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6e:	4ba6      	ldr	r3, [pc, #664]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	4aa5      	ldr	r2, [pc, #660]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c86:	4ba0      	ldr	r3, [pc, #640]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f023 0203 	bic.w	r2, r3, #3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	499c      	ldr	r1, [pc, #624]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ca8:	4b97      	ldr	r3, [pc, #604]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f023 020c 	bic.w	r2, r3, #12
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	4994      	ldr	r1, [pc, #592]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cca:	4b8f      	ldr	r3, [pc, #572]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	498b      	ldr	r1, [pc, #556]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cec:	4b86      	ldr	r3, [pc, #536]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	4983      	ldr	r1, [pc, #524]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d0e:	4b7e      	ldr	r3, [pc, #504]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	497a      	ldr	r1, [pc, #488]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d30:	4b75      	ldr	r3, [pc, #468]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	4972      	ldr	r1, [pc, #456]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d52:	4b6d      	ldr	r3, [pc, #436]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	4969      	ldr	r1, [pc, #420]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d74:	4b64      	ldr	r3, [pc, #400]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	4961      	ldr	r1, [pc, #388]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d96:	4b5c      	ldr	r3, [pc, #368]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	4958      	ldr	r1, [pc, #352]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d015      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db8:	4b53      	ldr	r3, [pc, #332]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	4950      	ldr	r1, [pc, #320]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd8:	4b4b      	ldr	r3, [pc, #300]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	4a4a      	ldr	r2, [pc, #296]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004de2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d015      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004df0:	4b45      	ldr	r3, [pc, #276]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	4942      	ldr	r1, [pc, #264]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e0e:	d105      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e10:	4b3d      	ldr	r3, [pc, #244]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4a3c      	ldr	r2, [pc, #240]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d015      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e28:	4b37      	ldr	r3, [pc, #220]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	4934      	ldr	r1, [pc, #208]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e46:	d105      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e48:	4b2f      	ldr	r3, [pc, #188]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4a2e      	ldr	r2, [pc, #184]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d015      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e60:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	4926      	ldr	r1, [pc, #152]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e80:	4b21      	ldr	r3, [pc, #132]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a20      	ldr	r2, [pc, #128]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d015      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e98:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	4918      	ldr	r1, [pc, #96]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb6:	d105      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb8:	4b13      	ldr	r3, [pc, #76]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4a12      	ldr	r2, [pc, #72]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d015      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ed0:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	490a      	ldr	r1, [pc, #40]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eee:	d105      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004efc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40021000 	.word	0x40021000

08004f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e049      	b.n	8004fb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fb ff60 	bl	8000df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f000 fb24 	bl	8005598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d001      	beq.n	8004fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e04a      	b.n	800506a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a21      	ldr	r2, [pc, #132]	; (8005078 <HAL_TIM_Base_Start_IT+0xbc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d018      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x6c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffe:	d013      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x6c>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1d      	ldr	r2, [pc, #116]	; (800507c <HAL_TIM_Base_Start_IT+0xc0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x6c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1c      	ldr	r2, [pc, #112]	; (8005080 <HAL_TIM_Base_Start_IT+0xc4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x6c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <HAL_TIM_Base_Start_IT+0xc8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x6c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a19      	ldr	r2, [pc, #100]	; (8005088 <HAL_TIM_Base_Start_IT+0xcc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d115      	bne.n	8005054 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	4b17      	ldr	r3, [pc, #92]	; (800508c <HAL_TIM_Base_Start_IT+0xd0>)
 8005030:	4013      	ands	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b06      	cmp	r3, #6
 8005038:	d015      	beq.n	8005066 <HAL_TIM_Base_Start_IT+0xaa>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d011      	beq.n	8005066 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0201 	orr.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005052:	e008      	b.n	8005066 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	e000      	b.n	8005068 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005066:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40012c00 	.word	0x40012c00
 800507c:	40000400 	.word	0x40000400
 8005080:	40000800 	.word	0x40000800
 8005084:	40013400 	.word	0x40013400
 8005088:	40014000 	.word	0x40014000
 800508c:	00010007 	.word	0x00010007

08005090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d122      	bne.n	80050ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d11b      	bne.n	80050ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0202 	mvn.w	r2, #2
 80050bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa42 	bl	800555c <HAL_TIM_IC_CaptureCallback>
 80050d8:	e005      	b.n	80050e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa34 	bl	8005548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fa45 	bl	8005570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d122      	bne.n	8005140 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b04      	cmp	r3, #4
 8005106:	d11b      	bne.n	8005140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0204 	mvn.w	r2, #4
 8005110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fa18 	bl	800555c <HAL_TIM_IC_CaptureCallback>
 800512c:	e005      	b.n	800513a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fa0a 	bl	8005548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fa1b 	bl	8005570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b08      	cmp	r3, #8
 800514c:	d122      	bne.n	8005194 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b08      	cmp	r3, #8
 800515a:	d11b      	bne.n	8005194 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0208 	mvn.w	r2, #8
 8005164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2204      	movs	r2, #4
 800516a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f9ee 	bl	800555c <HAL_TIM_IC_CaptureCallback>
 8005180:	e005      	b.n	800518e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f9e0 	bl	8005548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f9f1 	bl	8005570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d122      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d11b      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0210 	mvn.w	r2, #16
 80051b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2208      	movs	r2, #8
 80051be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f9c4 	bl	800555c <HAL_TIM_IC_CaptureCallback>
 80051d4:	e005      	b.n	80051e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f9b6 	bl	8005548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f9c7 	bl	8005570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d10e      	bne.n	8005214 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b01      	cmp	r3, #1
 8005202:	d107      	bne.n	8005214 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0201 	mvn.w	r2, #1
 800520c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f990 	bl	8005534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521e:	2b80      	cmp	r3, #128	; 0x80
 8005220:	d10e      	bne.n	8005240 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	d107      	bne.n	8005240 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fb64 	bl	8005908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524e:	d10e      	bne.n	800526e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b80      	cmp	r3, #128	; 0x80
 800525c:	d107      	bne.n	800526e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fb57 	bl	800591c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d10e      	bne.n	800529a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d107      	bne.n	800529a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f975 	bl	8005584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d10e      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d107      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f06f 0220 	mvn.w	r2, #32
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fb17 	bl	80058f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052d4:	d10f      	bne.n	80052f6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052e4:	d107      	bne.n	80052f6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80052ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fb1d 	bl	8005930 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005304:	d10f      	bne.n	8005326 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005314:	d107      	bne.n	8005326 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800531e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fb0f 	bl	8005944 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005334:	d10f      	bne.n	8005356 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005344:	d107      	bne.n	8005356 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800534e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fb01 	bl	8005958 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005360:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005364:	d10f      	bne.n	8005386 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005370:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005374:	d107      	bne.n	8005386 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800537e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 faf3 	bl	800596c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_TIM_ConfigClockSource+0x18>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e0b9      	b.n	800551c <HAL_TIM_ConfigClockSource+0x18c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80053c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b70      	cmp	r3, #112	; 0x70
 80053e2:	d02e      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0xb2>
 80053e4:	2b70      	cmp	r3, #112	; 0x70
 80053e6:	d812      	bhi.n	800540e <HAL_TIM_ConfigClockSource+0x7e>
 80053e8:	2b30      	cmp	r3, #48	; 0x30
 80053ea:	f000 8084 	beq.w	80054f6 <HAL_TIM_ConfigClockSource+0x166>
 80053ee:	2b30      	cmp	r3, #48	; 0x30
 80053f0:	d806      	bhi.n	8005400 <HAL_TIM_ConfigClockSource+0x70>
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d07f      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x166>
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d07d      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x166>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d07b      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80053fe:	e084      	b.n	800550a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8005400:	2b50      	cmp	r3, #80	; 0x50
 8005402:	d048      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0x106>
 8005404:	2b60      	cmp	r3, #96	; 0x60
 8005406:	d056      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0x126>
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d064      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x146>
      break;
 800540c:	e07d      	b.n	800550a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800540e:	4a45      	ldr	r2, [pc, #276]	; (8005524 <HAL_TIM_ConfigClockSource+0x194>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d070      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x166>
 8005414:	4a43      	ldr	r2, [pc, #268]	; (8005524 <HAL_TIM_ConfigClockSource+0x194>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d809      	bhi.n	800542e <HAL_TIM_ConfigClockSource+0x9e>
 800541a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541e:	d027      	beq.n	8005470 <HAL_TIM_ConfigClockSource+0xe0>
 8005420:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005424:	d067      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x166>
 8005426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542a:	d06d      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800542c:	e06d      	b.n	800550a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800542e:	4a3e      	ldr	r2, [pc, #248]	; (8005528 <HAL_TIM_ConfigClockSource+0x198>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d060      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x166>
 8005434:	4a3d      	ldr	r2, [pc, #244]	; (800552c <HAL_TIM_ConfigClockSource+0x19c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d05d      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x166>
 800543a:	4a3d      	ldr	r2, [pc, #244]	; (8005530 <HAL_TIM_ConfigClockSource+0x1a0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d05a      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8005440:	e063      	b.n	800550a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6899      	ldr	r1, [r3, #8]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f000 f9ad 	bl	80057b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005464:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	609a      	str	r2, [r3, #8]
      break;
 800546e:	e04c      	b.n	800550a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	6899      	ldr	r1, [r3, #8]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f000 f996 	bl	80057b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005492:	609a      	str	r2, [r3, #8]
      break;
 8005494:	e039      	b.n	800550a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6859      	ldr	r1, [r3, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	461a      	mov	r2, r3
 80054a4:	f000 f908 	bl	80056b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2150      	movs	r1, #80	; 0x50
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 f961 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 80054b4:	e029      	b.n	800550a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6859      	ldr	r1, [r3, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f000 f927 	bl	8005716 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2160      	movs	r1, #96	; 0x60
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f951 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 80054d4:	e019      	b.n	800550a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6859      	ldr	r1, [r3, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f000 f8e8 	bl	80056b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2140      	movs	r1, #64	; 0x40
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f941 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 80054f4:	e009      	b.n	800550a <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4619      	mov	r1, r3
 8005500:	4610      	mov	r0, r2
 8005502:	f000 f938 	bl	8005776 <TIM_ITRx_SetConfig>
        break;
 8005506:	e000      	b.n	800550a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8005508:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	00100020 	.word	0x00100020
 8005528:	00100040 	.word	0x00100040
 800552c:	00100070 	.word	0x00100070
 8005530:	00100030 	.word	0x00100030

08005534 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a3c      	ldr	r2, [pc, #240]	; (800569c <TIM_Base_SetConfig+0x104>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00f      	beq.n	80055d0 <TIM_Base_SetConfig+0x38>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b6:	d00b      	beq.n	80055d0 <TIM_Base_SetConfig+0x38>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a39      	ldr	r2, [pc, #228]	; (80056a0 <TIM_Base_SetConfig+0x108>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d007      	beq.n	80055d0 <TIM_Base_SetConfig+0x38>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a38      	ldr	r2, [pc, #224]	; (80056a4 <TIM_Base_SetConfig+0x10c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_Base_SetConfig+0x38>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a37      	ldr	r2, [pc, #220]	; (80056a8 <TIM_Base_SetConfig+0x110>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d108      	bne.n	80055e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2d      	ldr	r2, [pc, #180]	; (800569c <TIM_Base_SetConfig+0x104>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01b      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f0:	d017      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2a      	ldr	r2, [pc, #168]	; (80056a0 <TIM_Base_SetConfig+0x108>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d013      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a29      	ldr	r2, [pc, #164]	; (80056a4 <TIM_Base_SetConfig+0x10c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00f      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a28      	ldr	r2, [pc, #160]	; (80056a8 <TIM_Base_SetConfig+0x110>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00b      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a27      	ldr	r2, [pc, #156]	; (80056ac <TIM_Base_SetConfig+0x114>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d007      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <TIM_Base_SetConfig+0x118>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d003      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a25      	ldr	r2, [pc, #148]	; (80056b4 <TIM_Base_SetConfig+0x11c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d108      	bne.n	8005634 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a10      	ldr	r2, [pc, #64]	; (800569c <TIM_Base_SetConfig+0x104>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00f      	beq.n	8005680 <TIM_Base_SetConfig+0xe8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a11      	ldr	r2, [pc, #68]	; (80056a8 <TIM_Base_SetConfig+0x110>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00b      	beq.n	8005680 <TIM_Base_SetConfig+0xe8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a10      	ldr	r2, [pc, #64]	; (80056ac <TIM_Base_SetConfig+0x114>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d007      	beq.n	8005680 <TIM_Base_SetConfig+0xe8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a0f      	ldr	r2, [pc, #60]	; (80056b0 <TIM_Base_SetConfig+0x118>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_Base_SetConfig+0xe8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a0e      	ldr	r2, [pc, #56]	; (80056b4 <TIM_Base_SetConfig+0x11c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d103      	bne.n	8005688 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	615a      	str	r2, [r3, #20]
}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40000400 	.word	0x40000400
 80056a4:	40000800 	.word	0x40000800
 80056a8:	40013400 	.word	0x40013400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800

080056b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f023 0201 	bic.w	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f023 030a 	bic.w	r3, r3, #10
 80056f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005716:	b480      	push	{r7}
 8005718:	b087      	sub	sp, #28
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f023 0210 	bic.w	r2, r3, #16
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	031b      	lsls	r3, r3, #12
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005752:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800578c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	f043 0307 	orr.w	r3, r3, #7
 800579c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	609a      	str	r2, [r3, #8]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	021a      	lsls	r2, r3, #8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	609a      	str	r2, [r3, #8]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005804:	2302      	movs	r3, #2
 8005806:	e065      	b.n	80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a2c      	ldr	r2, [pc, #176]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a2b      	ldr	r2, [pc, #172]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d108      	bne.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005842:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005858:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1b      	ldr	r2, [pc, #108]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d018      	beq.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587e:	d013      	beq.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00e      	beq.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a17      	ldr	r2, [pc, #92]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d009      	beq.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a12      	ldr	r2, [pc, #72]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d10c      	bne.n	80058c2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40013400 	.word	0x40013400
 80058e8:	40000400 	.word	0x40000400
 80058ec:	40000800 	.word	0x40000800
 80058f0:	40014000 	.word	0x40014000

080058f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e042      	b.n	8005a18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005998:	2b00      	cmp	r3, #0
 800599a:	d106      	bne.n	80059aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7fb fa67 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2224      	movs	r2, #36	; 0x24
 80059ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fb38 	bl	8006038 <UART_SetConfig>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e022      	b.n	8005a18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fdd4 	bl	8006588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fe5b 	bl	80066cc <UART_CheckIdleState>
 8005a16:	4603      	mov	r3, r0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	f040 8083 	bne.w	8005b42 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <HAL_UART_Transmit+0x28>
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e07b      	b.n	8005b44 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Transmit+0x3a>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e074      	b.n	8005b44 <HAL_UART_Transmit+0x124>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2221      	movs	r2, #33	; 0x21
 8005a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a72:	f7fc ff97 	bl	80029a4 <HAL_GetTick>
 8005a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	88fa      	ldrh	r2, [r7, #6]
 8005a7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a90:	d108      	bne.n	8005aa4 <HAL_UART_Transmit+0x84>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	e003      	b.n	8005aac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005ab4:	e02c      	b.n	8005b10 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2180      	movs	r1, #128	; 0x80
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fe4b 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e039      	b.n	8005b44 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	3302      	adds	r3, #2
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	e007      	b.n	8005afe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	781a      	ldrb	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	3301      	adds	r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	3b01      	subs	r3, #1
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1cc      	bne.n	8005ab6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2200      	movs	r2, #0
 8005b24:	2140      	movs	r1, #64	; 0x40
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fe18 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e006      	b.n	8005b44 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005b42:	2302      	movs	r3, #2
  }
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	4613      	mov	r3, r2
 8005b58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	f040 80bc 	bne.w	8005cde <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <HAL_UART_Receive_IT+0x26>
 8005b6c:	88fb      	ldrh	r3, [r7, #6]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e0b4      	b.n	8005ce0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_UART_Receive_IT+0x38>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e0ad      	b.n	8005ce0 <HAL_UART_Receive_IT+0x194>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	88fa      	ldrh	r2, [r7, #6]
 8005b96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb0:	d10e      	bne.n	8005bd0 <HAL_UART_Receive_IT+0x84>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d105      	bne.n	8005bc6 <HAL_UART_Receive_IT+0x7a>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005bc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bc4:	e02d      	b.n	8005c22 <HAL_UART_Receive_IT+0xd6>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	22ff      	movs	r2, #255	; 0xff
 8005bca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bce:	e028      	b.n	8005c22 <HAL_UART_Receive_IT+0xd6>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10d      	bne.n	8005bf4 <HAL_UART_Receive_IT+0xa8>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <HAL_UART_Receive_IT+0x9e>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	22ff      	movs	r2, #255	; 0xff
 8005be4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005be8:	e01b      	b.n	8005c22 <HAL_UART_Receive_IT+0xd6>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	227f      	movs	r2, #127	; 0x7f
 8005bee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bf2:	e016      	b.n	8005c22 <HAL_UART_Receive_IT+0xd6>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bfc:	d10d      	bne.n	8005c1a <HAL_UART_Receive_IT+0xce>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d104      	bne.n	8005c10 <HAL_UART_Receive_IT+0xc4>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	227f      	movs	r2, #127	; 0x7f
 8005c0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c0e:	e008      	b.n	8005c22 <HAL_UART_Receive_IT+0xd6>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	223f      	movs	r2, #63	; 0x3f
 8005c14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c18:	e003      	b.n	8005c22 <HAL_UART_Receive_IT+0xd6>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2222      	movs	r2, #34	; 0x22
 8005c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0201 	orr.w	r2, r2, #1
 8005c40:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c4a:	d12a      	bne.n	8005ca2 <HAL_UART_Receive_IT+0x156>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d324      	bcc.n	8005ca2 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c60:	d107      	bne.n	8005c72 <HAL_UART_Receive_IT+0x126>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d103      	bne.n	8005c72 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a1f      	ldr	r2, [pc, #124]	; (8005cec <HAL_UART_Receive_IT+0x1a0>)
 8005c6e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005c70:	e002      	b.n	8005c78 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a1e      	ldr	r2, [pc, #120]	; (8005cf0 <HAL_UART_Receive_IT+0x1a4>)
 8005c76:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c9e:	609a      	str	r2, [r3, #8]
 8005ca0:	e01b      	b.n	8005cda <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005caa:	d107      	bne.n	8005cbc <HAL_UART_Receive_IT+0x170>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d103      	bne.n	8005cbc <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4a0f      	ldr	r2, [pc, #60]	; (8005cf4 <HAL_UART_Receive_IT+0x1a8>)
 8005cb8:	66da      	str	r2, [r3, #108]	; 0x6c
 8005cba:	e002      	b.n	8005cc2 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a0e      	ldr	r2, [pc, #56]	; (8005cf8 <HAL_UART_Receive_IT+0x1ac>)
 8005cc0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005cd8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e000      	b.n	8005ce0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005cde:	2302      	movs	r3, #2
  }
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	08006b61 	.word	0x08006b61
 8005cf0:	08006a59 	.word	0x08006a59
 8005cf4:	080069ad 	.word	0x080069ad
 8005cf8:	08006903 	.word	0x08006903

08005cfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d22:	4013      	ands	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d118      	bne.n	8005d5e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d013      	beq.n	8005d5e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d104      	bne.n	8005d4a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d009      	beq.n	8005d5e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8145 	beq.w	8005fde <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	4798      	blx	r3
      }
      return;
 8005d5c:	e13f      	b.n	8005fde <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80e8 	beq.w	8005f36 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4ba1      	ldr	r3, [pc, #644]	; (8005ff0 <HAL_UART_IRQHandler+0x2f4>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d105      	bne.n	8005d7c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4ba0      	ldr	r3, [pc, #640]	; (8005ff4 <HAL_UART_IRQHandler+0x2f8>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 80dd 	beq.w	8005f36 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d010      	beq.n	8005da8 <HAL_UART_IRQHandler+0xac>
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2201      	movs	r2, #1
 8005d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	f043 0201 	orr.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d010      	beq.n	8005dd4 <HAL_UART_IRQHandler+0xd8>
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00b      	beq.n	8005dd4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dca:	f043 0204 	orr.w	r2, r3, #4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d010      	beq.n	8005e00 <HAL_UART_IRQHandler+0x104>
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00b      	beq.n	8005e00 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2204      	movs	r2, #4
 8005dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	f043 0202 	orr.w	r2, r3, #2
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d015      	beq.n	8005e36 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4b76      	ldr	r3, [pc, #472]	; (8005ff0 <HAL_UART_IRQHandler+0x2f4>)
 8005e18:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2208      	movs	r2, #8
 8005e24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2c:	f043 0208 	orr.w	r2, r3, #8
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d011      	beq.n	8005e64 <HAL_UART_IRQHandler+0x168>
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00c      	beq.n	8005e64 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5a:	f043 0220 	orr.w	r2, r3, #32
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 80b9 	beq.w	8005fe2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d011      	beq.n	8005e9e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d104      	bne.n	8005e8e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d007      	beq.n	8005e9e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb0:	2b40      	cmp	r3, #64	; 0x40
 8005eb2:	d004      	beq.n	8005ebe <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d031      	beq.n	8005f22 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fccc 	bl	800685c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ece:	2b40      	cmp	r3, #64	; 0x40
 8005ed0:	d123      	bne.n	8005f1a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d013      	beq.n	8005f12 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eee:	4a42      	ldr	r2, [pc, #264]	; (8005ff8 <HAL_UART_IRQHandler+0x2fc>)
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fc fe87 	bl	8002c0a <HAL_DMA_Abort_IT>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d017      	beq.n	8005f32 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f10:	e00f      	b.n	8005f32 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f886 	bl	8006024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f18:	e00b      	b.n	8005f32 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f882 	bl	8006024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f20:	e007      	b.n	8005f32 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f87e 	bl	8006024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005f30:	e057      	b.n	8005fe2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f32:	bf00      	nop
    return;
 8005f34:	e055      	b.n	8005fe2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00d      	beq.n	8005f5c <HAL_UART_IRQHandler+0x260>
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d008      	beq.n	8005f5c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fe87 	bl	8006c68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f5a:	e045      	b.n	8005fe8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d012      	beq.n	8005f8c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d008      	beq.n	8005f8c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d031      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
    }
    return;
 8005f8a:	e02c      	b.n	8005fe6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d008      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x2ac>
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fc94 	bl	80068ce <UART_EndTransmit_IT>
    return;
 8005fa6:	e01f      	b.n	8005fe8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x2c8>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fe67 	bl	8006c90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fc2:	e011      	b.n	8005fe8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00c      	beq.n	8005fe8 <HAL_UART_IRQHandler+0x2ec>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	da09      	bge.n	8005fe8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fe51 	bl	8006c7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fda:	bf00      	nop
 8005fdc:	e004      	b.n	8005fe8 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005fde:	bf00      	nop
 8005fe0:	e002      	b.n	8005fe8 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005fe6:	bf00      	nop
  }
}
 8005fe8:	3720      	adds	r7, #32
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	10000001 	.word	0x10000001
 8005ff4:	04000120 	.word	0x04000120
 8005ff8:	080068a3 	.word	0x080068a3

08005ffc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006038:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800603c:	b088      	sub	sp, #32
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	4313      	orrs	r3, r2
 800605c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	4313      	orrs	r3, r2
 8006066:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4bb0      	ldr	r3, [pc, #704]	; (8006330 <UART_SetConfig+0x2f8>)
 8006070:	4013      	ands	r3, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	69f9      	ldr	r1, [r7, #28]
 8006078:	430b      	orrs	r3, r1
 800607a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4aa5      	ldr	r2, [pc, #660]	; (8006334 <UART_SetConfig+0x2fc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80060b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	69f9      	ldr	r1, [r7, #28]
 80060c0:	430b      	orrs	r3, r1
 80060c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ca:	f023 010f 	bic.w	r1, r3, #15
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a96      	ldr	r2, [pc, #600]	; (8006338 <UART_SetConfig+0x300>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d121      	bne.n	8006128 <UART_SetConfig+0xf0>
 80060e4:	4b95      	ldr	r3, [pc, #596]	; (800633c <UART_SetConfig+0x304>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d816      	bhi.n	8006120 <UART_SetConfig+0xe8>
 80060f2:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <UART_SetConfig+0xc0>)
 80060f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f8:	08006109 	.word	0x08006109
 80060fc:	08006115 	.word	0x08006115
 8006100:	0800610f 	.word	0x0800610f
 8006104:	0800611b 	.word	0x0800611b
 8006108:	2301      	movs	r3, #1
 800610a:	76fb      	strb	r3, [r7, #27]
 800610c:	e0be      	b.n	800628c <UART_SetConfig+0x254>
 800610e:	2302      	movs	r3, #2
 8006110:	76fb      	strb	r3, [r7, #27]
 8006112:	e0bb      	b.n	800628c <UART_SetConfig+0x254>
 8006114:	2304      	movs	r3, #4
 8006116:	76fb      	strb	r3, [r7, #27]
 8006118:	e0b8      	b.n	800628c <UART_SetConfig+0x254>
 800611a:	2308      	movs	r3, #8
 800611c:	76fb      	strb	r3, [r7, #27]
 800611e:	e0b5      	b.n	800628c <UART_SetConfig+0x254>
 8006120:	2310      	movs	r3, #16
 8006122:	76fb      	strb	r3, [r7, #27]
 8006124:	bf00      	nop
 8006126:	e0b1      	b.n	800628c <UART_SetConfig+0x254>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a84      	ldr	r2, [pc, #528]	; (8006340 <UART_SetConfig+0x308>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d134      	bne.n	800619c <UART_SetConfig+0x164>
 8006132:	4b82      	ldr	r3, [pc, #520]	; (800633c <UART_SetConfig+0x304>)
 8006134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006138:	f003 030c 	and.w	r3, r3, #12
 800613c:	2b0c      	cmp	r3, #12
 800613e:	d829      	bhi.n	8006194 <UART_SetConfig+0x15c>
 8006140:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <UART_SetConfig+0x110>)
 8006142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006146:	bf00      	nop
 8006148:	0800617d 	.word	0x0800617d
 800614c:	08006195 	.word	0x08006195
 8006150:	08006195 	.word	0x08006195
 8006154:	08006195 	.word	0x08006195
 8006158:	08006189 	.word	0x08006189
 800615c:	08006195 	.word	0x08006195
 8006160:	08006195 	.word	0x08006195
 8006164:	08006195 	.word	0x08006195
 8006168:	08006183 	.word	0x08006183
 800616c:	08006195 	.word	0x08006195
 8006170:	08006195 	.word	0x08006195
 8006174:	08006195 	.word	0x08006195
 8006178:	0800618f 	.word	0x0800618f
 800617c:	2300      	movs	r3, #0
 800617e:	76fb      	strb	r3, [r7, #27]
 8006180:	e084      	b.n	800628c <UART_SetConfig+0x254>
 8006182:	2302      	movs	r3, #2
 8006184:	76fb      	strb	r3, [r7, #27]
 8006186:	e081      	b.n	800628c <UART_SetConfig+0x254>
 8006188:	2304      	movs	r3, #4
 800618a:	76fb      	strb	r3, [r7, #27]
 800618c:	e07e      	b.n	800628c <UART_SetConfig+0x254>
 800618e:	2308      	movs	r3, #8
 8006190:	76fb      	strb	r3, [r7, #27]
 8006192:	e07b      	b.n	800628c <UART_SetConfig+0x254>
 8006194:	2310      	movs	r3, #16
 8006196:	76fb      	strb	r3, [r7, #27]
 8006198:	bf00      	nop
 800619a:	e077      	b.n	800628c <UART_SetConfig+0x254>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a68      	ldr	r2, [pc, #416]	; (8006344 <UART_SetConfig+0x30c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d120      	bne.n	80061e8 <UART_SetConfig+0x1b0>
 80061a6:	4b65      	ldr	r3, [pc, #404]	; (800633c <UART_SetConfig+0x304>)
 80061a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d00f      	beq.n	80061d4 <UART_SetConfig+0x19c>
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d802      	bhi.n	80061be <UART_SetConfig+0x186>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <UART_SetConfig+0x190>
 80061bc:	e010      	b.n	80061e0 <UART_SetConfig+0x1a8>
 80061be:	2b20      	cmp	r3, #32
 80061c0:	d005      	beq.n	80061ce <UART_SetConfig+0x196>
 80061c2:	2b30      	cmp	r3, #48	; 0x30
 80061c4:	d009      	beq.n	80061da <UART_SetConfig+0x1a2>
 80061c6:	e00b      	b.n	80061e0 <UART_SetConfig+0x1a8>
 80061c8:	2300      	movs	r3, #0
 80061ca:	76fb      	strb	r3, [r7, #27]
 80061cc:	e05e      	b.n	800628c <UART_SetConfig+0x254>
 80061ce:	2302      	movs	r3, #2
 80061d0:	76fb      	strb	r3, [r7, #27]
 80061d2:	e05b      	b.n	800628c <UART_SetConfig+0x254>
 80061d4:	2304      	movs	r3, #4
 80061d6:	76fb      	strb	r3, [r7, #27]
 80061d8:	e058      	b.n	800628c <UART_SetConfig+0x254>
 80061da:	2308      	movs	r3, #8
 80061dc:	76fb      	strb	r3, [r7, #27]
 80061de:	e055      	b.n	800628c <UART_SetConfig+0x254>
 80061e0:	2310      	movs	r3, #16
 80061e2:	76fb      	strb	r3, [r7, #27]
 80061e4:	bf00      	nop
 80061e6:	e051      	b.n	800628c <UART_SetConfig+0x254>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a56      	ldr	r2, [pc, #344]	; (8006348 <UART_SetConfig+0x310>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d120      	bne.n	8006234 <UART_SetConfig+0x1fc>
 80061f2:	4b52      	ldr	r3, [pc, #328]	; (800633c <UART_SetConfig+0x304>)
 80061f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061fc:	2b40      	cmp	r3, #64	; 0x40
 80061fe:	d00f      	beq.n	8006220 <UART_SetConfig+0x1e8>
 8006200:	2b40      	cmp	r3, #64	; 0x40
 8006202:	d802      	bhi.n	800620a <UART_SetConfig+0x1d2>
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <UART_SetConfig+0x1dc>
 8006208:	e010      	b.n	800622c <UART_SetConfig+0x1f4>
 800620a:	2b80      	cmp	r3, #128	; 0x80
 800620c:	d005      	beq.n	800621a <UART_SetConfig+0x1e2>
 800620e:	2bc0      	cmp	r3, #192	; 0xc0
 8006210:	d009      	beq.n	8006226 <UART_SetConfig+0x1ee>
 8006212:	e00b      	b.n	800622c <UART_SetConfig+0x1f4>
 8006214:	2300      	movs	r3, #0
 8006216:	76fb      	strb	r3, [r7, #27]
 8006218:	e038      	b.n	800628c <UART_SetConfig+0x254>
 800621a:	2302      	movs	r3, #2
 800621c:	76fb      	strb	r3, [r7, #27]
 800621e:	e035      	b.n	800628c <UART_SetConfig+0x254>
 8006220:	2304      	movs	r3, #4
 8006222:	76fb      	strb	r3, [r7, #27]
 8006224:	e032      	b.n	800628c <UART_SetConfig+0x254>
 8006226:	2308      	movs	r3, #8
 8006228:	76fb      	strb	r3, [r7, #27]
 800622a:	e02f      	b.n	800628c <UART_SetConfig+0x254>
 800622c:	2310      	movs	r3, #16
 800622e:	76fb      	strb	r3, [r7, #27]
 8006230:	bf00      	nop
 8006232:	e02b      	b.n	800628c <UART_SetConfig+0x254>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a3e      	ldr	r2, [pc, #248]	; (8006334 <UART_SetConfig+0x2fc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d124      	bne.n	8006288 <UART_SetConfig+0x250>
 800623e:	4b3f      	ldr	r3, [pc, #252]	; (800633c <UART_SetConfig+0x304>)
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006244:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800624c:	d012      	beq.n	8006274 <UART_SetConfig+0x23c>
 800624e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006252:	d802      	bhi.n	800625a <UART_SetConfig+0x222>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <UART_SetConfig+0x230>
 8006258:	e012      	b.n	8006280 <UART_SetConfig+0x248>
 800625a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800625e:	d006      	beq.n	800626e <UART_SetConfig+0x236>
 8006260:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006264:	d009      	beq.n	800627a <UART_SetConfig+0x242>
 8006266:	e00b      	b.n	8006280 <UART_SetConfig+0x248>
 8006268:	2300      	movs	r3, #0
 800626a:	76fb      	strb	r3, [r7, #27]
 800626c:	e00e      	b.n	800628c <UART_SetConfig+0x254>
 800626e:	2302      	movs	r3, #2
 8006270:	76fb      	strb	r3, [r7, #27]
 8006272:	e00b      	b.n	800628c <UART_SetConfig+0x254>
 8006274:	2304      	movs	r3, #4
 8006276:	76fb      	strb	r3, [r7, #27]
 8006278:	e008      	b.n	800628c <UART_SetConfig+0x254>
 800627a:	2308      	movs	r3, #8
 800627c:	76fb      	strb	r3, [r7, #27]
 800627e:	e005      	b.n	800628c <UART_SetConfig+0x254>
 8006280:	2310      	movs	r3, #16
 8006282:	76fb      	strb	r3, [r7, #27]
 8006284:	bf00      	nop
 8006286:	e001      	b.n	800628c <UART_SetConfig+0x254>
 8006288:	2310      	movs	r3, #16
 800628a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a28      	ldr	r2, [pc, #160]	; (8006334 <UART_SetConfig+0x2fc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	f040 80a1 	bne.w	80063da <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006298:	7efb      	ldrb	r3, [r7, #27]
 800629a:	2b08      	cmp	r3, #8
 800629c:	d823      	bhi.n	80062e6 <UART_SetConfig+0x2ae>
 800629e:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <UART_SetConfig+0x26c>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062c9 	.word	0x080062c9
 80062a8:	080062e7 	.word	0x080062e7
 80062ac:	080062d1 	.word	0x080062d1
 80062b0:	080062e7 	.word	0x080062e7
 80062b4:	080062d7 	.word	0x080062d7
 80062b8:	080062e7 	.word	0x080062e7
 80062bc:	080062e7 	.word	0x080062e7
 80062c0:	080062e7 	.word	0x080062e7
 80062c4:	080062df 	.word	0x080062df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c8:	f7fe fbbe 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 80062cc:	6178      	str	r0, [r7, #20]
        break;
 80062ce:	e00f      	b.n	80062f0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062d0:	4b1e      	ldr	r3, [pc, #120]	; (800634c <UART_SetConfig+0x314>)
 80062d2:	617b      	str	r3, [r7, #20]
        break;
 80062d4:	e00c      	b.n	80062f0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062d6:	f7fe fb49 	bl	800496c <HAL_RCC_GetSysClockFreq>
 80062da:	6178      	str	r0, [r7, #20]
        break;
 80062dc:	e008      	b.n	80062f0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062e2:	617b      	str	r3, [r7, #20]
        break;
 80062e4:	e004      	b.n	80062f0 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	76bb      	strb	r3, [r7, #26]
        break;
 80062ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 8130 	beq.w	8006558 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	4a14      	ldr	r2, [pc, #80]	; (8006350 <UART_SetConfig+0x318>)
 80062fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006302:	461a      	mov	r2, r3
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	fbb3 f3f2 	udiv	r3, r3, r2
 800630a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	4613      	mov	r3, r2
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	4413      	add	r3, r2
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	429a      	cmp	r2, r3
 800631a:	d305      	bcc.n	8006328 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	429a      	cmp	r2, r3
 8006326:	d915      	bls.n	8006354 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	76bb      	strb	r3, [r7, #26]
 800632c:	e114      	b.n	8006558 <UART_SetConfig+0x520>
 800632e:	bf00      	nop
 8006330:	cfff69f3 	.word	0xcfff69f3
 8006334:	40008000 	.word	0x40008000
 8006338:	40013800 	.word	0x40013800
 800633c:	40021000 	.word	0x40021000
 8006340:	40004400 	.word	0x40004400
 8006344:	40004800 	.word	0x40004800
 8006348:	40004c00 	.word	0x40004c00
 800634c:	00f42400 	.word	0x00f42400
 8006350:	08007244 	.word	0x08007244
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	4618      	mov	r0, r3
 8006358:	f04f 0100 	mov.w	r1, #0
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	4a87      	ldr	r2, [pc, #540]	; (8006580 <UART_SetConfig+0x548>)
 8006362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006366:	b29b      	uxth	r3, r3
 8006368:	f04f 0400 	mov.w	r4, #0
 800636c:	461a      	mov	r2, r3
 800636e:	4623      	mov	r3, r4
 8006370:	f7f9 ff5c 	bl	800022c <__aeabi_uldivmod>
 8006374:	4603      	mov	r3, r0
 8006376:	460c      	mov	r4, r1
 8006378:	4619      	mov	r1, r3
 800637a:	4622      	mov	r2, r4
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	f04f 0400 	mov.w	r4, #0
 8006384:	0214      	lsls	r4, r2, #8
 8006386:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800638a:	020b      	lsls	r3, r1, #8
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6852      	ldr	r2, [r2, #4]
 8006390:	0852      	lsrs	r2, r2, #1
 8006392:	4611      	mov	r1, r2
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	eb13 0b01 	adds.w	fp, r3, r1
 800639c:	eb44 0c02 	adc.w	ip, r4, r2
 80063a0:	4658      	mov	r0, fp
 80063a2:	4661      	mov	r1, ip
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f04f 0400 	mov.w	r4, #0
 80063ac:	461a      	mov	r2, r3
 80063ae:	4623      	mov	r3, r4
 80063b0:	f7f9 ff3c 	bl	800022c <__aeabi_uldivmod>
 80063b4:	4603      	mov	r3, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c0:	d308      	bcc.n	80063d4 <UART_SetConfig+0x39c>
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063c8:	d204      	bcs.n	80063d4 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	60da      	str	r2, [r3, #12]
 80063d2:	e0c1      	b.n	8006558 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	76bb      	strb	r3, [r7, #26]
 80063d8:	e0be      	b.n	8006558 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e2:	d164      	bne.n	80064ae <UART_SetConfig+0x476>
  {
    switch (clocksource)
 80063e4:	7efb      	ldrb	r3, [r7, #27]
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d827      	bhi.n	800643a <UART_SetConfig+0x402>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <UART_SetConfig+0x3b8>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006415 	.word	0x08006415
 80063f4:	0800641d 	.word	0x0800641d
 80063f8:	08006425 	.word	0x08006425
 80063fc:	0800643b 	.word	0x0800643b
 8006400:	0800642b 	.word	0x0800642b
 8006404:	0800643b 	.word	0x0800643b
 8006408:	0800643b 	.word	0x0800643b
 800640c:	0800643b 	.word	0x0800643b
 8006410:	08006433 	.word	0x08006433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006414:	f7fe fb18 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 8006418:	6178      	str	r0, [r7, #20]
        break;
 800641a:	e013      	b.n	8006444 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800641c:	f7fe fb2a 	bl	8004a74 <HAL_RCC_GetPCLK2Freq>
 8006420:	6178      	str	r0, [r7, #20]
        break;
 8006422:	e00f      	b.n	8006444 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006424:	4b57      	ldr	r3, [pc, #348]	; (8006584 <UART_SetConfig+0x54c>)
 8006426:	617b      	str	r3, [r7, #20]
        break;
 8006428:	e00c      	b.n	8006444 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800642a:	f7fe fa9f 	bl	800496c <HAL_RCC_GetSysClockFreq>
 800642e:	6178      	str	r0, [r7, #20]
        break;
 8006430:	e008      	b.n	8006444 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006436:	617b      	str	r3, [r7, #20]
        break;
 8006438:	e004      	b.n	8006444 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	76bb      	strb	r3, [r7, #26]
        break;
 8006442:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 8086 	beq.w	8006558 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	4a4b      	ldr	r2, [pc, #300]	; (8006580 <UART_SetConfig+0x548>)
 8006452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006456:	461a      	mov	r2, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	fbb3 f3f2 	udiv	r3, r3, r2
 800645e:	005a      	lsls	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	085b      	lsrs	r3, r3, #1
 8006466:	441a      	add	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006470:	b29b      	uxth	r3, r3
 8006472:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b0f      	cmp	r3, #15
 8006478:	d916      	bls.n	80064a8 <UART_SetConfig+0x470>
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006480:	d212      	bcs.n	80064a8 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f023 030f 	bic.w	r3, r3, #15
 800648a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	b29b      	uxth	r3, r3
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	b29a      	uxth	r2, r3
 8006498:	89fb      	ldrh	r3, [r7, #14]
 800649a:	4313      	orrs	r3, r2
 800649c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	89fa      	ldrh	r2, [r7, #14]
 80064a4:	60da      	str	r2, [r3, #12]
 80064a6:	e057      	b.n	8006558 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	76bb      	strb	r3, [r7, #26]
 80064ac:	e054      	b.n	8006558 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064ae:	7efb      	ldrb	r3, [r7, #27]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d828      	bhi.n	8006506 <UART_SetConfig+0x4ce>
 80064b4:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <UART_SetConfig+0x484>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080064e9 	.word	0x080064e9
 80064c4:	080064f1 	.word	0x080064f1
 80064c8:	08006507 	.word	0x08006507
 80064cc:	080064f7 	.word	0x080064f7
 80064d0:	08006507 	.word	0x08006507
 80064d4:	08006507 	.word	0x08006507
 80064d8:	08006507 	.word	0x08006507
 80064dc:	080064ff 	.word	0x080064ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e0:	f7fe fab2 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 80064e4:	6178      	str	r0, [r7, #20]
        break;
 80064e6:	e013      	b.n	8006510 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064e8:	f7fe fac4 	bl	8004a74 <HAL_RCC_GetPCLK2Freq>
 80064ec:	6178      	str	r0, [r7, #20]
        break;
 80064ee:	e00f      	b.n	8006510 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f0:	4b24      	ldr	r3, [pc, #144]	; (8006584 <UART_SetConfig+0x54c>)
 80064f2:	617b      	str	r3, [r7, #20]
        break;
 80064f4:	e00c      	b.n	8006510 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064f6:	f7fe fa39 	bl	800496c <HAL_RCC_GetSysClockFreq>
 80064fa:	6178      	str	r0, [r7, #20]
        break;
 80064fc:	e008      	b.n	8006510 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006502:	617b      	str	r3, [r7, #20]
        break;
 8006504:	e004      	b.n	8006510 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	76bb      	strb	r3, [r7, #26]
        break;
 800650e:	bf00      	nop
    }

    if (pclk != 0U)
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d020      	beq.n	8006558 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	4a19      	ldr	r2, [pc, #100]	; (8006580 <UART_SetConfig+0x548>)
 800651c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006520:	461a      	mov	r2, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	fbb3 f2f2 	udiv	r2, r3, r2
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	441a      	add	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	fbb2 f3f3 	udiv	r3, r2, r3
 8006538:	b29b      	uxth	r3, r3
 800653a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b0f      	cmp	r3, #15
 8006540:	d908      	bls.n	8006554 <UART_SetConfig+0x51c>
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006548:	d204      	bcs.n	8006554 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	60da      	str	r2, [r3, #12]
 8006552:	e001      	b.n	8006558 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006574:	7ebb      	ldrb	r3, [r7, #26]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3720      	adds	r7, #32
 800657a:	46bd      	mov	sp, r7
 800657c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006580:	08007244 	.word	0x08007244
 8006584:	00f42400 	.word	0x00f42400

08006588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01a      	beq.n	800669e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006686:	d10a      	bne.n	800669e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066dc:	f7fc f962 	bl	80029a4 <HAL_GetTick>
 80066e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d10e      	bne.n	800670e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f82c 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e022      	b.n	8006754 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b04      	cmp	r3, #4
 800671a:	d10e      	bne.n	800673a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800671c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f816 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e00c      	b.n	8006754 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	4613      	mov	r3, r2
 800676a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800676c:	e062      	b.n	8006834 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d05e      	beq.n	8006834 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006776:	f7fc f915 	bl	80029a4 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	429a      	cmp	r2, r3
 8006784:	d302      	bcc.n	800678c <UART_WaitOnFlagUntilTimeout+0x30>
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d11d      	bne.n	80067c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800679a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0201 	bic.w	r2, r2, #1
 80067aa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e045      	b.n	8006854 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d02e      	beq.n	8006834 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067e4:	d126      	bne.n	8006834 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067fe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2220      	movs	r2, #32
 800681c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2220      	movs	r2, #32
 8006824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e00f      	b.n	8006854 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69da      	ldr	r2, [r3, #28]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	4013      	ands	r3, r2
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	429a      	cmp	r2, r3
 8006842:	bf0c      	ite	eq
 8006844:	2301      	moveq	r3, #1
 8006846:	2300      	movne	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	429a      	cmp	r2, r3
 8006850:	d08d      	beq.n	800676e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006872:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7ff fbaf 	bl	8006024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068c6:	bf00      	nop
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff fb81 	bl	8005ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006910:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006918:	2b22      	cmp	r3, #34	; 0x22
 800691a:	d13b      	bne.n	8006994 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006924:	89bb      	ldrh	r3, [r7, #12]
 8006926:	b2d9      	uxtb	r1, r3
 8006928:	89fb      	ldrh	r3, [r7, #14]
 800692a:	b2da      	uxtb	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006930:	400a      	ands	r2, r1
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006958:	b29b      	uxth	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d122      	bne.n	80069a4 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800696c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0201 	bic.w	r2, r2, #1
 800697c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff fb3f 	bl	8006010 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006992:	e007      	b.n	80069a4 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0208 	orr.w	r2, r2, #8
 80069a2:	619a      	str	r2, [r3, #24]
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069ba:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069c2:	2b22      	cmp	r3, #34	; 0x22
 80069c4:	d13b      	bne.n	8006a3e <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80069d4:	89ba      	ldrh	r2, [r7, #12]
 80069d6:	89fb      	ldrh	r3, [r7, #14]
 80069d8:	4013      	ands	r3, r2
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d122      	bne.n	8006a4e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a16:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0201 	bic.w	r2, r2, #1
 8006a26:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff faea 	bl	8006010 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a3c:	e007      	b.n	8006a4e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0208 	orr.w	r2, r2, #8
 8006a4c:	619a      	str	r2, [r3, #24]
}
 8006a4e:	bf00      	nop
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a66:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a6e:	2b22      	cmp	r3, #34	; 0x22
 8006a70:	d168      	bne.n	8006b44 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a78:	81fb      	strh	r3, [r7, #14]
 8006a7a:	e03f      	b.n	8006afc <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a84:	893b      	ldrh	r3, [r7, #8]
 8006a86:	b2d9      	uxtb	r1, r3
 8006a88:	89bb      	ldrh	r3, [r7, #12]
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a90:	400a      	ands	r2, r1
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d11b      	bne.n	8006af6 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006acc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006adc:	f023 0301 	bic.w	r3, r3, #1
 8006ae0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff fa8d 	bl	8006010 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006af6:	89fb      	ldrh	r3, [r7, #14]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	81fb      	strh	r3, [r7, #14]
 8006afc:	89fb      	ldrh	r3, [r7, #14]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1bc      	bne.n	8006a7c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b08:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b0a:	897b      	ldrh	r3, [r7, #10]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d021      	beq.n	8006b54 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b16:	897a      	ldrh	r2, [r7, #10]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d21b      	bcs.n	8006b54 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006b2a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a0b      	ldr	r2, [pc, #44]	; (8006b5c <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006b30:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0220 	orr.w	r2, r2, #32
 8006b40:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b42:	e007      	b.n	8006b54 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0208 	orr.w	r2, r2, #8
 8006b52:	619a      	str	r2, [r3, #24]
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	08006903 	.word	0x08006903

08006b60 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b6e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b76:	2b22      	cmp	r3, #34	; 0x22
 8006b78:	d168      	bne.n	8006c4c <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b80:	82fb      	strh	r3, [r7, #22]
 8006b82:	e03f      	b.n	8006c04 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b90:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006b92:	8a3a      	ldrh	r2, [r7, #16]
 8006b94:	8abb      	ldrh	r3, [r7, #20]
 8006b96:	4013      	ands	r3, r2
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba2:	1c9a      	adds	r2, r3, #2
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d11b      	bne.n	8006bfe <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bd4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6812      	ldr	r2, [r2, #0]
 8006be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff fa09 	bl	8006010 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006bfe:	8afb      	ldrh	r3, [r7, #22]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	82fb      	strh	r3, [r7, #22]
 8006c04:	8afb      	ldrh	r3, [r7, #22]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1bc      	bne.n	8006b84 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c10:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c12:	8a7b      	ldrh	r3, [r7, #18]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d021      	beq.n	8006c5c <UART_RxISR_16BIT_FIFOEN+0xfc>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c1e:	8a7a      	ldrh	r2, [r7, #18]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d21b      	bcs.n	8006c5c <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c32:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a0b      	ldr	r2, [pc, #44]	; (8006c64 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006c38:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f042 0220 	orr.w	r2, r2, #32
 8006c48:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c4a:	e007      	b.n	8006c5c <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0208 	orr.w	r2, r2, #8
 8006c5a:	619a      	str	r2, [r3, #24]
}
 8006c5c:	bf00      	nop
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	080069ad 	.word	0x080069ad

08006c68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_UARTEx_DisableFifoMode+0x16>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e027      	b.n	8006d0a <HAL_UARTEx_DisableFifoMode+0x66>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2224      	movs	r2, #36	; 0x24
 8006cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ce8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e02d      	b.n	8006d8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2224      	movs	r2, #36	; 0x24
 8006d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0201 	bic.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f850 	bl	8006e10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e02d      	b.n	8006e06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2224      	movs	r2, #36	; 0x24
 8006db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f812 	bl	8006e10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b089      	sub	sp, #36	; 0x24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006e18:	4a2f      	ldr	r2, [pc, #188]	; (8006ed8 <UARTEx_SetNbDataToProcess+0xc8>)
 8006e1a:	f107 0314 	add.w	r3, r7, #20
 8006e1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e22:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006e26:	4a2d      	ldr	r2, [pc, #180]	; (8006edc <UARTEx_SetNbDataToProcess+0xcc>)
 8006e28:	f107 030c 	add.w	r3, r7, #12
 8006e2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e30:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d108      	bne.n	8006e4e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e4c:	e03d      	b.n	8006eca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e4e:	2308      	movs	r3, #8
 8006e50:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e52:	2308      	movs	r3, #8
 8006e54:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	0e5b      	lsrs	r3, r3, #25
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	0f5b      	lsrs	r3, r3, #29
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e76:	7fbb      	ldrb	r3, [r7, #30]
 8006e78:	7f3a      	ldrb	r2, [r7, #28]
 8006e7a:	f107 0120 	add.w	r1, r7, #32
 8006e7e:	440a      	add	r2, r1
 8006e80:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006e84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e88:	7f3a      	ldrb	r2, [r7, #28]
 8006e8a:	f107 0120 	add.w	r1, r7, #32
 8006e8e:	440a      	add	r2, r1
 8006e90:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ea0:	7ffb      	ldrb	r3, [r7, #31]
 8006ea2:	7f7a      	ldrb	r2, [r7, #29]
 8006ea4:	f107 0120 	add.w	r1, r7, #32
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006eae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006eb2:	7f7a      	ldrb	r2, [r7, #29]
 8006eb4:	f107 0120 	add.w	r1, r7, #32
 8006eb8:	440a      	add	r2, r1
 8006eba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ebe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006eca:	bf00      	nop
 8006ecc:	3724      	adds	r7, #36	; 0x24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	0800720c 	.word	0x0800720c
 8006edc:	08007214 	.word	0x08007214

08006ee0 <__libc_init_array>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	4e0d      	ldr	r6, [pc, #52]	; (8006f18 <__libc_init_array+0x38>)
 8006ee4:	4c0d      	ldr	r4, [pc, #52]	; (8006f1c <__libc_init_array+0x3c>)
 8006ee6:	1ba4      	subs	r4, r4, r6
 8006ee8:	10a4      	asrs	r4, r4, #2
 8006eea:	2500      	movs	r5, #0
 8006eec:	42a5      	cmp	r5, r4
 8006eee:	d109      	bne.n	8006f04 <__libc_init_array+0x24>
 8006ef0:	4e0b      	ldr	r6, [pc, #44]	; (8006f20 <__libc_init_array+0x40>)
 8006ef2:	4c0c      	ldr	r4, [pc, #48]	; (8006f24 <__libc_init_array+0x44>)
 8006ef4:	f000 f820 	bl	8006f38 <_init>
 8006ef8:	1ba4      	subs	r4, r4, r6
 8006efa:	10a4      	asrs	r4, r4, #2
 8006efc:	2500      	movs	r5, #0
 8006efe:	42a5      	cmp	r5, r4
 8006f00:	d105      	bne.n	8006f0e <__libc_init_array+0x2e>
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f08:	4798      	blx	r3
 8006f0a:	3501      	adds	r5, #1
 8006f0c:	e7ee      	b.n	8006eec <__libc_init_array+0xc>
 8006f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f12:	4798      	blx	r3
 8006f14:	3501      	adds	r5, #1
 8006f16:	e7f2      	b.n	8006efe <__libc_init_array+0x1e>
 8006f18:	08007264 	.word	0x08007264
 8006f1c:	08007264 	.word	0x08007264
 8006f20:	08007264 	.word	0x08007264
 8006f24:	0800726c 	.word	0x0800726c

08006f28 <memset>:
 8006f28:	4402      	add	r2, r0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d100      	bne.n	8006f32 <memset+0xa>
 8006f30:	4770      	bx	lr
 8006f32:	f803 1b01 	strb.w	r1, [r3], #1
 8006f36:	e7f9      	b.n	8006f2c <memset+0x4>

08006f38 <_init>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	bf00      	nop
 8006f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3e:	bc08      	pop	{r3}
 8006f40:	469e      	mov	lr, r3
 8006f42:	4770      	bx	lr

08006f44 <_fini>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	bf00      	nop
 8006f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4a:	bc08      	pop	{r3}
 8006f4c:	469e      	mov	lr, r3
 8006f4e:	4770      	bx	lr
