
project_12_CAN_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f2c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800642c  0800642c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800642c  0800642c  0001642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006434  08006434  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006434  08006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006438  08006438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800643c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000000c  08006448  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08006448  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001636d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002479  00000000  00000000  000363a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  00038828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c8  00000000  00000000  00039b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ef0e  00000000  00000000  0003acd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1e5  00000000  00000000  00059bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc28a  00000000  00000000  00067dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013404d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ac  00000000  00000000  001340c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080060ec 	.word	0x080060ec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080060ec 	.word	0x080060ec

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b972 	b.w	8000528 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9e08      	ldr	r6, [sp, #32]
 8000262:	4604      	mov	r4, r0
 8000264:	4688      	mov	r8, r1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d14b      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026a:	428a      	cmp	r2, r1
 800026c:	4615      	mov	r5, r2
 800026e:	d967      	bls.n	8000340 <__udivmoddi4+0xe4>
 8000270:	fab2 f282 	clz	r2, r2
 8000274:	b14a      	cbz	r2, 800028a <__udivmoddi4+0x2e>
 8000276:	f1c2 0720 	rsb	r7, r2, #32
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	fa20 f707 	lsr.w	r7, r0, r7
 8000282:	4095      	lsls	r5, r2
 8000284:	ea47 0803 	orr.w	r8, r7, r3
 8000288:	4094      	lsls	r4, r2
 800028a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028e:	0c23      	lsrs	r3, r4, #16
 8000290:	fbb8 f7fe 	udiv	r7, r8, lr
 8000294:	fa1f fc85 	uxth.w	ip, r5
 8000298:	fb0e 8817 	mls	r8, lr, r7, r8
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	fb07 f10c 	mul.w	r1, r7, ip
 80002a4:	4299      	cmp	r1, r3
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x60>
 80002a8:	18eb      	adds	r3, r5, r3
 80002aa:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ae:	f080 811b 	bcs.w	80004e8 <__udivmoddi4+0x28c>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 8118 	bls.w	80004e8 <__udivmoddi4+0x28c>
 80002b8:	3f02      	subs	r7, #2
 80002ba:	442b      	add	r3, r5
 80002bc:	1a5b      	subs	r3, r3, r1
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002cc:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d0:	45a4      	cmp	ip, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x8c>
 80002d4:	192c      	adds	r4, r5, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x290>
 80002de:	45a4      	cmp	ip, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x290>
 80002e4:	3802      	subs	r0, #2
 80002e6:	442c      	add	r4, r5
 80002e8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ec:	eba4 040c 	sub.w	r4, r4, ip
 80002f0:	2700      	movs	r7, #0
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa0>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0xbe>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80eb 	beq.w	80004e2 <__udivmoddi4+0x286>
 800030c:	2700      	movs	r7, #0
 800030e:	e9c6 0100 	strd	r0, r1, [r6]
 8000312:	4638      	mov	r0, r7
 8000314:	4639      	mov	r1, r7
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f783 	clz	r7, r3
 800031e:	2f00      	cmp	r7, #0
 8000320:	d147      	bne.n	80003b2 <__udivmoddi4+0x156>
 8000322:	428b      	cmp	r3, r1
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xd0>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2c4>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb61 0303 	sbc.w	r3, r1, r3
 8000332:	2001      	movs	r0, #1
 8000334:	4698      	mov	r8, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d0e0      	beq.n	80002fc <__udivmoddi4+0xa0>
 800033a:	e9c6 4800 	strd	r4, r8, [r6]
 800033e:	e7dd      	b.n	80002fc <__udivmoddi4+0xa0>
 8000340:	b902      	cbnz	r2, 8000344 <__udivmoddi4+0xe8>
 8000342:	deff      	udf	#255	; 0xff
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	2a00      	cmp	r2, #0
 800034a:	f040 808f 	bne.w	800046c <__udivmoddi4+0x210>
 800034e:	1b49      	subs	r1, r1, r5
 8000350:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000354:	fa1f f885 	uxth.w	r8, r5
 8000358:	2701      	movs	r7, #1
 800035a:	fbb1 fcfe 	udiv	ip, r1, lr
 800035e:	0c23      	lsrs	r3, r4, #16
 8000360:	fb0e 111c 	mls	r1, lr, ip, r1
 8000364:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000368:	fb08 f10c 	mul.w	r1, r8, ip
 800036c:	4299      	cmp	r1, r3
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x124>
 8000370:	18eb      	adds	r3, r5, r3
 8000372:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x122>
 8000378:	4299      	cmp	r1, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2bc>
 800037e:	4684      	mov	ip, r0
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	b2a3      	uxth	r3, r4
 8000384:	fbb1 f0fe 	udiv	r0, r1, lr
 8000388:	fb0e 1410 	mls	r4, lr, r0, r1
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	fb08 f800 	mul.w	r8, r8, r0
 8000394:	45a0      	cmp	r8, r4
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x14c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x14a>
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	f200 80b6 	bhi.w	8000512 <__udivmoddi4+0x2b6>
 80003a6:	4618      	mov	r0, r3
 80003a8:	eba4 0408 	sub.w	r4, r4, r8
 80003ac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b0:	e79f      	b.n	80002f2 <__udivmoddi4+0x96>
 80003b2:	f1c7 0c20 	rsb	ip, r7, #32
 80003b6:	40bb      	lsls	r3, r7
 80003b8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003bc:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c0:	fa01 f407 	lsl.w	r4, r1, r7
 80003c4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003cc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d0:	4325      	orrs	r5, r4
 80003d2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d6:	0c2c      	lsrs	r4, r5, #16
 80003d8:	fb08 3319 	mls	r3, r8, r9, r3
 80003dc:	fa1f fa8e 	uxth.w	sl, lr
 80003e0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e4:	fb09 f40a 	mul.w	r4, r9, sl
 80003e8:	429c      	cmp	r4, r3
 80003ea:	fa02 f207 	lsl.w	r2, r2, r7
 80003ee:	fa00 f107 	lsl.w	r1, r0, r7
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b0>
 80003f4:	eb1e 0303 	adds.w	r3, lr, r3
 80003f8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003fc:	f080 8087 	bcs.w	800050e <__udivmoddi4+0x2b2>
 8000400:	429c      	cmp	r4, r3
 8000402:	f240 8084 	bls.w	800050e <__udivmoddi4+0x2b2>
 8000406:	f1a9 0902 	sub.w	r9, r9, #2
 800040a:	4473      	add	r3, lr
 800040c:	1b1b      	subs	r3, r3, r4
 800040e:	b2ad      	uxth	r5, r5
 8000410:	fbb3 f0f8 	udiv	r0, r3, r8
 8000414:	fb08 3310 	mls	r3, r8, r0, r3
 8000418:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800041c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000420:	45a2      	cmp	sl, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1da>
 8000424:	eb1e 0404 	adds.w	r4, lr, r4
 8000428:	f100 33ff 	add.w	r3, r0, #4294967295
 800042c:	d26b      	bcs.n	8000506 <__udivmoddi4+0x2aa>
 800042e:	45a2      	cmp	sl, r4
 8000430:	d969      	bls.n	8000506 <__udivmoddi4+0x2aa>
 8000432:	3802      	subs	r0, #2
 8000434:	4474      	add	r4, lr
 8000436:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043a:	fba0 8902 	umull	r8, r9, r0, r2
 800043e:	eba4 040a 	sub.w	r4, r4, sl
 8000442:	454c      	cmp	r4, r9
 8000444:	46c2      	mov	sl, r8
 8000446:	464b      	mov	r3, r9
 8000448:	d354      	bcc.n	80004f4 <__udivmoddi4+0x298>
 800044a:	d051      	beq.n	80004f0 <__udivmoddi4+0x294>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2c8>
 8000450:	ebb1 050a 	subs.w	r5, r1, sl
 8000454:	eb64 0403 	sbc.w	r4, r4, r3
 8000458:	fa04 fc0c 	lsl.w	ip, r4, ip
 800045c:	40fd      	lsrs	r5, r7
 800045e:	40fc      	lsrs	r4, r7
 8000460:	ea4c 0505 	orr.w	r5, ip, r5
 8000464:	e9c6 5400 	strd	r5, r4, [r6]
 8000468:	2700      	movs	r7, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa0>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f703 	lsr.w	r7, r0, r3
 8000474:	4095      	lsls	r5, r2
 8000476:	fa01 f002 	lsl.w	r0, r1, r2
 800047a:	fa21 f303 	lsr.w	r3, r1, r3
 800047e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000482:	4338      	orrs	r0, r7
 8000484:	0c01      	lsrs	r1, r0, #16
 8000486:	fbb3 f7fe 	udiv	r7, r3, lr
 800048a:	fa1f f885 	uxth.w	r8, r5
 800048e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb07 f308 	mul.w	r3, r7, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x256>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f107 3cff 	add.w	ip, r7, #4294967295
 80004a8:	d22f      	bcs.n	800050a <__udivmoddi4+0x2ae>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d92d      	bls.n	800050a <__udivmoddi4+0x2ae>
 80004ae:	3f02      	subs	r7, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1acb      	subs	r3, r1, r3
 80004b4:	b281      	uxth	r1, r0
 80004b6:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ba:	fb0e 3310 	mls	r3, lr, r0, r3
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb00 f308 	mul.w	r3, r0, r8
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x27e>
 80004ca:	1869      	adds	r1, r5, r1
 80004cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d0:	d217      	bcs.n	8000502 <__udivmoddi4+0x2a6>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d915      	bls.n	8000502 <__udivmoddi4+0x2a6>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4429      	add	r1, r5
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e0:	e73b      	b.n	800035a <__udivmoddi4+0xfe>
 80004e2:	4637      	mov	r7, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e709      	b.n	80002fc <__udivmoddi4+0xa0>
 80004e8:	4607      	mov	r7, r0
 80004ea:	e6e7      	b.n	80002bc <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x8c>
 80004f0:	4541      	cmp	r1, r8
 80004f2:	d2ab      	bcs.n	800044c <__udivmoddi4+0x1f0>
 80004f4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f8:	eb69 020e 	sbc.w	r2, r9, lr
 80004fc:	3801      	subs	r0, #1
 80004fe:	4613      	mov	r3, r2
 8000500:	e7a4      	b.n	800044c <__udivmoddi4+0x1f0>
 8000502:	4660      	mov	r0, ip
 8000504:	e7e9      	b.n	80004da <__udivmoddi4+0x27e>
 8000506:	4618      	mov	r0, r3
 8000508:	e795      	b.n	8000436 <__udivmoddi4+0x1da>
 800050a:	4667      	mov	r7, ip
 800050c:	e7d1      	b.n	80004b2 <__udivmoddi4+0x256>
 800050e:	4681      	mov	r9, r0
 8000510:	e77c      	b.n	800040c <__udivmoddi4+0x1b0>
 8000512:	3802      	subs	r0, #2
 8000514:	442c      	add	r4, r5
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0x14c>
 8000518:	f1ac 0c02 	sub.w	ip, ip, #2
 800051c:	442b      	add	r3, r5
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x124>
 8000520:	4638      	mov	r0, r7
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xda>
 8000524:	4637      	mov	r7, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa0>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_UART_values();
 8000530:	f000 fb1a 	bl	8000b68 <init_UART_values>
  init_CAN_values();
 8000534:	f001 f93a 	bl	80017ac <init_CAN_values>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f001 fc01 	bl	8001d3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f82a 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f974 	bl	800082c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000544:	f000 f924 	bl	8000790 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000548:	f000 f8d4 	bl	80006f4 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 800054c:	f000 f88c 	bl	8000668 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <main+0x58>)
 8000552:	f003 fe01 	bl	8004158 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_RX_MESSAGE_SIZE);
 8000556:	2201      	movs	r2, #1
 8000558:	490b      	ldr	r1, [pc, #44]	; (8000588 <main+0x5c>)
 800055a:	480c      	ldr	r0, [pc, #48]	; (800058c <main+0x60>)
 800055c:	f004 fbc4 	bl	8004ce8 <HAL_UART_Receive_IT>
  HAL_FDCAN_ConfigTimestampCounter(&hfdcan1, FDCAN_TIMESTAMP_PRESC_1);
 8000560:	2100      	movs	r1, #0
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <main+0x64>)
 8000564:	f001 ff2c 	bl	80023c0 <HAL_FDCAN_ConfigTimestampCounter>
  HAL_FDCAN_EnableTimestampCounter(&hfdcan1, FDCAN_TIMESTAMP_INTERNAL);
 8000568:	2101      	movs	r1, #1
 800056a:	4809      	ldr	r0, [pc, #36]	; (8000590 <main+0x64>)
 800056c:	f001 ff4c 	bl	8002408 <HAL_FDCAN_EnableTimestampCounter>
  HAL_FDCAN_Start(&hfdcan1);
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <main+0x64>)
 8000572:	f001 ff7b 	bl	800246c <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, FDCAN_TX_BUFFER0);
 8000576:	2201      	movs	r2, #1
 8000578:	2101      	movs	r1, #1
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <main+0x64>)
 800057c:	f002 f8bc 	bl	80026f8 <HAL_FDCAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x54>
 8000582:	bf00      	nop
 8000584:	2000012c 	.word	0x2000012c
 8000588:	20000128 	.word	0x20000128
 800058c:	200001e8 	.word	0x200001e8
 8000590:	20000180 	.word	0x20000180

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b0a4      	sub	sp, #144	; 0x90
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800059e:	2238      	movs	r2, #56	; 0x38
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f005 fd99 	bl	80060da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 fd8b 	bl	80060da <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c8:	f002 fd96 	bl	80030f8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	2340      	movs	r3, #64	; 0x40
 80005d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005de:	2302      	movs	r3, #2
 80005e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005e2:	2306      	movs	r3, #6
 80005e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 48;
 80005e6:	2330      	movs	r3, #48	; 0x30
 80005e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fe2c 	bl	8003260 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800060e:	f000 f959 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2303      	movs	r3, #3
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000626:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800062a:	2101      	movs	r1, #1
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f92f 	bl	8003890 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000638:	f000 f944 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_FDCAN;
 800063c:	f241 0302 	movw	r3, #4098	; 0x1002
 8000640:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fb3a 	bl	8003cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800065a:	f000 f933 	bl	80008c4 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3790      	adds	r7, #144	; 0x90
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_FDCAN1_Init+0x84>)
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <MX_FDCAN1_Init+0x88>)
 8000670:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_FDCAN1_Init+0x84>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_FDCAN1_Init+0x84>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_FDCAN1_Init+0x84>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_FDCAN1_Init+0x84>)
 8000686:	2200      	movs	r2, #0
 8000688:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_FDCAN1_Init+0x84>)
 800068c:	2200      	movs	r2, #0
 800068e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_FDCAN1_Init+0x84>)
 8000692:	2200      	movs	r2, #0
 8000694:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_FDCAN1_Init+0x84>)
 8000698:	2208      	movs	r2, #8
 800069a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_FDCAN1_Init+0x84>)
 800069e:	2203      	movs	r2, #3
 80006a0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006a4:	2207      	movs	r2, #7
 80006a6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006aa:	2208      	movs	r2, #8
 80006ac:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006b0:	2208      	movs	r2, #8
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006b6:	2203      	movs	r2, #3
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006bc:	220a      	movs	r2, #10
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006c2:	2203      	movs	r2, #3
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_FDCAN1_Init+0x84>)
 80006da:	f001 fd17 	bl	800210c <HAL_FDCAN_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80006e4:	f000 f8ee 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000180 	.word	0x20000180
 80006f0:	40006400 	.word	0x40006400

080006f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_TIM3_Init+0x94>)
 8000714:	4a1d      	ldr	r2, [pc, #116]	; (800078c <MX_TIM3_Init+0x98>)
 8000716:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_TIM3_Init+0x94>)
 800071a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800071e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_TIM3_Init+0x94>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_TIM3_Init+0x94>)
 8000728:	2263      	movs	r2, #99	; 0x63
 800072a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_TIM3_Init+0x94>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_TIM3_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000738:	4813      	ldr	r0, [pc, #76]	; (8000788 <MX_TIM3_Init+0x94>)
 800073a:	f003 fcb5 	bl	80040a8 <HAL_TIM_Base_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000744:	f000 f8be 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_TIM3_Init+0x94>)
 8000756:	f003 fee9 	bl	800452c <HAL_TIM_ConfigClockSource>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 f8b0 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000764:	2320      	movs	r3, #32
 8000766:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_TIM3_Init+0x94>)
 8000772:	f004 f90b 	bl	800498c <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800077c:	f000 f8a2 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000012c 	.word	0x2000012c
 800078c:	40000400 	.word	0x40000400

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_USART2_UART_Init+0x94>)
 8000796:	4a24      	ldr	r2, [pc, #144]	; (8000828 <MX_USART2_UART_Init+0x98>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b22      	ldr	r3, [pc, #136]	; (8000824 <MX_USART2_UART_Init+0x94>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007c6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4812      	ldr	r0, [pc, #72]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007dc:	f004 f99e 	bl	8004b1c <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80007e6:	f000 f86d 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_USART2_UART_Init+0x94>)
 80007ee:	f005 fb60 	bl	8005eb2 <HAL_UARTEx_SetTxFifoThreshold>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80007f8:	f000 f864 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	4809      	ldr	r0, [pc, #36]	; (8000824 <MX_USART2_UART_Init+0x94>)
 8000800:	f005 fb95 	bl	8005f2e <HAL_UARTEx_SetRxFifoThreshold>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800080a:	f000 f85b 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART2_UART_Init+0x94>)
 8000810:	f005 fb16 	bl	8005e40 <HAL_UARTEx_DisableFifoMode>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800081a:	f000 f853 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200001e8 	.word	0x200001e8
 8000828:	40004400 	.word	0x40004400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_GPIO_Init+0x90>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a1d      	ldr	r2, [pc, #116]	; (80008bc <MX_GPIO_Init+0x90>)
 8000848:	f043 0320 	orr.w	r3, r3, #32
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_GPIO_Init+0x90>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0320 	and.w	r3, r3, #32
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_GPIO_Init+0x90>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <MX_GPIO_Init+0x90>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_GPIO_Init+0x90>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_GPIO_Init+0x90>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <MX_GPIO_Init+0x90>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_GPIO_Init+0x90>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MX_GPIO_Init+0x94>)
 8000892:	f002 fc19 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0x94>)
 80008b0:	f002 fa88 	bl	8002dc4 <HAL_GPIO_Init>

}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000400 	.word	0x48000400

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_MspInit+0x44>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6613      	str	r3, [r2, #96]	; 0x60
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x44>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6593      	str	r3, [r2, #88]	; 0x58
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800090a:	f002 fc99 	bl	8003240 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <HAL_FDCAN_MspInit+0x90>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d131      	bne.n	80009a2 <HAL_FDCAN_MspInit+0x86>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <HAL_FDCAN_MspInit+0x94>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <HAL_FDCAN_MspInit+0x94>)
 8000944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_FDCAN_MspInit+0x94>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <HAL_FDCAN_MspInit+0x94>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <HAL_FDCAN_MspInit+0x94>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <HAL_FDCAN_MspInit+0x94>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800096e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000980:	2309      	movs	r3, #9
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f002 fa19 	bl	8002dc4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2015      	movs	r0, #21
 8000998:	f001 fb1d 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800099c:	2015      	movs	r0, #21
 800099e:	f001 fb34 	bl	800200a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40006400 	.word	0x40006400
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <HAL_TIM_Base_MspInit+0x44>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d113      	bne.n	80009ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_TIM_Base_MspInit+0x48>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <HAL_TIM_Base_MspInit+0x48>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6593      	str	r3, [r2, #88]	; 0x58
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_TIM_Base_MspInit+0x48>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2103      	movs	r1, #3
 80009e2:	201d      	movs	r0, #29
 80009e4:	f001 faf7 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009e8:	201d      	movs	r0, #29
 80009ea:	f001 fb0e 	bl	800200a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40000400 	.word	0x40000400
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	; (8000a8c <HAL_UART_MspInit+0x8c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d130      	bne.n	8000a84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <HAL_UART_MspInit+0x90>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	4a1a      	ldr	r2, [pc, #104]	; (8000a90 <HAL_UART_MspInit+0x90>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_UART_MspInit+0x90>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_UART_MspInit+0x90>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <HAL_UART_MspInit+0x90>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_UART_MspInit+0x90>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a52:	230c      	movs	r3, #12
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a62:	2307      	movs	r3, #7
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f002 f9a8 	bl	8002dc4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2102      	movs	r1, #2
 8000a78:	2026      	movs	r0, #38	; 0x26
 8000a7a:	f001 faac 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a7e:	2026      	movs	r0, #38	; 0x26
 8000a80:	f001 fac3 	bl	800200a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f001 f97c 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <FDCAN1_IT0_IRQHandler+0x14>)
 8000af6:	f001 fee5 	bl	80028c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
  CAN_IT_handler();
 8000afa:	f000 fb59 	bl	80011b0 <CAN_IT_handler>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000180 	.word	0x20000180

08000b08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <TIM3_IRQHandler+0x18>)
 8000b0e:	f003 fb8d 	bl	800422c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  UART_RX_queue_polling();
 8000b12:	f000 f8bd 	bl	8000c90 <UART_RX_queue_polling>
  CAN_RX_queue_polling();
 8000b16:	f000 fb87 	bl	8001228 <CAN_RX_queue_polling>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000012c 	.word	0x2000012c

08000b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <USART2_IRQHandler+0x14>)
 8000b2a:	f004 f9b5 	bl	8004e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  UART_IT_handler();
 8000b2e:	f000 f851 	bl	8000bd4 <UART_IT_handler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200001e8 	.word	0x200001e8

08000b3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <SystemInit+0x28>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <SystemInit+0x28>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <SystemInit+0x28>)
 8000b52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b56:	609a      	str	r2, [r3, #8]
#endif
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <init_UART_values>:
#define FLASH_USER_START_ADDR		ADDR_FLASH_PAGE_4
#define FLASH_USER_END_ADDR     	(ADDR_FLASH_PAGE_63 + FLASH_PAGE_SIZE - 1)   /* End @ of user Flash area */

// стартовая инициализация счётчиков и буферов UART
void init_UART_values(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	uart_error_state = NO_ERROR;									// ошибка отсутствует
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <init_UART_values+0x20>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
	UART_RX_string_buffer_counter = 0;								// счётчик элемента строки-буфера
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <init_UART_values+0x24>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
	UART_RX_queue_buffer_write_counter = 0;							// обнуляем счётчитк элемента очереди на парсинг, в который ведётся запись
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <init_UART_values+0x28>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	2000036d 	.word	0x2000036d
 8000b8c:	200001e4 	.word	0x200001e4
 8000b90:	2000036c 	.word	0x2000036c

08000b94 <UART_error_handler>:

// обработчик ошибок UART
void UART_error_handler(UARTErrorCode_EnumTypeDef error_type)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	switch (error_type)
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	d810      	bhi.n	8000bc6 <UART_error_handler+0x32>
 8000ba4:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <UART_error_handler+0x18>)
 8000ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000baa:	bf00      	nop
 8000bac:	08000bc5 	.word	0x08000bc5
 8000bb0:	08000bc5 	.word	0x08000bc5
 8000bb4:	08000bc5 	.word	0x08000bc5
 8000bb8:	08000bc5 	.word	0x08000bc5
 8000bbc:	08000bc5 	.word	0x08000bc5
 8000bc0:	08000bc5 	.word	0x08000bc5
	{
	case NO_ERROR:
	{

		break;
 8000bc4:	bf00      	nop
	{

		break;
	}
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <UART_IT_handler>:

// обработчик прерывания с UART (приём данных)
void UART_IT_handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	add_byte_to_string(UART_rx_buffer[0]);													// добавляем принятый байт в строку в очереди на парсинг
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <UART_IT_handler+0x1c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 f80b 	bl	8000bf8 <add_byte_to_string>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_RX_MESSAGE_SIZE);			// взводим функцию для обработки прерывания
 8000be2:	2201      	movs	r2, #1
 8000be4:	4902      	ldr	r1, [pc, #8]	; (8000bf0 <UART_IT_handler+0x1c>)
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <UART_IT_handler+0x20>)
 8000be8:	f004 f87e 	bl	8004ce8 <HAL_UART_Receive_IT>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000128 	.word	0x20000128
 8000bf4:	200001e8 	.word	0x200001e8

08000bf8 <add_byte_to_string>:

// добавляем принятый байт в строку-буфер
void add_byte_to_string(uint8_t byte_to_write)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	if (UART_RX_string_buffer_counter >= UART_STRING_MAX_SIZE)								// если достигли максимальной длины строки
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <add_byte_to_string+0x88>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b3f      	cmp	r3, #63	; 0x3f
 8000c08:	d905      	bls.n	8000c16 <add_byte_to_string+0x1e>
	{
		UART_error_handler(MAX_MESSAGE_LENGHT_EXCEEDED);									// ошибка: превышена максимальная длина строки
 8000c0a:	2005      	movs	r0, #5
 8000c0c:	f7ff ffc2 	bl	8000b94 <UART_error_handler>
		UART_RX_string_buffer_counter = 0;													// обнуляем счётчик элемента в строке-буфере
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <add_byte_to_string+0x88>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
	{
		UART_RX_string_buffer_counter = 0;													// обнуляем счётчик элемента в строке-буфере
		message_start_flag = 1;
	}
	*/
	if (byte_to_write == CHAR_CODE_UART_MESSAGE_END)										// если пришёл символ конца сообщения
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b0d      	cmp	r3, #13
 8000c1a:	d11a      	bne.n	8000c52 <add_byte_to_string+0x5a>
	{

		UART_RX_string_lenght_buffer[UART_RX_queue_buffer_write_counter] = UART_RX_string_buffer_counter;	// записываем длину сообщения
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <add_byte_to_string+0x8c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <add_byte_to_string+0x88>)
 8000c24:	7819      	ldrb	r1, [r3, #0]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <add_byte_to_string+0x90>)
 8000c28:	5499      	strb	r1, [r3, r2]
		UART_RX_queue_buffer_write_counter++;												// инкрементируем счётчик элемента буфера-очереди
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <add_byte_to_string+0x8c>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <add_byte_to_string+0x8c>)
 8000c34:	701a      	strb	r2, [r3, #0]
		UART_RX_string_buffer_counter = 0;													// обнуляем счётчик элемента в строке-буфере
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <add_byte_to_string+0x88>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]

		if (UART_RX_queue_buffer_write_counter > RX_QUEUE_BUFFER_SIZE)						// если превысили максимальное количество элементов в буфере-очереди
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <add_byte_to_string+0x8c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d918      	bls.n	8000c76 <add_byte_to_string+0x7e>
		{
			UART_error_handler(RX_QUEUE_OVERFLOW);											// ошибка: очередь на парсинг переполнена
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ffa5 	bl	8000b94 <UART_error_handler>
			UART_RX_queue_buffer_write_counter = 0;											// обнуляем счётчик элемента буфера-очереди
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <add_byte_to_string+0x8c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
			UART_RX_string_buffer_counter = 0;
		}
		UART_RX_queue_buffer[UART_RX_queue_buffer_write_counter][UART_RX_string_buffer_counter] = byte_to_write;		// записываем символ в строку буфера-очереди на парсинг
		UART_RX_string_buffer_counter++;
	}
}
 8000c50:	e011      	b.n	8000c76 <add_byte_to_string+0x7e>
		UART_RX_queue_buffer[UART_RX_queue_buffer_write_counter][UART_RX_string_buffer_counter] = byte_to_write;		// записываем символ в строку буфера-очереди на парсинг
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <add_byte_to_string+0x8c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <add_byte_to_string+0x88>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <add_byte_to_string+0x94>)
 8000c60:	0183      	lsls	r3, r0, #6
 8000c62:	4413      	add	r3, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	701a      	strb	r2, [r3, #0]
		UART_RX_string_buffer_counter++;
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <add_byte_to_string+0x88>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <add_byte_to_string+0x88>)
 8000c74:	701a      	strb	r2, [r3, #0]
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200001e4 	.word	0x200001e4
 8000c84:	2000036c 	.word	0x2000036c
 8000c88:	20000178 	.word	0x20000178
 8000c8c:	20000028 	.word	0x20000028

08000c90 <UART_RX_queue_polling>:

// парсим сообщения из буфера-очереди
void UART_RX_queue_polling(void)
{
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
	if (UART_RX_queue_buffer_write_counter > 0)												// если в буфере-очереди содержится хотя бы одно сообщение
 8000c96:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <UART_RX_queue_polling+0xc8>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d058      	beq.n	8000d50 <UART_RX_queue_polling+0xc0>
	{
		for (int i = 0; i < UART_RX_queue_buffer_write_counter; i++)						// проходимся по всем сообщениям в очереди
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	e04c      	b.n	8000d3e <UART_RX_queue_polling+0xae>
		{
 8000ca4:	466b      	mov	r3, sp
 8000ca6:	461d      	mov	r5, r3
			char tmp_ch_buf[UART_RX_string_lenght_buffer[i] + 1];								// буфер для формирования сообщения на парсинг. Размер буфера равен длине сообщения (без пустых символов)
 8000ca8:	4a2c      	ldr	r2, [pc, #176]	; (8000d5c <UART_RX_queue_polling+0xcc>)
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	1c58      	adds	r0, r3, #1
 8000cb2:	1e43      	subs	r3, r0, #1
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	f04f 0400 	mov.w	r4, #0
 8000cc6:	00d4      	lsls	r4, r2, #3
 8000cc8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ccc:	00cb      	lsls	r3, r1, #3
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	f04f 0400 	mov.w	r4, #0
 8000cde:	00d4      	lsls	r4, r2, #3
 8000ce0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ce4:	00cb      	lsls	r3, r1, #3
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	3307      	adds	r3, #7
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	ebad 0d03 	sub.w	sp, sp, r3
 8000cf2:	466b      	mov	r3, sp
 8000cf4:	3300      	adds	r3, #0
 8000cf6:	603b      	str	r3, [r7, #0]
			for (int ii = 0; ii < sizeof(tmp_ch_buf); ii++)									// переписываем всё сообщение во временный буфер
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e00e      	b.n	8000d1c <UART_RX_queue_polling+0x8c>
			{
				tmp_ch_buf[ii] = UART_RX_queue_buffer[i][ii];
 8000cfe:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <UART_RX_queue_polling+0xd0>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	019b      	lsls	r3, r3, #6
 8000d04:	441a      	add	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4413      	add	r3, r2
 8000d0a:	7819      	ldrb	r1, [r3, #0]
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4413      	add	r3, r2
 8000d12:	460a      	mov	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
			for (int ii = 0; ii < sizeof(tmp_ch_buf); ii++)									// переписываем всё сообщение во временный буфер
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8ec      	bhi.n	8000cfe <UART_RX_queue_polling+0x6e>
			}
			tmp_ch_buf[sizeof(tmp_ch_buf) - 1] = '\0';										// добавляем нуль-символ в конец сообщения
 8000d24:	4603      	mov	r3, r0
 8000d26:	3b01      	subs	r3, #1
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	54d1      	strb	r1, [r2, r3]
			parse_UART_message(tmp_ch_buf);													// отправляем на парсинг текущее сообщение
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f817 	bl	8000d64 <parse_UART_message>
 8000d36:	46ad      	mov	sp, r5
		for (int i = 0; i < UART_RX_queue_buffer_write_counter; i++)						// проходимся по всем сообщениям в очереди
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <UART_RX_queue_polling+0xc8>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4293      	cmp	r3, r2
 8000d48:	dbac      	blt.n	8000ca4 <UART_RX_queue_polling+0x14>
		}
		UART_RX_queue_buffer_write_counter = 0;
 8000d4a:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <UART_RX_queue_polling+0xc8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
	}
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bdb0      	pop	{r4, r5, r7, pc}
 8000d58:	2000036c 	.word	0x2000036c
 8000d5c:	20000178 	.word	0x20000178
 8000d60:	20000028 	.word	0x20000028

08000d64 <parse_UART_message>:

void parse_UART_message(char* UART_buffer_to_parse)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	if (!strcmp(UART_buffer_to_parse, "return_test"))
 8000d6c:	49a8      	ldr	r1, [pc, #672]	; (8001010 <parse_UART_message+0x2ac>)
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fa52 	bl	8000218 <strcmp>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d104      	bne.n	8000d84 <parse_UART_message+0x20>
	{
		complete_and_send_string_to_UART(sizeof(MESSAGE_TEST_VALUE), MESSAGE_TEST_VALUE);
 8000d7a:	49a6      	ldr	r1, [pc, #664]	; (8001014 <parse_UART_message+0x2b0>)
 8000d7c:	2010      	movs	r0, #16
 8000d7e:	f000 f9ad 	bl	80010dc <complete_and_send_string_to_UART>
	}
	else if (UART_buffer_to_parse[0] == 'T')
	{
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_EXTENDED_ID));
	}
}
 8000d82:	e141      	b.n	8001008 <parse_UART_message+0x2a4>
	else if ((!strcmp(UART_buffer_to_parse, "H")) || (!strcmp(UART_buffer_to_parse, "h")) || (!strcmp(UART_buffer_to_parse, "?")))
 8000d84:	49a4      	ldr	r1, [pc, #656]	; (8001018 <parse_UART_message+0x2b4>)
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fa46 	bl	8000218 <strcmp>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00d      	beq.n	8000dae <parse_UART_message+0x4a>
 8000d92:	49a2      	ldr	r1, [pc, #648]	; (800101c <parse_UART_message+0x2b8>)
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fa3f 	bl	8000218 <strcmp>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <parse_UART_message+0x4a>
 8000da0:	499f      	ldr	r1, [pc, #636]	; (8001020 <parse_UART_message+0x2bc>)
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff fa38 	bl	8000218 <strcmp>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d14c      	bne.n	8000e48 <parse_UART_message+0xe4>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_01), MESSAGE_COMMAND_LIST_STRING_01);
 8000dae:	499d      	ldr	r1, [pc, #628]	; (8001024 <parse_UART_message+0x2c0>)
 8000db0:	201b      	movs	r0, #27
 8000db2:	f000 f993 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_02), MESSAGE_COMMAND_LIST_STRING_02);
 8000db6:	499c      	ldr	r1, [pc, #624]	; (8001028 <parse_UART_message+0x2c4>)
 8000db8:	2024      	movs	r0, #36	; 0x24
 8000dba:	f000 f98f 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_03), MESSAGE_COMMAND_LIST_STRING_03);
 8000dbe:	499b      	ldr	r1, [pc, #620]	; (800102c <parse_UART_message+0x2c8>)
 8000dc0:	202d      	movs	r0, #45	; 0x2d
 8000dc2:	f000 f98b 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_04), MESSAGE_COMMAND_LIST_STRING_04);
 8000dc6:	499a      	ldr	r1, [pc, #616]	; (8001030 <parse_UART_message+0x2cc>)
 8000dc8:	2026      	movs	r0, #38	; 0x26
 8000dca:	f000 f987 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_05), MESSAGE_COMMAND_LIST_STRING_05);
 8000dce:	4999      	ldr	r1, [pc, #612]	; (8001034 <parse_UART_message+0x2d0>)
 8000dd0:	2016      	movs	r0, #22
 8000dd2:	f000 f983 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_06), MESSAGE_COMMAND_LIST_STRING_06);
 8000dd6:	4998      	ldr	r1, [pc, #608]	; (8001038 <parse_UART_message+0x2d4>)
 8000dd8:	2015      	movs	r0, #21
 8000dda:	f000 f97f 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_07), MESSAGE_COMMAND_LIST_STRING_07);
 8000dde:	4997      	ldr	r1, [pc, #604]	; (800103c <parse_UART_message+0x2d8>)
 8000de0:	201d      	movs	r0, #29
 8000de2:	f000 f97b 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_08), MESSAGE_COMMAND_LIST_STRING_08);
 8000de6:	4996      	ldr	r1, [pc, #600]	; (8001040 <parse_UART_message+0x2dc>)
 8000de8:	201e      	movs	r0, #30
 8000dea:	f000 f977 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_09), MESSAGE_COMMAND_LIST_STRING_09);
 8000dee:	4995      	ldr	r1, [pc, #596]	; (8001044 <parse_UART_message+0x2e0>)
 8000df0:	201f      	movs	r0, #31
 8000df2:	f000 f973 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_10), MESSAGE_COMMAND_LIST_STRING_10);
 8000df6:	4994      	ldr	r1, [pc, #592]	; (8001048 <parse_UART_message+0x2e4>)
 8000df8:	2031      	movs	r0, #49	; 0x31
 8000dfa:	f000 f96f 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_11), MESSAGE_COMMAND_LIST_STRING_11);
 8000dfe:	4993      	ldr	r1, [pc, #588]	; (800104c <parse_UART_message+0x2e8>)
 8000e00:	2032      	movs	r0, #50	; 0x32
 8000e02:	f000 f96b 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_12), MESSAGE_COMMAND_LIST_STRING_12);
 8000e06:	4992      	ldr	r1, [pc, #584]	; (8001050 <parse_UART_message+0x2ec>)
 8000e08:	2019      	movs	r0, #25
 8000e0a:	f000 f967 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_13), MESSAGE_COMMAND_LIST_STRING_13);
 8000e0e:	4991      	ldr	r1, [pc, #580]	; (8001054 <parse_UART_message+0x2f0>)
 8000e10:	2018      	movs	r0, #24
 8000e12:	f000 f963 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_14), MESSAGE_COMMAND_LIST_STRING_14);
 8000e16:	4990      	ldr	r1, [pc, #576]	; (8001058 <parse_UART_message+0x2f4>)
 8000e18:	201a      	movs	r0, #26
 8000e1a:	f000 f95f 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_15), MESSAGE_COMMAND_LIST_STRING_15);
 8000e1e:	498f      	ldr	r1, [pc, #572]	; (800105c <parse_UART_message+0x2f8>)
 8000e20:	2015      	movs	r0, #21
 8000e22:	f000 f95b 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_16), MESSAGE_COMMAND_LIST_STRING_16);
 8000e26:	498e      	ldr	r1, [pc, #568]	; (8001060 <parse_UART_message+0x2fc>)
 8000e28:	2015      	movs	r0, #21
 8000e2a:	f000 f957 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_17), MESSAGE_COMMAND_LIST_STRING_17);
 8000e2e:	498d      	ldr	r1, [pc, #564]	; (8001064 <parse_UART_message+0x300>)
 8000e30:	2012      	movs	r0, #18
 8000e32:	f000 f953 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_18), MESSAGE_COMMAND_LIST_STRING_18);
 8000e36:	498c      	ldr	r1, [pc, #560]	; (8001068 <parse_UART_message+0x304>)
 8000e38:	200c      	movs	r0, #12
 8000e3a:	f000 f94f 	bl	80010dc <complete_and_send_string_to_UART>
		complete_and_send_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_19), MESSAGE_COMMAND_LIST_STRING_19);
 8000e3e:	498b      	ldr	r1, [pc, #556]	; (800106c <parse_UART_message+0x308>)
 8000e40:	2023      	movs	r0, #35	; 0x23
 8000e42:	f000 f94b 	bl	80010dc <complete_and_send_string_to_UART>
}
 8000e46:	e0df      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "O"))
 8000e48:	4989      	ldr	r1, [pc, #548]	; (8001070 <parse_UART_message+0x30c>)
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff f9e4 	bl	8000218 <strcmp>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d102      	bne.n	8000e5c <parse_UART_message+0xf8>
		send_end_char_to_UART();
 8000e56:	f000 f933 	bl	80010c0 <send_end_char_to_UART>
}
 8000e5a:	e0d5      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "L"))
 8000e5c:	4985      	ldr	r1, [pc, #532]	; (8001074 <parse_UART_message+0x310>)
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff f9da 	bl	8000218 <strcmp>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d102      	bne.n	8000e70 <parse_UART_message+0x10c>
		send_end_char_to_UART();
 8000e6a:	f000 f929 	bl	80010c0 <send_end_char_to_UART>
}
 8000e6e:	e0cb      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "Y"))
 8000e70:	4981      	ldr	r1, [pc, #516]	; (8001078 <parse_UART_message+0x314>)
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff f9d0 	bl	8000218 <strcmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <parse_UART_message+0x120>
		send_end_char_to_UART();
 8000e7e:	f000 f91f 	bl	80010c0 <send_end_char_to_UART>
}
 8000e82:	e0c1      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "C"))
 8000e84:	497d      	ldr	r1, [pc, #500]	; (800107c <parse_UART_message+0x318>)
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff f9c6 	bl	8000218 <strcmp>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <parse_UART_message+0x134>
		send_end_char_to_UART();
 8000e92:	f000 f915 	bl	80010c0 <send_end_char_to_UART>
}
 8000e96:	e0b7      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S1"))
 8000e98:	4979      	ldr	r1, [pc, #484]	; (8001080 <parse_UART_message+0x31c>)
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff f9bc 	bl	8000218 <strcmp>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d102      	bne.n	8000eac <parse_UART_message+0x148>
		send_end_char_to_UART();
 8000ea6:	f000 f90b 	bl	80010c0 <send_end_char_to_UART>
}
 8000eaa:	e0ad      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S2"))
 8000eac:	4975      	ldr	r1, [pc, #468]	; (8001084 <parse_UART_message+0x320>)
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff f9b2 	bl	8000218 <strcmp>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d102      	bne.n	8000ec0 <parse_UART_message+0x15c>
		send_end_char_to_UART();
 8000eba:	f000 f901 	bl	80010c0 <send_end_char_to_UART>
}
 8000ebe:	e0a3      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S3"))
 8000ec0:	4971      	ldr	r1, [pc, #452]	; (8001088 <parse_UART_message+0x324>)
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff f9a8 	bl	8000218 <strcmp>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <parse_UART_message+0x170>
		send_end_char_to_UART();
 8000ece:	f000 f8f7 	bl	80010c0 <send_end_char_to_UART>
}
 8000ed2:	e099      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S4"))
 8000ed4:	496d      	ldr	r1, [pc, #436]	; (800108c <parse_UART_message+0x328>)
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff f99e 	bl	8000218 <strcmp>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <parse_UART_message+0x184>
		send_end_char_to_UART();
 8000ee2:	f000 f8ed 	bl	80010c0 <send_end_char_to_UART>
}
 8000ee6:	e08f      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S5"))
 8000ee8:	4969      	ldr	r1, [pc, #420]	; (8001090 <parse_UART_message+0x32c>)
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff f994 	bl	8000218 <strcmp>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d102      	bne.n	8000efc <parse_UART_message+0x198>
		send_end_char_to_UART();
 8000ef6:	f000 f8e3 	bl	80010c0 <send_end_char_to_UART>
}
 8000efa:	e085      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S6"))
 8000efc:	4965      	ldr	r1, [pc, #404]	; (8001094 <parse_UART_message+0x330>)
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff f98a 	bl	8000218 <strcmp>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d102      	bne.n	8000f10 <parse_UART_message+0x1ac>
		send_end_char_to_UART();
 8000f0a:	f000 f8d9 	bl	80010c0 <send_end_char_to_UART>
}
 8000f0e:	e07b      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S7"))
 8000f10:	4961      	ldr	r1, [pc, #388]	; (8001098 <parse_UART_message+0x334>)
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff f980 	bl	8000218 <strcmp>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <parse_UART_message+0x1c0>
		send_end_char_to_UART();
 8000f1e:	f000 f8cf 	bl	80010c0 <send_end_char_to_UART>
}
 8000f22:	e071      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "S8"))
 8000f24:	495d      	ldr	r1, [pc, #372]	; (800109c <parse_UART_message+0x338>)
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff f976 	bl	8000218 <strcmp>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d102      	bne.n	8000f38 <parse_UART_message+0x1d4>
		send_end_char_to_UART();
 8000f32:	f000 f8c5 	bl	80010c0 <send_end_char_to_UART>
}
 8000f36:	e067      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "Z1"))
 8000f38:	4959      	ldr	r1, [pc, #356]	; (80010a0 <parse_UART_message+0x33c>)
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff f96c 	bl	8000218 <strcmp>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <parse_UART_message+0x1e8>
		send_end_char_to_UART();
 8000f46:	f000 f8bb 	bl	80010c0 <send_end_char_to_UART>
}
 8000f4a:	e05d      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "Z0"))
 8000f4c:	4955      	ldr	r1, [pc, #340]	; (80010a4 <parse_UART_message+0x340>)
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff f962 	bl	8000218 <strcmp>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <parse_UART_message+0x1fc>
		send_end_char_to_UART();
 8000f5a:	f000 f8b1 	bl	80010c0 <send_end_char_to_UART>
}
 8000f5e:	e053      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "F"))
 8000f60:	4951      	ldr	r1, [pc, #324]	; (80010a8 <parse_UART_message+0x344>)
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff f958 	bl	8000218 <strcmp>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d104      	bne.n	8000f78 <parse_UART_message+0x214>
		complete_and_send_string_to_UART(sizeof(MESSAGE_TEST_VALUE), MESSAGE_TEST_VALUE);
 8000f6e:	4929      	ldr	r1, [pc, #164]	; (8001014 <parse_UART_message+0x2b0>)
 8000f70:	2010      	movs	r0, #16
 8000f72:	f000 f8b3 	bl	80010dc <complete_and_send_string_to_UART>
}
 8000f76:	e047      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "V"))
 8000f78:	494c      	ldr	r1, [pc, #304]	; (80010ac <parse_UART_message+0x348>)
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff f94c 	bl	8000218 <strcmp>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d104      	bne.n	8000f90 <parse_UART_message+0x22c>
		complete_and_send_string_to_UART(sizeof(MESSAGE_USB_CAN_VERSION), MESSAGE_USB_CAN_VERSION);
 8000f86:	494a      	ldr	r1, [pc, #296]	; (80010b0 <parse_UART_message+0x34c>)
 8000f88:	2006      	movs	r0, #6
 8000f8a:	f000 f8a7 	bl	80010dc <complete_and_send_string_to_UART>
}
 8000f8e:	e03b      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "N"))
 8000f90:	4948      	ldr	r1, [pc, #288]	; (80010b4 <parse_UART_message+0x350>)
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff f940 	bl	8000218 <strcmp>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d104      	bne.n	8000fa8 <parse_UART_message+0x244>
		complete_and_send_string_to_UART(sizeof(MESSAGE_SERIAL_NUMBER), MESSAGE_SERIAL_NUMBER);
 8000f9e:	4946      	ldr	r1, [pc, #280]	; (80010b8 <parse_UART_message+0x354>)
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	f000 f89b 	bl	80010dc <complete_and_send_string_to_UART>
}
 8000fa6:	e02f      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (!strcmp(UART_buffer_to_parse, "RST"))
 8000fa8:	4944      	ldr	r1, [pc, #272]	; (80010bc <parse_UART_message+0x358>)
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff f934 	bl	8000218 <strcmp>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d104      	bne.n	8000fc0 <parse_UART_message+0x25c>
		complete_and_send_string_to_UART(sizeof(MESSAGE_TEST_VALUE), MESSAGE_TEST_VALUE);
 8000fb6:	4917      	ldr	r1, [pc, #92]	; (8001014 <parse_UART_message+0x2b0>)
 8000fb8:	2010      	movs	r0, #16
 8000fba:	f000 f88f 	bl	80010dc <complete_and_send_string_to_UART>
}
 8000fbe:	e023      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (UART_buffer_to_parse[0] == 't')
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b74      	cmp	r3, #116	; 0x74
 8000fc6:	d10d      	bne.n	8000fe4 <parse_UART_message+0x280>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_STANDARD_ID));
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fc16 	bl	8001800 <set_can_frame_parameters>
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fc40 	bl	8001862 <send_CAN_frame>
}
 8000fe2:	e011      	b.n	8001008 <parse_UART_message+0x2a4>
	else if (UART_buffer_to_parse[0] == 'T')
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b54      	cmp	r3, #84	; 0x54
 8000fea:	d10d      	bne.n	8001008 <parse_UART_message+0x2a4>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_EXTENDED_ID));
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fc03 	bl	8001800 <set_can_frame_parameters>
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fc2d 	bl	8001862 <send_CAN_frame>
}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	08006104 	.word	0x08006104
 8001014:	08006110 	.word	0x08006110
 8001018:	08006120 	.word	0x08006120
 800101c:	08006124 	.word	0x08006124
 8001020:	08006128 	.word	0x08006128
 8001024:	0800612c 	.word	0x0800612c
 8001028:	08006148 	.word	0x08006148
 800102c:	0800616c 	.word	0x0800616c
 8001030:	0800619c 	.word	0x0800619c
 8001034:	080061c4 	.word	0x080061c4
 8001038:	080061dc 	.word	0x080061dc
 800103c:	080061f4 	.word	0x080061f4
 8001040:	08006214 	.word	0x08006214
 8001044:	08006234 	.word	0x08006234
 8001048:	08006254 	.word	0x08006254
 800104c:	08006288 	.word	0x08006288
 8001050:	080062bc 	.word	0x080062bc
 8001054:	080062d8 	.word	0x080062d8
 8001058:	080062f0 	.word	0x080062f0
 800105c:	0800630c 	.word	0x0800630c
 8001060:	08006324 	.word	0x08006324
 8001064:	0800633c 	.word	0x0800633c
 8001068:	08006350 	.word	0x08006350
 800106c:	0800635c 	.word	0x0800635c
 8001070:	08006380 	.word	0x08006380
 8001074:	08006384 	.word	0x08006384
 8001078:	08006388 	.word	0x08006388
 800107c:	0800638c 	.word	0x0800638c
 8001080:	08006390 	.word	0x08006390
 8001084:	08006394 	.word	0x08006394
 8001088:	08006398 	.word	0x08006398
 800108c:	0800639c 	.word	0x0800639c
 8001090:	080063a0 	.word	0x080063a0
 8001094:	080063a4 	.word	0x080063a4
 8001098:	080063a8 	.word	0x080063a8
 800109c:	080063ac 	.word	0x080063ac
 80010a0:	080063b0 	.word	0x080063b0
 80010a4:	080063b4 	.word	0x080063b4
 80010a8:	080063b8 	.word	0x080063b8
 80010ac:	080063bc 	.word	0x080063bc
 80010b0:	080063c0 	.word	0x080063c0
 80010b4:	080063c8 	.word	0x080063c8
 80010b8:	080063cc 	.word	0x080063cc
 80010bc:	080063d8 	.word	0x080063d8

080010c0 <send_end_char_to_UART>:

void send_end_char_to_UART(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
	uint8_t tmp_arr_1[1];
	tmp_arr_1[0] = CARRIAGE_RETURN_CHAR;
 80010c6:	230d      	movs	r3, #13
 80010c8:	713b      	strb	r3, [r7, #4]
	send_message_to_UART(sizeof(tmp_arr_1), tmp_arr_1);
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 f850 	bl	8001174 <send_message_to_UART>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <complete_and_send_string_to_UART>:

void complete_and_send_string_to_UART(uint16_t size_of_string, char* string_to_send)
{
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	80fb      	strh	r3, [r7, #6]
 80010e8:	466b      	mov	r3, sp
 80010ea:	461d      	mov	r5, r3
	uint8_t tmp_arr_1[size_of_string];
 80010ec:	88f8      	ldrh	r0, [r7, #6]
 80010ee:	4603      	mov	r3, r0
 80010f0:	3b01      	subs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	b281      	uxth	r1, r0
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	f04f 0400 	mov.w	r4, #0
 8001102:	00d4      	lsls	r4, r2, #3
 8001104:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001108:	00cb      	lsls	r3, r1, #3
 800110a:	b281      	uxth	r1, r0
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	f04f 0400 	mov.w	r4, #0
 8001118:	00d4      	lsls	r4, r2, #3
 800111a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800111e:	00cb      	lsls	r3, r1, #3
 8001120:	4603      	mov	r3, r0
 8001122:	3307      	adds	r3, #7
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	ebad 0d03 	sub.w	sp, sp, r3
 800112c:	466b      	mov	r3, sp
 800112e:	3300      	adds	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(tmp_arr_1); i++)
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	e00b      	b.n	8001150 <complete_and_send_string_to_UART+0x74>
	{
		tmp_arr_1[i] = string_to_send[i];
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	7819      	ldrb	r1, [r3, #0]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	4413      	add	r3, r2
 8001146:	460a      	mov	r2, r1
 8001148:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tmp_arr_1); i++)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	4602      	mov	r2, r0
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8ef      	bhi.n	8001138 <complete_and_send_string_to_UART+0x5c>
	}
	tmp_arr_1[sizeof(tmp_arr_1) - 1] = CARRIAGE_RETURN_CHAR;
 8001158:	4603      	mov	r3, r0
 800115a:	3b01      	subs	r3, #1
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	210d      	movs	r1, #13
 8001160:	54d1      	strb	r1, [r2, r3]
	send_message_to_UART(sizeof(tmp_arr_1), tmp_arr_1);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4619      	mov	r1, r3
 8001166:	f000 f805 	bl	8001174 <send_message_to_UART>
 800116a:	46ad      	mov	sp, r5
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bdb0      	pop	{r4, r5, r7, pc}

08001174 <send_message_to_UART>:

void send_message_to_UART(uint16_t message_size, uint8_t* message_to_send)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	80fb      	strh	r3, [r7, #6]
	for (int ii = 0; ii < message_size; ii++)
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e00a      	b.n	800119c <send_message_to_UART+0x28>
	{
		HAL_UART_Transmit(&huart2, &message_to_send[ii], UART_TX_MESSAGE_SIZE, UART_TIMEOUT);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	18d1      	adds	r1, r2, r3
 800118c:	2364      	movs	r3, #100	; 0x64
 800118e:	2201      	movs	r2, #1
 8001190:	4806      	ldr	r0, [pc, #24]	; (80011ac <send_message_to_UART+0x38>)
 8001192:	f003 fd13 	bl	8004bbc <HAL_UART_Transmit>
	for (int ii = 0; ii < message_size; ii++)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbf0      	blt.n	8001186 <send_message_to_UART+0x12>
	}
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200001e8 	.word	0x200001e8

080011b0 <CAN_IT_handler>:

void CAN_IT_handler(void)
{
 80011b0:	b598      	push	{r3, r4, r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	if (CAN_RX_queue_buffer_write_counter >= sizeof(CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_data_buffer))
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <CAN_IT_handler+0x6c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b4f      	cmp	r3, #79	; 0x4f
 80011ba:	d902      	bls.n	80011c2 <CAN_IT_handler+0x12>
	{
		CAN_RX_queue_buffer_write_counter = 0;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <CAN_IT_handler+0x6c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
	}

	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_header_buffer[CAN_RX_queue_buffer_write_counter], \
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <CAN_IT_handler+0x6c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4a13      	ldr	r2, [pc, #76]	; (8001220 <CAN_IT_handler+0x70>)
 80011d2:	1899      	adds	r1, r3, r2
							CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_data_buffer[CAN_RX_queue_buffer_write_counter]);
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <CAN_IT_handler+0x6c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	33a0      	adds	r3, #160	; 0xa0
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <CAN_IT_handler+0x70>)
 80011e6:	4413      	add	r3, r2
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_header_buffer[CAN_RX_queue_buffer_write_counter], \
 80011e8:	460a      	mov	r2, r1
 80011ea:	2140      	movs	r1, #64	; 0x40
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <CAN_IT_handler+0x74>)
 80011ee:	f001 f9a9 	bl	8002544 <HAL_FDCAN_GetRxMessage>
	CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_timestamp_buffer[CAN_RX_queue_buffer_write_counter] = HAL_FDCAN_GetTimestampCounter(&hfdcan1);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <CAN_IT_handler+0x6c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461c      	mov	r4, r3
 80011f8:	480a      	ldr	r0, [pc, #40]	; (8001224 <CAN_IT_handler+0x74>)
 80011fa:	f001 f929 	bl	8002450 <HAL_FDCAN_GetTimestampCounter>
 80011fe:	4603      	mov	r3, r0
 8001200:	4619      	mov	r1, r3
 8001202:	4a07      	ldr	r2, [pc, #28]	; (8001220 <CAN_IT_handler+0x70>)
 8001204:	f104 0378 	add.w	r3, r4, #120	; 0x78
 8001208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	CAN_RX_queue_buffer_write_counter++;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <CAN_IT_handler+0x6c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b01      	ldr	r3, [pc, #4]	; (800121c <CAN_IT_handler+0x6c>)
 8001216:	701a      	strb	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	bd98      	pop	{r3, r4, r7, pc}
 800121c:	2000017d 	.word	0x2000017d
 8001220:	20000274 	.word	0x20000274
 8001224:	20000180 	.word	0x20000180

08001228 <CAN_RX_queue_polling>:

void CAN_RX_queue_polling(void)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b0bf      	sub	sp, #252	; 0xfc
 800122c:	af3c      	add	r7, sp, #240	; 0xf0
	if (CAN_RX_queue_buffer_write_counter > 0)
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <CAN_RX_queue_polling+0x54>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d01d      	beq.n	8001272 <CAN_RX_queue_polling+0x4a>
	{
		for (int i = 0; i < CAN_RX_queue_buffer_write_counter; i++)
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	e011      	b.n	8001260 <CAN_RX_queue_polling+0x38>
		{
			parse_CAN_message(CAN_RX_header_data_timestamp_struct_buffer, i);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4c0f      	ldr	r4, [pc, #60]	; (8001280 <CAN_RX_queue_polling+0x58>)
 8001242:	933a      	str	r3, [sp, #232]	; 0xe8
 8001244:	4668      	mov	r0, sp
 8001246:	f104 0310 	add.w	r3, r4, #16
 800124a:	22e8      	movs	r2, #232	; 0xe8
 800124c:	4619      	mov	r1, r3
 800124e:	f004 ff39 	bl	80060c4 <memcpy>
 8001252:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001256:	f000 f815 	bl	8001284 <parse_CAN_message>
		for (int i = 0; i < CAN_RX_queue_buffer_write_counter; i++)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3301      	adds	r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <CAN_RX_queue_polling+0x54>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4293      	cmp	r3, r2
 800126a:	dbe7      	blt.n	800123c <CAN_RX_queue_polling+0x14>
		}
		CAN_RX_queue_buffer_write_counter = 0;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <CAN_RX_queue_polling+0x54>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
	}
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	2000017d 	.word	0x2000017d
 8001280:	20000274 	.word	0x20000274

08001284 <parse_CAN_message>:

void parse_CAN_message(CAN_DataTimestampBuffer_StructTypeDef CAN_message_struct_to_parse, uint8_t current_buffer_element_counter)
{
 8001284:	b084      	sub	sp, #16
 8001286:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800128a:	b091      	sub	sp, #68	; 0x44
 800128c:	af00      	add	r7, sp, #0
 800128e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001292:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001296:	466b      	mov	r3, sp
 8001298:	4698      	mov	r8, r3
	uint8_t id_lenght;
	char message_type_char;
	char message_end_char = CARRIAGE_RETURN_CHAR;
 800129a:	230d      	movs	r3, #13
 800129c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t data_lenght;
	uint8_t CAN_to_UART_message_size;

	if (CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_header_buffer[current_buffer_element_counter].IdType == FDCAN_STANDARD_ID)
 80012a0:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80012a4:	49ba      	ldr	r1, [pc, #744]	; (8001590 <parse_CAN_message+0x30c>)
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	3304      	adds	r3, #4
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d106      	bne.n	80012c6 <parse_CAN_message+0x42>
	{
		id_lenght = STANDARD_CAN_ID_LENGHT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		message_type_char = 't';
 80012be:	2374      	movs	r3, #116	; 0x74
 80012c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80012c4:	e005      	b.n	80012d2 <parse_CAN_message+0x4e>
	}
	else
	{
		id_lenght = EXTENDED_CAN_ID_LENGHT;
 80012c6:	2308      	movs	r3, #8
 80012c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		message_type_char = 'T';
 80012cc:	2354      	movs	r3, #84	; 0x54
 80012ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	data_lenght = CAN_RX_message_data_lenght_define(CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_header_buffer[current_buffer_element_counter].DataLength)*2;
 80012d2:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80012d6:	49ae      	ldr	r1, [pc, #696]	; (8001590 <parse_CAN_message+0x30c>)
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	440b      	add	r3, r1
 80012e2:	330c      	adds	r3, #12
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fba5 	bl	8001a36 <CAN_RX_message_data_lenght_define>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	uint8_t id_array[id_lenght];
 80012f6:	f897 602a 	ldrb.w	r6, [r7, #42]	; 0x2a
 80012fa:	4633      	mov	r3, r6
 80012fc:	3b01      	subs	r3, #1
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001300:	b2f1      	uxtb	r1, r6
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	f04f 0400 	mov.w	r4, #0
 800130e:	00d4      	lsls	r4, r2, #3
 8001310:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001314:	00cb      	lsls	r3, r1, #3
 8001316:	b2f1      	uxtb	r1, r6
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	f04f 0400 	mov.w	r4, #0
 8001324:	00d4      	lsls	r4, r2, #3
 8001326:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800132a:	00cb      	lsls	r3, r1, #3
 800132c:	4633      	mov	r3, r6
 800132e:	3307      	adds	r3, #7
 8001330:	08db      	lsrs	r3, r3, #3
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	ebad 0d03 	sub.w	sp, sp, r3
 8001338:	466b      	mov	r3, sp
 800133a:	3300      	adds	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
	convert_int_value_to_ascii_hex_char_array(sizeof(id_array), id_array, CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_header_buffer[current_buffer_element_counter].Identifier);
 800133e:	6a38      	ldr	r0, [r7, #32]
 8001340:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8001344:	4992      	ldr	r1, [pc, #584]	; (8001590 <parse_CAN_message+0x30c>)
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	440b      	add	r3, r1
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4601      	mov	r1, r0
 8001356:	4630      	mov	r0, r6
 8001358:	f000 f9e2 	bl	8001720 <convert_int_value_to_ascii_hex_char_array>

	uint8_t data_array[data_lenght];
 800135c:	f897 5028 	ldrb.w	r5, [r7, #40]	; 0x28
 8001360:	462b      	mov	r3, r5
 8001362:	3b01      	subs	r3, #1
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	b2e9      	uxtb	r1, r5
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	f04f 0400 	mov.w	r4, #0
 8001374:	00d4      	lsls	r4, r2, #3
 8001376:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800137a:	00cb      	lsls	r3, r1, #3
 800137c:	b2e9      	uxtb	r1, r5
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	f04f 0400 	mov.w	r4, #0
 800138a:	00d4      	lsls	r4, r2, #3
 800138c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001390:	00cb      	lsls	r3, r1, #3
 8001392:	462b      	mov	r3, r5
 8001394:	3307      	adds	r3, #7
 8001396:	08db      	lsrs	r3, r3, #3
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	ebad 0d03 	sub.w	sp, sp, r3
 800139e:	466b      	mov	r3, sp
 80013a0:	3300      	adds	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < sizeof(data_array); i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013a8:	e028      	b.n	80013fc <parse_CAN_message+0x178>
	{
		if ((i % 2) == 0)
 80013aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d120      	bne.n	80013f6 <parse_CAN_message+0x172>
		{
			uint8_t tmp_arr_2[2];
			convert_int_value_to_ascii_hex_char_array(sizeof(tmp_arr_2), tmp_arr_2, CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_data_buffer[current_buffer_element_counter][i/2]);
 80013b4:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80013b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ba:	0fd9      	lsrs	r1, r3, #31
 80013bc:	440b      	add	r3, r1
 80013be:	105b      	asrs	r3, r3, #1
 80013c0:	4618      	mov	r0, r3
 80013c2:	4973      	ldr	r1, [pc, #460]	; (8001590 <parse_CAN_message+0x30c>)
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	4403      	add	r3, r0
 80013d0:	33a0      	adds	r3, #160	; 0xa0
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	463b      	mov	r3, r7
 80013d8:	4619      	mov	r1, r3
 80013da:	2002      	movs	r0, #2
 80013dc:	f000 f9a0 	bl	8001720 <convert_int_value_to_ascii_hex_char_array>
			data_array[i] = tmp_arr_2[0];
 80013e0:	7839      	ldrb	r1, [r7, #0]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e6:	4413      	add	r3, r2
 80013e8:	460a      	mov	r2, r1
 80013ea:	701a      	strb	r2, [r3, #0]
			data_array[i + 1] = tmp_arr_2[1];
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	3301      	adds	r3, #1
 80013f0:	7879      	ldrb	r1, [r7, #1]
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(data_array); i++)
 80013f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f8:	3301      	adds	r3, #1
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013fc:	462a      	mov	r2, r5
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	429a      	cmp	r2, r3
 8001402:	d8d2      	bhi.n	80013aa <parse_CAN_message+0x126>
		}
	}

	uint8_t timestamp_array[CAN_TIMESTAMP_SIZE];
	convert_int_value_to_ascii_hex_char_array(sizeof(timestamp_array), timestamp_array, CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_timestamp_buffer[current_buffer_element_counter]);
 8001404:	f897 3158 	ldrb.w	r3, [r7, #344]	; 0x158
 8001408:	4a61      	ldr	r2, [pc, #388]	; (8001590 <parse_CAN_message+0x30c>)
 800140a:	3378      	adds	r3, #120	; 0x78
 800140c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001410:	461a      	mov	r2, r3
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	4619      	mov	r1, r3
 8001418:	2004      	movs	r0, #4
 800141a:	f000 f981 	bl	8001720 <convert_int_value_to_ascii_hex_char_array>

	uint8_t CAN_to_UART_message_buffer[sizeof(message_type_char) + id_lenght + CAN_DATA_LENGHT_BYTE_SIZE + data_lenght + CAN_TIMESTAMP_SIZE + sizeof(message_end_char)];
 800141e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001422:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001426:	4413      	add	r3, r2
 8001428:	1dd8      	adds	r0, r3, #7
 800142a:	466b      	mov	r3, sp
 800142c:	4699      	mov	r9, r3
 800142e:	4603      	mov	r3, r0
 8001430:	3b01      	subs	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	4601      	mov	r1, r0
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	f04f 0400 	mov.w	r4, #0
 8001442:	00d4      	lsls	r4, r2, #3
 8001444:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001448:	00cb      	lsls	r3, r1, #3
 800144a:	4601      	mov	r1, r0
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	f04f 0400 	mov.w	r4, #0
 8001458:	00d4      	lsls	r4, r2, #3
 800145a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800145e:	00cb      	lsls	r3, r1, #3
 8001460:	1dc3      	adds	r3, r0, #7
 8001462:	08db      	lsrs	r3, r3, #3
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	ebad 0d03 	sub.w	sp, sp, r3
 800146a:	466b      	mov	r3, sp
 800146c:	3300      	adds	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
	uint8_t message_element_counter = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t cycle_start_value_tmp = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
	CAN_to_UART_message_buffer[0] = message_type_char;
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001480:	701a      	strb	r2, [r3, #0]
	message_element_counter++;
 8001482:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001486:	3301      	adds	r3, #1
 8001488:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	cycle_start_value_tmp = message_element_counter;
 800148c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001490:	73fb      	strb	r3, [r7, #15]
	for (int i = message_element_counter; i < (sizeof(id_array) + cycle_start_value_tmp); i++)
 8001492:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
 8001498:	e011      	b.n	80014be <parse_CAN_message+0x23a>
	{
		CAN_to_UART_message_buffer[i] = id_array[i - cycle_start_value_tmp];
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	6a3a      	ldr	r2, [r7, #32]
 80014a2:	5cd1      	ldrb	r1, [r2, r3]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a8:	4413      	add	r3, r2
 80014aa:	460a      	mov	r2, r1
 80014ac:	701a      	strb	r2, [r3, #0]
		message_element_counter++;
 80014ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014b2:	3301      	adds	r3, #1
 80014b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = message_element_counter; i < (sizeof(id_array) + cycle_start_value_tmp); i++)
 80014b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ba:	3301      	adds	r3, #1
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
 80014be:	4632      	mov	r2, r6
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	441a      	add	r2, r3
 80014c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d8e7      	bhi.n	800149a <parse_CAN_message+0x216>
	}

	uint8_t data_lengt_tmp_buff = convert_data_lenght_to_DLC_code(data_lenght/2);
 80014ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014ce:	085b      	lsrs	r3, r3, #1
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f85e 	bl	8001594 <convert_data_lenght_to_DLC_code>
 80014d8:	4603      	mov	r3, r0
 80014da:	73bb      	strb	r3, [r7, #14]
	uint8_t CAN_DLS_char_array[1];
	convert_int_value_to_ascii_hex_char_array(sizeof(CAN_DLS_char_array), CAN_DLS_char_array, data_lengt_tmp_buff);
 80014dc:	7bba      	ldrb	r2, [r7, #14]
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	2001      	movs	r0, #1
 80014e4:	f000 f91c 	bl	8001720 <convert_int_value_to_ascii_hex_char_array>
	CAN_to_UART_message_buffer[message_element_counter] = CAN_DLS_char_array[0];
 80014e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014ec:	7939      	ldrb	r1, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	54d1      	strb	r1, [r2, r3]
	message_element_counter++;
 80014f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014f6:	3301      	adds	r3, #1
 80014f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	cycle_start_value_tmp = message_element_counter;
 80014fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001500:	73fb      	strb	r3, [r7, #15]
	for (int i = message_element_counter; i < (sizeof(data_array) + cycle_start_value_tmp); i++)
 8001502:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001506:	63bb      	str	r3, [r7, #56]	; 0x38
 8001508:	e011      	b.n	800152e <parse_CAN_message+0x2aa>
	{
		CAN_to_UART_message_buffer[i] = data_array[i - cycle_start_value_tmp];
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	5cd1      	ldrb	r1, [r2, r3]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001518:	4413      	add	r3, r2
 800151a:	460a      	mov	r2, r1
 800151c:	701a      	strb	r2, [r3, #0]
		message_element_counter++;
 800151e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001522:	3301      	adds	r3, #1
 8001524:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = message_element_counter; i < (sizeof(data_array) + cycle_start_value_tmp); i++)
 8001528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152a:	3301      	adds	r3, #1
 800152c:	63bb      	str	r3, [r7, #56]	; 0x38
 800152e:	462a      	mov	r2, r5
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	441a      	add	r2, r3
 8001534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001536:	429a      	cmp	r2, r3
 8001538:	d8e7      	bhi.n	800150a <parse_CAN_message+0x286>
	}

	cycle_start_value_tmp = message_element_counter;
 800153a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800153e:	73fb      	strb	r3, [r7, #15]
	for (int i = message_element_counter; i < (sizeof(timestamp_array) + cycle_start_value_tmp); i++)
 8001540:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001546:	e014      	b.n	8001572 <parse_CAN_message+0x2ee>
	{
		CAN_to_UART_message_buffer[i] = timestamp_array[i - cycle_start_value_tmp];
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001552:	4413      	add	r3, r2
 8001554:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155c:	4413      	add	r3, r2
 800155e:	460a      	mov	r2, r1
 8001560:	701a      	strb	r2, [r3, #0]
		message_element_counter++;
 8001562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001566:	3301      	adds	r3, #1
 8001568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = message_element_counter; i < (sizeof(timestamp_array) + cycle_start_value_tmp); i++)
 800156c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156e:	3301      	adds	r3, #1
 8001570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	1d1a      	adds	r2, r3, #4
 8001576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001578:	429a      	cmp	r2, r3
 800157a:	d8e5      	bhi.n	8001548 <parse_CAN_message+0x2c4>
 800157c:	46cd      	mov	sp, r9
 800157e:	46c5      	mov	sp, r8
	}
}
 8001580:	bf00      	nop
 8001582:	3744      	adds	r7, #68	; 0x44
 8001584:	46bd      	mov	sp, r7
 8001586:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800158a:	b004      	add	sp, #16
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000274 	.word	0x20000274

08001594 <convert_data_lenght_to_DLC_code>:

uint8_t convert_data_lenght_to_DLC_code(uint8_t value_to_convert)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
	uint8_t DLC_code;

	switch (value_to_convert)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b40      	cmp	r3, #64	; 0x40
 80015a2:	f200 80b5 	bhi.w	8001710 <convert_data_lenght_to_DLC_code+0x17c>
 80015a6:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <convert_data_lenght_to_DLC_code+0x18>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	080016b1 	.word	0x080016b1
 80015b0:	080016b7 	.word	0x080016b7
 80015b4:	080016bd 	.word	0x080016bd
 80015b8:	080016c3 	.word	0x080016c3
 80015bc:	080016c9 	.word	0x080016c9
 80015c0:	080016cf 	.word	0x080016cf
 80015c4:	080016d5 	.word	0x080016d5
 80015c8:	080016db 	.word	0x080016db
 80015cc:	080016e1 	.word	0x080016e1
 80015d0:	08001711 	.word	0x08001711
 80015d4:	08001711 	.word	0x08001711
 80015d8:	08001711 	.word	0x08001711
 80015dc:	080016e7 	.word	0x080016e7
 80015e0:	08001711 	.word	0x08001711
 80015e4:	08001711 	.word	0x08001711
 80015e8:	08001711 	.word	0x08001711
 80015ec:	080016ed 	.word	0x080016ed
 80015f0:	08001711 	.word	0x08001711
 80015f4:	08001711 	.word	0x08001711
 80015f8:	08001711 	.word	0x08001711
 80015fc:	080016f3 	.word	0x080016f3
 8001600:	08001711 	.word	0x08001711
 8001604:	08001711 	.word	0x08001711
 8001608:	08001711 	.word	0x08001711
 800160c:	080016f9 	.word	0x080016f9
 8001610:	08001711 	.word	0x08001711
 8001614:	08001711 	.word	0x08001711
 8001618:	08001711 	.word	0x08001711
 800161c:	08001711 	.word	0x08001711
 8001620:	08001711 	.word	0x08001711
 8001624:	08001711 	.word	0x08001711
 8001628:	08001711 	.word	0x08001711
 800162c:	080016ff 	.word	0x080016ff
 8001630:	08001711 	.word	0x08001711
 8001634:	08001711 	.word	0x08001711
 8001638:	08001711 	.word	0x08001711
 800163c:	08001711 	.word	0x08001711
 8001640:	08001711 	.word	0x08001711
 8001644:	08001711 	.word	0x08001711
 8001648:	08001711 	.word	0x08001711
 800164c:	08001711 	.word	0x08001711
 8001650:	08001711 	.word	0x08001711
 8001654:	08001711 	.word	0x08001711
 8001658:	08001711 	.word	0x08001711
 800165c:	08001711 	.word	0x08001711
 8001660:	08001711 	.word	0x08001711
 8001664:	08001711 	.word	0x08001711
 8001668:	08001711 	.word	0x08001711
 800166c:	08001705 	.word	0x08001705
 8001670:	08001711 	.word	0x08001711
 8001674:	08001711 	.word	0x08001711
 8001678:	08001711 	.word	0x08001711
 800167c:	08001711 	.word	0x08001711
 8001680:	08001711 	.word	0x08001711
 8001684:	08001711 	.word	0x08001711
 8001688:	08001711 	.word	0x08001711
 800168c:	08001711 	.word	0x08001711
 8001690:	08001711 	.word	0x08001711
 8001694:	08001711 	.word	0x08001711
 8001698:	08001711 	.word	0x08001711
 800169c:	08001711 	.word	0x08001711
 80016a0:	08001711 	.word	0x08001711
 80016a4:	08001711 	.word	0x08001711
 80016a8:	08001711 	.word	0x08001711
 80016ac:	0800170b 	.word	0x0800170b
	{
	case 0:
	{
		DLC_code = 0x0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]
		break;
 80016b4:	e02c      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 1:
	{
		DLC_code = 0x1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
		break;
 80016ba:	e029      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 2:
	{
		DLC_code = 0x2;
 80016bc:	2302      	movs	r3, #2
 80016be:	73fb      	strb	r3, [r7, #15]
		break;
 80016c0:	e026      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 3:
	{
		DLC_code = 0x3;
 80016c2:	2303      	movs	r3, #3
 80016c4:	73fb      	strb	r3, [r7, #15]
		break;
 80016c6:	e023      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 4:
	{
		DLC_code = 0x4;
 80016c8:	2304      	movs	r3, #4
 80016ca:	73fb      	strb	r3, [r7, #15]
		break;
 80016cc:	e020      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 5:
	{
		DLC_code = 0x5;
 80016ce:	2305      	movs	r3, #5
 80016d0:	73fb      	strb	r3, [r7, #15]
		break;
 80016d2:	e01d      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 6:
	{
		DLC_code = 0x6;
 80016d4:	2306      	movs	r3, #6
 80016d6:	73fb      	strb	r3, [r7, #15]
		break;
 80016d8:	e01a      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 7:
	{
		DLC_code = 0x7;
 80016da:	2307      	movs	r3, #7
 80016dc:	73fb      	strb	r3, [r7, #15]
		break;
 80016de:	e017      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 8:
	{
		DLC_code = 0x8;
 80016e0:	2308      	movs	r3, #8
 80016e2:	73fb      	strb	r3, [r7, #15]
		break;
 80016e4:	e014      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 12:
	{
		DLC_code = 0x9;
 80016e6:	2309      	movs	r3, #9
 80016e8:	73fb      	strb	r3, [r7, #15]
		break;
 80016ea:	e011      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 16:
	{
		DLC_code = 0xA;
 80016ec:	230a      	movs	r3, #10
 80016ee:	73fb      	strb	r3, [r7, #15]
		break;
 80016f0:	e00e      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 20:
	{
		DLC_code = 0xB;
 80016f2:	230b      	movs	r3, #11
 80016f4:	73fb      	strb	r3, [r7, #15]
		break;
 80016f6:	e00b      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 24:
	{
		DLC_code = 0xC;
 80016f8:	230c      	movs	r3, #12
 80016fa:	73fb      	strb	r3, [r7, #15]
		break;
 80016fc:	e008      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 32:
	{
		DLC_code = 0xD;
 80016fe:	230d      	movs	r3, #13
 8001700:	73fb      	strb	r3, [r7, #15]
		break;
 8001702:	e005      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 48:
	{
		DLC_code = 0xE;
 8001704:	230e      	movs	r3, #14
 8001706:	73fb      	strb	r3, [r7, #15]
		break;
 8001708:	e002      	b.n	8001710 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 64:
	{
		DLC_code = 0xF;
 800170a:	230f      	movs	r3, #15
 800170c:	73fb      	strb	r3, [r7, #15]
		break;
 800170e:	bf00      	nop
	}
	}

	return DLC_code;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop

08001720 <convert_int_value_to_ascii_hex_char_array>:

void convert_int_value_to_ascii_hex_char_array(uint8_t size_of_array, uint8_t* array, uint32_t value)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size_of_array; i++)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e018      	b.n	8001766 <convert_int_value_to_ascii_hex_char_array+0x46>
	{
		*(array + (sizeof(uint8_t) * i)) = (value >> ((size_of_array - i - 1) * INT_TO_ASCII_CONVERT_BITWISE_SHIFT)) & 0xF;
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	3b01      	subs	r3, #1
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	b2da      	uxtb	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	440b      	add	r3, r1
 800174c:	f002 020f 	and.w	r2, r2, #15
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	701a      	strb	r2, [r3, #0]
		int_to_char(array + (sizeof(uint8_t) * i));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	4413      	add	r3, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f80b 	bl	8001776 <int_to_char>
	for (int i = 0; i < size_of_array; i++)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	429a      	cmp	r2, r3
 800176c:	dbe2      	blt.n	8001734 <convert_int_value_to_ascii_hex_char_array+0x14>
	}
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <int_to_char>:

void int_to_char(uint8_t* variable_pointer)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	if (*variable_pointer <= 9)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b09      	cmp	r3, #9
 8001784:	d806      	bhi.n	8001794 <int_to_char+0x1e>
	{
		*variable_pointer = *variable_pointer + 0x30;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	3330      	adds	r3, #48	; 0x30
 800178c:	b2da      	uxtb	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*variable_pointer = *variable_pointer + 0x40 - 9;
	}
}
 8001792:	e005      	b.n	80017a0 <int_to_char+0x2a>
		*variable_pointer = *variable_pointer + 0x40 - 9;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	3337      	adds	r3, #55	; 0x37
 800179a:	b2da      	uxtb	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	701a      	strb	r2, [r3, #0]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <init_CAN_values>:

void init_CAN_values(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
	CAN_RX_queue_buffer_write_counter = 0;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <init_CAN_values+0x48>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < sizeof(CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_data_buffer); i++)			// инициализируем нулями массив очереди на отправку
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	e00e      	b.n	80017dc <init_CAN_values+0x30>
	{
		init_int_array_by_zero(sizeof(CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_data_buffer[i]), CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_data_buffer[i]);
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	33a0      	adds	r3, #160	; 0xa0
 80017ca:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <init_CAN_values+0x4c>)
 80017cc:	4413      	add	r3, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	2014      	movs	r0, #20
 80017d2:	f000 fa43 	bl	8001c5c <init_int_array_by_zero>
	for (int i = 0; i < sizeof(CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_data_buffer); i++)			// инициализируем нулями массив очереди на отправку
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3301      	adds	r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b4f      	cmp	r3, #79	; 0x4f
 80017e0:	d9ed      	bls.n	80017be <init_CAN_values+0x12>
	}

	init_int_array_by_zero(sizeof(CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_timestamp_buffer), (uint8_t*)CAN_RX_header_data_timestamp_struct_buffer.CAN_RX_timestamp_buffer);
 80017e2:	4906      	ldr	r1, [pc, #24]	; (80017fc <init_CAN_values+0x50>)
 80017e4:	2008      	movs	r0, #8
 80017e6:	f000 fa39 	bl	8001c5c <init_int_array_by_zero>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000017d 	.word	0x2000017d
 80017f8:	20000274 	.word	0x20000274
 80017fc:	20000364 	.word	0x20000364

08001800 <set_can_frame_parameters>:

CAN_ParametersSet_StructTypeDef set_can_frame_parameters(uint32_t id_type_set)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	CAN_ParametersSet_StructTypeDef CAN_frame_parameters;

	switch (id_type_set)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <set_can_frame_parameters+0x18>
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001814:	d00b      	beq.n	800182e <set_can_frame_parameters+0x2e>
 8001816:	e016      	b.n	8001846 <set_can_frame_parameters+0x46>
	{
	case FDCAN_STANDARD_ID:
	{
		CAN_frame_parameters.id_type = FDCAN_STANDARD_ID;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
		CAN_frame_parameters.id_lenght_in_bytes = STANDARD_CAN_MESSAGE_ID_LENGHT_BYTE;
 800181c:	2303      	movs	r3, #3
 800181e:	733b      	strb	r3, [r7, #12]
		CAN_frame_parameters.id_byte_number = STANDARD_CAN_MESSAGE_ID_BYTE;
 8001820:	2301      	movs	r3, #1
 8001822:	737b      	strb	r3, [r7, #13]
		CAN_frame_parameters.data_lenght_byte_number = STANDARD_CAN_MESSAGE_DATA_LENGHT_BYTE;
 8001824:	2304      	movs	r3, #4
 8001826:	73bb      	strb	r3, [r7, #14]
		CAN_frame_parameters.data_start_byte_number = STANDARD_CAN_MESSAGE_DATA_START_BYTE;
 8001828:	2305      	movs	r3, #5
 800182a:	73fb      	strb	r3, [r7, #15]
		break;
 800182c:	e00b      	b.n	8001846 <set_can_frame_parameters+0x46>
	}
	case FDCAN_EXTENDED_ID:
	{
		CAN_frame_parameters.id_type = FDCAN_EXTENDED_ID;
 800182e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001832:	60bb      	str	r3, [r7, #8]
		CAN_frame_parameters.id_lenght_in_bytes = EXTENDED_CAN_MESSAGE_ID_LENGHT_BYTE;
 8001834:	2308      	movs	r3, #8
 8001836:	733b      	strb	r3, [r7, #12]
		CAN_frame_parameters.id_byte_number = EXTENDED_CAN_MESSAGE_ID_BYTE;
 8001838:	2301      	movs	r3, #1
 800183a:	737b      	strb	r3, [r7, #13]
		CAN_frame_parameters.data_lenght_byte_number = EXTENDED_CAN_MESSAGE_DATA_LENGHT_BYTE;
 800183c:	2309      	movs	r3, #9
 800183e:	73bb      	strb	r3, [r7, #14]
		CAN_frame_parameters.data_start_byte_number = EXTENDED_CAN_MESSAGE_DATA_START_BYTE;
 8001840:	230a      	movs	r3, #10
 8001842:	73fb      	strb	r3, [r7, #15]
		break;
 8001844:	bf00      	nop
	}
	}

	return CAN_frame_parameters;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	461a      	mov	r2, r3
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001852:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <send_CAN_frame>:

void send_CAN_frame(char* can_buffer_to_parse, CAN_ParametersSet_StructTypeDef CAN_frame_parameters_set)
{
 8001862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001866:	b08e      	sub	sp, #56	; 0x38
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	e883 0006 	stmia.w	r3, {r1, r2}
 8001872:	466b      	mov	r3, sp
 8001874:	461e      	mov	r6, r3
	uint8_t id_array[CAN_frame_parameters_set.id_lenght_in_bytes];
 8001876:	7a3d      	ldrb	r5, [r7, #8]
 8001878:	462b      	mov	r3, r5
 800187a:	3b01      	subs	r3, #1
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
 800187e:	b2e9      	uxtb	r1, r5
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	f04f 0400 	mov.w	r4, #0
 800188c:	00d4      	lsls	r4, r2, #3
 800188e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001892:	00cb      	lsls	r3, r1, #3
 8001894:	b2e9      	uxtb	r1, r5
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	f04f 0400 	mov.w	r4, #0
 80018a2:	00d4      	lsls	r4, r2, #3
 80018a4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80018a8:	00cb      	lsls	r3, r1, #3
 80018aa:	462b      	mov	r3, r5
 80018ac:	3307      	adds	r3, #7
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	ebad 0d03 	sub.w	sp, sp, r3
 80018b6:	466b      	mov	r3, sp
 80018b8:	3300      	adds	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i = 0; i < sizeof(id_array); i++)
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c0:	e014      	b.n	80018ec <send_CAN_frame+0x8a>
	{
		id_array[i] = convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.id_byte_number + i]);
 80018c2:	7a7b      	ldrb	r3, [r7, #9]
 80018c4:	461a      	mov	r2, r3
 80018c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c8:	4413      	add	r3, r2
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f897 	bl	8001a06 <convert_ascii_hex_char_to_int_value>
 80018d8:	4603      	mov	r3, r0
 80018da:	4619      	mov	r1, r3
 80018dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	4413      	add	r3, r2
 80018e2:	460a      	mov	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(id_array); i++)
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	3301      	adds	r3, #1
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ec:	462a      	mov	r2, r5
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d8e6      	bhi.n	80018c2 <send_CAN_frame+0x60>
	}
	uint32_t identifier = unite_digits_sequence(sizeof(id_array), id_array, ASCII_TO_INT_CONVERT_BITWISE_SHIFT);
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	2204      	movs	r2, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4628      	mov	r0, r5
 80018fc:	f000 f9c9 	bl	8001c92 <unite_digits_sequence>
 8001900:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t data_lenght = CAN_TX_message_DLC_bytes_define(convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_lenght_byte_number]));
 8001902:	7abb      	ldrb	r3, [r7, #10]
 8001904:	461a      	mov	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f87a 	bl	8001a06 <convert_ascii_hex_char_to_int_value>
 8001912:	4603      	mov	r3, r0
 8001914:	4618      	mov	r0, r3
 8001916:	f000 f90b 	bl	8001b30 <CAN_TX_message_DLC_bytes_define>
 800191a:	6238      	str	r0, [r7, #32]
	uint8_t can_tx_data_buffer[convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_lenght_byte_number])];
 800191c:	7abb      	ldrb	r3, [r7, #10]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f86d 	bl	8001a06 <convert_ascii_hex_char_to_int_value>
 800192c:	4603      	mov	r3, r0
 800192e:	461d      	mov	r5, r3
 8001930:	466b      	mov	r3, sp
 8001932:	4698      	mov	r8, r3
 8001934:	462b      	mov	r3, r5
 8001936:	3b01      	subs	r3, #1
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	b2e9      	uxtb	r1, r5
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	f04f 0400 	mov.w	r4, #0
 8001948:	00d4      	lsls	r4, r2, #3
 800194a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800194e:	00cb      	lsls	r3, r1, #3
 8001950:	b2e9      	uxtb	r1, r5
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	f04f 0400 	mov.w	r4, #0
 800195e:	00d4      	lsls	r4, r2, #3
 8001960:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001964:	00cb      	lsls	r3, r1, #3
 8001966:	462b      	mov	r3, r5
 8001968:	3307      	adds	r3, #7
 800196a:	08db      	lsrs	r3, r3, #3
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	ebad 0d03 	sub.w	sp, sp, r3
 8001972:	466b      	mov	r3, sp
 8001974:	3300      	adds	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]

	for (int i = 0; i < (sizeof(can_tx_data_buffer)*2); i++)
 8001978:	2300      	movs	r3, #0
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
 800197c:	e031      	b.n	80019e2 <send_CAN_frame+0x180>
	{
		if ((i % 2) == 0)
 800197e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d129      	bne.n	80019dc <send_CAN_frame+0x17a>
		{
			uint8_t value_array[2];
			value_array[0] = convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_start_byte_number + i]);
 8001988:	7afb      	ldrb	r3, [r7, #11]
 800198a:	461a      	mov	r2, r3
 800198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198e:	4413      	add	r3, r2
 8001990:	461a      	mov	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4413      	add	r3, r2
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f000 f834 	bl	8001a06 <convert_ascii_hex_char_to_int_value>
 800199e:	4603      	mov	r3, r0
 80019a0:	753b      	strb	r3, [r7, #20]
			value_array[1] = convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_start_byte_number + i + 1]);
 80019a2:	7afb      	ldrb	r3, [r7, #11]
 80019a4:	461a      	mov	r2, r3
 80019a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a8:	4413      	add	r3, r2
 80019aa:	3301      	adds	r3, #1
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f827 	bl	8001a06 <convert_ascii_hex_char_to_int_value>
 80019b8:	4603      	mov	r3, r0
 80019ba:	757b      	strb	r3, [r7, #21]
			can_tx_data_buffer[i/2] = unite_digits_sequence(sizeof(value_array), value_array, ASCII_TO_INT_CONVERT_BITWISE_SHIFT);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2204      	movs	r2, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	2002      	movs	r0, #2
 80019c6:	f000 f964 	bl	8001c92 <unite_digits_sequence>
 80019ca:	4601      	mov	r1, r0
 80019cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ce:	0fda      	lsrs	r2, r3, #31
 80019d0:	4413      	add	r3, r2
 80019d2:	105b      	asrs	r3, r3, #1
 80019d4:	461a      	mov	r2, r3
 80019d6:	b2c9      	uxtb	r1, r1
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	5499      	strb	r1, [r3, r2]
	for (int i = 0; i < (sizeof(can_tx_data_buffer)*2); i++)
 80019dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019de:	3301      	adds	r3, #1
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
 80019e2:	462b      	mov	r3, r5
 80019e4:	005a      	lsls	r2, r3, #1
 80019e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d8c8      	bhi.n	800197e <send_CAN_frame+0x11c>
		}
	}

	CAN_transmit_message(CAN_frame_parameters_set.id_type, identifier, data_lenght, can_tx_data_buffer);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	6a3a      	ldr	r2, [r7, #32]
 80019f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019f4:	f000 f90c 	bl	8001c10 <CAN_transmit_message>
 80019f8:	46c5      	mov	sp, r8
 80019fa:	46b5      	mov	sp, r6
}
 80019fc:	bf00      	nop
 80019fe:	3738      	adds	r7, #56	; 0x38
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a06 <convert_ascii_hex_char_to_int_value>:

uint8_t convert_ascii_hex_char_to_int_value(char char_to_convert)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
	uint8_t int_value = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	73fb      	strb	r3, [r7, #15]
	if ((int)char_to_convert <= (int)'9')
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	2b39      	cmp	r3, #57	; 0x39
 8001a18:	d803      	bhi.n	8001a22 <convert_ascii_hex_char_to_int_value+0x1c>
	{
		int_value = char_to_convert - '0';
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	3b30      	subs	r3, #48	; 0x30
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e002      	b.n	8001a28 <convert_ascii_hex_char_to_int_value+0x22>
	}
	else
	{
		int_value = char_to_convert - 'A' + 10;
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	3b37      	subs	r3, #55	; 0x37
 8001a26:	73fb      	strb	r3, [r7, #15]
	}

	return int_value;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <CAN_RX_message_data_lenght_define>:
uint32_t CAN_RX_message_data_lenght_define(uint32_t data_lenght_code)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
	uint32_t lenght_bytes;

	switch (data_lenght_code)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001a44:	d051      	beq.n	8001aea <CAN_RX_message_data_lenght_define+0xb4>
 8001a46:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001a4a:	d818      	bhi.n	8001a7e <CAN_RX_message_data_lenght_define+0x48>
 8001a4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001a50:	d03f      	beq.n	8001ad2 <CAN_RX_message_data_lenght_define+0x9c>
 8001a52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001a56:	d808      	bhi.n	8001a6a <CAN_RX_message_data_lenght_define+0x34>
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5c:	d033      	beq.n	8001ac6 <CAN_RX_message_data_lenght_define+0x90>
 8001a5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a62:	d033      	beq.n	8001acc <CAN_RX_message_data_lenght_define+0x96>
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d02b      	beq.n	8001ac0 <CAN_RX_message_data_lenght_define+0x8a>
 8001a68:	e05a      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
 8001a6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a6e:	d036      	beq.n	8001ade <CAN_RX_message_data_lenght_define+0xa8>
 8001a70:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001a74:	d036      	beq.n	8001ae4 <CAN_RX_message_data_lenght_define+0xae>
 8001a76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a7a:	d02d      	beq.n	8001ad8 <CAN_RX_message_data_lenght_define+0xa2>
 8001a7c:	e050      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
 8001a7e:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8001a82:	d03e      	beq.n	8001b02 <CAN_RX_message_data_lenght_define+0xcc>
 8001a84:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8001a88:	d809      	bhi.n	8001a9e <CAN_RX_message_data_lenght_define+0x68>
 8001a8a:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8001a8e:	d032      	beq.n	8001af6 <CAN_RX_message_data_lenght_define+0xc0>
 8001a90:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001a94:	d032      	beq.n	8001afc <CAN_RX_message_data_lenght_define+0xc6>
 8001a96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a9a:	d029      	beq.n	8001af0 <CAN_RX_message_data_lenght_define+0xba>
 8001a9c:	e040      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
 8001a9e:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8001aa2:	d034      	beq.n	8001b0e <CAN_RX_message_data_lenght_define+0xd8>
 8001aa4:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8001aa8:	d803      	bhi.n	8001ab2 <CAN_RX_message_data_lenght_define+0x7c>
 8001aaa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001aae:	d02b      	beq.n	8001b08 <CAN_RX_message_data_lenght_define+0xd2>
 8001ab0:	e036      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
 8001ab2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ab6:	d02d      	beq.n	8001b14 <CAN_RX_message_data_lenght_define+0xde>
 8001ab8:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8001abc:	d02d      	beq.n	8001b1a <CAN_RX_message_data_lenght_define+0xe4>
 8001abe:	e02f      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	{
	case FDCAN_DLC_BYTES_0:
	{
		lenght_bytes = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
		break;
 8001ac4:	e02c      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_1:
	{
		lenght_bytes = 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
		break;
 8001aca:	e029      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_2:
	{
		lenght_bytes = 2;
 8001acc:	2302      	movs	r3, #2
 8001ace:	60fb      	str	r3, [r7, #12]
		break;
 8001ad0:	e026      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_3:
	{
		lenght_bytes = 3;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	60fb      	str	r3, [r7, #12]
		break;
 8001ad6:	e023      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_4:
	{
		lenght_bytes = 4;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	60fb      	str	r3, [r7, #12]
		break;
 8001adc:	e020      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_5:
	{
		lenght_bytes = 5;
 8001ade:	2305      	movs	r3, #5
 8001ae0:	60fb      	str	r3, [r7, #12]
		break;
 8001ae2:	e01d      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_6:
	{
		lenght_bytes = 6;
 8001ae4:	2306      	movs	r3, #6
 8001ae6:	60fb      	str	r3, [r7, #12]
		break;
 8001ae8:	e01a      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_7:
	{
		lenght_bytes = 7;
 8001aea:	2307      	movs	r3, #7
 8001aec:	60fb      	str	r3, [r7, #12]
		break;
 8001aee:	e017      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_8:
	{
		lenght_bytes = 8;
 8001af0:	2308      	movs	r3, #8
 8001af2:	60fb      	str	r3, [r7, #12]
		break;
 8001af4:	e014      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_12:
	{
		lenght_bytes = 12;
 8001af6:	230c      	movs	r3, #12
 8001af8:	60fb      	str	r3, [r7, #12]
		break;
 8001afa:	e011      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_16:
	{
		lenght_bytes = 16;
 8001afc:	2310      	movs	r3, #16
 8001afe:	60fb      	str	r3, [r7, #12]
		break;
 8001b00:	e00e      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_20:
	{
		lenght_bytes = 20;
 8001b02:	2314      	movs	r3, #20
 8001b04:	60fb      	str	r3, [r7, #12]
		break;
 8001b06:	e00b      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_24:
	{
		lenght_bytes = 24;
 8001b08:	2318      	movs	r3, #24
 8001b0a:	60fb      	str	r3, [r7, #12]
		break;
 8001b0c:	e008      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_32:
	{
		lenght_bytes = 32;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	60fb      	str	r3, [r7, #12]
		break;
 8001b12:	e005      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_48:
	{
		lenght_bytes = 48;
 8001b14:	2330      	movs	r3, #48	; 0x30
 8001b16:	60fb      	str	r3, [r7, #12]
		break;
 8001b18:	e002      	b.n	8001b20 <CAN_RX_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_64:
	{
		lenght_bytes = 64;
 8001b1a:	2340      	movs	r3, #64	; 0x40
 8001b1c:	60fb      	str	r3, [r7, #12]
		break;
 8001b1e:	bf00      	nop
	}
	}

	return lenght_bytes;
 8001b20:	68fb      	ldr	r3, [r7, #12]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <CAN_TX_message_DLC_bytes_define>:

uint32_t CAN_TX_message_DLC_bytes_define(uint32_t data_lenght_bytes)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	uint32_t DLC_bytes;

	switch (data_lenght_bytes)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	d861      	bhi.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
 8001b3e:	a201      	add	r2, pc, #4	; (adr r2, 8001b44 <CAN_TX_message_DLC_bytes_define+0x14>)
 8001b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b44:	08001b85 	.word	0x08001b85
 8001b48:	08001b8b 	.word	0x08001b8b
 8001b4c:	08001b93 	.word	0x08001b93
 8001b50:	08001b9b 	.word	0x08001b9b
 8001b54:	08001ba3 	.word	0x08001ba3
 8001b58:	08001bab 	.word	0x08001bab
 8001b5c:	08001bb3 	.word	0x08001bb3
 8001b60:	08001bbb 	.word	0x08001bbb
 8001b64:	08001bc3 	.word	0x08001bc3
 8001b68:	08001bcb 	.word	0x08001bcb
 8001b6c:	08001bd3 	.word	0x08001bd3
 8001b70:	08001bdb 	.word	0x08001bdb
 8001b74:	08001be3 	.word	0x08001be3
 8001b78:	08001beb 	.word	0x08001beb
 8001b7c:	08001bf3 	.word	0x08001bf3
 8001b80:	08001bfb 	.word	0x08001bfb
	{
	case 0x0:
	{
		DLC_bytes = FDCAN_DLC_BYTES_0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
		break;
 8001b88:	e03b      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x1:
	{
		DLC_bytes = FDCAN_DLC_BYTES_1;
 8001b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b8e:	60fb      	str	r3, [r7, #12]
		break;
 8001b90:	e037      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x2:
	{
		DLC_bytes = FDCAN_DLC_BYTES_2;
 8001b92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b96:	60fb      	str	r3, [r7, #12]
		break;
 8001b98:	e033      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x3:
	{
		DLC_bytes = FDCAN_DLC_BYTES_3;
 8001b9a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001b9e:	60fb      	str	r3, [r7, #12]
		break;
 8001ba0:	e02f      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x4:
	{
		DLC_bytes = FDCAN_DLC_BYTES_4;
 8001ba2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ba6:	60fb      	str	r3, [r7, #12]
		break;
 8001ba8:	e02b      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x5:
	{
		DLC_bytes = FDCAN_DLC_BYTES_5;
 8001baa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bae:	60fb      	str	r3, [r7, #12]
		break;
 8001bb0:	e027      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x6:
	{
		DLC_bytes = FDCAN_DLC_BYTES_6;
 8001bb2:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001bb6:	60fb      	str	r3, [r7, #12]
		break;
 8001bb8:	e023      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x7:
	{
		DLC_bytes = FDCAN_DLC_BYTES_7;
 8001bba:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8001bbe:	60fb      	str	r3, [r7, #12]
		break;
 8001bc0:	e01f      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x8:
	{
		DLC_bytes = FDCAN_DLC_BYTES_8;
 8001bc2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bc6:	60fb      	str	r3, [r7, #12]
		break;
 8001bc8:	e01b      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x9:
	{
		DLC_bytes = FDCAN_DLC_BYTES_12;
 8001bca:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8001bce:	60fb      	str	r3, [r7, #12]
		break;
 8001bd0:	e017      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xA:
	{
		DLC_bytes = FDCAN_DLC_BYTES_16;
 8001bd2:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8001bd6:	60fb      	str	r3, [r7, #12]
		break;
 8001bd8:	e013      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xB:
	{
		DLC_bytes = FDCAN_DLC_BYTES_20;
 8001bda:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8001bde:	60fb      	str	r3, [r7, #12]
		break;
 8001be0:	e00f      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xC:
	{
		DLC_bytes = FDCAN_DLC_BYTES_24;
 8001be2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001be6:	60fb      	str	r3, [r7, #12]
		break;
 8001be8:	e00b      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xD:
	{
		DLC_bytes = FDCAN_DLC_BYTES_32;
 8001bea:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 8001bee:	60fb      	str	r3, [r7, #12]
		break;
 8001bf0:	e007      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xE:
	{
		DLC_bytes = FDCAN_DLC_BYTES_48;
 8001bf2:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8001bf6:	60fb      	str	r3, [r7, #12]
		break;
 8001bf8:	e003      	b.n	8001c02 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xF:
	{
		DLC_bytes = FDCAN_DLC_BYTES_64;
 8001bfa:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8001bfe:	60fb      	str	r3, [r7, #12]
		break;
 8001c00:	bf00      	nop
	}
	}

	return DLC_bytes;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <CAN_transmit_message>:

void CAN_transmit_message(uint32_t id_type, uint32_t identifier, uint32_t data_lenght, uint8_t* tx_data)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08e      	sub	sp, #56	; 0x38
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
	FDCAN_TxHeaderTypeDef tx_header;

	tx_header.Identifier = identifier;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	617b      	str	r3, [r7, #20]
	tx_header.IdType = id_type;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
	tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
	tx_header.DataLength = data_lenght;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	623b      	str	r3, [r7, #32]
	tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
	tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
	tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
	tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
	tx_header.MessageMarker = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &tx_header, tx_data);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4803      	ldr	r0, [pc, #12]	; (8001c58 <CAN_transmit_message+0x48>)
 8001c4c:	f000 fc36 	bl	80024bc <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8001c50:	bf00      	nop
 8001c52:	3738      	adds	r7, #56	; 0x38
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000180 	.word	0x20000180

08001c5c <init_int_array_by_zero>:
	}
}

// инициализируем нулями целочисленный массив
void init_int_array_by_zero(uint16_t array_size, uint8_t* array_pointer)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	80fb      	strh	r3, [r7, #6]
	for (int int_zero_counter = 0; int_zero_counter < array_size; int_zero_counter++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e007      	b.n	8001c7e <init_int_array_by_zero+0x22>
	{
		*(array_pointer + int_zero_counter) = 0;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
	for (int int_zero_counter = 0; int_zero_counter < array_size; int_zero_counter++)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbf3      	blt.n	8001c6e <init_int_array_by_zero+0x12>
	}
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <unite_digits_sequence>:

uint32_t unite_digits_sequence(uint8_t number_of_values, uint8_t *byte_array_pointer, uint8_t bitwise_shift)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b085      	sub	sp, #20
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	6039      	str	r1, [r7, #0]
 8001c9c:	71fb      	strb	r3, [r7, #7]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	71bb      	strb	r3, [r7, #6]
	uint32_t summary_value = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
	for (int i = number_of_values - 1; i >= 0; i--)
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	e014      	b.n	8001cd8 <unite_digits_sequence+0x46>
	{
		summary_value = summary_value | (byte_array_pointer[i] << ((number_of_values - 1 - i)*bitwise_shift));
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	1e5a      	subs	r2, r3, #1
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	79ba      	ldrb	r2, [r7, #6]
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
	for (int i = number_of_values - 1; i >= 0; i--)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	dae7      	bge.n	8001cae <unite_digits_sequence+0x1c>
	}
	return summary_value;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cf2:	490e      	ldr	r1, [pc, #56]	; (8001d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <LoopForever+0xe>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d08:	4c0b      	ldr	r4, [pc, #44]	; (8001d38 <LoopForever+0x16>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d16:	f7fe ff11 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f004 f9af 	bl	800607c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d1e:	f7fe fc05 	bl	800052c <main>

08001d22 <LoopForever>:

LoopForever:
    b LoopForever
 8001d22:	e7fe      	b.n	8001d22 <LoopForever>
  ldr   r0, =_estack
 8001d24:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d30:	0800643c 	.word	0x0800643c
  ldr r2, =_sbss
 8001d34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d38:	20000374 	.word	0x20000374

08001d3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC1_2_IRQHandler>

08001d3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d48:	2003      	movs	r0, #3
 8001d4a:	f000 f939 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f000 f80e 	bl	8001d70 <HAL_InitTick>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	71fb      	strb	r3, [r7, #7]
 8001d5e:	e001      	b.n	8001d64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d60:	f7fe fdb8 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d64:	79fb      	ldrb	r3, [r7, #7]

}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_InitTick+0x68>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d022      	beq.n	8001dca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d84:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_InitTick+0x6c>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_InitTick+0x68>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 f944 	bl	8002026 <HAL_SYSTICK_Config>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10f      	bne.n	8001dc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	d809      	bhi.n	8001dbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001daa:	2200      	movs	r2, #0
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	f04f 30ff 	mov.w	r0, #4294967295
 8001db2:	f000 f910 	bl	8001fd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_InitTick+0x70>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e007      	b.n	8001dce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
 8001dc2:	e004      	b.n	8001dce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e001      	b.n	8001dce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_IncTick+0x1c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_IncTick+0x20>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <HAL_IncTick+0x1c>)
 8001df4:	6013      	str	r3, [r2, #0]
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	20000370 	.word	0x20000370
 8001e04:	20000008 	.word	0x20000008

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000370 	.word	0x20000370

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff40 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff90 	bl	8001f14 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5f 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff33 	bl	8001e84 <__NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffa4 	bl	8001f7c <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d00d      	beq.n	8002072 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2204      	movs	r2, #4
 800205a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e047      	b.n	8002102 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 020e 	bic.w	r2, r2, #14
 8002080:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f003 021f 	and.w	r2, r3, #31
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2101      	movs	r1, #1
 80020b0:	fa01 f202 	lsl.w	r2, r1, r2
 80020b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
    }
  }
  return status;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e147      	b.n	80023ae <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fbf2 	bl	800091c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0210 	bic.w	r2, r2, #16
 8002146:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002148:	f7ff fe5e 	bl	8001e08 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800214e:	e012      	b.n	8002176 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002150:	f7ff fe5a 	bl	8001e08 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b0a      	cmp	r3, #10
 800215c:	d90b      	bls.n	8002176 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002162:	f043 0201 	orr.w	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2203      	movs	r2, #3
 800216e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e11b      	b.n	80023ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b08      	cmp	r3, #8
 8002182:	d0e5      	beq.n	8002150 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002194:	f7ff fe38 	bl	8001e08 <HAL_GetTick>
 8002198:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800219a:	e012      	b.n	80021c2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800219c:	f7ff fe34 	bl	8001e08 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b0a      	cmp	r3, #10
 80021a8:	d90b      	bls.n	80021c2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ae:	f043 0201 	orr.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0f5      	b.n	80023ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0e5      	beq.n	800219c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0202 	orr.w	r2, r2, #2
 80021de:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a74      	ldr	r2, [pc, #464]	; (80023b8 <HAL_FDCAN_Init+0x2ac>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d103      	bne.n	80021f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80021ea:	4a74      	ldr	r2, [pc, #464]	; (80023bc <HAL_FDCAN_Init+0x2b0>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7c1b      	ldrb	r3, [r3, #16]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002208:	619a      	str	r2, [r3, #24]
 800220a:	e007      	b.n	800221c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800221a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7c5b      	ldrb	r3, [r3, #17]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d108      	bne.n	8002236 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002232:	619a      	str	r2, [r3, #24]
 8002234:	e007      	b.n	8002246 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002244:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7c9b      	ldrb	r3, [r3, #18]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699a      	ldr	r2, [r3, #24]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800225c:	619a      	str	r2, [r3, #24]
 800225e:	e007      	b.n	8002270 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800226e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002294:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0210 	bic.w	r2, r2, #16
 80022a4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0204 	orr.w	r2, r2, #4
 80022bc:	619a      	str	r2, [r3, #24]
 80022be:	e02c      	b.n	800231a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d028      	beq.n	800231a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d01c      	beq.n	800230a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022de:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0210 	orr.w	r2, r2, #16
 80022ee:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d110      	bne.n	800231a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0220 	orr.w	r2, r2, #32
 8002306:	619a      	str	r2, [r3, #24]
 8002308:	e007      	b.n	800231a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0220 	orr.w	r2, r2, #32
 8002318:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	3b01      	subs	r3, #1
 8002320:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	3b01      	subs	r3, #1
 8002328:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800232a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002332:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	3b01      	subs	r3, #1
 800233c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002342:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002344:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800234e:	d115      	bne.n	800237c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	3b01      	subs	r3, #1
 800235c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800235e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	3b01      	subs	r3, #1
 8002366:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002368:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	3b01      	subs	r3, #1
 8002372:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002378:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800237a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fc44 	bl	8002c20 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40006400 	.word	0x40006400
 80023bc:	40006500 	.word	0x40006500

080023c0 <HAL_FDCAN_ConfigTimestampCounter>:
  * @param  TimestampPrescaler Timestamp Counter Prescaler.
  *         This parameter can be a value of @arg FDCAN_Timestamp_Prescaler.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTimestampCounter(FDCAN_HandleTypeDef *hfdcan, uint32_t TimestampPrescaler)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TIMESTAMP_PRESCALER(TimestampPrescaler));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d10b      	bne.n	80023ee <HAL_FDCAN_ConfigTimestampCounter+0x2e>
  {
    /* Configure prescaler */
    MODIFY_REG(hfdcan->Instance->TSCC, FDCAN_TSCC_TCP, TimestampPrescaler);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	621a      	str	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e006      	b.n	80023fc <HAL_FDCAN_ConfigTimestampCounter+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	f043 0204 	orr.w	r2, r3, #4
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_FDCAN_EnableTimestampCounter>:
  * @param  TimestampOperation Timestamp counter operation.
  *         This parameter can be a value of @arg FDCAN_Timestamp.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTimestampCounter(FDCAN_HandleTypeDef *hfdcan, uint32_t TimestampOperation)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TIMESTAMP(TimestampOperation));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d10b      	bne.n	8002436 <HAL_FDCAN_EnableTimestampCounter+0x2e>
  {
    /* Enable timestamp counter */
    MODIFY_REG(hfdcan->Instance->TSCC, FDCAN_TSCC_TSS, TimestampOperation);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f023 0103 	bic.w	r1, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	621a      	str	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e006      	b.n	8002444 <HAL_FDCAN_EnableTimestampCounter+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243a:	f043 0204 	orr.w	r2, r3, #4
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
  }
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_FDCAN_GetTimestampCounter>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Timestamp counter value
  */
uint16_t HAL_FDCAN_GetTimestampCounter(FDCAN_HandleTypeDef *hfdcan)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return (uint16_t)(hfdcan->Instance->TSCV);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	b29b      	uxth	r3, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d110      	bne.n	80024a2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e006      	b.n	80024b0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a6:	f043 0204 	orr.w	r2, r3, #4
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
  }
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d12c      	bne.n	800252e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e023      	b.n	800253c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fbde 	bl	8002ccc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2101      	movs	r1, #1
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	fa01 f202 	lsl.w	r2, r1, r2
 800251c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002520:	2201      	movs	r2, #1
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	409a      	lsls	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e006      	b.n	800253c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002532:	f043 0208 	orr.w	r2, r3, #8
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
  }
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002544:	b480      	push	{r7}
 8002546:	b08b      	sub	sp, #44	; 0x2c
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002558:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800255a:	7efb      	ldrb	r3, [r7, #27]
 800255c:	2b02      	cmp	r3, #2
 800255e:	f040 80bc 	bne.w	80026da <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d121      	bne.n	80025ac <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0af      	b.n	80026e8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
 80025aa:	e020      	b.n	80025ee <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e08d      	b.n	80026e8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d107      	bne.n	8002612 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0c9b      	lsrs	r3, r3, #18
 8002608:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e005      	b.n	800261e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	3304      	adds	r3, #4
 800263a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b29a      	uxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e1b      	lsrs	r3, r3, #24
 8002670:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0fda      	lsrs	r2, r3, #31
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	3304      	adds	r3, #4
 8002686:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	e00a      	b.n	80026a8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	441a      	add	r2, r3
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	440b      	add	r3, r1
 800269e:	7812      	ldrb	r2, [r2, #0]
 80026a0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	3301      	adds	r3, #1
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80026b0:	5cd3      	ldrb	r3, [r2, r3]
 80026b2:	461a      	mov	r2, r3
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d3eb      	bcc.n	8002692 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b40      	cmp	r3, #64	; 0x40
 80026be:	d105      	bne.n	80026cc <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80026ca:	e004      	b.n	80026d6 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e006      	b.n	80026e8 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	f043 0208 	orr.w	r2, r3, #8
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	372c      	adds	r7, #44	; 0x2c
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	08006404 	.word	0x08006404

080026f8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800270a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d003      	beq.n	800271a <HAL_FDCAN_ActivateNotification+0x22>
 8002712:	7dfb      	ldrb	r3, [r7, #23]
 8002714:	2b02      	cmp	r3, #2
 8002716:	f040 80c8 	bne.w	80028aa <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d03b      	beq.n	80027ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d031      	beq.n	80027ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d027      	beq.n	80027ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d01d      	beq.n	80027ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d013      	beq.n	80027ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00c      	beq.n	80027be <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d107      	bne.n	80027be <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d13b      	bne.n	800284a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d131      	bne.n	800284a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d127      	bne.n	800284a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d11d      	bne.n	800284a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002814:	2b00      	cmp	r3, #0
 8002816:	d004      	beq.n	8002822 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	d113      	bne.n	800284a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00c      	beq.n	800285a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0202 	orr.w	r2, r2, #2
 8002858:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	2b00      	cmp	r3, #0
 8002862:	d009      	beq.n	8002878 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	430a      	orrs	r2, r1
 8002874:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	430a      	orrs	r2, r1
 8002892:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e006      	b.n	80028b8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ae:	f043 0202 	orr.w	r2, r3, #2
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e0:	4013      	ands	r3, r2
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	6a3a      	ldr	r2, [r7, #32]
 80028f8:	4013      	ands	r3, r2
 80028fa:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002906:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	4013      	ands	r3, r2
 8002912:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800291e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002932:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002936:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4013      	ands	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00d      	beq.n	800296e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2240      	movs	r2, #64	; 0x40
 8002966:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f939 	bl	8002be0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01b      	beq.n	80029b4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d014      	beq.n	80029b4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002992:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029aa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80029ac:	6939      	ldr	r1, [r7, #16]
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8f7 	bl	8002ba2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80029c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f8b6 	bl	8002b36 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80029d8:	6a39      	ldr	r1, [r7, #32]
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f8b6 	bl	8002b4c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80029ee:	69f9      	ldr	r1, [r7, #28]
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f8b6 	bl	8002b62 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00e      	beq.n	8002a22 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f8ab 	bl	8002b78 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01a      	beq.n	8002a66 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d013      	beq.n	8002a66 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a46:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4013      	ands	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002a5e:	68f9      	ldr	r1, [r7, #12]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f893 	bl	8002b8c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00e      	beq.n	8002a92 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a8a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f893 	bl	8002bb8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00e      	beq.n	8002abe <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ab6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f887 	bl	8002bcc <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d011      	beq.n	8002af0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ae2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002afe:	6979      	ldr	r1, [r7, #20]
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f881 	bl	8002c08 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f863 	bl	8002bf4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002b2e:	bf00      	nop
 8002b30:	3728      	adds	r7, #40	; 0x28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002c2a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c3a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c42:	041a      	lsls	r2, r3, #16
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c60:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	061a      	lsls	r2, r3, #24
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e005      	b.n	8002cae <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3304      	adds	r3, #4
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d3f3      	bcc.n	8002ca2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	4000a400 	.word	0x4000a400

08002ccc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002cea:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	e00a      	b.n	8002d0e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002d00:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002d06:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002d08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d0c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002d18:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002d1e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002d24:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	3304      	adds	r3, #4
 8002d56:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e020      	b.n	8002da0 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3303      	adds	r3, #3
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	440b      	add	r3, r1
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002d76:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	440b      	add	r3, r1
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002d84:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	440a      	add	r2, r1
 8002d8c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002d8e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	3304      	adds	r3, #4
 8002d98:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	4a06      	ldr	r2, [pc, #24]	; (8002dc0 <FDCAN_CopyMessageToRAM+0xf4>)
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	461a      	mov	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d3d5      	bcc.n	8002d5e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002db2:	bf00      	nop
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	08006404 	.word	0x08006404

08002dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002dd2:	e15a      	b.n	800308a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	4013      	ands	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 814c 	beq.w	8003084 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d00b      	beq.n	8002e0c <HAL_GPIO_Init+0x48>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d007      	beq.n	8002e0c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e00:	2b11      	cmp	r3, #17
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b12      	cmp	r3, #18
 8002e0a:	d130      	bne.n	8002e6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e42:	2201      	movs	r2, #1
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	f003 0201 	and.w	r2, r3, #1
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2203      	movs	r2, #3
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0xea>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b12      	cmp	r3, #18
 8002eac:	d123      	bne.n	8002ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	08da      	lsrs	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3208      	adds	r2, #8
 8002eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	220f      	movs	r2, #15
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	08da      	lsrs	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3208      	adds	r2, #8
 8002ef0:	6939      	ldr	r1, [r7, #16]
 8002ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	2203      	movs	r2, #3
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 0203 	and.w	r2, r3, #3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80a6 	beq.w	8003084 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f38:	4b5b      	ldr	r3, [pc, #364]	; (80030a8 <HAL_GPIO_Init+0x2e4>)
 8002f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3c:	4a5a      	ldr	r2, [pc, #360]	; (80030a8 <HAL_GPIO_Init+0x2e4>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6613      	str	r3, [r2, #96]	; 0x60
 8002f44:	4b58      	ldr	r3, [pc, #352]	; (80030a8 <HAL_GPIO_Init+0x2e4>)
 8002f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f50:	4a56      	ldr	r2, [pc, #344]	; (80030ac <HAL_GPIO_Init+0x2e8>)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	3302      	adds	r3, #2
 8002f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	220f      	movs	r2, #15
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f7a:	d01f      	beq.n	8002fbc <HAL_GPIO_Init+0x1f8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a4c      	ldr	r2, [pc, #304]	; (80030b0 <HAL_GPIO_Init+0x2ec>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d019      	beq.n	8002fb8 <HAL_GPIO_Init+0x1f4>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a4b      	ldr	r2, [pc, #300]	; (80030b4 <HAL_GPIO_Init+0x2f0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d013      	beq.n	8002fb4 <HAL_GPIO_Init+0x1f0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a4a      	ldr	r2, [pc, #296]	; (80030b8 <HAL_GPIO_Init+0x2f4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00d      	beq.n	8002fb0 <HAL_GPIO_Init+0x1ec>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a49      	ldr	r2, [pc, #292]	; (80030bc <HAL_GPIO_Init+0x2f8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d007      	beq.n	8002fac <HAL_GPIO_Init+0x1e8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a48      	ldr	r2, [pc, #288]	; (80030c0 <HAL_GPIO_Init+0x2fc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <HAL_GPIO_Init+0x1e4>
 8002fa4:	2305      	movs	r3, #5
 8002fa6:	e00a      	b.n	8002fbe <HAL_GPIO_Init+0x1fa>
 8002fa8:	2306      	movs	r3, #6
 8002faa:	e008      	b.n	8002fbe <HAL_GPIO_Init+0x1fa>
 8002fac:	2304      	movs	r3, #4
 8002fae:	e006      	b.n	8002fbe <HAL_GPIO_Init+0x1fa>
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e004      	b.n	8002fbe <HAL_GPIO_Init+0x1fa>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e002      	b.n	8002fbe <HAL_GPIO_Init+0x1fa>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_GPIO_Init+0x1fa>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	f002 0203 	and.w	r2, r2, #3
 8002fc4:	0092      	lsls	r2, r2, #2
 8002fc6:	4093      	lsls	r3, r2
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fce:	4937      	ldr	r1, [pc, #220]	; (80030ac <HAL_GPIO_Init+0x2e8>)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fdc:	4b39      	ldr	r3, [pc, #228]	; (80030c4 <HAL_GPIO_Init+0x300>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003000:	4a30      	ldr	r2, [pc, #192]	; (80030c4 <HAL_GPIO_Init+0x300>)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003006:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <HAL_GPIO_Init+0x300>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800302a:	4a26      	ldr	r2, [pc, #152]	; (80030c4 <HAL_GPIO_Init+0x300>)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003030:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <HAL_GPIO_Init+0x300>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	43db      	mvns	r3, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003054:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <HAL_GPIO_Init+0x300>)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <HAL_GPIO_Init+0x300>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	43db      	mvns	r3, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800307e:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <HAL_GPIO_Init+0x300>)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3301      	adds	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	f47f ae9d 	bne.w	8002dd4 <HAL_GPIO_Init+0x10>
  }
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40010000 	.word	0x40010000
 80030b0:	48000400 	.word	0x48000400
 80030b4:	48000800 	.word	0x48000800
 80030b8:	48000c00 	.word	0x48000c00
 80030bc:	48001000 	.word	0x48001000
 80030c0:	48001400 	.word	0x48001400
 80030c4:	40010400 	.word	0x40010400

080030c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d141      	bne.n	800318a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003106:	4b4b      	ldr	r3, [pc, #300]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003112:	d131      	bne.n	8003178 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003114:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311a:	4a46      	ldr	r2, [pc, #280]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003120:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003124:	4b43      	ldr	r3, [pc, #268]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800312c:	4a41      	ldr	r2, [pc, #260]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003132:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003134:	4b40      	ldr	r3, [pc, #256]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2232      	movs	r2, #50	; 0x32
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	4a3f      	ldr	r2, [pc, #252]	; (800323c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	0c9b      	lsrs	r3, r3, #18
 8003146:	3301      	adds	r3, #1
 8003148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800314a:	e002      	b.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3b01      	subs	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003152:	4b38      	ldr	r3, [pc, #224]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d102      	bne.n	8003166 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f2      	bne.n	800314c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003166:	4b33      	ldr	r3, [pc, #204]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003172:	d158      	bne.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e057      	b.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003178:	4b2e      	ldr	r3, [pc, #184]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317e:	4a2d      	ldr	r2, [pc, #180]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003188:	e04d      	b.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003190:	d141      	bne.n	8003216 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003192:	4b28      	ldr	r3, [pc, #160]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319e:	d131      	bne.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a6:	4a23      	ldr	r2, [pc, #140]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b0:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031b8:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2232      	movs	r2, #50	; 0x32
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	4a1c      	ldr	r2, [pc, #112]	; (800323c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	0c9b      	lsrs	r3, r3, #18
 80031d2:	3301      	adds	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d6:	e002      	b.n	80031de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3b01      	subs	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ea:	d102      	bne.n	80031f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f2      	bne.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fe:	d112      	bne.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e011      	b.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003214:	e007      	b.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800321e:	4a05      	ldr	r2, [pc, #20]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003224:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40007000 	.word	0x40007000
 8003238:	20000000 	.word	0x20000000
 800323c:	431bde83 	.word	0x431bde83

08003240 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800324a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800324e:	6093      	str	r3, [r2, #8]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40007000 	.word	0x40007000

08003260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e308      	b.n	8003884 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d075      	beq.n	800336a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327e:	4ba3      	ldr	r3, [pc, #652]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003288:	4ba0      	ldr	r3, [pc, #640]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b0c      	cmp	r3, #12
 8003296:	d102      	bne.n	800329e <HAL_RCC_OscConfig+0x3e>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d002      	beq.n	80032a4 <HAL_RCC_OscConfig+0x44>
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d10b      	bne.n	80032bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a4:	4b99      	ldr	r3, [pc, #612]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d05b      	beq.n	8003368 <HAL_RCC_OscConfig+0x108>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d157      	bne.n	8003368 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e2e3      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c4:	d106      	bne.n	80032d4 <HAL_RCC_OscConfig+0x74>
 80032c6:	4b91      	ldr	r3, [pc, #580]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a90      	ldr	r2, [pc, #576]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e01d      	b.n	8003310 <HAL_RCC_OscConfig+0xb0>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x98>
 80032de:	4b8b      	ldr	r3, [pc, #556]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a8a      	ldr	r2, [pc, #552]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b88      	ldr	r3, [pc, #544]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a87      	ldr	r2, [pc, #540]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e00b      	b.n	8003310 <HAL_RCC_OscConfig+0xb0>
 80032f8:	4b84      	ldr	r3, [pc, #528]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a83      	ldr	r2, [pc, #524]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80032fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b81      	ldr	r3, [pc, #516]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a80      	ldr	r2, [pc, #512]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 800330a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d013      	beq.n	8003340 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe fd76 	bl	8001e08 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003320:	f7fe fd72 	bl	8001e08 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	; 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e2a8      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003332:	4b76      	ldr	r3, [pc, #472]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0xc0>
 800333e:	e014      	b.n	800336a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe fd62 	bl	8001e08 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003348:	f7fe fd5e 	bl	8001e08 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e294      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800335a:	4b6c      	ldr	r3, [pc, #432]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0xe8>
 8003366:	e000      	b.n	800336a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d075      	beq.n	8003462 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003376:	4b65      	ldr	r3, [pc, #404]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003380:	4b62      	ldr	r3, [pc, #392]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d102      	bne.n	8003396 <HAL_RCC_OscConfig+0x136>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d002      	beq.n	800339c <HAL_RCC_OscConfig+0x13c>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d11f      	bne.n	80033dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339c:	4b5b      	ldr	r3, [pc, #364]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_OscConfig+0x154>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e267      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b4:	4b55      	ldr	r3, [pc, #340]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	4952      	ldr	r1, [pc, #328]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033c8:	4b51      	ldr	r3, [pc, #324]	; (8003510 <HAL_RCC_OscConfig+0x2b0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe fccf 	bl	8001d70 <HAL_InitTick>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d043      	beq.n	8003460 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e253      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d023      	beq.n	800342c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e4:	4b49      	ldr	r3, [pc, #292]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a48      	ldr	r2, [pc, #288]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fe fd0a 	bl	8001e08 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f8:	f7fe fd06 	bl	8001e08 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e23c      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340a:	4b40      	ldr	r3, [pc, #256]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3d      	ldr	r3, [pc, #244]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	061b      	lsls	r3, r3, #24
 8003424:	4939      	ldr	r1, [pc, #228]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]
 800342a:	e01a      	b.n	8003462 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800342c:	4b37      	ldr	r3, [pc, #220]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a36      	ldr	r2, [pc, #216]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 8003432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fce6 	bl	8001e08 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003440:	f7fe fce2 	bl	8001e08 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e218      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003452:	4b2e      	ldr	r3, [pc, #184]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x1e0>
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003460:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d03c      	beq.n	80034e8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01c      	beq.n	80034b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003476:	4b25      	ldr	r3, [pc, #148]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 8003478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347c:	4a23      	ldr	r2, [pc, #140]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003486:	f7fe fcbf 	bl	8001e08 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348e:	f7fe fcbb 	bl	8001e08 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e1f1      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034a0:	4b1a      	ldr	r3, [pc, #104]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0ef      	beq.n	800348e <HAL_RCC_OscConfig+0x22e>
 80034ae:	e01b      	b.n	80034e8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b0:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b6:	4a15      	ldr	r2, [pc, #84]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f7fe fca2 	bl	8001e08 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c8:	f7fe fc9e 	bl	8001e08 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1d4      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ef      	bne.n	80034c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80ab 	beq.w	800364c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034fa:	4b04      	ldr	r3, [pc, #16]	; (800350c <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_RCC_OscConfig+0x2b4>
 8003506:	2301      	movs	r3, #1
 8003508:	e005      	b.n	8003516 <HAL_RCC_OscConfig+0x2b6>
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	20000004 	.word	0x20000004
 8003514:	2300      	movs	r3, #0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351a:	4baf      	ldr	r3, [pc, #700]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	4aae      	ldr	r2, [pc, #696]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003524:	6593      	str	r3, [r2, #88]	; 0x58
 8003526:	4bac      	ldr	r3, [pc, #688]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003532:	2301      	movs	r3, #1
 8003534:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003536:	4ba9      	ldr	r3, [pc, #676]	; (80037dc <HAL_RCC_OscConfig+0x57c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d118      	bne.n	8003574 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003542:	4ba6      	ldr	r3, [pc, #664]	; (80037dc <HAL_RCC_OscConfig+0x57c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4aa5      	ldr	r2, [pc, #660]	; (80037dc <HAL_RCC_OscConfig+0x57c>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354e:	f7fe fc5b 	bl	8001e08 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fe fc57 	bl	8001e08 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e18d      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003568:	4b9c      	ldr	r3, [pc, #624]	; (80037dc <HAL_RCC_OscConfig+0x57c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d108      	bne.n	800358e <HAL_RCC_OscConfig+0x32e>
 800357c:	4b96      	ldr	r3, [pc, #600]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	4a95      	ldr	r2, [pc, #596]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800358c:	e024      	b.n	80035d8 <HAL_RCC_OscConfig+0x378>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b05      	cmp	r3, #5
 8003594:	d110      	bne.n	80035b8 <HAL_RCC_OscConfig+0x358>
 8003596:	4b90      	ldr	r3, [pc, #576]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	4a8e      	ldr	r2, [pc, #568]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035a6:	4b8c      	ldr	r3, [pc, #560]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	4a8a      	ldr	r2, [pc, #552]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b6:	e00f      	b.n	80035d8 <HAL_RCC_OscConfig+0x378>
 80035b8:	4b87      	ldr	r3, [pc, #540]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035be:	4a86      	ldr	r2, [pc, #536]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c8:	4b83      	ldr	r3, [pc, #524]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	4a82      	ldr	r2, [pc, #520]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80035d0:	f023 0304 	bic.w	r3, r3, #4
 80035d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d016      	beq.n	800360e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fe fc12 	bl	8001e08 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e8:	f7fe fc0e 	bl	8001e08 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e142      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035fe:	4b76      	ldr	r3, [pc, #472]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0ed      	beq.n	80035e8 <HAL_RCC_OscConfig+0x388>
 800360c:	e015      	b.n	800363a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360e:	f7fe fbfb 	bl	8001e08 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003614:	e00a      	b.n	800362c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003616:	f7fe fbf7 	bl	8001e08 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	f241 3288 	movw	r2, #5000	; 0x1388
 8003624:	4293      	cmp	r3, r2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e12b      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800362c:	4b6a      	ldr	r3, [pc, #424]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1ed      	bne.n	8003616 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800363a:	7ffb      	ldrb	r3, [r7, #31]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003640:	4b65      	ldr	r3, [pc, #404]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	4a64      	ldr	r2, [pc, #400]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d03c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01c      	beq.n	800369a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003660:	4b5d      	ldr	r3, [pc, #372]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003666:	4a5c      	ldr	r2, [pc, #368]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fe fbca 	bl	8001e08 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003678:	f7fe fbc6 	bl	8001e08 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e0fc      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800368a:	4b53      	ldr	r3, [pc, #332]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800368c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0ef      	beq.n	8003678 <HAL_RCC_OscConfig+0x418>
 8003698:	e01b      	b.n	80036d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800369a:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800369c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036a0:	4a4d      	ldr	r2, [pc, #308]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fe fbad 	bl	8001e08 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b2:	f7fe fba9 	bl	8001e08 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0df      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036c4:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80036c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1ef      	bne.n	80036b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80d3 	beq.w	8003882 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036dc:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	f000 808d 	beq.w	8003804 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d15a      	bne.n	80037a8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a38      	ldr	r2, [pc, #224]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80036f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fe:	f7fe fb83 	bl	8001e08 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fe fb7f 	bl	8001e08 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e0b5      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003718:	4b2f      	ldr	r3, [pc, #188]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f0      	bne.n	8003706 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003724:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	4b2d      	ldr	r3, [pc, #180]	; (80037e0 <HAL_RCC_OscConfig+0x580>)
 800372a:	4013      	ands	r3, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6a11      	ldr	r1, [r2, #32]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003734:	3a01      	subs	r2, #1
 8003736:	0112      	lsls	r2, r2, #4
 8003738:	4311      	orrs	r1, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800373e:	0212      	lsls	r2, r2, #8
 8003740:	4311      	orrs	r1, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003746:	0852      	lsrs	r2, r2, #1
 8003748:	3a01      	subs	r2, #1
 800374a:	0552      	lsls	r2, r2, #21
 800374c:	4311      	orrs	r1, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003752:	0852      	lsrs	r2, r2, #1
 8003754:	3a01      	subs	r2, #1
 8003756:	0652      	lsls	r2, r2, #25
 8003758:	4311      	orrs	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800375e:	06d2      	lsls	r2, r2, #27
 8003760:	430a      	orrs	r2, r1
 8003762:	491d      	ldr	r1, [pc, #116]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003764:	4313      	orrs	r3, r2
 8003766:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003768:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003772:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003774:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4a17      	ldr	r2, [pc, #92]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fe fb42 	bl	8001e08 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe fb3e 	bl	8001e08 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e074      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379a:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x528>
 80037a6:	e06c      	b.n	8003882 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80037ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037b4:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80037ba:	f023 0303 	bic.w	r3, r3, #3
 80037be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80037c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fe fb1a 	bl	8001e08 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d6:	e00e      	b.n	80037f6 <HAL_RCC_OscConfig+0x596>
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40007000 	.word	0x40007000
 80037e0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fe fb10 	bl	8001e08 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e046      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f6:	4b25      	ldr	r3, [pc, #148]	; (800388c <HAL_RCC_OscConfig+0x62c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x584>
 8003802:	e03e      	b.n	8003882 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e039      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <HAL_RCC_OscConfig+0x62c>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f003 0203 	and.w	r2, r3, #3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	429a      	cmp	r2, r3
 8003822:	d12c      	bne.n	800387e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	3b01      	subs	r3, #1
 8003830:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d123      	bne.n	800387e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d11b      	bne.n	800387e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d113      	bne.n	800387e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	085b      	lsrs	r3, r3, #1
 8003862:	3b01      	subs	r3, #1
 8003864:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d109      	bne.n	800387e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	3b01      	subs	r3, #1
 8003878:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d001      	beq.n	8003882 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3720      	adds	r7, #32
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000

08003890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e11e      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a8:	4b91      	ldr	r3, [pc, #580]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d910      	bls.n	80038d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b8e      	ldr	r3, [pc, #568]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 020f 	bic.w	r2, r3, #15
 80038be:	498c      	ldr	r1, [pc, #560]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b8a      	ldr	r3, [pc, #552]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e106      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d073      	beq.n	80039cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d129      	bne.n	8003940 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ec:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0f4      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80038fc:	f000 f99e 	bl	8003c3c <RCC_GetSysClockFreqFromPLLSource>
 8003900:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4a7c      	ldr	r2, [pc, #496]	; (8003af8 <HAL_RCC_ClockConfig+0x268>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d93f      	bls.n	800398a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800390a:	4b7a      	ldr	r3, [pc, #488]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800391e:	2b00      	cmp	r3, #0
 8003920:	d033      	beq.n	800398a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003926:	2b00      	cmp	r3, #0
 8003928:	d12f      	bne.n	800398a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800392a:	4b72      	ldr	r3, [pc, #456]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003932:	4a70      	ldr	r2, [pc, #448]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003938:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e024      	b.n	800398a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d107      	bne.n	8003958 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003948:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0c6      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003958:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0be      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003968:	f000 f8ce 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 800396c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4a61      	ldr	r2, [pc, #388]	; (8003af8 <HAL_RCC_ClockConfig+0x268>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d909      	bls.n	800398a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003976:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800397e:	4a5d      	ldr	r2, [pc, #372]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003984:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800398a:	4b5a      	ldr	r3, [pc, #360]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f023 0203 	bic.w	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4957      	ldr	r1, [pc, #348]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003998:	4313      	orrs	r3, r2
 800399a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399c:	f7fe fa34 	bl	8001e08 <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a4:	f7fe fa30 	bl	8001e08 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e095      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	4b4e      	ldr	r3, [pc, #312]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 020c 	and.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d1eb      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d023      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e4:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a42      	ldr	r2, [pc, #264]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 80039ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80039fc:	4b3d      	ldr	r3, [pc, #244]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a04:	4a3b      	ldr	r2, [pc, #236]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0c:	4b39      	ldr	r3, [pc, #228]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4936      	ldr	r1, [pc, #216]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b80      	cmp	r3, #128	; 0x80
 8003a24:	d105      	bne.n	8003a32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a26:	4b33      	ldr	r3, [pc, #204]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	4a32      	ldr	r2, [pc, #200]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a32:	4b2f      	ldr	r3, [pc, #188]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d21d      	bcs.n	8003a7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a40:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 020f 	bic.w	r2, r3, #15
 8003a48:	4929      	ldr	r1, [pc, #164]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a50:	f7fe f9da 	bl	8001e08 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7fe f9d6 	bl	8001e08 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e03b      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1ed      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a88:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4917      	ldr	r1, [pc, #92]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa6:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	490f      	ldr	r1, [pc, #60]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aba:	f000 f825 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 8003abe:	4601      	mov	r1, r0
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	4a0c      	ldr	r2, [pc, #48]	; (8003afc <HAL_RCC_ClockConfig+0x26c>)
 8003acc:	5cd3      	ldrb	r3, [r2, r3]
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <HAL_RCC_ClockConfig+0x270>)
 8003ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ada:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <HAL_RCC_ClockConfig+0x274>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe f946 	bl	8001d70 <HAL_InitTick>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40022000 	.word	0x40022000
 8003af4:	40021000 	.word	0x40021000
 8003af8:	04c4b400 	.word	0x04c4b400
 8003afc:	080063ec 	.word	0x080063ec
 8003b00:	20000000 	.word	0x20000000
 8003b04:	20000004 	.word	0x20000004

08003b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d102      	bne.n	8003b20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b1a:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	e047      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b20:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d102      	bne.n	8003b32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b2c:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	e03e      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b32:	4b23      	ldr	r3, [pc, #140]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d136      	bne.n	8003bac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3301      	adds	r3, #1
 8003b54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d10c      	bne.n	8003b76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b5c:	4a1a      	ldr	r2, [pc, #104]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	4a16      	ldr	r2, [pc, #88]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b66:	68d2      	ldr	r2, [r2, #12]
 8003b68:	0a12      	lsrs	r2, r2, #8
 8003b6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	617b      	str	r3, [r7, #20]
      break;
 8003b74:	e00c      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b76:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	4a10      	ldr	r2, [pc, #64]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b80:	68d2      	ldr	r2, [r2, #12]
 8003b82:	0a12      	lsrs	r2, r2, #8
 8003b84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]
      break;
 8003b8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	0e5b      	lsrs	r3, r3, #25
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	e001      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bb0:	693b      	ldr	r3, [r7, #16]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	00f42400 	.word	0x00f42400
 8003bc8:	007a1200 	.word	0x007a1200

08003bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd0:	4b03      	ldr	r3, [pc, #12]	; (8003be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000000 	.word	0x20000000

08003be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003be8:	f7ff fff0 	bl	8003bcc <HAL_RCC_GetHCLKFreq>
 8003bec:	4601      	mov	r1, r0
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bfa:	5cd3      	ldrb	r3, [r2, r3]
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	080063fc 	.word	0x080063fc

08003c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c14:	f7ff ffda 	bl	8003bcc <HAL_RCC_GetHCLKFreq>
 8003c18:	4601      	mov	r1, r0
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0adb      	lsrs	r3, r3, #11
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4a04      	ldr	r2, [pc, #16]	; (8003c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c26:	5cd3      	ldrb	r3, [r2, r3]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	080063fc 	.word	0x080063fc

08003c3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	3301      	adds	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d10c      	bne.n	8003c7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c60:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c6a:	68d2      	ldr	r2, [r2, #12]
 8003c6c:	0a12      	lsrs	r2, r2, #8
 8003c6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	617b      	str	r3, [r7, #20]
    break;
 8003c78:	e00c      	b.n	8003c94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c82:	4a0e      	ldr	r2, [pc, #56]	; (8003cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c84:	68d2      	ldr	r2, [r2, #12]
 8003c86:	0a12      	lsrs	r2, r2, #8
 8003c88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c8c:	fb02 f303 	mul.w	r3, r2, r3
 8003c90:	617b      	str	r3, [r7, #20]
    break;
 8003c92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	0e5b      	lsrs	r3, r3, #25
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cae:	687b      	ldr	r3, [r7, #4]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	007a1200 	.word	0x007a1200
 8003cc4:	00f42400 	.word	0x00f42400

08003cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8098 	beq.w	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cea:	4b43      	ldr	r3, [pc, #268]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10d      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf6:	4b40      	ldr	r3, [pc, #256]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	4a3f      	ldr	r2, [pc, #252]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6593      	str	r3, [r2, #88]	; 0x58
 8003d02:	4b3d      	ldr	r3, [pc, #244]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d12:	4b3a      	ldr	r3, [pc, #232]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a39      	ldr	r2, [pc, #228]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d1e:	f7fe f873 	bl	8001e08 <HAL_GetTick>
 8003d22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d24:	e009      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d26:	f7fe f86f 	bl	8001e08 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d902      	bls.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	74fb      	strb	r3, [r7, #19]
        break;
 8003d38:	e005      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d3a:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0ef      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d46:	7cfb      	ldrb	r3, [r7, #19]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d159      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d4c:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01e      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d019      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d68:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d74:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d84:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8a:	4a1b      	ldr	r2, [pc, #108]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d94:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fe f82f 	bl	8001e08 <HAL_GetTick>
 8003daa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dac:	e00b      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fe f82b 	bl	8001e08 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d902      	bls.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	74fb      	strb	r3, [r7, #19]
            break;
 8003dc4:	e006      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ec      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10b      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	4903      	ldr	r1, [pc, #12]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003df0:	e008      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003df2:	7cfb      	ldrb	r3, [r7, #19]
 8003df4:	74bb      	strb	r3, [r7, #18]
 8003df6:	e005      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e04:	7c7b      	ldrb	r3, [r7, #17]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d105      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0a:	4ba6      	ldr	r3, [pc, #664]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	4aa5      	ldr	r2, [pc, #660]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e22:	4ba0      	ldr	r3, [pc, #640]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f023 0203 	bic.w	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	499c      	ldr	r1, [pc, #624]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e44:	4b97      	ldr	r3, [pc, #604]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f023 020c 	bic.w	r2, r3, #12
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	4994      	ldr	r1, [pc, #592]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e66:	4b8f      	ldr	r3, [pc, #572]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	498b      	ldr	r1, [pc, #556]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e88:	4b86      	ldr	r3, [pc, #536]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	4983      	ldr	r1, [pc, #524]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eaa:	4b7e      	ldr	r3, [pc, #504]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	497a      	ldr	r1, [pc, #488]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ecc:	4b75      	ldr	r3, [pc, #468]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	4972      	ldr	r1, [pc, #456]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eee:	4b6d      	ldr	r3, [pc, #436]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	4969      	ldr	r1, [pc, #420]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f10:	4b64      	ldr	r3, [pc, #400]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	4961      	ldr	r1, [pc, #388]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f32:	4b5c      	ldr	r3, [pc, #368]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	4958      	ldr	r1, [pc, #352]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d015      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f54:	4b53      	ldr	r3, [pc, #332]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	4950      	ldr	r1, [pc, #320]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f72:	d105      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f74:	4b4b      	ldr	r3, [pc, #300]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a4a      	ldr	r2, [pc, #296]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d015      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f8c:	4b45      	ldr	r3, [pc, #276]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	4942      	ldr	r1, [pc, #264]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003faa:	d105      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fac:	4b3d      	ldr	r3, [pc, #244]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4a3c      	ldr	r2, [pc, #240]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fc4:	4b37      	ldr	r3, [pc, #220]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	4934      	ldr	r1, [pc, #208]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe4:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a2e      	ldr	r2, [pc, #184]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d015      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ffc:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400a:	4926      	ldr	r1, [pc, #152]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800401a:	d105      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800401c:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004026:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	4918      	ldr	r1, [pc, #96]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004052:	d105      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d015      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800406c:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407a:	490a      	ldr	r1, [pc, #40]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800408a:	d105      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004096:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004098:	7cbb      	ldrb	r3, [r7, #18]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000

080040a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e049      	b.n	800414e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc fc70 	bl	80009b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 fb24 	bl	8004734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d001      	beq.n	8004170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e04a      	b.n	8004206 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a21      	ldr	r2, [pc, #132]	; (8004214 <HAL_TIM_Base_Start_IT+0xbc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d018      	beq.n	80041c4 <HAL_TIM_Base_Start_IT+0x6c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419a:	d013      	beq.n	80041c4 <HAL_TIM_Base_Start_IT+0x6c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <HAL_TIM_Base_Start_IT+0xc0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00e      	beq.n	80041c4 <HAL_TIM_Base_Start_IT+0x6c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1c      	ldr	r2, [pc, #112]	; (800421c <HAL_TIM_Base_Start_IT+0xc4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d009      	beq.n	80041c4 <HAL_TIM_Base_Start_IT+0x6c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1a      	ldr	r2, [pc, #104]	; (8004220 <HAL_TIM_Base_Start_IT+0xc8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <HAL_TIM_Base_Start_IT+0x6c>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a19      	ldr	r2, [pc, #100]	; (8004224 <HAL_TIM_Base_Start_IT+0xcc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d115      	bne.n	80041f0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	4b17      	ldr	r3, [pc, #92]	; (8004228 <HAL_TIM_Base_Start_IT+0xd0>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b06      	cmp	r3, #6
 80041d4:	d015      	beq.n	8004202 <HAL_TIM_Base_Start_IT+0xaa>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d011      	beq.n	8004202 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ee:	e008      	b.n	8004202 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e000      	b.n	8004204 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40013400 	.word	0x40013400
 8004224:	40014000 	.word	0x40014000
 8004228:	00010007 	.word	0x00010007

0800422c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b02      	cmp	r3, #2
 8004240:	d122      	bne.n	8004288 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b02      	cmp	r3, #2
 800424e:	d11b      	bne.n	8004288 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0202 	mvn.w	r2, #2
 8004258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fa42 	bl	80046f8 <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fa34 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fa45 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b04      	cmp	r3, #4
 8004294:	d122      	bne.n	80042dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d11b      	bne.n	80042dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0204 	mvn.w	r2, #4
 80042ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fa18 	bl	80046f8 <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fa0a 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fa1b 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d122      	bne.n	8004330 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d11b      	bne.n	8004330 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0208 	mvn.w	r2, #8
 8004300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2204      	movs	r2, #4
 8004306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f9ee 	bl	80046f8 <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9e0 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f9f1 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b10      	cmp	r3, #16
 800433c:	d122      	bne.n	8004384 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b10      	cmp	r3, #16
 800434a:	d11b      	bne.n	8004384 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0210 	mvn.w	r2, #16
 8004354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2208      	movs	r2, #8
 800435a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f9c4 	bl	80046f8 <HAL_TIM_IC_CaptureCallback>
 8004370:	e005      	b.n	800437e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f9b6 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f9c7 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d10e      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b01      	cmp	r3, #1
 800439e:	d107      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0201 	mvn.w	r2, #1
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f990 	bl	80046d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	d10e      	bne.n	80043dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c8:	2b80      	cmp	r3, #128	; 0x80
 80043ca:	d107      	bne.n	80043dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fb64 	bl	8004aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ea:	d10e      	bne.n	800440a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f6:	2b80      	cmp	r3, #128	; 0x80
 80043f8:	d107      	bne.n	800440a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fb57 	bl	8004ab8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b40      	cmp	r3, #64	; 0x40
 8004416:	d10e      	bne.n	8004436 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b40      	cmp	r3, #64	; 0x40
 8004424:	d107      	bne.n	8004436 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800442e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f975 	bl	8004720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b20      	cmp	r3, #32
 8004442:	d10e      	bne.n	8004462 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b20      	cmp	r3, #32
 8004450:	d107      	bne.n	8004462 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f06f 0220 	mvn.w	r2, #32
 800445a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fb17 	bl	8004a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800446c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004470:	d10f      	bne.n	8004492 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004480:	d107      	bne.n	8004492 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800448a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fb1d 	bl	8004acc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800449c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044a0:	d10f      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044b0:	d107      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80044ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fb0f 	bl	8004ae0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d0:	d10f      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fb01 	bl	8004af4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004500:	d10f      	bne.n	8004522 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800450c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004510:	d107      	bne.n	8004522 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800451a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 faf3 	bl	8004b08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_TIM_ConfigClockSource+0x18>
 8004540:	2302      	movs	r3, #2
 8004542:	e0b9      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x18c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004562:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004566:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800456e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b70      	cmp	r3, #112	; 0x70
 800457e:	d02e      	beq.n	80045de <HAL_TIM_ConfigClockSource+0xb2>
 8004580:	2b70      	cmp	r3, #112	; 0x70
 8004582:	d812      	bhi.n	80045aa <HAL_TIM_ConfigClockSource+0x7e>
 8004584:	2b30      	cmp	r3, #48	; 0x30
 8004586:	f000 8084 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x166>
 800458a:	2b30      	cmp	r3, #48	; 0x30
 800458c:	d806      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x70>
 800458e:	2b10      	cmp	r3, #16
 8004590:	d07f      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x166>
 8004592:	2b20      	cmp	r3, #32
 8004594:	d07d      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x166>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d07b      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800459a:	e084      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800459c:	2b50      	cmp	r3, #80	; 0x50
 800459e:	d048      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x106>
 80045a0:	2b60      	cmp	r3, #96	; 0x60
 80045a2:	d056      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x126>
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d064      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x146>
      break;
 80045a8:	e07d      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80045aa:	4a45      	ldr	r2, [pc, #276]	; (80046c0 <HAL_TIM_ConfigClockSource+0x194>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d070      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x166>
 80045b0:	4a43      	ldr	r2, [pc, #268]	; (80046c0 <HAL_TIM_ConfigClockSource+0x194>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d809      	bhi.n	80045ca <HAL_TIM_ConfigClockSource+0x9e>
 80045b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ba:	d027      	beq.n	800460c <HAL_TIM_ConfigClockSource+0xe0>
 80045bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045c0:	d067      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x166>
 80045c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c6:	d06d      	beq.n	80046a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80045c8:	e06d      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80045ca:	4a3e      	ldr	r2, [pc, #248]	; (80046c4 <HAL_TIM_ConfigClockSource+0x198>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d060      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x166>
 80045d0:	4a3d      	ldr	r2, [pc, #244]	; (80046c8 <HAL_TIM_ConfigClockSource+0x19c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d05d      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x166>
 80045d6:	4a3d      	ldr	r2, [pc, #244]	; (80046cc <HAL_TIM_ConfigClockSource+0x1a0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d05a      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x166>
      break;
 80045dc:	e063      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6899      	ldr	r1, [r3, #8]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f000 f9ad 	bl	800494c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004600:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	609a      	str	r2, [r3, #8]
      break;
 800460a:	e04c      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6899      	ldr	r1, [r3, #8]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f000 f996 	bl	800494c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800462e:	609a      	str	r2, [r3, #8]
      break;
 8004630:	e039      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	461a      	mov	r2, r3
 8004640:	f000 f908 	bl	8004854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2150      	movs	r1, #80	; 0x50
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f961 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 8004650:	e029      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	461a      	mov	r2, r3
 8004660:	f000 f927 	bl	80048b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2160      	movs	r1, #96	; 0x60
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f951 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 8004670:	e019      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	461a      	mov	r2, r3
 8004680:	f000 f8e8 	bl	8004854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	4618      	mov	r0, r3
 800468c:	f000 f941 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 8004690:	e009      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f000 f938 	bl	8004912 <TIM_ITRx_SetConfig>
        break;
 80046a2:	e000      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80046a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	00100020 	.word	0x00100020
 80046c4:	00100040 	.word	0x00100040
 80046c8:	00100070 	.word	0x00100070
 80046cc:	00100030 	.word	0x00100030

080046d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a3c      	ldr	r2, [pc, #240]	; (8004838 <TIM_Base_SetConfig+0x104>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00f      	beq.n	800476c <TIM_Base_SetConfig+0x38>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004752:	d00b      	beq.n	800476c <TIM_Base_SetConfig+0x38>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a39      	ldr	r2, [pc, #228]	; (800483c <TIM_Base_SetConfig+0x108>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d007      	beq.n	800476c <TIM_Base_SetConfig+0x38>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a38      	ldr	r2, [pc, #224]	; (8004840 <TIM_Base_SetConfig+0x10c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_Base_SetConfig+0x38>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a37      	ldr	r2, [pc, #220]	; (8004844 <TIM_Base_SetConfig+0x110>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d108      	bne.n	800477e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2d      	ldr	r2, [pc, #180]	; (8004838 <TIM_Base_SetConfig+0x104>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d01b      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478c:	d017      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <TIM_Base_SetConfig+0x108>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a29      	ldr	r2, [pc, #164]	; (8004840 <TIM_Base_SetConfig+0x10c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00f      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a28      	ldr	r2, [pc, #160]	; (8004844 <TIM_Base_SetConfig+0x110>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00b      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a27      	ldr	r2, [pc, #156]	; (8004848 <TIM_Base_SetConfig+0x114>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d007      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a26      	ldr	r2, [pc, #152]	; (800484c <TIM_Base_SetConfig+0x118>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d003      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a25      	ldr	r2, [pc, #148]	; (8004850 <TIM_Base_SetConfig+0x11c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d108      	bne.n	80047d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a10      	ldr	r2, [pc, #64]	; (8004838 <TIM_Base_SetConfig+0x104>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00f      	beq.n	800481c <TIM_Base_SetConfig+0xe8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a11      	ldr	r2, [pc, #68]	; (8004844 <TIM_Base_SetConfig+0x110>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00b      	beq.n	800481c <TIM_Base_SetConfig+0xe8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a10      	ldr	r2, [pc, #64]	; (8004848 <TIM_Base_SetConfig+0x114>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d007      	beq.n	800481c <TIM_Base_SetConfig+0xe8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a0f      	ldr	r2, [pc, #60]	; (800484c <TIM_Base_SetConfig+0x118>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <TIM_Base_SetConfig+0xe8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <TIM_Base_SetConfig+0x11c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d103      	bne.n	8004824 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	615a      	str	r2, [r3, #20]
}
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40013400 	.word	0x40013400
 8004848:	40014000 	.word	0x40014000
 800484c:	40014400 	.word	0x40014400
 8004850:	40014800 	.word	0x40014800

08004854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0201 	bic.w	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800487e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f023 030a 	bic.w	r3, r3, #10
 8004890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b087      	sub	sp, #28
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0210 	bic.w	r2, r3, #16
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	031b      	lsls	r3, r3, #12
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	f043 0307 	orr.w	r3, r3, #7
 8004938:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	609a      	str	r2, [r3, #8]
}
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	021a      	lsls	r2, r3, #8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	431a      	orrs	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4313      	orrs	r3, r2
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	609a      	str	r2, [r3, #8]
}
 8004980:	bf00      	nop
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e065      	b.n	8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a2c      	ldr	r2, [pc, #176]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a2b      	ldr	r2, [pc, #172]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d108      	bne.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80049f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d018      	beq.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1a:	d013      	beq.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a18      	ldr	r2, [pc, #96]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00e      	beq.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d009      	beq.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a12      	ldr	r2, [pc, #72]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d10c      	bne.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	40012c00 	.word	0x40012c00
 8004a80:	40013400 	.word	0x40013400
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40014000 	.word	0x40014000

08004a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e042      	b.n	8004bb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7fb ff5d 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2224      	movs	r2, #36	; 0x24
 8004b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0201 	bic.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fb38 	bl	80051d4 <UART_SetConfig>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e022      	b.n	8004bb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fdd4 	bl	8005724 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fe5b 	bl	8005868 <UART_CheckIdleState>
 8004bb2:	4603      	mov	r3, r0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08a      	sub	sp, #40	; 0x28
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	f040 8083 	bne.w	8004cde <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_UART_Transmit+0x28>
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e07b      	b.n	8004ce0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Transmit+0x3a>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e074      	b.n	8004ce0 <HAL_UART_Transmit+0x124>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2221      	movs	r2, #33	; 0x21
 8004c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c0e:	f7fd f8fb 	bl	8001e08 <HAL_GetTick>
 8004c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	88fa      	ldrh	r2, [r7, #6]
 8004c18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	88fa      	ldrh	r2, [r7, #6]
 8004c20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2c:	d108      	bne.n	8004c40 <HAL_UART_Transmit+0x84>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d104      	bne.n	8004c40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	e003      	b.n	8004c48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004c50:	e02c      	b.n	8004cac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2180      	movs	r1, #128	; 0x80
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 fe4b 	bl	80058f8 <UART_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e039      	b.n	8004ce0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10b      	bne.n	8004c8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	3302      	adds	r3, #2
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e007      	b.n	8004c9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	3301      	adds	r3, #1
 8004c98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1cc      	bne.n	8004c52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2140      	movs	r1, #64	; 0x40
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fe18 	bl	80058f8 <UART_WaitOnFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e006      	b.n	8004ce0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
  }
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3720      	adds	r7, #32
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	f040 80bc 	bne.w	8004e7a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_UART_Receive_IT+0x26>
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e0b4      	b.n	8004e7c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_UART_Receive_IT+0x38>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e0ad      	b.n	8004e7c <HAL_UART_Receive_IT+0x194>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	88fa      	ldrh	r2, [r7, #6]
 8004d32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	88fa      	ldrh	r2, [r7, #6]
 8004d3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4c:	d10e      	bne.n	8004d6c <HAL_UART_Receive_IT+0x84>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d105      	bne.n	8004d62 <HAL_UART_Receive_IT+0x7a>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d60:	e02d      	b.n	8004dbe <HAL_UART_Receive_IT+0xd6>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	22ff      	movs	r2, #255	; 0xff
 8004d66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d6a:	e028      	b.n	8004dbe <HAL_UART_Receive_IT+0xd6>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10d      	bne.n	8004d90 <HAL_UART_Receive_IT+0xa8>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <HAL_UART_Receive_IT+0x9e>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	22ff      	movs	r2, #255	; 0xff
 8004d80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d84:	e01b      	b.n	8004dbe <HAL_UART_Receive_IT+0xd6>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	227f      	movs	r2, #127	; 0x7f
 8004d8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d8e:	e016      	b.n	8004dbe <HAL_UART_Receive_IT+0xd6>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d98:	d10d      	bne.n	8004db6 <HAL_UART_Receive_IT+0xce>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <HAL_UART_Receive_IT+0xc4>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	227f      	movs	r2, #127	; 0x7f
 8004da6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004daa:	e008      	b.n	8004dbe <HAL_UART_Receive_IT+0xd6>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	223f      	movs	r2, #63	; 0x3f
 8004db0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004db4:	e003      	b.n	8004dbe <HAL_UART_Receive_IT+0xd6>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2222      	movs	r2, #34	; 0x22
 8004dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0201 	orr.w	r2, r2, #1
 8004ddc:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de6:	d12a      	bne.n	8004e3e <HAL_UART_Receive_IT+0x156>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004dee:	88fa      	ldrh	r2, [r7, #6]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d324      	bcc.n	8004e3e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfc:	d107      	bne.n	8004e0e <HAL_UART_Receive_IT+0x126>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d103      	bne.n	8004e0e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <HAL_UART_Receive_IT+0x1a0>)
 8004e0a:	66da      	str	r2, [r3, #108]	; 0x6c
 8004e0c:	e002      	b.n	8004e14 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <HAL_UART_Receive_IT+0x1a4>)
 8004e12:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e2a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	e01b      	b.n	8004e76 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e46:	d107      	bne.n	8004e58 <HAL_UART_Receive_IT+0x170>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d103      	bne.n	8004e58 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a0f      	ldr	r2, [pc, #60]	; (8004e90 <HAL_UART_Receive_IT+0x1a8>)
 8004e54:	66da      	str	r2, [r3, #108]	; 0x6c
 8004e56:	e002      	b.n	8004e5e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a0e      	ldr	r2, [pc, #56]	; (8004e94 <HAL_UART_Receive_IT+0x1ac>)
 8004e5c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004e74:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e000      	b.n	8004e7c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8004e7a:	2302      	movs	r3, #2
  }
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	08005cfd 	.word	0x08005cfd
 8004e8c:	08005bf5 	.word	0x08005bf5
 8004e90:	08005b49 	.word	0x08005b49
 8004e94:	08005a9f 	.word	0x08005a9f

08004e98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d118      	bne.n	8004efa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d013      	beq.n	8004efa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d104      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8145 	beq.w	800517a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
      }
      return;
 8004ef8:	e13f      	b.n	800517a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80e8 	beq.w	80050d2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4ba1      	ldr	r3, [pc, #644]	; (800518c <HAL_UART_IRQHandler+0x2f4>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4ba0      	ldr	r3, [pc, #640]	; (8005190 <HAL_UART_IRQHandler+0x2f8>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80dd 	beq.w	80050d2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d010      	beq.n	8004f44 <HAL_UART_IRQHandler+0xac>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00b      	beq.n	8004f44 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2201      	movs	r2, #1
 8004f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f043 0201 	orr.w	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d010      	beq.n	8004f70 <HAL_UART_IRQHandler+0xd8>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00b      	beq.n	8004f70 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f043 0204 	orr.w	r2, r3, #4
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d010      	beq.n	8004f9c <HAL_UART_IRQHandler+0x104>
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00b      	beq.n	8004f9c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2204      	movs	r2, #4
 8004f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f043 0202 	orr.w	r2, r3, #2
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d015      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4b76      	ldr	r3, [pc, #472]	; (800518c <HAL_UART_IRQHandler+0x2f4>)
 8004fb4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	f043 0208 	orr.w	r2, r3, #8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d011      	beq.n	8005000 <HAL_UART_IRQHandler+0x168>
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00c      	beq.n	8005000 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	f043 0220 	orr.w	r2, r3, #32
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80b9 	beq.w	800517e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d011      	beq.n	800503a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d004      	beq.n	800505a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005056:	2b00      	cmp	r3, #0
 8005058:	d031      	beq.n	80050be <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fccc 	bl	80059f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506a:	2b40      	cmp	r3, #64	; 0x40
 800506c:	d123      	bne.n	80050b6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005082:	2b00      	cmp	r3, #0
 8005084:	d013      	beq.n	80050ae <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508a:	4a42      	ldr	r2, [pc, #264]	; (8005194 <HAL_UART_IRQHandler+0x2fc>)
 800508c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005092:	4618      	mov	r0, r3
 8005094:	f7fc ffd3 	bl	800203e <HAL_DMA_Abort_IT>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d017      	beq.n	80050ce <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80050a8:	4610      	mov	r0, r2
 80050aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ac:	e00f      	b.n	80050ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f886 	bl	80051c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b4:	e00b      	b.n	80050ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f882 	bl	80051c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050bc:	e007      	b.n	80050ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f87e 	bl	80051c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80050cc:	e057      	b.n	800517e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ce:	bf00      	nop
    return;
 80050d0:	e055      	b.n	800517e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00d      	beq.n	80050f8 <HAL_UART_IRQHandler+0x260>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fe87 	bl	8005e04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050f6:	e045      	b.n	8005184 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d012      	beq.n	8005128 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	2b00      	cmp	r3, #0
 800510a:	d104      	bne.n	8005116 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d008      	beq.n	8005128 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	2b00      	cmp	r3, #0
 800511c:	d031      	beq.n	8005182 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
    }
    return;
 8005126:	e02c      	b.n	8005182 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <HAL_UART_IRQHandler+0x2ac>
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fc94 	bl	8005a6a <UART_EndTransmit_IT>
    return;
 8005142:	e01f      	b.n	8005184 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <HAL_UART_IRQHandler+0x2c8>
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fe67 	bl	8005e2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800515e:	e011      	b.n	8005184 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_UART_IRQHandler+0x2ec>
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	da09      	bge.n	8005184 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fe51 	bl	8005e18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005176:	bf00      	nop
 8005178:	e004      	b.n	8005184 <HAL_UART_IRQHandler+0x2ec>
      return;
 800517a:	bf00      	nop
 800517c:	e002      	b.n	8005184 <HAL_UART_IRQHandler+0x2ec>
    return;
 800517e:	bf00      	nop
 8005180:	e000      	b.n	8005184 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005182:	bf00      	nop
  }
}
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	10000001 	.word	0x10000001
 8005190:	04000120 	.word	0x04000120
 8005194:	08005a3f 	.word	0x08005a3f

08005198 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80051d8:	b088      	sub	sp, #32
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	4313      	orrs	r3, r2
 8005202:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4bb0      	ldr	r3, [pc, #704]	; (80054cc <UART_SetConfig+0x2f8>)
 800520c:	4013      	ands	r3, r2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	69f9      	ldr	r1, [r7, #28]
 8005214:	430b      	orrs	r3, r1
 8005216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4aa5      	ldr	r2, [pc, #660]	; (80054d0 <UART_SetConfig+0x2fc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	69fa      	ldr	r2, [r7, #28]
 8005244:	4313      	orrs	r3, r2
 8005246:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005252:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	69f9      	ldr	r1, [r7, #28]
 800525c:	430b      	orrs	r3, r1
 800525e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	f023 010f 	bic.w	r1, r3, #15
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a96      	ldr	r2, [pc, #600]	; (80054d4 <UART_SetConfig+0x300>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d121      	bne.n	80052c4 <UART_SetConfig+0xf0>
 8005280:	4b95      	ldr	r3, [pc, #596]	; (80054d8 <UART_SetConfig+0x304>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b03      	cmp	r3, #3
 800528c:	d816      	bhi.n	80052bc <UART_SetConfig+0xe8>
 800528e:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <UART_SetConfig+0xc0>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052b1 	.word	0x080052b1
 800529c:	080052ab 	.word	0x080052ab
 80052a0:	080052b7 	.word	0x080052b7
 80052a4:	2301      	movs	r3, #1
 80052a6:	76fb      	strb	r3, [r7, #27]
 80052a8:	e0be      	b.n	8005428 <UART_SetConfig+0x254>
 80052aa:	2302      	movs	r3, #2
 80052ac:	76fb      	strb	r3, [r7, #27]
 80052ae:	e0bb      	b.n	8005428 <UART_SetConfig+0x254>
 80052b0:	2304      	movs	r3, #4
 80052b2:	76fb      	strb	r3, [r7, #27]
 80052b4:	e0b8      	b.n	8005428 <UART_SetConfig+0x254>
 80052b6:	2308      	movs	r3, #8
 80052b8:	76fb      	strb	r3, [r7, #27]
 80052ba:	e0b5      	b.n	8005428 <UART_SetConfig+0x254>
 80052bc:	2310      	movs	r3, #16
 80052be:	76fb      	strb	r3, [r7, #27]
 80052c0:	bf00      	nop
 80052c2:	e0b1      	b.n	8005428 <UART_SetConfig+0x254>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a84      	ldr	r2, [pc, #528]	; (80054dc <UART_SetConfig+0x308>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d134      	bne.n	8005338 <UART_SetConfig+0x164>
 80052ce:	4b82      	ldr	r3, [pc, #520]	; (80054d8 <UART_SetConfig+0x304>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b0c      	cmp	r3, #12
 80052da:	d829      	bhi.n	8005330 <UART_SetConfig+0x15c>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x110>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	08005319 	.word	0x08005319
 80052e8:	08005331 	.word	0x08005331
 80052ec:	08005331 	.word	0x08005331
 80052f0:	08005331 	.word	0x08005331
 80052f4:	08005325 	.word	0x08005325
 80052f8:	08005331 	.word	0x08005331
 80052fc:	08005331 	.word	0x08005331
 8005300:	08005331 	.word	0x08005331
 8005304:	0800531f 	.word	0x0800531f
 8005308:	08005331 	.word	0x08005331
 800530c:	08005331 	.word	0x08005331
 8005310:	08005331 	.word	0x08005331
 8005314:	0800532b 	.word	0x0800532b
 8005318:	2300      	movs	r3, #0
 800531a:	76fb      	strb	r3, [r7, #27]
 800531c:	e084      	b.n	8005428 <UART_SetConfig+0x254>
 800531e:	2302      	movs	r3, #2
 8005320:	76fb      	strb	r3, [r7, #27]
 8005322:	e081      	b.n	8005428 <UART_SetConfig+0x254>
 8005324:	2304      	movs	r3, #4
 8005326:	76fb      	strb	r3, [r7, #27]
 8005328:	e07e      	b.n	8005428 <UART_SetConfig+0x254>
 800532a:	2308      	movs	r3, #8
 800532c:	76fb      	strb	r3, [r7, #27]
 800532e:	e07b      	b.n	8005428 <UART_SetConfig+0x254>
 8005330:	2310      	movs	r3, #16
 8005332:	76fb      	strb	r3, [r7, #27]
 8005334:	bf00      	nop
 8005336:	e077      	b.n	8005428 <UART_SetConfig+0x254>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a68      	ldr	r2, [pc, #416]	; (80054e0 <UART_SetConfig+0x30c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d120      	bne.n	8005384 <UART_SetConfig+0x1b0>
 8005342:	4b65      	ldr	r3, [pc, #404]	; (80054d8 <UART_SetConfig+0x304>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800534c:	2b10      	cmp	r3, #16
 800534e:	d00f      	beq.n	8005370 <UART_SetConfig+0x19c>
 8005350:	2b10      	cmp	r3, #16
 8005352:	d802      	bhi.n	800535a <UART_SetConfig+0x186>
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <UART_SetConfig+0x190>
 8005358:	e010      	b.n	800537c <UART_SetConfig+0x1a8>
 800535a:	2b20      	cmp	r3, #32
 800535c:	d005      	beq.n	800536a <UART_SetConfig+0x196>
 800535e:	2b30      	cmp	r3, #48	; 0x30
 8005360:	d009      	beq.n	8005376 <UART_SetConfig+0x1a2>
 8005362:	e00b      	b.n	800537c <UART_SetConfig+0x1a8>
 8005364:	2300      	movs	r3, #0
 8005366:	76fb      	strb	r3, [r7, #27]
 8005368:	e05e      	b.n	8005428 <UART_SetConfig+0x254>
 800536a:	2302      	movs	r3, #2
 800536c:	76fb      	strb	r3, [r7, #27]
 800536e:	e05b      	b.n	8005428 <UART_SetConfig+0x254>
 8005370:	2304      	movs	r3, #4
 8005372:	76fb      	strb	r3, [r7, #27]
 8005374:	e058      	b.n	8005428 <UART_SetConfig+0x254>
 8005376:	2308      	movs	r3, #8
 8005378:	76fb      	strb	r3, [r7, #27]
 800537a:	e055      	b.n	8005428 <UART_SetConfig+0x254>
 800537c:	2310      	movs	r3, #16
 800537e:	76fb      	strb	r3, [r7, #27]
 8005380:	bf00      	nop
 8005382:	e051      	b.n	8005428 <UART_SetConfig+0x254>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a56      	ldr	r2, [pc, #344]	; (80054e4 <UART_SetConfig+0x310>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d120      	bne.n	80053d0 <UART_SetConfig+0x1fc>
 800538e:	4b52      	ldr	r3, [pc, #328]	; (80054d8 <UART_SetConfig+0x304>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005398:	2b40      	cmp	r3, #64	; 0x40
 800539a:	d00f      	beq.n	80053bc <UART_SetConfig+0x1e8>
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d802      	bhi.n	80053a6 <UART_SetConfig+0x1d2>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <UART_SetConfig+0x1dc>
 80053a4:	e010      	b.n	80053c8 <UART_SetConfig+0x1f4>
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d005      	beq.n	80053b6 <UART_SetConfig+0x1e2>
 80053aa:	2bc0      	cmp	r3, #192	; 0xc0
 80053ac:	d009      	beq.n	80053c2 <UART_SetConfig+0x1ee>
 80053ae:	e00b      	b.n	80053c8 <UART_SetConfig+0x1f4>
 80053b0:	2300      	movs	r3, #0
 80053b2:	76fb      	strb	r3, [r7, #27]
 80053b4:	e038      	b.n	8005428 <UART_SetConfig+0x254>
 80053b6:	2302      	movs	r3, #2
 80053b8:	76fb      	strb	r3, [r7, #27]
 80053ba:	e035      	b.n	8005428 <UART_SetConfig+0x254>
 80053bc:	2304      	movs	r3, #4
 80053be:	76fb      	strb	r3, [r7, #27]
 80053c0:	e032      	b.n	8005428 <UART_SetConfig+0x254>
 80053c2:	2308      	movs	r3, #8
 80053c4:	76fb      	strb	r3, [r7, #27]
 80053c6:	e02f      	b.n	8005428 <UART_SetConfig+0x254>
 80053c8:	2310      	movs	r3, #16
 80053ca:	76fb      	strb	r3, [r7, #27]
 80053cc:	bf00      	nop
 80053ce:	e02b      	b.n	8005428 <UART_SetConfig+0x254>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a3e      	ldr	r2, [pc, #248]	; (80054d0 <UART_SetConfig+0x2fc>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d124      	bne.n	8005424 <UART_SetConfig+0x250>
 80053da:	4b3f      	ldr	r3, [pc, #252]	; (80054d8 <UART_SetConfig+0x304>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e8:	d012      	beq.n	8005410 <UART_SetConfig+0x23c>
 80053ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ee:	d802      	bhi.n	80053f6 <UART_SetConfig+0x222>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <UART_SetConfig+0x230>
 80053f4:	e012      	b.n	800541c <UART_SetConfig+0x248>
 80053f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053fa:	d006      	beq.n	800540a <UART_SetConfig+0x236>
 80053fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005400:	d009      	beq.n	8005416 <UART_SetConfig+0x242>
 8005402:	e00b      	b.n	800541c <UART_SetConfig+0x248>
 8005404:	2300      	movs	r3, #0
 8005406:	76fb      	strb	r3, [r7, #27]
 8005408:	e00e      	b.n	8005428 <UART_SetConfig+0x254>
 800540a:	2302      	movs	r3, #2
 800540c:	76fb      	strb	r3, [r7, #27]
 800540e:	e00b      	b.n	8005428 <UART_SetConfig+0x254>
 8005410:	2304      	movs	r3, #4
 8005412:	76fb      	strb	r3, [r7, #27]
 8005414:	e008      	b.n	8005428 <UART_SetConfig+0x254>
 8005416:	2308      	movs	r3, #8
 8005418:	76fb      	strb	r3, [r7, #27]
 800541a:	e005      	b.n	8005428 <UART_SetConfig+0x254>
 800541c:	2310      	movs	r3, #16
 800541e:	76fb      	strb	r3, [r7, #27]
 8005420:	bf00      	nop
 8005422:	e001      	b.n	8005428 <UART_SetConfig+0x254>
 8005424:	2310      	movs	r3, #16
 8005426:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a28      	ldr	r2, [pc, #160]	; (80054d0 <UART_SetConfig+0x2fc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	f040 80a1 	bne.w	8005576 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005434:	7efb      	ldrb	r3, [r7, #27]
 8005436:	2b08      	cmp	r3, #8
 8005438:	d823      	bhi.n	8005482 <UART_SetConfig+0x2ae>
 800543a:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <UART_SetConfig+0x26c>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005465 	.word	0x08005465
 8005444:	08005483 	.word	0x08005483
 8005448:	0800546d 	.word	0x0800546d
 800544c:	08005483 	.word	0x08005483
 8005450:	08005473 	.word	0x08005473
 8005454:	08005483 	.word	0x08005483
 8005458:	08005483 	.word	0x08005483
 800545c:	08005483 	.word	0x08005483
 8005460:	0800547b 	.word	0x0800547b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005464:	f7fe fbbe 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 8005468:	6178      	str	r0, [r7, #20]
        break;
 800546a:	e00f      	b.n	800548c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800546c:	4b1e      	ldr	r3, [pc, #120]	; (80054e8 <UART_SetConfig+0x314>)
 800546e:	617b      	str	r3, [r7, #20]
        break;
 8005470:	e00c      	b.n	800548c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005472:	f7fe fb49 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 8005476:	6178      	str	r0, [r7, #20]
        break;
 8005478:	e008      	b.n	800548c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800547a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800547e:	617b      	str	r3, [r7, #20]
        break;
 8005480:	e004      	b.n	800548c <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	76bb      	strb	r3, [r7, #26]
        break;
 800548a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8130 	beq.w	80056f4 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	4a14      	ldr	r2, [pc, #80]	; (80054ec <UART_SetConfig+0x318>)
 800549a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800549e:	461a      	mov	r2, r3
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80054a6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	4413      	add	r3, r2
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d305      	bcc.n	80054c4 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d915      	bls.n	80054f0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	76bb      	strb	r3, [r7, #26]
 80054c8:	e114      	b.n	80056f4 <UART_SetConfig+0x520>
 80054ca:	bf00      	nop
 80054cc:	cfff69f3 	.word	0xcfff69f3
 80054d0:	40008000 	.word	0x40008000
 80054d4:	40013800 	.word	0x40013800
 80054d8:	40021000 	.word	0x40021000
 80054dc:	40004400 	.word	0x40004400
 80054e0:	40004800 	.word	0x40004800
 80054e4:	40004c00 	.word	0x40004c00
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	08006414 	.word	0x08006414
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f04f 0100 	mov.w	r1, #0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	4a87      	ldr	r2, [pc, #540]	; (800571c <UART_SetConfig+0x548>)
 80054fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005502:	b29b      	uxth	r3, r3
 8005504:	f04f 0400 	mov.w	r4, #0
 8005508:	461a      	mov	r2, r3
 800550a:	4623      	mov	r3, r4
 800550c:	f7fa fe8e 	bl	800022c <__aeabi_uldivmod>
 8005510:	4603      	mov	r3, r0
 8005512:	460c      	mov	r4, r1
 8005514:	4619      	mov	r1, r3
 8005516:	4622      	mov	r2, r4
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	f04f 0400 	mov.w	r4, #0
 8005520:	0214      	lsls	r4, r2, #8
 8005522:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005526:	020b      	lsls	r3, r1, #8
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6852      	ldr	r2, [r2, #4]
 800552c:	0852      	lsrs	r2, r2, #1
 800552e:	4611      	mov	r1, r2
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	eb13 0b01 	adds.w	fp, r3, r1
 8005538:	eb44 0c02 	adc.w	ip, r4, r2
 800553c:	4658      	mov	r0, fp
 800553e:	4661      	mov	r1, ip
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f04f 0400 	mov.w	r4, #0
 8005548:	461a      	mov	r2, r3
 800554a:	4623      	mov	r3, r4
 800554c:	f7fa fe6e 	bl	800022c <__aeabi_uldivmod>
 8005550:	4603      	mov	r3, r0
 8005552:	460c      	mov	r4, r1
 8005554:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800555c:	d308      	bcc.n	8005570 <UART_SetConfig+0x39c>
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005564:	d204      	bcs.n	8005570 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	60da      	str	r2, [r3, #12]
 800556e:	e0c1      	b.n	80056f4 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	76bb      	strb	r3, [r7, #26]
 8005574:	e0be      	b.n	80056f4 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800557e:	d164      	bne.n	800564a <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8005580:	7efb      	ldrb	r3, [r7, #27]
 8005582:	2b08      	cmp	r3, #8
 8005584:	d827      	bhi.n	80055d6 <UART_SetConfig+0x402>
 8005586:	a201      	add	r2, pc, #4	; (adr r2, 800558c <UART_SetConfig+0x3b8>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	080055b1 	.word	0x080055b1
 8005590:	080055b9 	.word	0x080055b9
 8005594:	080055c1 	.word	0x080055c1
 8005598:	080055d7 	.word	0x080055d7
 800559c:	080055c7 	.word	0x080055c7
 80055a0:	080055d7 	.word	0x080055d7
 80055a4:	080055d7 	.word	0x080055d7
 80055a8:	080055d7 	.word	0x080055d7
 80055ac:	080055cf 	.word	0x080055cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b0:	f7fe fb18 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 80055b4:	6178      	str	r0, [r7, #20]
        break;
 80055b6:	e013      	b.n	80055e0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b8:	f7fe fb2a 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 80055bc:	6178      	str	r0, [r7, #20]
        break;
 80055be:	e00f      	b.n	80055e0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c0:	4b57      	ldr	r3, [pc, #348]	; (8005720 <UART_SetConfig+0x54c>)
 80055c2:	617b      	str	r3, [r7, #20]
        break;
 80055c4:	e00c      	b.n	80055e0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055c6:	f7fe fa9f 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 80055ca:	6178      	str	r0, [r7, #20]
        break;
 80055cc:	e008      	b.n	80055e0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055d2:	617b      	str	r3, [r7, #20]
        break;
 80055d4:	e004      	b.n	80055e0 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	76bb      	strb	r3, [r7, #26]
        break;
 80055de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8086 	beq.w	80056f4 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	4a4b      	ldr	r2, [pc, #300]	; (800571c <UART_SetConfig+0x548>)
 80055ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055f2:	461a      	mov	r2, r3
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80055fa:	005a      	lsls	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	441a      	add	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	b29b      	uxth	r3, r3
 800560e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b0f      	cmp	r3, #15
 8005614:	d916      	bls.n	8005644 <UART_SetConfig+0x470>
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561c:	d212      	bcs.n	8005644 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f023 030f 	bic.w	r3, r3, #15
 8005626:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	085b      	lsrs	r3, r3, #1
 800562c:	b29b      	uxth	r3, r3
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	b29a      	uxth	r2, r3
 8005634:	89fb      	ldrh	r3, [r7, #14]
 8005636:	4313      	orrs	r3, r2
 8005638:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	89fa      	ldrh	r2, [r7, #14]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	e057      	b.n	80056f4 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	76bb      	strb	r3, [r7, #26]
 8005648:	e054      	b.n	80056f4 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 800564a:	7efb      	ldrb	r3, [r7, #27]
 800564c:	2b08      	cmp	r3, #8
 800564e:	d828      	bhi.n	80056a2 <UART_SetConfig+0x4ce>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <UART_SetConfig+0x484>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	0800567d 	.word	0x0800567d
 800565c:	08005685 	.word	0x08005685
 8005660:	0800568d 	.word	0x0800568d
 8005664:	080056a3 	.word	0x080056a3
 8005668:	08005693 	.word	0x08005693
 800566c:	080056a3 	.word	0x080056a3
 8005670:	080056a3 	.word	0x080056a3
 8005674:	080056a3 	.word	0x080056a3
 8005678:	0800569b 	.word	0x0800569b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800567c:	f7fe fab2 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 8005680:	6178      	str	r0, [r7, #20]
        break;
 8005682:	e013      	b.n	80056ac <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005684:	f7fe fac4 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8005688:	6178      	str	r0, [r7, #20]
        break;
 800568a:	e00f      	b.n	80056ac <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800568c:	4b24      	ldr	r3, [pc, #144]	; (8005720 <UART_SetConfig+0x54c>)
 800568e:	617b      	str	r3, [r7, #20]
        break;
 8005690:	e00c      	b.n	80056ac <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005692:	f7fe fa39 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 8005696:	6178      	str	r0, [r7, #20]
        break;
 8005698:	e008      	b.n	80056ac <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800569a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569e:	617b      	str	r3, [r7, #20]
        break;
 80056a0:	e004      	b.n	80056ac <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	76bb      	strb	r3, [r7, #26]
        break;
 80056aa:	bf00      	nop
    }

    if (pclk != 0U)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d020      	beq.n	80056f4 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	4a19      	ldr	r2, [pc, #100]	; (800571c <UART_SetConfig+0x548>)
 80056b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056bc:	461a      	mov	r2, r3
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	085b      	lsrs	r3, r3, #1
 80056ca:	441a      	add	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b0f      	cmp	r3, #15
 80056dc:	d908      	bls.n	80056f0 <UART_SetConfig+0x51c>
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e4:	d204      	bcs.n	80056f0 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	60da      	str	r2, [r3, #12]
 80056ee:	e001      	b.n	80056f4 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005710:	7ebb      	ldrb	r3, [r7, #26]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800571c:	08006414 	.word	0x08006414
 8005720:	00f42400 	.word	0x00f42400

08005724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01a      	beq.n	800583a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005822:	d10a      	bne.n	800583a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	605a      	str	r2, [r3, #4]
  }
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af02      	add	r7, sp, #8
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005878:	f7fc fac6 	bl	8001e08 <HAL_GetTick>
 800587c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b08      	cmp	r3, #8
 800588a:	d10e      	bne.n	80058aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800588c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f82c 	bl	80058f8 <UART_WaitOnFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e022      	b.n	80058f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d10e      	bne.n	80058d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f816 	bl	80058f8 <UART_WaitOnFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e00c      	b.n	80058f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005908:	e062      	b.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d05e      	beq.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005912:	f7fc fa79 	bl	8001e08 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <UART_WaitOnFlagUntilTimeout+0x30>
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d11d      	bne.n	8005964 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005936:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e045      	b.n	80059f0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d02e      	beq.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800597c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005980:	d126      	bne.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800598a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800599a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e00f      	b.n	80059f0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4013      	ands	r3, r2
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	461a      	mov	r2, r3
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d08d      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f7ff fbaf 	bl	80051c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a80:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff fb81 	bl	8005198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a96:	bf00      	nop
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005aac:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab4:	2b22      	cmp	r3, #34	; 0x22
 8005ab6:	d13b      	bne.n	8005b30 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ac0:	89bb      	ldrh	r3, [r7, #12]
 8005ac2:	b2d9      	uxtb	r1, r3
 8005ac4:	89fb      	ldrh	r3, [r7, #14]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005acc:	400a      	ands	r2, r1
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d122      	bne.n	8005b40 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b08:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff fb3f 	bl	80051ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b2e:	e007      	b.n	8005b40 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0208 	orr.w	r2, r2, #8
 8005b3e:	619a      	str	r2, [r3, #24]
}
 8005b40:	bf00      	nop
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b56:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b5e:	2b22      	cmp	r3, #34	; 0x22
 8005b60:	d13b      	bne.n	8005bda <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b70:	89ba      	ldrh	r2, [r7, #12]
 8005b72:	89fb      	ldrh	r3, [r7, #14]
 8005b74:	4013      	ands	r3, r2
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b80:	1c9a      	adds	r2, r3, #2
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d122      	bne.n	8005bea <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bb2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
 8005bc2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff faea 	bl	80051ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bd8:	e007      	b.n	8005bea <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699a      	ldr	r2, [r3, #24]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f042 0208 	orr.w	r2, r2, #8
 8005be8:	619a      	str	r2, [r3, #24]
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c02:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c0a:	2b22      	cmp	r3, #34	; 0x22
 8005c0c:	d168      	bne.n	8005ce0 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c14:	81fb      	strh	r3, [r7, #14]
 8005c16:	e03f      	b.n	8005c98 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c20:	893b      	ldrh	r3, [r7, #8]
 8005c22:	b2d9      	uxtb	r1, r3
 8005c24:	89bb      	ldrh	r3, [r7, #12]
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2c:	400a      	ands	r2, r1
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d11b      	bne.n	8005c92 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c68:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6812      	ldr	r2, [r2, #0]
 8005c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff fa8d 	bl	80051ac <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005c92:	89fb      	ldrh	r3, [r7, #14]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	81fb      	strh	r3, [r7, #14]
 8005c98:	89fb      	ldrh	r3, [r7, #14]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1bc      	bne.n	8005c18 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ca4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005ca6:	897b      	ldrh	r3, [r7, #10]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d021      	beq.n	8005cf0 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005cb2:	897a      	ldrh	r2, [r7, #10]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d21b      	bcs.n	8005cf0 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005cc6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a0b      	ldr	r2, [pc, #44]	; (8005cf8 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8005ccc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0220 	orr.w	r2, r2, #32
 8005cdc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cde:	e007      	b.n	8005cf0 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0208 	orr.w	r2, r2, #8
 8005cee:	619a      	str	r2, [r3, #24]
}
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	08005a9f 	.word	0x08005a9f

08005cfc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d0a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d12:	2b22      	cmp	r3, #34	; 0x22
 8005d14:	d168      	bne.n	8005de8 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d1c:	82fb      	strh	r3, [r7, #22]
 8005d1e:	e03f      	b.n	8005da0 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005d2e:	8a3a      	ldrh	r2, [r7, #16]
 8005d30:	8abb      	ldrh	r3, [r7, #20]
 8005d32:	4013      	ands	r3, r2
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3e:	1c9a      	adds	r2, r3, #2
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d11b      	bne.n	8005d9a <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d70:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6812      	ldr	r2, [r2, #0]
 8005d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff fa09 	bl	80051ac <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005d9a:	8afb      	ldrh	r3, [r7, #22]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	82fb      	strh	r3, [r7, #22]
 8005da0:	8afb      	ldrh	r3, [r7, #22]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1bc      	bne.n	8005d20 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005dac:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005dae:	8a7b      	ldrh	r3, [r7, #18]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d021      	beq.n	8005df8 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005dba:	8a7a      	ldrh	r2, [r7, #18]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d21b      	bcs.n	8005df8 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005dce:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a0b      	ldr	r2, [pc, #44]	; (8005e00 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8005dd4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0220 	orr.w	r2, r2, #32
 8005de4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005de6:	e007      	b.n	8005df8 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0208 	orr.w	r2, r2, #8
 8005df6:	619a      	str	r2, [r3, #24]
}
 8005df8:	bf00      	nop
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	08005b49 	.word	0x08005b49

08005e04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e027      	b.n	8005ea6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2224      	movs	r2, #36	; 0x24
 8005e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0201 	bic.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e02d      	b.n	8005f26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2224      	movs	r2, #36	; 0x24
 8005ed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f850 	bl	8005fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e02d      	b.n	8005fa2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2224      	movs	r2, #36	; 0x24
 8005f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f812 	bl	8005fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b089      	sub	sp, #36	; 0x24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005fb4:	4a2f      	ldr	r2, [pc, #188]	; (8006074 <UARTEx_SetNbDataToProcess+0xc8>)
 8005fb6:	f107 0314 	add.w	r3, r7, #20
 8005fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fbe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005fc2:	4a2d      	ldr	r2, [pc, #180]	; (8006078 <UARTEx_SetNbDataToProcess+0xcc>)
 8005fc4:	f107 030c 	add.w	r3, r7, #12
 8005fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fcc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d108      	bne.n	8005fea <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fe8:	e03d      	b.n	8006066 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fea:	2308      	movs	r3, #8
 8005fec:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fee:	2308      	movs	r3, #8
 8005ff0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	0e5b      	lsrs	r3, r3, #25
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	0f5b      	lsrs	r3, r3, #29
 800600a:	b2db      	uxtb	r3, r3
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006012:	7fbb      	ldrb	r3, [r7, #30]
 8006014:	7f3a      	ldrb	r2, [r7, #28]
 8006016:	f107 0120 	add.w	r1, r7, #32
 800601a:	440a      	add	r2, r1
 800601c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006020:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006024:	7f3a      	ldrb	r2, [r7, #28]
 8006026:	f107 0120 	add.w	r1, r7, #32
 800602a:	440a      	add	r2, r1
 800602c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006030:	fb93 f3f2 	sdiv	r3, r3, r2
 8006034:	b29a      	uxth	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800603c:	7ffb      	ldrb	r3, [r7, #31]
 800603e:	7f7a      	ldrb	r2, [r7, #29]
 8006040:	f107 0120 	add.w	r1, r7, #32
 8006044:	440a      	add	r2, r1
 8006046:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800604a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800604e:	7f7a      	ldrb	r2, [r7, #29]
 8006050:	f107 0120 	add.w	r1, r7, #32
 8006054:	440a      	add	r2, r1
 8006056:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800605a:	fb93 f3f2 	sdiv	r3, r3, r2
 800605e:	b29a      	uxth	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006066:	bf00      	nop
 8006068:	3724      	adds	r7, #36	; 0x24
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	080063dc 	.word	0x080063dc
 8006078:	080063e4 	.word	0x080063e4

0800607c <__libc_init_array>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4e0d      	ldr	r6, [pc, #52]	; (80060b4 <__libc_init_array+0x38>)
 8006080:	4c0d      	ldr	r4, [pc, #52]	; (80060b8 <__libc_init_array+0x3c>)
 8006082:	1ba4      	subs	r4, r4, r6
 8006084:	10a4      	asrs	r4, r4, #2
 8006086:	2500      	movs	r5, #0
 8006088:	42a5      	cmp	r5, r4
 800608a:	d109      	bne.n	80060a0 <__libc_init_array+0x24>
 800608c:	4e0b      	ldr	r6, [pc, #44]	; (80060bc <__libc_init_array+0x40>)
 800608e:	4c0c      	ldr	r4, [pc, #48]	; (80060c0 <__libc_init_array+0x44>)
 8006090:	f000 f82c 	bl	80060ec <_init>
 8006094:	1ba4      	subs	r4, r4, r6
 8006096:	10a4      	asrs	r4, r4, #2
 8006098:	2500      	movs	r5, #0
 800609a:	42a5      	cmp	r5, r4
 800609c:	d105      	bne.n	80060aa <__libc_init_array+0x2e>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060a4:	4798      	blx	r3
 80060a6:	3501      	adds	r5, #1
 80060a8:	e7ee      	b.n	8006088 <__libc_init_array+0xc>
 80060aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060ae:	4798      	blx	r3
 80060b0:	3501      	adds	r5, #1
 80060b2:	e7f2      	b.n	800609a <__libc_init_array+0x1e>
 80060b4:	08006434 	.word	0x08006434
 80060b8:	08006434 	.word	0x08006434
 80060bc:	08006434 	.word	0x08006434
 80060c0:	08006438 	.word	0x08006438

080060c4 <memcpy>:
 80060c4:	b510      	push	{r4, lr}
 80060c6:	1e43      	subs	r3, r0, #1
 80060c8:	440a      	add	r2, r1
 80060ca:	4291      	cmp	r1, r2
 80060cc:	d100      	bne.n	80060d0 <memcpy+0xc>
 80060ce:	bd10      	pop	{r4, pc}
 80060d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060d8:	e7f7      	b.n	80060ca <memcpy+0x6>

080060da <memset>:
 80060da:	4402      	add	r2, r0
 80060dc:	4603      	mov	r3, r0
 80060de:	4293      	cmp	r3, r2
 80060e0:	d100      	bne.n	80060e4 <memset+0xa>
 80060e2:	4770      	bx	lr
 80060e4:	f803 1b01 	strb.w	r1, [r3], #1
 80060e8:	e7f9      	b.n	80060de <memset+0x4>
	...

080060ec <_init>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	bf00      	nop
 80060f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f2:	bc08      	pop	{r3}
 80060f4:	469e      	mov	lr, r3
 80060f6:	4770      	bx	lr

080060f8 <_fini>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	bf00      	nop
 80060fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fe:	bc08      	pop	{r3}
 8006100:	469e      	mov	lr, r3
 8006102:	4770      	bx	lr
