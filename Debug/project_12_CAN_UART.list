
project_12_CAN_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b50  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08006d28  08006d28  00016d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007050  08007050  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007050  08007050  00017050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007058  08007058  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007058  08007058  00017058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007060  08007060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c54  2000000c  08007070  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c60  08007070  00020c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b58  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002930  00000000  00000000  00037b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  0003a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001290  00000000  00000000  0003b890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000202ac  00000000  00000000  0003cb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000effe  00000000  00000000  0005cdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce9b4  00000000  00000000  0006bdca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a77e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f4  00000000  00000000  0013a7fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006d10 	.word	0x08006d10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006d10 	.word	0x08006d10

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b972 	b.w	8000528 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9e08      	ldr	r6, [sp, #32]
 8000262:	4604      	mov	r4, r0
 8000264:	4688      	mov	r8, r1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d14b      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026a:	428a      	cmp	r2, r1
 800026c:	4615      	mov	r5, r2
 800026e:	d967      	bls.n	8000340 <__udivmoddi4+0xe4>
 8000270:	fab2 f282 	clz	r2, r2
 8000274:	b14a      	cbz	r2, 800028a <__udivmoddi4+0x2e>
 8000276:	f1c2 0720 	rsb	r7, r2, #32
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	fa20 f707 	lsr.w	r7, r0, r7
 8000282:	4095      	lsls	r5, r2
 8000284:	ea47 0803 	orr.w	r8, r7, r3
 8000288:	4094      	lsls	r4, r2
 800028a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028e:	0c23      	lsrs	r3, r4, #16
 8000290:	fbb8 f7fe 	udiv	r7, r8, lr
 8000294:	fa1f fc85 	uxth.w	ip, r5
 8000298:	fb0e 8817 	mls	r8, lr, r7, r8
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	fb07 f10c 	mul.w	r1, r7, ip
 80002a4:	4299      	cmp	r1, r3
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x60>
 80002a8:	18eb      	adds	r3, r5, r3
 80002aa:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ae:	f080 811b 	bcs.w	80004e8 <__udivmoddi4+0x28c>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 8118 	bls.w	80004e8 <__udivmoddi4+0x28c>
 80002b8:	3f02      	subs	r7, #2
 80002ba:	442b      	add	r3, r5
 80002bc:	1a5b      	subs	r3, r3, r1
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002cc:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d0:	45a4      	cmp	ip, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x8c>
 80002d4:	192c      	adds	r4, r5, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x290>
 80002de:	45a4      	cmp	ip, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x290>
 80002e4:	3802      	subs	r0, #2
 80002e6:	442c      	add	r4, r5
 80002e8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ec:	eba4 040c 	sub.w	r4, r4, ip
 80002f0:	2700      	movs	r7, #0
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa0>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0xbe>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80eb 	beq.w	80004e2 <__udivmoddi4+0x286>
 800030c:	2700      	movs	r7, #0
 800030e:	e9c6 0100 	strd	r0, r1, [r6]
 8000312:	4638      	mov	r0, r7
 8000314:	4639      	mov	r1, r7
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f783 	clz	r7, r3
 800031e:	2f00      	cmp	r7, #0
 8000320:	d147      	bne.n	80003b2 <__udivmoddi4+0x156>
 8000322:	428b      	cmp	r3, r1
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xd0>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2c4>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb61 0303 	sbc.w	r3, r1, r3
 8000332:	2001      	movs	r0, #1
 8000334:	4698      	mov	r8, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d0e0      	beq.n	80002fc <__udivmoddi4+0xa0>
 800033a:	e9c6 4800 	strd	r4, r8, [r6]
 800033e:	e7dd      	b.n	80002fc <__udivmoddi4+0xa0>
 8000340:	b902      	cbnz	r2, 8000344 <__udivmoddi4+0xe8>
 8000342:	deff      	udf	#255	; 0xff
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	2a00      	cmp	r2, #0
 800034a:	f040 808f 	bne.w	800046c <__udivmoddi4+0x210>
 800034e:	1b49      	subs	r1, r1, r5
 8000350:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000354:	fa1f f885 	uxth.w	r8, r5
 8000358:	2701      	movs	r7, #1
 800035a:	fbb1 fcfe 	udiv	ip, r1, lr
 800035e:	0c23      	lsrs	r3, r4, #16
 8000360:	fb0e 111c 	mls	r1, lr, ip, r1
 8000364:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000368:	fb08 f10c 	mul.w	r1, r8, ip
 800036c:	4299      	cmp	r1, r3
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x124>
 8000370:	18eb      	adds	r3, r5, r3
 8000372:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x122>
 8000378:	4299      	cmp	r1, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2bc>
 800037e:	4684      	mov	ip, r0
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	b2a3      	uxth	r3, r4
 8000384:	fbb1 f0fe 	udiv	r0, r1, lr
 8000388:	fb0e 1410 	mls	r4, lr, r0, r1
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	fb08 f800 	mul.w	r8, r8, r0
 8000394:	45a0      	cmp	r8, r4
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x14c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x14a>
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	f200 80b6 	bhi.w	8000512 <__udivmoddi4+0x2b6>
 80003a6:	4618      	mov	r0, r3
 80003a8:	eba4 0408 	sub.w	r4, r4, r8
 80003ac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b0:	e79f      	b.n	80002f2 <__udivmoddi4+0x96>
 80003b2:	f1c7 0c20 	rsb	ip, r7, #32
 80003b6:	40bb      	lsls	r3, r7
 80003b8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003bc:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c0:	fa01 f407 	lsl.w	r4, r1, r7
 80003c4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003cc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d0:	4325      	orrs	r5, r4
 80003d2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d6:	0c2c      	lsrs	r4, r5, #16
 80003d8:	fb08 3319 	mls	r3, r8, r9, r3
 80003dc:	fa1f fa8e 	uxth.w	sl, lr
 80003e0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e4:	fb09 f40a 	mul.w	r4, r9, sl
 80003e8:	429c      	cmp	r4, r3
 80003ea:	fa02 f207 	lsl.w	r2, r2, r7
 80003ee:	fa00 f107 	lsl.w	r1, r0, r7
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b0>
 80003f4:	eb1e 0303 	adds.w	r3, lr, r3
 80003f8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003fc:	f080 8087 	bcs.w	800050e <__udivmoddi4+0x2b2>
 8000400:	429c      	cmp	r4, r3
 8000402:	f240 8084 	bls.w	800050e <__udivmoddi4+0x2b2>
 8000406:	f1a9 0902 	sub.w	r9, r9, #2
 800040a:	4473      	add	r3, lr
 800040c:	1b1b      	subs	r3, r3, r4
 800040e:	b2ad      	uxth	r5, r5
 8000410:	fbb3 f0f8 	udiv	r0, r3, r8
 8000414:	fb08 3310 	mls	r3, r8, r0, r3
 8000418:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800041c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000420:	45a2      	cmp	sl, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1da>
 8000424:	eb1e 0404 	adds.w	r4, lr, r4
 8000428:	f100 33ff 	add.w	r3, r0, #4294967295
 800042c:	d26b      	bcs.n	8000506 <__udivmoddi4+0x2aa>
 800042e:	45a2      	cmp	sl, r4
 8000430:	d969      	bls.n	8000506 <__udivmoddi4+0x2aa>
 8000432:	3802      	subs	r0, #2
 8000434:	4474      	add	r4, lr
 8000436:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043a:	fba0 8902 	umull	r8, r9, r0, r2
 800043e:	eba4 040a 	sub.w	r4, r4, sl
 8000442:	454c      	cmp	r4, r9
 8000444:	46c2      	mov	sl, r8
 8000446:	464b      	mov	r3, r9
 8000448:	d354      	bcc.n	80004f4 <__udivmoddi4+0x298>
 800044a:	d051      	beq.n	80004f0 <__udivmoddi4+0x294>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2c8>
 8000450:	ebb1 050a 	subs.w	r5, r1, sl
 8000454:	eb64 0403 	sbc.w	r4, r4, r3
 8000458:	fa04 fc0c 	lsl.w	ip, r4, ip
 800045c:	40fd      	lsrs	r5, r7
 800045e:	40fc      	lsrs	r4, r7
 8000460:	ea4c 0505 	orr.w	r5, ip, r5
 8000464:	e9c6 5400 	strd	r5, r4, [r6]
 8000468:	2700      	movs	r7, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa0>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f703 	lsr.w	r7, r0, r3
 8000474:	4095      	lsls	r5, r2
 8000476:	fa01 f002 	lsl.w	r0, r1, r2
 800047a:	fa21 f303 	lsr.w	r3, r1, r3
 800047e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000482:	4338      	orrs	r0, r7
 8000484:	0c01      	lsrs	r1, r0, #16
 8000486:	fbb3 f7fe 	udiv	r7, r3, lr
 800048a:	fa1f f885 	uxth.w	r8, r5
 800048e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb07 f308 	mul.w	r3, r7, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x256>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f107 3cff 	add.w	ip, r7, #4294967295
 80004a8:	d22f      	bcs.n	800050a <__udivmoddi4+0x2ae>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d92d      	bls.n	800050a <__udivmoddi4+0x2ae>
 80004ae:	3f02      	subs	r7, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1acb      	subs	r3, r1, r3
 80004b4:	b281      	uxth	r1, r0
 80004b6:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ba:	fb0e 3310 	mls	r3, lr, r0, r3
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb00 f308 	mul.w	r3, r0, r8
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x27e>
 80004ca:	1869      	adds	r1, r5, r1
 80004cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d0:	d217      	bcs.n	8000502 <__udivmoddi4+0x2a6>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d915      	bls.n	8000502 <__udivmoddi4+0x2a6>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4429      	add	r1, r5
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e0:	e73b      	b.n	800035a <__udivmoddi4+0xfe>
 80004e2:	4637      	mov	r7, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e709      	b.n	80002fc <__udivmoddi4+0xa0>
 80004e8:	4607      	mov	r7, r0
 80004ea:	e6e7      	b.n	80002bc <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x8c>
 80004f0:	4541      	cmp	r1, r8
 80004f2:	d2ab      	bcs.n	800044c <__udivmoddi4+0x1f0>
 80004f4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f8:	eb69 020e 	sbc.w	r2, r9, lr
 80004fc:	3801      	subs	r0, #1
 80004fe:	4613      	mov	r3, r2
 8000500:	e7a4      	b.n	800044c <__udivmoddi4+0x1f0>
 8000502:	4660      	mov	r0, ip
 8000504:	e7e9      	b.n	80004da <__udivmoddi4+0x27e>
 8000506:	4618      	mov	r0, r3
 8000508:	e795      	b.n	8000436 <__udivmoddi4+0x1da>
 800050a:	4667      	mov	r7, ip
 800050c:	e7d1      	b.n	80004b2 <__udivmoddi4+0x256>
 800050e:	4681      	mov	r9, r0
 8000510:	e77c      	b.n	800040c <__udivmoddi4+0x1b0>
 8000512:	3802      	subs	r0, #2
 8000514:	442c      	add	r4, r5
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0x14c>
 8000518:	f1ac 0c02 	sub.w	ip, ip, #2
 800051c:	442b      	add	r3, r5
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x124>
 8000520:	4638      	mov	r0, r7
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xda>
 8000524:	4637      	mov	r7, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa0>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <_ZNK5Queue7IsEmptyEv>:
	bool Push(uint8_t* data, uint8_t size, uint8_t priority);
	bool IsFull() const
	{
		return (Count == UART_TX_QUEUE_BUFFER_SIZE);
	}
	bool IsEmpty() const
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	{
		return (Count == 0);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf0c      	ite	eq
 800053c:	2301      	moveq	r3, #1
 800053e:	2300      	movne	r3, #0
 8000540:	b2db      	uxtb	r3, r3
	}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <_ZN3MSGC1Ev>:
struct MSG
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2020 	strb.w	r2, [r3, #32]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2200      	movs	r2, #0
 8000562:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <_ZN5QueueC1Ev>:
struct Queue
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3304      	adds	r3, #4
 8000586:	2407      	movs	r4, #7
 8000588:	461d      	mov	r5, r3
 800058a:	2c00      	cmp	r4, #0
 800058c:	db05      	blt.n	800059a <_ZN5QueueC1Ev+0x26>
 800058e:	4628      	mov	r0, r5
 8000590:	f7ff ffdd 	bl	800054e <_ZN3MSGC1Ev>
 8000594:	3522      	adds	r5, #34	; 0x22
 8000596:	3c01      	subs	r4, #1
 8000598:	e7f7      	b.n	800058a <_ZN5QueueC1Ev+0x16>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bdb0      	pop	{r4, r5, r7, pc}

080005b4 <add_message_to_UART_TX_queue>:
Queue UARTQueueTX;

extern "C"
{
	void add_message_to_UART_TX_queue(uint8_t* message_data_pointer, uint8_t message_size, uint8_t message_priority)
	{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08e      	sub	sp, #56	; 0x38
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	70fb      	strb	r3, [r7, #3]
 80005c0:	4613      	mov	r3, r2
 80005c2:	70bb      	strb	r3, [r7, #2]
		uint8_t tmp_buff[40];
		for (int i = 0; i < (int)sizeof(tmp_buff); i++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	637b      	str	r3, [r7, #52]	; 0x34
 80005c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ca:	2b27      	cmp	r3, #39	; 0x27
 80005cc:	dc0d      	bgt.n	80005ea <add_message_to_UART_TX_queue+0x36>
		{
			tmp_buff[i] = message_data_pointer[i];
 80005ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	4413      	add	r3, r2
 80005d4:	7819      	ldrb	r1, [r3, #0]
 80005d6:	f107 020c 	add.w	r2, r7, #12
 80005da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005dc:	4413      	add	r3, r2
 80005de:	460a      	mov	r2, r1
 80005e0:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < (int)sizeof(tmp_buff); i++)
 80005e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005e4:	3301      	adds	r3, #1
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
 80005e8:	e7ee      	b.n	80005c8 <add_message_to_UART_TX_queue+0x14>
		}

		UARTQueueTX.Push(message_data_pointer, message_size, message_priority);
 80005ea:	78bb      	ldrb	r3, [r7, #2]
 80005ec:	78fa      	ldrb	r2, [r7, #3]
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <add_message_to_UART_TX_queue+0x4c>)
 80005f2:	f000 fb1c 	bl	8000c2e <_ZN5Queue4PushEPhhh>
	}
 80005f6:	bf00      	nop
 80005f8:	3738      	adds	r7, #56	; 0x38
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000028 	.word	0x20000028

08000604 <send_messages_from_UART_TX_queue>:

	void send_messages_from_UART_TX_queue(void)
	{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
		if (!UARTQueueTX.IsEmpty())
 800060a:	482c      	ldr	r0, [pc, #176]	; (80006bc <send_messages_from_UART_TX_queue+0xb8>)
 800060c:	f7ff ff8e 	bl	800052c <_ZNK5Queue7IsEmptyEv>
 8000610:	4603      	mov	r3, r0
 8000612:	f083 0301 	eor.w	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d042      	beq.n	80006a2 <send_messages_from_UART_TX_queue+0x9e>
		{
			for (int ii = UART_TX_MESSAGE_PRIORITY_0_MAX; ii <= UART_TX_MESSAGE_PRIORITY_4_MIN; ii++)
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b04      	cmp	r3, #4
 8000624:	dc37      	bgt.n	8000696 <send_messages_from_UART_TX_queue+0x92>
			{
				for (int i = UARTQueueTX.Count; i != UARTQueueTX.PutIndex; i++)
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <send_messages_from_UART_TX_queue+0xb8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <send_messages_from_UART_TX_queue+0xb8>)
 800062e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	429a      	cmp	r2, r3
 8000636:	d02a      	beq.n	800068e <send_messages_from_UART_TX_queue+0x8a>
				{
					if (i == UART_TX_QUEUE_BUFFER_SIZE)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	2b08      	cmp	r3, #8
 800063c:	d101      	bne.n	8000642 <send_messages_from_UART_TX_queue+0x3e>
					{
					i = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
					}
					if(UARTQueueTX.Msgs[i].Priority == ii)
 8000642:	491e      	ldr	r1, [pc, #120]	; (80006bc <send_messages_from_UART_TX_queue+0xb8>)
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	4613      	mov	r3, r2
 8000648:	011b      	lsls	r3, r3, #4
 800064a:	4413      	add	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	440b      	add	r3, r1
 8000650:	3324      	adds	r3, #36	; 0x24
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	4293      	cmp	r3, r2
 800065a:	d114      	bne.n	8000686 <send_messages_from_UART_TX_queue+0x82>
					{
						uint8_t tmp_arr_3[8];
						UARTQueueTX.Pop(tmp_arr_3, sizeof(tmp_arr_3));
 800065c:	463b      	mov	r3, r7
 800065e:	2208      	movs	r2, #8
 8000660:	4619      	mov	r1, r3
 8000662:	4816      	ldr	r0, [pc, #88]	; (80006bc <send_messages_from_UART_TX_queue+0xb8>)
 8000664:	f000 fa84 	bl	8000b70 <_ZN5Queue3PopEPhh>

						send_message_to_UART(sizeof(tmp_arr_3), (uint8_t*)tmp_arr_3);
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	2008      	movs	r0, #8
 800066e:	f001 f8e3 	bl	8001838 <send_message_to_UART>

						UARTQueueTX.Msgs[i].Size = 0;
 8000672:	4912      	ldr	r1, [pc, #72]	; (80006bc <send_messages_from_UART_TX_queue+0xb8>)
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	4613      	mov	r3, r2
 8000678:	011b      	lsls	r3, r3, #4
 800067a:	4413      	add	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	440b      	add	r3, r1
 8000680:	3325      	adds	r3, #37	; 0x25
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
				for (int i = UARTQueueTX.Count; i != UARTQueueTX.PutIndex; i++)
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	3301      	adds	r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	e7ce      	b.n	800062c <send_messages_from_UART_TX_queue+0x28>
			for (int ii = UART_TX_MESSAGE_PRIORITY_0_MAX; ii <= UART_TX_MESSAGE_PRIORITY_4_MIN; ii++)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	e7c4      	b.n	8000620 <send_messages_from_UART_TX_queue+0x1c>

					}
				}
			}
			UARTQueueTX.GetIndex = UARTQueueTX.PutIndex;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <send_messages_from_UART_TX_queue+0xb8>)
 8000698:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <send_messages_from_UART_TX_queue+0xb8>)
 800069e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		}
		if (UARTQueueTX.GetIndex == UART_TX_QUEUE_BUFFER_SIZE)
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <send_messages_from_UART_TX_queue+0xb8>)
 80006a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d103      	bne.n	80006b4 <send_messages_from_UART_TX_queue+0xb0>
		{
			UARTQueueTX.GetIndex = 0;
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <send_messages_from_UART_TX_queue+0xb8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
	}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000028 	.word	0x20000028

080006c0 <_Z41__static_initialization_and_destruction_0ii>:
}
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d107      	bne.n	80006e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d102      	bne.n	80006e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
Queue UARTQueueTX;
 80006da:	4803      	ldr	r0, [pc, #12]	; (80006e8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80006dc:	f7ff ff4a 	bl	8000574 <_ZN5QueueC1Ev>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000028 	.word	0x20000028

080006ec <_GLOBAL__sub_I_UARTQueueTX>:
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006f4:	2001      	movs	r0, #1
 80006f6:	f7ff ffe3 	bl	80006c0 <_Z41__static_initialization_and_destruction_0ii>
 80006fa:	bd80      	pop	{r7, pc}

080006fc <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_UART_values();
 8000700:	f000 fc68 	bl	8000fd4 <init_UART_values>
  init_CAN_values();
 8000704:	f001 fbe4 	bl	8001ed0 <init_CAN_values>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f002 f823 	bl	8002752 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f832 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f000 f9ca 	bl	8000aa8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000714:	f000 f97a 	bl	8000a0c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000718:	f000 f92a 	bl	8000970 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 800071c:	f000 f894 	bl	8000848 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000720:	f000 f8d8 	bl	80008d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000724:	480e      	ldr	r0, [pc, #56]	; (8000760 <main+0x64>)
 8000726:	f004 fb35 	bl	8004d94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <main+0x68>)
 800072c:	f004 fb32 	bl	8004d94 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_RX_MESSAGE_SIZE);
 8000730:	2201      	movs	r2, #1
 8000732:	490d      	ldr	r1, [pc, #52]	; (8000768 <main+0x6c>)
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <main+0x70>)
 8000736:	f005 f8f5 	bl	8005924 <HAL_UART_Receive_IT>
  init_CAN_filter();
 800073a:	f001 ff51 	bl	80025e0 <init_CAN_filter>
  HAL_FDCAN_ConfigTimestampCounter(&hfdcan1, FDCAN_TIMESTAMP_PRESC_1);
 800073e:	2100      	movs	r1, #0
 8000740:	480b      	ldr	r0, [pc, #44]	; (8000770 <main+0x74>)
 8000742:	f002 fbea 	bl	8002f1a <HAL_FDCAN_ConfigTimestampCounter>
  HAL_FDCAN_EnableTimestampCounter(&hfdcan1, FDCAN_TIMESTAMP_INTERNAL);
 8000746:	2101      	movs	r1, #1
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <main+0x74>)
 800074a:	f002 fc0a 	bl	8002f62 <HAL_FDCAN_EnableTimestampCounter>
  HAL_FDCAN_Start(&hfdcan1);
 800074e:	4808      	ldr	r0, [pc, #32]	; (8000770 <main+0x74>)
 8000750:	f002 fc39 	bl	8002fc6 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, FDCAN_TX_BUFFER0);
 8000754:	2201      	movs	r2, #1
 8000756:	2101      	movs	r1, #1
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <main+0x74>)
 800075a:	f002 fdeb 	bl	8003334 <HAL_FDCAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800075e:	e7fe      	b.n	800075e <main+0x62>
 8000760:	20000480 	.word	0x20000480
 8000764:	20000b80 	.word	0x20000b80
 8000768:	20000250 	.word	0x20000250
 800076c:	20000bcc 	.word	0x20000bcc
 8000770:	200009b0 	.word	0x200009b0

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0a4      	sub	sp, #144	; 0x90
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077e:	2238      	movs	r2, #56	; 0x38
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f006 fabc 	bl	8006d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000798:	463b      	mov	r3, r7
 800079a:	2244      	movs	r2, #68	; 0x44
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f006 faae 	bl	8006d00 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007a8:	f003 fac4 	bl	8003d34 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b6:	2340      	movs	r3, #64	; 0x40
 80007b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007be:	2302      	movs	r3, #2
 80007c0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007c2:	2306      	movs	r3, #6
 80007c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 48;
 80007c6:	2330      	movs	r3, #48	; 0x30
 80007c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 fb5a 	bl	8003e9c <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007ee:	f000 f9a7 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2303      	movs	r3, #3
 80007f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000806:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800080a:	2101      	movs	r1, #1
 800080c:	4618      	mov	r0, r3
 800080e:	f003 fe5d 	bl	80044cc <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000818:	f000 f992 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_FDCAN;
 800081c:	f241 0302 	movw	r3, #4098	; 0x1002
 8000820:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4618      	mov	r0, r3
 8000830:	f004 f868 	bl	8004904 <HAL_RCCEx_PeriphCLKConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800083a:	f000 f981 	bl	8000b40 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3790      	adds	r7, #144	; 0x90
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_FDCAN1_Init+0x84>)
 800084e:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <MX_FDCAN1_Init+0x88>)
 8000850:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_FDCAN1_Init+0x84>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_FDCAN1_Init+0x84>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_FDCAN1_Init+0x84>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_FDCAN1_Init+0x84>)
 8000866:	2200      	movs	r2, #0
 8000868:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_FDCAN1_Init+0x84>)
 800086c:	2200      	movs	r2, #0
 800086e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_FDCAN1_Init+0x84>)
 8000872:	2200      	movs	r2, #0
 8000874:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_FDCAN1_Init+0x84>)
 8000878:	2208      	movs	r2, #8
 800087a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_FDCAN1_Init+0x84>)
 800087e:	2203      	movs	r2, #3
 8000880:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_FDCAN1_Init+0x84>)
 8000884:	220d      	movs	r2, #13
 8000886:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_FDCAN1_Init+0x84>)
 800088a:	2202      	movs	r2, #2
 800088c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_FDCAN1_Init+0x84>)
 8000890:	2208      	movs	r2, #8
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_FDCAN1_Init+0x84>)
 8000896:	2203      	movs	r2, #3
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_FDCAN1_Init+0x84>)
 800089c:	220a      	movs	r2, #10
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_FDCAN1_Init+0x84>)
 80008a2:	2203      	movs	r2, #3
 80008a4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_FDCAN1_Init+0x84>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_FDCAN1_Init+0x84>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_FDCAN1_Init+0x84>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_FDCAN1_Init+0x84>)
 80008ba:	f002 f949 	bl	8002b50 <HAL_FDCAN_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80008c4:	f000 f93c 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200009b0 	.word	0x200009b0
 80008d0:	40006400 	.word	0x40006400

080008d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_TIM2_Init+0x98>)
 80008f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_TIM2_Init+0x98>)
 80008fc:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000900:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_TIM2_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_TIM2_Init+0x98>)
 800090a:	2209      	movs	r2, #9
 800090c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_TIM2_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_TIM2_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800091a:	4814      	ldr	r0, [pc, #80]	; (800096c <MX_TIM2_Init+0x98>)
 800091c:	f004 f9e2 	bl	8004ce4 <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000926:	f000 f90b 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_TIM2_Init+0x98>)
 8000938:	f004 fc16 	bl	8005168 <HAL_TIM_ConfigClockSource>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000942:	f000 f8fd 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000946:	2320      	movs	r3, #32
 8000948:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_TIM2_Init+0x98>)
 8000954:	f004 fe38 	bl	80055c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800095e:	f000 f8ef 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000b80 	.word	0x20000b80

08000970 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_TIM3_Init+0x94>)
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <MX_TIM3_Init+0x98>)
 8000992:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_TIM3_Init+0x94>)
 8000996:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800099a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_TIM3_Init+0x94>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_TIM3_Init+0x94>)
 80009a4:	2263      	movs	r2, #99	; 0x63
 80009a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_TIM3_Init+0x94>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_TIM3_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009b4:	4813      	ldr	r0, [pc, #76]	; (8000a04 <MX_TIM3_Init+0x94>)
 80009b6:	f004 f995 	bl	8004ce4 <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009c0:	f000 f8be 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_TIM3_Init+0x94>)
 80009d2:	f004 fbc9 	bl	8005168 <HAL_TIM_ConfigClockSource>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80009dc:	f000 f8b0 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009e0:	2320      	movs	r3, #32
 80009e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_TIM3_Init+0x94>)
 80009ee:	f004 fdeb 	bl	80055c8 <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80009f8:	f000 f8a2 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000480 	.word	0x20000480
 8000a08:	40000400 	.word	0x40000400

08000a0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a10:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a12:	4a24      	ldr	r2, [pc, #144]	; (8000aa4 <MX_USART2_UART_Init+0x98>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a42:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a56:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a58:	f004 fe7e 	bl	8005758 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000a62:	f000 f86d 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a6a:	f006 f840 	bl	8006aee <HAL_UARTEx_SetTxFifoThreshold>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000a74:	f000 f864 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a7c:	f006 f875 	bl	8006b6a <HAL_UARTEx_SetRxFifoThreshold>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000a86:	f000 f85b 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a8c:	f005 fff6 	bl	8006a7c <HAL_UARTEx_DisableFifoMode>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000a96:	f000 f853 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000bcc 	.word	0x20000bcc
 8000aa4:	40004400 	.word	0x40004400

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000ac4:	f043 0320 	orr.w	r3, r3, #32
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0320 	and.w	r3, r3, #32
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0c:	480b      	ldr	r0, [pc, #44]	; (8000b3c <MX_GPIO_Init+0x94>)
 8000b0e:	f003 f8f9 	bl	8003d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_GPIO_Init+0x94>)
 8000b2c:	f002 ff68 	bl	8003a00 <HAL_GPIO_Init>

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	48000400 	.word	0x48000400

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_ZNK5Queue6IsFullEv>:
	bool IsFull() const
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
		return (Count == UART_TX_QUEUE_BUFFER_SIZE);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b08      	cmp	r3, #8
 8000b5c:	bf0c      	ite	eq
 8000b5e:	2301      	moveq	r3, #1
 8000b60:	2300      	movne	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
	}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <_ZN5Queue3PopEPhh>:
 *      Author: IvanB
 */
#include <msg_queue.h>

bool Queue::Pop(uint8_t* data, uint8_t size)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	71fb      	strb	r3, [r7, #7]
	if (size < Msgs[GetIndex].Size)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8000b84:	68f9      	ldr	r1, [r7, #12]
 8000b86:	4613      	mov	r3, r2
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	4413      	add	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	440b      	add	r3, r1
 8000b90:	3325      	adds	r3, #37	; 0x25
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	79fa      	ldrb	r2, [r7, #7]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d201      	bcs.n	8000b9e <_ZN5Queue3PopEPhh+0x2e>
	{
		return false;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e043      	b.n	8000c26 <_ZN5Queue3PopEPhh+0xb6>
	}

	if (IsEmpty())
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f7ff fcc4 	bl	800052c <_ZNK5Queue7IsEmptyEv>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <_ZN5Queue3PopEPhh+0x3e>
		return false;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e03b      	b.n	8000c26 <_ZN5Queue3PopEPhh+0xb6>

	for (int i  = 0; i < Msgs[GetIndex].Size; i++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8000bb8:	68f9      	ldr	r1, [r7, #12]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	4413      	add	r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	440b      	add	r3, r1
 8000bc4:	3325      	adds	r3, #37	; 0x25
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	da14      	bge.n	8000bfa <_ZN5Queue3PopEPhh+0x8a>
	{
		data[i] = Msgs[GetIndex].Buffer[i];
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	4419      	add	r1, r3
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	4613      	mov	r3, r2
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	4413      	add	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	18c2      	adds	r2, r0, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	4413      	add	r3, r2
 8000bec:	3304      	adds	r3, #4
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	700b      	strb	r3, [r1, #0]
	for (int i  = 0; i < Msgs[GetIndex].Size; i++)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e7db      	b.n	8000bb2 <_ZN5Queue3PopEPhh+0x42>
	}

	GetIndex++;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000c00:	1c5a      	adds	r2, r3, #1
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (GetIndex == UART_TX_QUEUE_BUFFER_SIZE)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d103      	bne.n	8000c1a <_ZN5Queue3PopEPhh+0xaa>
		GetIndex = 0;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	Count--;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	601a      	str	r2, [r3, #0]
	return true;
 8000c24:	2301      	movs	r3, #1
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_ZN5Queue4PushEPhhh>:

bool Queue::Push(uint8_t* data, uint8_t size, uint8_t priority)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71bb      	strb	r3, [r7, #6]
	if (IsFull())
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff ff82 	bl	8000b4e <_ZNK5Queue6IsFullEv>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <_ZN5Queue4PushEPhhh+0x26>
		return false;
 8000c50:	2300      	movs	r3, #0
 8000c52:	e049      	b.n	8000ce8 <_ZN5Queue4PushEPhhh+0xba>

	Msgs[PutIndex].Priority = priority;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8000c5a:	68f9      	ldr	r1, [r7, #12]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	4413      	add	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	440b      	add	r3, r1
 8000c66:	3324      	adds	r3, #36	; 0x24
 8000c68:	79ba      	ldrb	r2, [r7, #6]
 8000c6a:	701a      	strb	r2, [r3, #0]
	Msgs[PutIndex].Size = size;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8000c72:	68f9      	ldr	r1, [r7, #12]
 8000c74:	4613      	mov	r3, r2
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	4413      	add	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	440b      	add	r3, r1
 8000c7e:	3325      	adds	r3, #37	; 0x25
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	da15      	bge.n	8000cbc <_ZN5Queue4PushEPhhh+0x8e>
		Msgs[PutIndex].Buffer[i] = data[i];
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	4413      	add	r3, r2
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8000c9c:	7818      	ldrb	r0, [r3, #0]
 8000c9e:	68f9      	ldr	r1, [r7, #12]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	011b      	lsls	r3, r3, #4
 8000ca4:	4413      	add	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	18ca      	adds	r2, r1, r3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	4413      	add	r3, r2
 8000cae:	3304      	adds	r3, #4
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e7e5      	b.n	8000c88 <_ZN5Queue4PushEPhhh+0x5a>

	PutIndex++;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (PutIndex == UART_TX_QUEUE_BUFFER_SIZE)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	d103      	bne.n	8000cdc <_ZN5Queue4PushEPhhh+0xae>
		PutIndex = 0;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	Count++;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	1c5a      	adds	r2, r3, #1
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	601a      	str	r2, [r3, #0]
	return true;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_MspInit+0x44>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_MspInit+0x44>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6613      	str	r3, [r2, #96]	; 0x60
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_MspInit+0x44>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_MspInit+0x44>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_MspInit+0x44>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_MspInit+0x44>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d26:	f003 f8a9 	bl	8003e7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <HAL_FDCAN_MspInit+0x90>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d131      	bne.n	8000dbe <HAL_FDCAN_MspInit+0x86>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <HAL_FDCAN_MspInit+0x94>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <HAL_FDCAN_MspInit+0x94>)
 8000d60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d64:	6593      	str	r3, [r2, #88]	; 0x58
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_FDCAN_MspInit+0x94>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_FDCAN_MspInit+0x94>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <HAL_FDCAN_MspInit+0x94>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_FDCAN_MspInit+0x94>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d9c:	2309      	movs	r3, #9
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f002 fe29 	bl	8003a00 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2102      	movs	r1, #2
 8000db2:	2015      	movs	r0, #21
 8000db4:	f001 fe2d 	bl	8002a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000db8:	2015      	movs	r0, #21
 8000dba:	f001 fe44 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40006400 	.word	0x40006400
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de0:	d114      	bne.n	8000e0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_TIM_Base_MspInit+0x78>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a18      	ldr	r2, [pc, #96]	; (8000e48 <HAL_TIM_Base_MspInit+0x78>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <HAL_TIM_Base_MspInit+0x78>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	201c      	movs	r0, #28
 8000e00:	f001 fe07 	bl	8002a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e04:	201c      	movs	r0, #28
 8000e06:	f001 fe1e 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e0a:	e018      	b.n	8000e3e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_TIM_Base_MspInit+0x7c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d113      	bne.n	8000e3e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_TIM_Base_MspInit+0x78>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <HAL_TIM_Base_MspInit+0x78>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6593      	str	r3, [r2, #88]	; 0x58
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_TIM_Base_MspInit+0x78>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2103      	movs	r1, #3
 8000e32:	201d      	movs	r0, #29
 8000e34:	f001 fded 	bl	8002a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e38:	201d      	movs	r0, #29
 8000e3a:	f001 fe04 	bl	8002a46 <HAL_NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40000400 	.word	0x40000400

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <HAL_UART_MspInit+0x8c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d130      	bne.n	8000ed4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <HAL_UART_MspInit+0x90>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	4a1a      	ldr	r2, [pc, #104]	; (8000ee0 <HAL_UART_MspInit+0x90>)
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <HAL_UART_MspInit+0x90>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_UART_MspInit+0x90>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <HAL_UART_MspInit+0x90>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_UART_MspInit+0x90>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec0:	f002 fd9e 	bl	8003a00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	2026      	movs	r0, #38	; 0x26
 8000eca:	f001 fda2 	bl	8002a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ece:	2026      	movs	r0, #38	; 0x26
 8000ed0:	f001 fdb9 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40004400 	.word	0x40004400
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f38:	f001 fc5e 	bl	80027f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f44:	4803      	ldr	r0, [pc, #12]	; (8000f54 <FDCAN1_IT0_IRQHandler+0x14>)
 8000f46:	f002 fadb 	bl	8003500 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
  CAN_IT_handler();
 8000f4a:	f000 fc93 	bl	8001874 <CAN_IT_handler>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200009b0 	.word	0x200009b0

08000f58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <TIM2_IRQHandler+0x18>)
 8000f5e:	f003 ff83 	bl	8004e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  send_messages_from_UART_TX_queue();
 8000f62:	f7ff fb4f 	bl	8000604 <send_messages_from_UART_TX_queue>
  send_messages_from_CAN_TX_queue();
 8000f66:	f001 fae9 	bl	800253c <send_messages_from_CAN_TX_queue>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000b80 	.word	0x20000b80

08000f74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <TIM3_IRQHandler+0x18>)
 8000f7a:	f003 ff75 	bl	8004e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  UART_RX_queue_polling();
 8000f7e:	f000 f8b3 	bl	80010e8 <UART_RX_queue_polling>
  CAN_RX_queue_polling();
 8000f82:	f000 fcb3 	bl	80018ec <CAN_RX_queue_polling>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000480 	.word	0x20000480

08000f90 <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */

void USART2_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <USART2_IRQHandler+0x14>)
 8000f96:	f004 fd9d 	bl	8005ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  UART_IT_handler();
 8000f9a:	f000 f845 	bl	8001028 <UART_IT_handler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000bcc 	.word	0x20000bcc

08000fa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <SystemInit+0x28>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <SystemInit+0x28>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SystemInit+0x28>)
 8000fbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <init_UART_values>:
#define FLASH_USER_START_ADDR		ADDR_FLASH_PAGE_4
#define FLASH_USER_END_ADDR     	(ADDR_FLASH_PAGE_63 + FLASH_PAGE_SIZE - 1)   /* End @ of user Flash area */

// стартовая инициализация счётчиков и буферов UART
void init_UART_values(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	uart_error_state = UART_NO_ERROR;									// ошибка отсутствует
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <init_UART_values+0x38>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
	UART_RX_string_buffer_counter = 0;								// счётчик элемента строки-буфера
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <init_UART_values+0x3c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
	UART_RX_put_index = 0;							// обнуляем счётчитк элемента очереди на парсинг, в который ведётся запись
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <init_UART_values+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
	UART_RX_get_index = 0;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <init_UART_values+0x44>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
	UART_TX_put_index = 0;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <init_UART_values+0x48>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
	UART_TX_get_index = 0;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <init_UART_values+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
	timestamp_enabled = TRUE;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <init_UART_values+0x50>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000c5a 	.word	0x20000c5a
 8001010:	20000a14 	.word	0x20000a14
 8001014:	20000c58 	.word	0x20000c58
 8001018:	200009ad 	.word	0x200009ad
 800101c:	20000c59 	.word	0x20000c59
 8001020:	20000b7c 	.word	0x20000b7c
 8001024:	200009ac 	.word	0x200009ac

08001028 <UART_IT_handler>:
	}
}


void UART_IT_handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	add_byte_to_string(UART_rx_buffer[0]);													// добавляем принятый байт в строку в очереди на парсинг
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <UART_IT_handler+0x1c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f80b 	bl	800104c <add_byte_to_string>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_RX_MESSAGE_SIZE);			// взводим функцию для обработки прерывания
 8001036:	2201      	movs	r2, #1
 8001038:	4902      	ldr	r1, [pc, #8]	; (8001044 <UART_IT_handler+0x1c>)
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <UART_IT_handler+0x20>)
 800103c:	f004 fc72 	bl	8005924 <HAL_UART_Receive_IT>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000250 	.word	0x20000250
 8001048:	20000bcc 	.word	0x20000bcc

0800104c <add_byte_to_string>:


// добавляем принятый байт в строку-буфер
void add_byte_to_string(uint8_t byte_to_write)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	if (UART_RX_string_buffer_counter >= UART_STRING_MAX_SIZE)								// если достигли максимальной длины строки
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <add_byte_to_string+0x90>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b3f      	cmp	r3, #63	; 0x3f
 800105c:	d902      	bls.n	8001064 <add_byte_to_string+0x18>
	{
		UART_RX_string_buffer_counter = 0;													// обнуляем счётчик элемента в строке-буфере
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <add_byte_to_string+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
	}
	if (byte_to_write == CHAR_CODE_UART_MESSAGE_END)										// если пришёл символ конца сообщения
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b0d      	cmp	r3, #13
 8001068:	d11c      	bne.n	80010a4 <add_byte_to_string+0x58>
	{
		if (UART_RX_queue_buffer[UART_RX_put_index].message_size != 0)
		{
			//error
		}
		UART_RX_queue_buffer[UART_RX_put_index].message_size = UART_RX_string_buffer_counter;
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <add_byte_to_string+0x94>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <add_byte_to_string+0x90>)
 8001072:	7818      	ldrb	r0, [r3, #0]
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <add_byte_to_string+0x98>)
 8001076:	460b      	mov	r3, r1
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	440b      	add	r3, r1
 800107c:	4413      	add	r3, r2
 800107e:	4602      	mov	r2, r0
 8001080:	701a      	strb	r2, [r3, #0]
		UART_RX_put_index++;												// инкрементируем счётчик элемента буфера-очереди
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <add_byte_to_string+0x94>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <add_byte_to_string+0x94>)
 800108c:	701a      	strb	r2, [r3, #0]
		UART_RX_string_buffer_counter = 0;													// обнуляем счётчик элемента в строке-буфере
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <add_byte_to_string+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
		if (UART_RX_put_index >= UART_RX_QUEUE_BUFFER_SIZE)						// если превысили максимальное количество элементов в буфере-очереди
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <add_byte_to_string+0x94>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b03      	cmp	r3, #3
 800109a:	d918      	bls.n	80010ce <add_byte_to_string+0x82>
		{
			UART_RX_put_index = 0;											// обнуляем счётчик элемента буфера-очереди
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <add_byte_to_string+0x94>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
			UART_RX_string_buffer_counter = 0;
		}
		UART_RX_queue_buffer[UART_RX_put_index].message_data[UART_RX_string_buffer_counter] = byte_to_write;		// записываем символ в строку буфера-очереди на парсинг
		UART_RX_string_buffer_counter++;
	}
}
 80010a2:	e014      	b.n	80010ce <add_byte_to_string+0x82>
		UART_RX_queue_buffer[UART_RX_put_index].message_data[UART_RX_string_buffer_counter] = byte_to_write;		// записываем символ в строку буфера-очереди на парсинг
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <add_byte_to_string+0x94>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <add_byte_to_string+0x90>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <add_byte_to_string+0x98>)
 80010b2:	460b      	mov	r3, r1
 80010b4:	019b      	lsls	r3, r3, #6
 80010b6:	440b      	add	r3, r1
 80010b8:	4413      	add	r3, r2
 80010ba:	4403      	add	r3, r0
 80010bc:	3301      	adds	r3, #1
 80010be:	79fa      	ldrb	r2, [r7, #7]
 80010c0:	701a      	strb	r2, [r3, #0]
		UART_RX_string_buffer_counter++;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <add_byte_to_string+0x90>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <add_byte_to_string+0x90>)
 80010cc:	701a      	strb	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000a14 	.word	0x20000a14
 80010e0:	20000c58 	.word	0x20000c58
 80010e4:	20000148 	.word	0x20000148

080010e8 <UART_RX_queue_polling>:

// парсим сообщения из буфера-очереди
void UART_RX_queue_polling(void)
{
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
	if (UART_RX_get_index != UART_RX_put_index)												// если в буфере-очереди содержится хотя бы одно сообщение
 80010ee:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <UART_RX_queue_polling+0xf0>)
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <UART_RX_queue_polling+0xf4>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d063      	beq.n	80011c2 <UART_RX_queue_polling+0xda>
	{
 80010fa:	466b      	mov	r3, sp
 80010fc:	461d      	mov	r5, r3
		char tmp_ch_buf[UART_RX_queue_buffer[UART_RX_get_index].message_size + 1];			// буфер для формирования сообщения на парсинг. Размер буфера равен длине сообщения (без пустых символов)
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <UART_RX_queue_polling+0xf0>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	4a36      	ldr	r2, [pc, #216]	; (80011e0 <UART_RX_queue_polling+0xf8>)
 8001106:	460b      	mov	r3, r1
 8001108:	019b      	lsls	r3, r3, #6
 800110a:	440b      	add	r3, r1
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	1c58      	adds	r0, r3, #1
 8001112:	1e43      	subs	r3, r0, #1
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	4603      	mov	r3, r0
 8001118:	4619      	mov	r1, r3
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	f04f 0400 	mov.w	r4, #0
 8001126:	00d4      	lsls	r4, r2, #3
 8001128:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800112c:	00cb      	lsls	r3, r1, #3
 800112e:	4603      	mov	r3, r0
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	f04f 0400 	mov.w	r4, #0
 800113e:	00d4      	lsls	r4, r2, #3
 8001140:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001144:	00cb      	lsls	r3, r1, #3
 8001146:	4603      	mov	r3, r0
 8001148:	3307      	adds	r3, #7
 800114a:	08db      	lsrs	r3, r3, #3
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	ebad 0d03 	sub.w	sp, sp, r3
 8001152:	466b      	mov	r3, sp
 8001154:	3300      	adds	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
		for (int ii = 0; ii < sizeof(tmp_ch_buf); ii++)									    // переписываем всё сообщение во временный буфер
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e013      	b.n	8001186 <UART_RX_queue_polling+0x9e>
		{
			tmp_ch_buf[ii] = UART_RX_queue_buffer[UART_RX_get_index].message_data[ii];
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <UART_RX_queue_polling+0xf0>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <UART_RX_queue_polling+0xf8>)
 8001166:	460b      	mov	r3, r1
 8001168:	019b      	lsls	r3, r3, #6
 800116a:	440b      	add	r3, r1
 800116c:	441a      	add	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4413      	add	r3, r2
 8001172:	3301      	adds	r3, #1
 8001174:	7819      	ldrb	r1, [r3, #0]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	460a      	mov	r2, r1
 800117e:	701a      	strb	r2, [r3, #0]
		for (int ii = 0; ii < sizeof(tmp_ch_buf); ii++)									    // переписываем всё сообщение во временный буфер
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3301      	adds	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4602      	mov	r2, r0
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	429a      	cmp	r2, r3
 800118c:	d8e7      	bhi.n	800115e <UART_RX_queue_polling+0x76>
		}
		tmp_ch_buf[sizeof(tmp_ch_buf) - 1] = '\0';										// добавляем нуль-символ в конец сообщения
 800118e:	4603      	mov	r3, r0
 8001190:	3b01      	subs	r3, #1
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	2100      	movs	r1, #0
 8001196:	54d1      	strb	r1, [r2, r3]
		parse_UART_message(tmp_ch_buf);													// отправляем на парсинг текущее сообщение
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f822 	bl	80011e4 <parse_UART_message>
		UART_RX_queue_buffer[UART_RX_get_index].message_size = 0;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <UART_RX_queue_polling+0xf0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <UART_RX_queue_polling+0xf8>)
 80011a8:	460b      	mov	r3, r1
 80011aa:	019b      	lsls	r3, r3, #6
 80011ac:	440b      	add	r3, r1
 80011ae:	4413      	add	r3, r2
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
		UART_RX_get_index++;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <UART_RX_queue_polling+0xf0>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <UART_RX_queue_polling+0xf0>)
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	46ad      	mov	sp, r5
	}
	if (UART_RX_get_index >= UART_RX_QUEUE_BUFFER_SIZE)
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <UART_RX_queue_polling+0xf0>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d902      	bls.n	80011d0 <UART_RX_queue_polling+0xe8>
	{
		UART_RX_get_index = 0;
 80011ca:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <UART_RX_queue_polling+0xf0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
	}
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bdb0      	pop	{r4, r5, r7, pc}
 80011d8:	200009ad 	.word	0x200009ad
 80011dc:	20000c58 	.word	0x20000c58
 80011e0:	20000148 	.word	0x20000148

080011e4 <parse_UART_message>:

void parse_UART_message(char* UART_buffer_to_parse)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b092      	sub	sp, #72	; 0x48
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	6078      	str	r0, [r7, #4]
	if (!strcmp(UART_buffer_to_parse, "return_test"))
 80011ec:	49bf      	ldr	r1, [pc, #764]	; (80014ec <parse_UART_message+0x308>)
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff f812 	bl	8000218 <strcmp>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d105      	bne.n	8001206 <parse_UART_message+0x22>
	{
		put_string_to_UART(sizeof(MESSAGE_TEST_VALUE), MESSAGE_TEST_VALUE, UART_TX_MESSAGE_PRIORITY_3);
 80011fa:	2203      	movs	r2, #3
 80011fc:	49bc      	ldr	r1, [pc, #752]	; (80014f0 <parse_UART_message+0x30c>)
 80011fe:	2010      	movs	r0, #16
 8001200:	f000 fac9 	bl	8001796 <put_string_to_UART>
	else if (UART_buffer_to_parse[0] == 'M')
	{
		update_CAN_acceptance_code(count_string_lenght(&UART_buffer_to_parse[1]), &UART_buffer_to_parse[1]);
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
	}
}
 8001204:	e2a0      	b.n	8001748 <parse_UART_message+0x564>
	else if ((!strcmp(UART_buffer_to_parse, "H")) || (!strcmp(UART_buffer_to_parse, "h")) || (!strcmp(UART_buffer_to_parse, "?")))
 8001206:	49bb      	ldr	r1, [pc, #748]	; (80014f4 <parse_UART_message+0x310>)
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff f805 	bl	8000218 <strcmp>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00d      	beq.n	8001230 <parse_UART_message+0x4c>
 8001214:	49b8      	ldr	r1, [pc, #736]	; (80014f8 <parse_UART_message+0x314>)
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7fe fffe 	bl	8000218 <strcmp>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <parse_UART_message+0x4c>
 8001222:	49b6      	ldr	r1, [pc, #728]	; (80014fc <parse_UART_message+0x318>)
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7fe fff7 	bl	8000218 <strcmp>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d15f      	bne.n	80012f0 <parse_UART_message+0x10c>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_01), MESSAGE_COMMAND_LIST_STRING_01, UART_TX_MESSAGE_PRIORITY_3);
 8001230:	2203      	movs	r2, #3
 8001232:	49b3      	ldr	r1, [pc, #716]	; (8001500 <parse_UART_message+0x31c>)
 8001234:	201b      	movs	r0, #27
 8001236:	f000 faae 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_02), MESSAGE_COMMAND_LIST_STRING_02, UART_TX_MESSAGE_PRIORITY_3);
 800123a:	2203      	movs	r2, #3
 800123c:	49b1      	ldr	r1, [pc, #708]	; (8001504 <parse_UART_message+0x320>)
 800123e:	2024      	movs	r0, #36	; 0x24
 8001240:	f000 faa9 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_03), MESSAGE_COMMAND_LIST_STRING_03, UART_TX_MESSAGE_PRIORITY_3);
 8001244:	2203      	movs	r2, #3
 8001246:	49b0      	ldr	r1, [pc, #704]	; (8001508 <parse_UART_message+0x324>)
 8001248:	202d      	movs	r0, #45	; 0x2d
 800124a:	f000 faa4 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_04), MESSAGE_COMMAND_LIST_STRING_04, UART_TX_MESSAGE_PRIORITY_3);
 800124e:	2203      	movs	r2, #3
 8001250:	49ae      	ldr	r1, [pc, #696]	; (800150c <parse_UART_message+0x328>)
 8001252:	2026      	movs	r0, #38	; 0x26
 8001254:	f000 fa9f 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_05), MESSAGE_COMMAND_LIST_STRING_05, UART_TX_MESSAGE_PRIORITY_3);
 8001258:	2203      	movs	r2, #3
 800125a:	49ad      	ldr	r1, [pc, #692]	; (8001510 <parse_UART_message+0x32c>)
 800125c:	2016      	movs	r0, #22
 800125e:	f000 fa9a 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_06), MESSAGE_COMMAND_LIST_STRING_06, UART_TX_MESSAGE_PRIORITY_3);
 8001262:	2203      	movs	r2, #3
 8001264:	49ab      	ldr	r1, [pc, #684]	; (8001514 <parse_UART_message+0x330>)
 8001266:	2015      	movs	r0, #21
 8001268:	f000 fa95 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_07), MESSAGE_COMMAND_LIST_STRING_07, UART_TX_MESSAGE_PRIORITY_3);
 800126c:	2203      	movs	r2, #3
 800126e:	49aa      	ldr	r1, [pc, #680]	; (8001518 <parse_UART_message+0x334>)
 8001270:	201d      	movs	r0, #29
 8001272:	f000 fa90 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_08), MESSAGE_COMMAND_LIST_STRING_08, UART_TX_MESSAGE_PRIORITY_3);
 8001276:	2203      	movs	r2, #3
 8001278:	49a8      	ldr	r1, [pc, #672]	; (800151c <parse_UART_message+0x338>)
 800127a:	201e      	movs	r0, #30
 800127c:	f000 fa8b 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_09), MESSAGE_COMMAND_LIST_STRING_09, UART_TX_MESSAGE_PRIORITY_3);
 8001280:	2203      	movs	r2, #3
 8001282:	49a7      	ldr	r1, [pc, #668]	; (8001520 <parse_UART_message+0x33c>)
 8001284:	201f      	movs	r0, #31
 8001286:	f000 fa86 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_10), MESSAGE_COMMAND_LIST_STRING_10, UART_TX_MESSAGE_PRIORITY_3);
 800128a:	2203      	movs	r2, #3
 800128c:	49a5      	ldr	r1, [pc, #660]	; (8001524 <parse_UART_message+0x340>)
 800128e:	2031      	movs	r0, #49	; 0x31
 8001290:	f000 fa81 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_11), MESSAGE_COMMAND_LIST_STRING_11, UART_TX_MESSAGE_PRIORITY_3);
 8001294:	2203      	movs	r2, #3
 8001296:	49a4      	ldr	r1, [pc, #656]	; (8001528 <parse_UART_message+0x344>)
 8001298:	2032      	movs	r0, #50	; 0x32
 800129a:	f000 fa7c 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_12), MESSAGE_COMMAND_LIST_STRING_12, UART_TX_MESSAGE_PRIORITY_3);
 800129e:	2203      	movs	r2, #3
 80012a0:	49a2      	ldr	r1, [pc, #648]	; (800152c <parse_UART_message+0x348>)
 80012a2:	2019      	movs	r0, #25
 80012a4:	f000 fa77 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_13), MESSAGE_COMMAND_LIST_STRING_13, UART_TX_MESSAGE_PRIORITY_3);
 80012a8:	2203      	movs	r2, #3
 80012aa:	49a1      	ldr	r1, [pc, #644]	; (8001530 <parse_UART_message+0x34c>)
 80012ac:	2018      	movs	r0, #24
 80012ae:	f000 fa72 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_14), MESSAGE_COMMAND_LIST_STRING_14, UART_TX_MESSAGE_PRIORITY_3);
 80012b2:	2203      	movs	r2, #3
 80012b4:	499f      	ldr	r1, [pc, #636]	; (8001534 <parse_UART_message+0x350>)
 80012b6:	201a      	movs	r0, #26
 80012b8:	f000 fa6d 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_15), MESSAGE_COMMAND_LIST_STRING_15, UART_TX_MESSAGE_PRIORITY_3);
 80012bc:	2203      	movs	r2, #3
 80012be:	499e      	ldr	r1, [pc, #632]	; (8001538 <parse_UART_message+0x354>)
 80012c0:	2015      	movs	r0, #21
 80012c2:	f000 fa68 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_16), MESSAGE_COMMAND_LIST_STRING_16, UART_TX_MESSAGE_PRIORITY_3);
 80012c6:	2203      	movs	r2, #3
 80012c8:	499c      	ldr	r1, [pc, #624]	; (800153c <parse_UART_message+0x358>)
 80012ca:	2015      	movs	r0, #21
 80012cc:	f000 fa63 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_17), MESSAGE_COMMAND_LIST_STRING_17, UART_TX_MESSAGE_PRIORITY_3);
 80012d0:	2203      	movs	r2, #3
 80012d2:	499b      	ldr	r1, [pc, #620]	; (8001540 <parse_UART_message+0x35c>)
 80012d4:	2012      	movs	r0, #18
 80012d6:	f000 fa5e 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_18), MESSAGE_COMMAND_LIST_STRING_18, UART_TX_MESSAGE_PRIORITY_0_MAX);
 80012da:	2200      	movs	r2, #0
 80012dc:	4999      	ldr	r1, [pc, #612]	; (8001544 <parse_UART_message+0x360>)
 80012de:	200c      	movs	r0, #12
 80012e0:	f000 fa59 	bl	8001796 <put_string_to_UART>
		put_string_to_UART(sizeof(MESSAGE_COMMAND_LIST_STRING_19), MESSAGE_COMMAND_LIST_STRING_19, UART_TX_MESSAGE_PRIORITY_1);
 80012e4:	2201      	movs	r2, #1
 80012e6:	4998      	ldr	r1, [pc, #608]	; (8001548 <parse_UART_message+0x364>)
 80012e8:	2023      	movs	r0, #35	; 0x23
 80012ea:	f000 fa54 	bl	8001796 <put_string_to_UART>
}
 80012ee:	e22b      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "O"))
 80012f0:	4996      	ldr	r1, [pc, #600]	; (800154c <parse_UART_message+0x368>)
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7fe ff90 	bl	8000218 <strcmp>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d108      	bne.n	8001310 <parse_UART_message+0x12c>
		CAN_mode_change(&hfdcan1, FDCAN_MODE_NORMAL);
 80012fe:	2100      	movs	r1, #0
 8001300:	4893      	ldr	r0, [pc, #588]	; (8001550 <parse_UART_message+0x36c>)
 8001302:	f001 f892 	bl	800242a <CAN_mode_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001306:	2103      	movs	r1, #3
 8001308:	200d      	movs	r0, #13
 800130a:	f000 fa2f 	bl	800176c <put_single_char_to_UART>
}
 800130e:	e21b      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "L"))
 8001310:	4990      	ldr	r1, [pc, #576]	; (8001554 <parse_UART_message+0x370>)
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7fe ff80 	bl	8000218 <strcmp>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d108      	bne.n	8001330 <parse_UART_message+0x14c>
		CAN_mode_change(&hfdcan1, FDCAN_MODE_BUS_MONITORING);
 800131e:	2102      	movs	r1, #2
 8001320:	488b      	ldr	r0, [pc, #556]	; (8001550 <parse_UART_message+0x36c>)
 8001322:	f001 f882 	bl	800242a <CAN_mode_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001326:	2103      	movs	r1, #3
 8001328:	200d      	movs	r0, #13
 800132a:	f000 fa1f 	bl	800176c <put_single_char_to_UART>
}
 800132e:	e20b      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "Y"))
 8001330:	4989      	ldr	r1, [pc, #548]	; (8001558 <parse_UART_message+0x374>)
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7fe ff70 	bl	8000218 <strcmp>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d108      	bne.n	8001350 <parse_UART_message+0x16c>
		CAN_mode_change(&hfdcan1, FDCAN_MODE_EXTERNAL_LOOPBACK);
 800133e:	2104      	movs	r1, #4
 8001340:	4883      	ldr	r0, [pc, #524]	; (8001550 <parse_UART_message+0x36c>)
 8001342:	f001 f872 	bl	800242a <CAN_mode_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001346:	2103      	movs	r1, #3
 8001348:	200d      	movs	r0, #13
 800134a:	f000 fa0f 	bl	800176c <put_single_char_to_UART>
}
 800134e:	e1fb      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "C"))
 8001350:	4982      	ldr	r1, [pc, #520]	; (800155c <parse_UART_message+0x378>)
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7fe ff60 	bl	8000218 <strcmp>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d107      	bne.n	800136e <parse_UART_message+0x18a>
		HAL_FDCAN_Stop(&hfdcan1);
 800135e:	487c      	ldr	r0, [pc, #496]	; (8001550 <parse_UART_message+0x36c>)
 8001360:	f001 fe59 	bl	8003016 <HAL_FDCAN_Stop>
		put_single_char_to_UART(BEL_CHAR, UART_TX_MESSAGE_PRIORITY_3);
 8001364:	2103      	movs	r1, #3
 8001366:	2007      	movs	r0, #7
 8001368:	f000 fa00 	bl	800176c <put_single_char_to_UART>
}
 800136c:	e1ec      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S1"))
 800136e:	497c      	ldr	r1, [pc, #496]	; (8001560 <parse_UART_message+0x37c>)
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7fe ff51 	bl	8000218 <strcmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10c      	bne.n	8001396 <parse_UART_message+0x1b2>
		CAN_baudrate_change(&hfdcan1, CAN_20_KBIT_PRESCALER, CAN_20_KBIT_SJW, CAN_20_KBIT_SEG1, CAN_20_KBIT_SEG2);
 800137c:	2302      	movs	r3, #2
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	230d      	movs	r3, #13
 8001382:	2203      	movs	r2, #3
 8001384:	21c8      	movs	r1, #200	; 0xc8
 8001386:	4872      	ldr	r0, [pc, #456]	; (8001550 <parse_UART_message+0x36c>)
 8001388:	f001 f864 	bl	8002454 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 800138c:	2103      	movs	r1, #3
 800138e:	200d      	movs	r0, #13
 8001390:	f000 f9ec 	bl	800176c <put_single_char_to_UART>
}
 8001394:	e1d8      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S2"))
 8001396:	4973      	ldr	r1, [pc, #460]	; (8001564 <parse_UART_message+0x380>)
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7fe ff3d 	bl	8000218 <strcmp>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10c      	bne.n	80013be <parse_UART_message+0x1da>
		CAN_baudrate_change(&hfdcan1, CAN_50_KBIT_PRESCALER, CAN_50_KBIT_SJW, CAN_50_KBIT_SEG1, CAN_50_KBIT_SEG2);
 80013a4:	2302      	movs	r3, #2
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	230d      	movs	r3, #13
 80013aa:	2203      	movs	r2, #3
 80013ac:	2150      	movs	r1, #80	; 0x50
 80013ae:	4868      	ldr	r0, [pc, #416]	; (8001550 <parse_UART_message+0x36c>)
 80013b0:	f001 f850 	bl	8002454 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 80013b4:	2103      	movs	r1, #3
 80013b6:	200d      	movs	r0, #13
 80013b8:	f000 f9d8 	bl	800176c <put_single_char_to_UART>
}
 80013bc:	e1c4      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S3"))
 80013be:	496a      	ldr	r1, [pc, #424]	; (8001568 <parse_UART_message+0x384>)
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7fe ff29 	bl	8000218 <strcmp>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10c      	bne.n	80013e6 <parse_UART_message+0x202>
		CAN_baudrate_change(&hfdcan1, CAN_100_KBIT_PRESCALER, CAN_100_KBIT_SJW, CAN_100_KBIT_SEG1, CAN_100_KBIT_SEG2);
 80013cc:	2302      	movs	r3, #2
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	230d      	movs	r3, #13
 80013d2:	2203      	movs	r2, #3
 80013d4:	2128      	movs	r1, #40	; 0x28
 80013d6:	485e      	ldr	r0, [pc, #376]	; (8001550 <parse_UART_message+0x36c>)
 80013d8:	f001 f83c 	bl	8002454 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 80013dc:	2103      	movs	r1, #3
 80013de:	200d      	movs	r0, #13
 80013e0:	f000 f9c4 	bl	800176c <put_single_char_to_UART>
}
 80013e4:	e1b0      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S4"))
 80013e6:	4961      	ldr	r1, [pc, #388]	; (800156c <parse_UART_message+0x388>)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7fe ff15 	bl	8000218 <strcmp>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10c      	bne.n	800140e <parse_UART_message+0x22a>
		CAN_baudrate_change(&hfdcan1, CAN_125_KBIT_PRESCALER, CAN_125_KBIT_SJW, CAN_125_KBIT_SEG1, CAN_125_KBIT_SEG2);
 80013f4:	2302      	movs	r3, #2
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	230d      	movs	r3, #13
 80013fa:	2203      	movs	r2, #3
 80013fc:	2120      	movs	r1, #32
 80013fe:	4854      	ldr	r0, [pc, #336]	; (8001550 <parse_UART_message+0x36c>)
 8001400:	f001 f828 	bl	8002454 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001404:	2103      	movs	r1, #3
 8001406:	200d      	movs	r0, #13
 8001408:	f000 f9b0 	bl	800176c <put_single_char_to_UART>
}
 800140c:	e19c      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S5"))
 800140e:	4958      	ldr	r1, [pc, #352]	; (8001570 <parse_UART_message+0x38c>)
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7fe ff01 	bl	8000218 <strcmp>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10c      	bne.n	8001436 <parse_UART_message+0x252>
		CAN_baudrate_change(&hfdcan1, CAN_250_KBIT_PRESCALER, CAN_250_KBIT_SJW, CAN_250_KBIT_SEG1, CAN_250_KBIT_SEG2);
 800141c:	2302      	movs	r3, #2
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	230d      	movs	r3, #13
 8001422:	2203      	movs	r2, #3
 8001424:	2110      	movs	r1, #16
 8001426:	484a      	ldr	r0, [pc, #296]	; (8001550 <parse_UART_message+0x36c>)
 8001428:	f001 f814 	bl	8002454 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 800142c:	2103      	movs	r1, #3
 800142e:	200d      	movs	r0, #13
 8001430:	f000 f99c 	bl	800176c <put_single_char_to_UART>
}
 8001434:	e188      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S6"))
 8001436:	494f      	ldr	r1, [pc, #316]	; (8001574 <parse_UART_message+0x390>)
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7fe feed 	bl	8000218 <strcmp>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10c      	bne.n	800145e <parse_UART_message+0x27a>
		CAN_baudrate_change(&hfdcan1, CAN_500_KBIT_PRESCALER, CAN_500_KBIT_SJW, CAN_500_KBIT_SEG1, CAN_500_KBIT_SEG2);
 8001444:	2302      	movs	r3, #2
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	230d      	movs	r3, #13
 800144a:	2203      	movs	r2, #3
 800144c:	2108      	movs	r1, #8
 800144e:	4840      	ldr	r0, [pc, #256]	; (8001550 <parse_UART_message+0x36c>)
 8001450:	f001 f800 	bl	8002454 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001454:	2103      	movs	r1, #3
 8001456:	200d      	movs	r0, #13
 8001458:	f000 f988 	bl	800176c <put_single_char_to_UART>
}
 800145c:	e174      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S7"))
 800145e:	4946      	ldr	r1, [pc, #280]	; (8001578 <parse_UART_message+0x394>)
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7fe fed9 	bl	8000218 <strcmp>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10c      	bne.n	8001486 <parse_UART_message+0x2a2>
		CAN_baudrate_change(&hfdcan1, CAN_800_KBIT_PRESCALER, CAN_800_KBIT_SJW, CAN_800_KBIT_SEG1, CAN_800_KBIT_SEG2);
 800146c:	2302      	movs	r3, #2
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	230d      	movs	r3, #13
 8001472:	2203      	movs	r2, #3
 8001474:	2105      	movs	r1, #5
 8001476:	4836      	ldr	r0, [pc, #216]	; (8001550 <parse_UART_message+0x36c>)
 8001478:	f000 ffec 	bl	8002454 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 800147c:	2103      	movs	r1, #3
 800147e:	200d      	movs	r0, #13
 8001480:	f000 f974 	bl	800176c <put_single_char_to_UART>
}
 8001484:	e160      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "S8"))
 8001486:	493d      	ldr	r1, [pc, #244]	; (800157c <parse_UART_message+0x398>)
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7fe fec5 	bl	8000218 <strcmp>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10c      	bne.n	80014ae <parse_UART_message+0x2ca>
		CAN_baudrate_change(&hfdcan1, CAN_1000_KBIT_PRESCALER, CAN_1000_KBIT_SJW, CAN_1000_KBIT_SEG1, CAN_1000_KBIT_SEG2);
 8001494:	2302      	movs	r3, #2
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	230d      	movs	r3, #13
 800149a:	2203      	movs	r2, #3
 800149c:	2104      	movs	r1, #4
 800149e:	482c      	ldr	r0, [pc, #176]	; (8001550 <parse_UART_message+0x36c>)
 80014a0:	f000 ffd8 	bl	8002454 <CAN_baudrate_change>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 80014a4:	2103      	movs	r1, #3
 80014a6:	200d      	movs	r0, #13
 80014a8:	f000 f960 	bl	800176c <put_single_char_to_UART>
}
 80014ac:	e14c      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "Z1"))
 80014ae:	4934      	ldr	r1, [pc, #208]	; (8001580 <parse_UART_message+0x39c>)
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7fe feb1 	bl	8000218 <strcmp>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d107      	bne.n	80014cc <parse_UART_message+0x2e8>
		timestamp_enabled = TRUE;
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <parse_UART_message+0x3a0>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 80014c2:	2103      	movs	r1, #3
 80014c4:	200d      	movs	r0, #13
 80014c6:	f000 f951 	bl	800176c <put_single_char_to_UART>
}
 80014ca:	e13d      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "Z0"))
 80014cc:	492e      	ldr	r1, [pc, #184]	; (8001588 <parse_UART_message+0x3a4>)
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7fe fea2 	bl	8000218 <strcmp>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d158      	bne.n	800158c <parse_UART_message+0x3a8>
		timestamp_enabled = FALSE;
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <parse_UART_message+0x3a0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 80014e0:	2103      	movs	r1, #3
 80014e2:	200d      	movs	r0, #13
 80014e4:	f000 f942 	bl	800176c <put_single_char_to_UART>
}
 80014e8:	e12e      	b.n	8001748 <parse_UART_message+0x564>
 80014ea:	bf00      	nop
 80014ec:	08006d28 	.word	0x08006d28
 80014f0:	08006d34 	.word	0x08006d34
 80014f4:	08006d44 	.word	0x08006d44
 80014f8:	08006d48 	.word	0x08006d48
 80014fc:	08006d4c 	.word	0x08006d4c
 8001500:	08006d50 	.word	0x08006d50
 8001504:	08006d6c 	.word	0x08006d6c
 8001508:	08006d90 	.word	0x08006d90
 800150c:	08006dc0 	.word	0x08006dc0
 8001510:	08006de8 	.word	0x08006de8
 8001514:	08006e00 	.word	0x08006e00
 8001518:	08006e18 	.word	0x08006e18
 800151c:	08006e38 	.word	0x08006e38
 8001520:	08006e58 	.word	0x08006e58
 8001524:	08006e78 	.word	0x08006e78
 8001528:	08006eac 	.word	0x08006eac
 800152c:	08006ee0 	.word	0x08006ee0
 8001530:	08006efc 	.word	0x08006efc
 8001534:	08006f14 	.word	0x08006f14
 8001538:	08006f30 	.word	0x08006f30
 800153c:	08006f48 	.word	0x08006f48
 8001540:	08006f60 	.word	0x08006f60
 8001544:	08006f74 	.word	0x08006f74
 8001548:	08006f80 	.word	0x08006f80
 800154c:	08006fa4 	.word	0x08006fa4
 8001550:	200009b0 	.word	0x200009b0
 8001554:	08006fa8 	.word	0x08006fa8
 8001558:	08006fac 	.word	0x08006fac
 800155c:	08006fb0 	.word	0x08006fb0
 8001560:	08006fb4 	.word	0x08006fb4
 8001564:	08006fb8 	.word	0x08006fb8
 8001568:	08006fbc 	.word	0x08006fbc
 800156c:	08006fc0 	.word	0x08006fc0
 8001570:	08006fc4 	.word	0x08006fc4
 8001574:	08006fc8 	.word	0x08006fc8
 8001578:	08006fcc 	.word	0x08006fcc
 800157c:	08006fd0 	.word	0x08006fd0
 8001580:	08006fd4 	.word	0x08006fd4
 8001584:	200009ac 	.word	0x200009ac
 8001588:	08006fd8 	.word	0x08006fd8
	else if (!strcmp(UART_buffer_to_parse, "F"))
 800158c:	4970      	ldr	r1, [pc, #448]	; (8001750 <parse_UART_message+0x56c>)
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7fe fe42 	bl	8000218 <strcmp>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d113      	bne.n	80015c2 <parse_UART_message+0x3de>
		init_char_array_by_zero(sizeof(error_code_tmp), error_code_tmp);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4619      	mov	r1, r3
 80015a0:	2003      	movs	r0, #3
 80015a2:	f000 fefa 	bl	800239a <init_char_array_by_zero>
		if (hfdcan1.ErrorCode != HAL_FDCAN_ERROR_NONE)
 80015a6:	4b6b      	ldr	r3, [pc, #428]	; (8001754 <parse_UART_message+0x570>)
 80015a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <parse_UART_message+0x3ce>
			error_code_tmp[1] = '1';
 80015ae:	2331      	movs	r3, #49	; 0x31
 80015b0:	737b      	strb	r3, [r7, #13]
		put_string_to_UART(sizeof(error_code_tmp), error_code_tmp, UART_TX_MESSAGE_PRIORITY_3);
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2203      	movs	r2, #3
 80015b8:	4619      	mov	r1, r3
 80015ba:	2003      	movs	r0, #3
 80015bc:	f000 f8eb 	bl	8001796 <put_string_to_UART>
}
 80015c0:	e0c2      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "V"))
 80015c2:	4965      	ldr	r1, [pc, #404]	; (8001758 <parse_UART_message+0x574>)
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7fe fe27 	bl	8000218 <strcmp>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d105      	bne.n	80015dc <parse_UART_message+0x3f8>
		put_string_to_UART(sizeof(MESSAGE_FIRMWARE_VERSION), MESSAGE_FIRMWARE_VERSION, UART_TX_MESSAGE_PRIORITY_3);
 80015d0:	2203      	movs	r2, #3
 80015d2:	4962      	ldr	r1, [pc, #392]	; (800175c <parse_UART_message+0x578>)
 80015d4:	2006      	movs	r0, #6
 80015d6:	f000 f8de 	bl	8001796 <put_string_to_UART>
}
 80015da:	e0b5      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "N"))
 80015dc:	4960      	ldr	r1, [pc, #384]	; (8001760 <parse_UART_message+0x57c>)
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7fe fe1a 	bl	8000218 <strcmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d105      	bne.n	80015f6 <parse_UART_message+0x412>
		put_string_to_UART(sizeof(MESSAGE_SERIAL_NUMBER), MESSAGE_SERIAL_NUMBER, UART_TX_MESSAGE_PRIORITY_3);
 80015ea:	2203      	movs	r2, #3
 80015ec:	495d      	ldr	r1, [pc, #372]	; (8001764 <parse_UART_message+0x580>)
 80015ee:	200a      	movs	r0, #10
 80015f0:	f000 f8d1 	bl	8001796 <put_string_to_UART>
}
 80015f4:	e0a8      	b.n	8001748 <parse_UART_message+0x564>
	else if (!strcmp(UART_buffer_to_parse, "RST"))
 80015f6:	495c      	ldr	r1, [pc, #368]	; (8001768 <parse_UART_message+0x584>)
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7fe fe0d 	bl	8000218 <strcmp>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <parse_UART_message+0x426>
		HAL_NVIC_SystemReset();
 8001604:	f001 fa2d 	bl	8002a62 <HAL_NVIC_SystemReset>
}
 8001608:	e09e      	b.n	8001748 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 't')
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b74      	cmp	r3, #116	; 0x74
 8001610:	d115      	bne.n	800163e <parse_UART_message+0x45a>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_STANDARD_ID, FDCAN_DATA_FRAME));
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fc74 	bl	8001f08 <set_can_frame_parameters>
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fcad 	bl	8001f86 <send_CAN_frame>
		put_single_char_to_UART('z', UART_TX_MESSAGE_PRIORITY_3);
 800162c:	2103      	movs	r1, #3
 800162e:	207a      	movs	r0, #122	; 0x7a
 8001630:	f000 f89c 	bl	800176c <put_single_char_to_UART>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001634:	2103      	movs	r1, #3
 8001636:	200d      	movs	r0, #13
 8001638:	f000 f898 	bl	800176c <put_single_char_to_UART>
}
 800163c:	e084      	b.n	8001748 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 'r')
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b72      	cmp	r3, #114	; 0x72
 8001644:	d116      	bne.n	8001674 <parse_UART_message+0x490>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_STANDARD_ID, FDCAN_REMOTE_FRAME));
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fc59 	bl	8001f08 <set_can_frame_parameters>
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 fc92 	bl	8001f86 <send_CAN_frame>
		put_single_char_to_UART('z', UART_TX_MESSAGE_PRIORITY_3);
 8001662:	2103      	movs	r1, #3
 8001664:	207a      	movs	r0, #122	; 0x7a
 8001666:	f000 f881 	bl	800176c <put_single_char_to_UART>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 800166a:	2103      	movs	r1, #3
 800166c:	200d      	movs	r0, #13
 800166e:	f000 f87d 	bl	800176c <put_single_char_to_UART>
}
 8001672:	e069      	b.n	8001748 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 'T')
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b54      	cmp	r3, #84	; 0x54
 800167a:	d116      	bne.n	80016aa <parse_UART_message+0x4c6>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_EXTENDED_ID, FDCAN_DATA_FRAME));
 800167c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001680:	2200      	movs	r2, #0
 8001682:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fc3e 	bl	8001f08 <set_can_frame_parameters>
 800168c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fc77 	bl	8001f86 <send_CAN_frame>
		put_single_char_to_UART('Z', UART_TX_MESSAGE_PRIORITY_3);
 8001698:	2103      	movs	r1, #3
 800169a:	205a      	movs	r0, #90	; 0x5a
 800169c:	f000 f866 	bl	800176c <put_single_char_to_UART>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 80016a0:	2103      	movs	r1, #3
 80016a2:	200d      	movs	r0, #13
 80016a4:	f000 f862 	bl	800176c <put_single_char_to_UART>
}
 80016a8:	e04e      	b.n	8001748 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 'R')
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b52      	cmp	r3, #82	; 0x52
 80016b0:	d117      	bne.n	80016e2 <parse_UART_message+0x4fe>
		send_CAN_frame(UART_buffer_to_parse, set_can_frame_parameters(FDCAN_EXTENDED_ID, FDCAN_REMOTE_FRAME));
 80016b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fc22 	bl	8001f08 <set_can_frame_parameters>
 80016c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fc5b 	bl	8001f86 <send_CAN_frame>
		put_single_char_to_UART('Z', UART_TX_MESSAGE_PRIORITY_3);
 80016d0:	2103      	movs	r1, #3
 80016d2:	205a      	movs	r0, #90	; 0x5a
 80016d4:	f000 f84a 	bl	800176c <put_single_char_to_UART>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 80016d8:	2103      	movs	r1, #3
 80016da:	200d      	movs	r0, #13
 80016dc:	f000 f846 	bl	800176c <put_single_char_to_UART>
}
 80016e0:	e032      	b.n	8001748 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 's')
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b73      	cmp	r3, #115	; 0x73
 80016e8:	d103      	bne.n	80016f2 <parse_UART_message+0x50e>
		set_non_standard_CAN_bitrate(UART_buffer_to_parse);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fba6 	bl	8001e3c <set_non_standard_CAN_bitrate>
}
 80016f0:	e02a      	b.n	8001748 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 'm')
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b6d      	cmp	r3, #109	; 0x6d
 80016f8:	d111      	bne.n	800171e <parse_UART_message+0x53a>
		update_CAN_acceptance_mask(count_string_lenght(&UART_buffer_to_parse[1]), &UART_buffer_to_parse[1]);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3301      	adds	r3, #1
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 ff52 	bl	80025a8 <count_string_lenght>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3301      	adds	r3, #1
 800170c:	4619      	mov	r1, r3
 800170e:	4610      	mov	r0, r2
 8001710:	f000 ff8e 	bl	8002630 <update_CAN_acceptance_mask>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001714:	2103      	movs	r1, #3
 8001716:	200d      	movs	r0, #13
 8001718:	f000 f828 	bl	800176c <put_single_char_to_UART>
}
 800171c:	e014      	b.n	8001748 <parse_UART_message+0x564>
	else if (UART_buffer_to_parse[0] == 'M')
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b4d      	cmp	r3, #77	; 0x4d
 8001724:	d110      	bne.n	8001748 <parse_UART_message+0x564>
		update_CAN_acceptance_code(count_string_lenght(&UART_buffer_to_parse[1]), &UART_buffer_to_parse[1]);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3301      	adds	r3, #1
 800172a:	4618      	mov	r0, r3
 800172c:	f000 ff3c 	bl	80025a8 <count_string_lenght>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3301      	adds	r3, #1
 8001738:	4619      	mov	r1, r3
 800173a:	4610      	mov	r0, r2
 800173c:	f000 ffac 	bl	8002698 <update_CAN_acceptance_code>
		put_single_char_to_UART(CHAR_CODE_UART_MESSAGE_END, UART_TX_MESSAGE_PRIORITY_3);
 8001740:	2103      	movs	r1, #3
 8001742:	200d      	movs	r0, #13
 8001744:	f000 f812 	bl	800176c <put_single_char_to_UART>
}
 8001748:	bf00      	nop
 800174a:	3740      	adds	r7, #64	; 0x40
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	08006fdc 	.word	0x08006fdc
 8001754:	200009b0 	.word	0x200009b0
 8001758:	08006fe0 	.word	0x08006fe0
 800175c:	08006fe4 	.word	0x08006fe4
 8001760:	08006fec 	.word	0x08006fec
 8001764:	08006ff0 	.word	0x08006ff0
 8001768:	08006ffc 	.word	0x08006ffc

0800176c <put_single_char_to_UART>:

void put_single_char_to_UART(uint8_t char_code_to_send, uint8_t message_priority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp_arr_1[1];
	tmp_arr_1[0] = char_code_to_send;
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	733b      	strb	r3, [r7, #12]
	add_message_to_UART_TX_queue(tmp_arr_1, sizeof(tmp_arr_1), message_priority);
 8001780:	79ba      	ldrb	r2, [r7, #6]
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	2101      	movs	r1, #1
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe ff13 	bl	80005b4 <add_message_to_UART_TX_queue>
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <put_string_to_UART>:

void put_string_to_UART(uint16_t size_of_string, char* string_to_send, uint8_t message_priority)
{
 8001796:	b5b0      	push	{r4, r5, r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	6039      	str	r1, [r7, #0]
 80017a0:	80fb      	strh	r3, [r7, #6]
 80017a2:	4613      	mov	r3, r2
 80017a4:	717b      	strb	r3, [r7, #5]
 80017a6:	466b      	mov	r3, sp
 80017a8:	461d      	mov	r5, r3
	uint8_t tmp_arr_1[size_of_string];
 80017aa:	88f8      	ldrh	r0, [r7, #6]
 80017ac:	4603      	mov	r3, r0
 80017ae:	3b01      	subs	r3, #1
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	b281      	uxth	r1, r0
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	f04f 0400 	mov.w	r4, #0
 80017c0:	00d4      	lsls	r4, r2, #3
 80017c2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80017c6:	00cb      	lsls	r3, r1, #3
 80017c8:	b281      	uxth	r1, r0
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	f04f 0400 	mov.w	r4, #0
 80017d6:	00d4      	lsls	r4, r2, #3
 80017d8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80017dc:	00cb      	lsls	r3, r1, #3
 80017de:	4603      	mov	r3, r0
 80017e0:	3307      	adds	r3, #7
 80017e2:	08db      	lsrs	r3, r3, #3
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	ebad 0d03 	sub.w	sp, sp, r3
 80017ea:	466b      	mov	r3, sp
 80017ec:	3300      	adds	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(tmp_arr_1); i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e00b      	b.n	800180e <put_string_to_UART+0x78>
	{
		tmp_arr_1[i] = string_to_send[i];
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	7819      	ldrb	r1, [r3, #0]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	4413      	add	r3, r2
 8001804:	460a      	mov	r2, r1
 8001806:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tmp_arr_1); i++)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	4602      	mov	r2, r0
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	429a      	cmp	r2, r3
 8001814:	d8ef      	bhi.n	80017f6 <put_string_to_UART+0x60>
	}
	tmp_arr_1[sizeof(tmp_arr_1) - 1] = CARRIAGE_RETURN_CHAR;
 8001816:	4603      	mov	r3, r0
 8001818:	3b01      	subs	r3, #1
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	210d      	movs	r1, #13
 800181e:	54d1      	strb	r1, [r2, r3]
	add_message_to_UART_TX_queue(tmp_arr_1, sizeof(tmp_arr_1), message_priority);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	b2c1      	uxtb	r1, r0
 8001824:	797a      	ldrb	r2, [r7, #5]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fec4 	bl	80005b4 <add_message_to_UART_TX_queue>
 800182c:	46ad      	mov	sp, r5
}
 800182e:	bf00      	nop
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001838 <send_message_to_UART>:

void send_message_to_UART(uint16_t message_size, uint8_t* message_to_send)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	80fb      	strh	r3, [r7, #6]
	for (int ii = 0; ii < message_size; ii++)
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e00a      	b.n	8001860 <send_message_to_UART+0x28>
	{
		HAL_UART_Transmit(&huart2, &message_to_send[ii], UART_TX_MESSAGE_SIZE, UART_TIMEOUT);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	18d1      	adds	r1, r2, r3
 8001850:	2364      	movs	r3, #100	; 0x64
 8001852:	2201      	movs	r2, #1
 8001854:	4806      	ldr	r0, [pc, #24]	; (8001870 <send_message_to_UART+0x38>)
 8001856:	f003 ffcf 	bl	80057f8 <HAL_UART_Transmit>
	for (int ii = 0; ii < message_size; ii++)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3301      	adds	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	dbf0      	blt.n	800184a <send_message_to_UART+0x12>
	}
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000bcc 	.word	0x20000bcc

08001874 <CAN_IT_handler>:

void CAN_IT_handler(void)
{
 8001874:	b598      	push	{r3, r4, r7, lr}
 8001876:	af00      	add	r7, sp, #0
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_header_buffer, \
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <CAN_IT_handler+0x68>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	019b      	lsls	r3, r3, #6
 800187e:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <CAN_IT_handler+0x6c>)
 8001880:	1899      	adds	r1, r3, r2
							CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_data_buffer);
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <CAN_IT_handler+0x68>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	019b      	lsls	r3, r3, #6
 8001888:	3328      	adds	r3, #40	; 0x28
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <CAN_IT_handler+0x6c>)
 800188c:	4413      	add	r3, r2
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_header_buffer, \
 800188e:	460a      	mov	r2, r1
 8001890:	2140      	movs	r1, #64	; 0x40
 8001892:	4814      	ldr	r0, [pc, #80]	; (80018e4 <CAN_IT_handler+0x70>)
 8001894:	f001 fc74 	bl	8003180 <HAL_FDCAN_GetRxMessage>
	if (timestamp_enabled)
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <CAN_IT_handler+0x74>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00d      	beq.n	80018bc <CAN_IT_handler+0x48>
	{
		CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_timestamp_buffer = HAL_FDCAN_GetTimestampCounter(&hfdcan1);
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <CAN_IT_handler+0x68>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461c      	mov	r4, r3
 80018a6:	480f      	ldr	r0, [pc, #60]	; (80018e4 <CAN_IT_handler+0x70>)
 80018a8:	f001 fb7f 	bl	8002faa <HAL_FDCAN_GetTimestampCounter>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4619      	mov	r1, r3
 80018b0:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <CAN_IT_handler+0x6c>)
 80018b2:	01a3      	lsls	r3, r4, #6
 80018b4:	4413      	add	r3, r2
 80018b6:	333c      	adds	r3, #60	; 0x3c
 80018b8:	460a      	mov	r2, r1
 80018ba:	801a      	strh	r2, [r3, #0]
	}

	CAN_RX_put_index++;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <CAN_IT_handler+0x68>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <CAN_IT_handler+0x68>)
 80018c6:	701a      	strb	r2, [r3, #0]

	if (CAN_RX_put_index >= CAN_RX_QUEUE_BUFFER_SIZE)
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <CAN_IT_handler+0x68>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d902      	bls.n	80018d6 <CAN_IT_handler+0x62>
	{
		CAN_RX_put_index = 0;
 80018d0:	4b02      	ldr	r3, [pc, #8]	; (80018dc <CAN_IT_handler+0x68>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
	}
}
 80018d6:	bf00      	nop
 80018d8:	bd98      	pop	{r3, r4, r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000024c 	.word	0x2000024c
 80018e0:	20000a7c 	.word	0x20000a7c
 80018e4:	200009b0 	.word	0x200009b0
 80018e8:	200009ac 	.word	0x200009ac

080018ec <CAN_RX_queue_polling>:

void CAN_RX_queue_polling(void)
{
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	b08d      	sub	sp, #52	; 0x34
 80018f0:	af0c      	add	r7, sp, #48	; 0x30
	if (CAN_RX_get_index != CAN_RX_put_index)
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <CAN_RX_queue_polling+0x5c>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <CAN_RX_queue_polling+0x60>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d019      	beq.n	8001932 <CAN_RX_queue_polling+0x46>
	{
		parse_CAN_message(CAN_RX_queue_buffer[CAN_RX_get_index]);
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <CAN_RX_queue_polling+0x5c>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	4a13      	ldr	r2, [pc, #76]	; (8001950 <CAN_RX_queue_polling+0x64>)
 8001904:	019b      	lsls	r3, r3, #6
 8001906:	18d6      	adds	r6, r2, r3
 8001908:	466d      	mov	r5, sp
 800190a:	f106 0410 	add.w	r4, r6, #16
 800190e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001916:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800191a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800191e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001922:	f000 f817 	bl	8001954 <parse_CAN_message>
		CAN_RX_get_index++;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <CAN_RX_queue_polling+0x5c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	3301      	adds	r3, #1
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <CAN_RX_queue_polling+0x5c>)
 8001930:	701a      	strb	r2, [r3, #0]
	}
	if (CAN_RX_get_index >= CAN_RX_QUEUE_BUFFER_SIZE)
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <CAN_RX_queue_polling+0x5c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d902      	bls.n	8001940 <CAN_RX_queue_polling+0x54>
	{
		CAN_RX_get_index = 0;
 800193a:	4b03      	ldr	r3, [pc, #12]	; (8001948 <CAN_RX_queue_polling+0x5c>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
	}
}
 8001940:	bf00      	nop
 8001942:	3704      	adds	r7, #4
 8001944:	46bd      	mov	sp, r7
 8001946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001948:	2000047c 	.word	0x2000047c
 800194c:	2000024c 	.word	0x2000024c
 8001950:	20000a7c 	.word	0x20000a7c

08001954 <parse_CAN_message>:

void parse_CAN_message(CAN_RX_DataBuffer_StructTypeDef CAN_message_struct_to_parse)
{
 8001954:	b084      	sub	sp, #16
 8001956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800195a:	b090      	sub	sp, #64	; 0x40
 800195c:	af00      	add	r7, sp, #0
 800195e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001962:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001966:	466b      	mov	r3, sp
 8001968:	4699      	mov	r9, r3
	uint8_t id_lenght;
	char message_type_char;
	char message_end_char = CARRIAGE_RETURN_CHAR;
 800196a:	230d      	movs	r3, #13
 800196c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t data_lenght;
	if (CAN_message_struct_to_parse.CAN_RX_header_buffer.IdType == FDCAN_STANDARD_ID)
 8001970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001972:	2b00      	cmp	r3, #0
 8001974:	d106      	bne.n	8001984 <parse_CAN_message+0x30>
	{
		id_lenght = STANDARD_CAN_ID_LENGHT;
 8001976:	2303      	movs	r3, #3
 8001978:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		message_type_char = 't';
 800197c:	2374      	movs	r3, #116	; 0x74
 800197e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001982:	e005      	b.n	8001990 <parse_CAN_message+0x3c>
	}
	else
	{
		id_lenght = EXTENDED_CAN_ID_LENGHT;
 8001984:	2308      	movs	r3, #8
 8001986:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		message_type_char = 'T';
 800198a:	2354      	movs	r3, #84	; 0x54
 800198c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}
	data_lenght = CAN_message_data_lenght_define(CAN_message_struct_to_parse.CAN_RX_header_buffer.DataLength)*2;
 8001990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fbf2 	bl	800217c <CAN_message_data_lenght_define>
 8001998:	4603      	mov	r3, r0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t id_array[id_lenght];
 80019a2:	f897 802a 	ldrb.w	r8, [r7, #42]	; 0x2a
 80019a6:	4643      	mov	r3, r8
 80019a8:	3b01      	subs	r3, #1
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
 80019ac:	fa5f f188 	uxtb.w	r1, r8
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	f04f 0400 	mov.w	r4, #0
 80019bc:	00d4      	lsls	r4, r2, #3
 80019be:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80019c2:	00cb      	lsls	r3, r1, #3
 80019c4:	fa5f f188 	uxtb.w	r1, r8
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	f04f 0400 	mov.w	r4, #0
 80019d4:	00d4      	lsls	r4, r2, #3
 80019d6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80019da:	00cb      	lsls	r3, r1, #3
 80019dc:	4643      	mov	r3, r8
 80019de:	3307      	adds	r3, #7
 80019e0:	08db      	lsrs	r3, r3, #3
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	ebad 0d03 	sub.w	sp, sp, r3
 80019e8:	466b      	mov	r3, sp
 80019ea:	3300      	adds	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
	convert_int_value_to_ascii_hex_char_array(sizeof(id_array), id_array, CAN_message_struct_to_parse.CAN_RX_header_buffer.Identifier);
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019f2:	4619      	mov	r1, r3
 80019f4:	4640      	mov	r0, r8
 80019f6:	f000 f9f5 	bl	8001de4 <convert_int_value_to_ascii_hex_char_array>
	uint8_t data_array[data_lenght];
 80019fa:	f897 6028 	ldrb.w	r6, [r7, #40]	; 0x28
 80019fe:	4633      	mov	r3, r6
 8001a00:	3b01      	subs	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	b2f1      	uxtb	r1, r6
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	f04f 0400 	mov.w	r4, #0
 8001a12:	00d4      	lsls	r4, r2, #3
 8001a14:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001a18:	00cb      	lsls	r3, r1, #3
 8001a1a:	b2f1      	uxtb	r1, r6
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	f04f 0400 	mov.w	r4, #0
 8001a28:	00d4      	lsls	r4, r2, #3
 8001a2a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001a2e:	00cb      	lsls	r3, r1, #3
 8001a30:	4633      	mov	r3, r6
 8001a32:	3307      	adds	r3, #7
 8001a34:	08db      	lsrs	r3, r3, #3
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	ebad 0d03 	sub.w	sp, sp, r3
 8001a3c:	466b      	mov	r3, sp
 8001a3e:	3300      	adds	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < sizeof(data_array); i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a46:	e021      	b.n	8001a8c <parse_CAN_message+0x138>
	{
		if ((i % 2) == 0)
 8001a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d119      	bne.n	8001a86 <parse_CAN_message+0x132>
		{
			uint8_t tmp_arr_2[2];
			convert_int_value_to_ascii_hex_char_array(sizeof(tmp_arr_2), tmp_arr_2, CAN_message_struct_to_parse.CAN_RX_data_buffer[i/2]);
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	0fda      	lsrs	r2, r3, #31
 8001a56:	4413      	add	r3, r2
 8001a58:	105b      	asrs	r3, r3, #1
 8001a5a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a5e:	4413      	add	r3, r2
 8001a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a64:	461a      	mov	r2, r3
 8001a66:	463b      	mov	r3, r7
 8001a68:	4619      	mov	r1, r3
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f000 f9ba 	bl	8001de4 <convert_int_value_to_ascii_hex_char_array>
			data_array[i] = tmp_arr_2[0];
 8001a70:	7839      	ldrb	r1, [r7, #0]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a76:	4413      	add	r3, r2
 8001a78:	460a      	mov	r2, r1
 8001a7a:	701a      	strb	r2, [r3, #0]
			data_array[i + 1] = tmp_arr_2[1];
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	3301      	adds	r3, #1
 8001a80:	7879      	ldrb	r1, [r7, #1]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(data_array); i++)
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	3301      	adds	r3, #1
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a8c:	4632      	mov	r2, r6
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8d9      	bhi.n	8001a48 <parse_CAN_message+0xf4>
		}
	}
	uint8_t timestamp_array[CAN_TIMESTAMP_SIZE];
	uint8_t timestamp_size_variable;
	if (timestamp_enabled)
 8001a94:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <parse_CAN_message+0x300>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00c      	beq.n	8001ab6 <parse_CAN_message+0x162>
	{
		timestamp_size_variable = CAN_TIMESTAMP_SIZE;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		convert_int_value_to_ascii_hex_char_array(sizeof(timestamp_array), timestamp_array, CAN_message_struct_to_parse.CAN_RX_timestamp_buffer);
 8001aa2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	4619      	mov	r1, r3
 8001aae:	2004      	movs	r0, #4
 8001ab0:	f000 f998 	bl	8001de4 <convert_int_value_to_ascii_hex_char_array>
 8001ab4:	e002      	b.n	8001abc <parse_CAN_message+0x168>
	}
	else
	{
		timestamp_size_variable = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	}
	uint8_t CAN_to_UART_message_buffer[sizeof(message_type_char) + id_lenght + CAN_DATA_LENGHT_BYTE_SIZE + data_lenght + timestamp_size_variable + sizeof(message_end_char)];
 8001abc:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001ac0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ac4:	441a      	add	r2, r3
 8001ac6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001aca:	4413      	add	r3, r2
 8001acc:	1cdd      	adds	r5, r3, #3
 8001ace:	466b      	mov	r3, sp
 8001ad0:	469a      	mov	sl, r3
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	f04f 0400 	mov.w	r4, #0
 8001ae6:	00d4      	lsls	r4, r2, #3
 8001ae8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001aec:	00cb      	lsls	r3, r1, #3
 8001aee:	4629      	mov	r1, r5
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	f04f 0400 	mov.w	r4, #0
 8001afc:	00d4      	lsls	r4, r2, #3
 8001afe:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001b02:	00cb      	lsls	r3, r1, #3
 8001b04:	1deb      	adds	r3, r5, #7
 8001b06:	08db      	lsrs	r3, r3, #3
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	ebad 0d03 	sub.w	sp, sp, r3
 8001b0e:	466b      	mov	r3, sp
 8001b10:	3300      	adds	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
	uint8_t message_element_counter = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t cycle_start_value_tmp = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
	CAN_to_UART_message_buffer[0] = message_type_char;
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001b24:	701a      	strb	r2, [r3, #0]
	message_element_counter++;
 8001b26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	cycle_start_value_tmp = message_element_counter;
 8001b30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b34:	73fb      	strb	r3, [r7, #15]
	for (int i = message_element_counter; i < (sizeof(id_array) + cycle_start_value_tmp); i++)
 8001b36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3c:	e011      	b.n	8001b62 <parse_CAN_message+0x20e>
	{
		CAN_to_UART_message_buffer[i] = id_array[i - cycle_start_value_tmp];
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	6a3a      	ldr	r2, [r7, #32]
 8001b46:	5cd1      	ldrb	r1, [r2, r3]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4c:	4413      	add	r3, r2
 8001b4e:	460a      	mov	r2, r1
 8001b50:	701a      	strb	r2, [r3, #0]
		message_element_counter++;
 8001b52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b56:	3301      	adds	r3, #1
 8001b58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = message_element_counter; i < (sizeof(id_array) + cycle_start_value_tmp); i++)
 8001b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5e:	3301      	adds	r3, #1
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
 8001b62:	4642      	mov	r2, r8
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	441a      	add	r2, r3
 8001b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d8e7      	bhi.n	8001b3e <parse_CAN_message+0x1ea>
	}
	uint8_t data_lengt_tmp_buff = convert_data_lenght_to_DLC_code(data_lenght/2);
 8001b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f86e 	bl	8001c58 <convert_data_lenght_to_DLC_code>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	73bb      	strb	r3, [r7, #14]
	uint8_t CAN_DLS_char_array[1];
	convert_int_value_to_ascii_hex_char_array(sizeof(CAN_DLS_char_array), CAN_DLS_char_array, data_lengt_tmp_buff);
 8001b80:	7bba      	ldrb	r2, [r7, #14]
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	2001      	movs	r0, #1
 8001b88:	f000 f92c 	bl	8001de4 <convert_int_value_to_ascii_hex_char_array>
	CAN_to_UART_message_buffer[message_element_counter] = CAN_DLS_char_array[0];
 8001b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b90:	7939      	ldrb	r1, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	54d1      	strb	r1, [r2, r3]
	message_element_counter++;
 8001b96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	cycle_start_value_tmp = message_element_counter;
 8001ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ba4:	73fb      	strb	r3, [r7, #15]
	for (int i = message_element_counter; i < (sizeof(data_array) + cycle_start_value_tmp); i++)
 8001ba6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bac:	e011      	b.n	8001bd2 <parse_CAN_message+0x27e>
	{
		CAN_to_UART_message_buffer[i] = data_array[i - cycle_start_value_tmp];
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	5cd1      	ldrb	r1, [r2, r3]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbc:	4413      	add	r3, r2
 8001bbe:	460a      	mov	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
		message_element_counter++;
 8001bc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = message_element_counter; i < (sizeof(data_array) + cycle_start_value_tmp); i++)
 8001bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bce:	3301      	adds	r3, #1
 8001bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd2:	4632      	mov	r2, r6
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	441a      	add	r2, r3
 8001bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d8e7      	bhi.n	8001bae <parse_CAN_message+0x25a>
	}
	if (timestamp_enabled)
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <parse_CAN_message+0x300>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d020      	beq.n	8001c28 <parse_CAN_message+0x2d4>
	{
		cycle_start_value_tmp = message_element_counter;
 8001be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bea:	73fb      	strb	r3, [r7, #15]
		for (int i = message_element_counter; i < (sizeof(timestamp_array) + cycle_start_value_tmp); i++)
 8001bec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf2:	e014      	b.n	8001c1e <parse_CAN_message+0x2ca>
		{
			CAN_to_UART_message_buffer[i] = timestamp_array[i - cycle_start_value_tmp];
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001bfe:	4413      	add	r3, r2
 8001c00:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c08:	4413      	add	r3, r2
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
			message_element_counter++;
 8001c0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c12:	3301      	adds	r3, #1
 8001c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		for (int i = message_element_counter; i < (sizeof(timestamp_array) + cycle_start_value_tmp); i++)
 8001c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	1d1a      	adds	r2, r3, #4
 8001c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d8e5      	bhi.n	8001bf4 <parse_CAN_message+0x2a0>
		}
	}
	CAN_to_UART_message_buffer[message_element_counter] = message_end_char;
 8001c28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8001c32:	54d1      	strb	r1, [r2, r3]
	add_message_to_UART_TX_queue(CAN_to_UART_message_buffer, sizeof(CAN_to_UART_message_buffer), UART_TX_MESSAGE_PRIORITY_3);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	b2e9      	uxtb	r1, r5
 8001c38:	2203      	movs	r2, #3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fcba 	bl	80005b4 <add_message_to_UART_TX_queue>
 8001c40:	46d5      	mov	sp, sl
 8001c42:	46cd      	mov	sp, r9
}
 8001c44:	bf00      	nop
 8001c46:	3740      	adds	r7, #64	; 0x40
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c4e:	b004      	add	sp, #16
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	200009ac 	.word	0x200009ac

08001c58 <convert_data_lenght_to_DLC_code>:

uint8_t convert_data_lenght_to_DLC_code(uint8_t value_to_convert)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
	uint8_t DLC_code;
	switch (value_to_convert)
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b40      	cmp	r3, #64	; 0x40
 8001c66:	f200 80b5 	bhi.w	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
 8001c6a:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <convert_data_lenght_to_DLC_code+0x18>)
 8001c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c70:	08001d75 	.word	0x08001d75
 8001c74:	08001d7b 	.word	0x08001d7b
 8001c78:	08001d81 	.word	0x08001d81
 8001c7c:	08001d87 	.word	0x08001d87
 8001c80:	08001d8d 	.word	0x08001d8d
 8001c84:	08001d93 	.word	0x08001d93
 8001c88:	08001d99 	.word	0x08001d99
 8001c8c:	08001d9f 	.word	0x08001d9f
 8001c90:	08001da5 	.word	0x08001da5
 8001c94:	08001dd5 	.word	0x08001dd5
 8001c98:	08001dd5 	.word	0x08001dd5
 8001c9c:	08001dd5 	.word	0x08001dd5
 8001ca0:	08001dab 	.word	0x08001dab
 8001ca4:	08001dd5 	.word	0x08001dd5
 8001ca8:	08001dd5 	.word	0x08001dd5
 8001cac:	08001dd5 	.word	0x08001dd5
 8001cb0:	08001db1 	.word	0x08001db1
 8001cb4:	08001dd5 	.word	0x08001dd5
 8001cb8:	08001dd5 	.word	0x08001dd5
 8001cbc:	08001dd5 	.word	0x08001dd5
 8001cc0:	08001db7 	.word	0x08001db7
 8001cc4:	08001dd5 	.word	0x08001dd5
 8001cc8:	08001dd5 	.word	0x08001dd5
 8001ccc:	08001dd5 	.word	0x08001dd5
 8001cd0:	08001dbd 	.word	0x08001dbd
 8001cd4:	08001dd5 	.word	0x08001dd5
 8001cd8:	08001dd5 	.word	0x08001dd5
 8001cdc:	08001dd5 	.word	0x08001dd5
 8001ce0:	08001dd5 	.word	0x08001dd5
 8001ce4:	08001dd5 	.word	0x08001dd5
 8001ce8:	08001dd5 	.word	0x08001dd5
 8001cec:	08001dd5 	.word	0x08001dd5
 8001cf0:	08001dc3 	.word	0x08001dc3
 8001cf4:	08001dd5 	.word	0x08001dd5
 8001cf8:	08001dd5 	.word	0x08001dd5
 8001cfc:	08001dd5 	.word	0x08001dd5
 8001d00:	08001dd5 	.word	0x08001dd5
 8001d04:	08001dd5 	.word	0x08001dd5
 8001d08:	08001dd5 	.word	0x08001dd5
 8001d0c:	08001dd5 	.word	0x08001dd5
 8001d10:	08001dd5 	.word	0x08001dd5
 8001d14:	08001dd5 	.word	0x08001dd5
 8001d18:	08001dd5 	.word	0x08001dd5
 8001d1c:	08001dd5 	.word	0x08001dd5
 8001d20:	08001dd5 	.word	0x08001dd5
 8001d24:	08001dd5 	.word	0x08001dd5
 8001d28:	08001dd5 	.word	0x08001dd5
 8001d2c:	08001dd5 	.word	0x08001dd5
 8001d30:	08001dc9 	.word	0x08001dc9
 8001d34:	08001dd5 	.word	0x08001dd5
 8001d38:	08001dd5 	.word	0x08001dd5
 8001d3c:	08001dd5 	.word	0x08001dd5
 8001d40:	08001dd5 	.word	0x08001dd5
 8001d44:	08001dd5 	.word	0x08001dd5
 8001d48:	08001dd5 	.word	0x08001dd5
 8001d4c:	08001dd5 	.word	0x08001dd5
 8001d50:	08001dd5 	.word	0x08001dd5
 8001d54:	08001dd5 	.word	0x08001dd5
 8001d58:	08001dd5 	.word	0x08001dd5
 8001d5c:	08001dd5 	.word	0x08001dd5
 8001d60:	08001dd5 	.word	0x08001dd5
 8001d64:	08001dd5 	.word	0x08001dd5
 8001d68:	08001dd5 	.word	0x08001dd5
 8001d6c:	08001dd5 	.word	0x08001dd5
 8001d70:	08001dcf 	.word	0x08001dcf
	{
	case 0:
	{
		DLC_code = 0x0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
		break;
 8001d78:	e02c      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 1:
	{
		DLC_code = 0x1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
		break;
 8001d7e:	e029      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 2:
	{
		DLC_code = 0x2;
 8001d80:	2302      	movs	r3, #2
 8001d82:	73fb      	strb	r3, [r7, #15]
		break;
 8001d84:	e026      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 3:
	{
		DLC_code = 0x3;
 8001d86:	2303      	movs	r3, #3
 8001d88:	73fb      	strb	r3, [r7, #15]
		break;
 8001d8a:	e023      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 4:
	{
		DLC_code = 0x4;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	73fb      	strb	r3, [r7, #15]
		break;
 8001d90:	e020      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 5:
	{
		DLC_code = 0x5;
 8001d92:	2305      	movs	r3, #5
 8001d94:	73fb      	strb	r3, [r7, #15]
		break;
 8001d96:	e01d      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 6:
	{
		DLC_code = 0x6;
 8001d98:	2306      	movs	r3, #6
 8001d9a:	73fb      	strb	r3, [r7, #15]
		break;
 8001d9c:	e01a      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 7:
	{
		DLC_code = 0x7;
 8001d9e:	2307      	movs	r3, #7
 8001da0:	73fb      	strb	r3, [r7, #15]
		break;
 8001da2:	e017      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 8:
	{
		DLC_code = 0x8;
 8001da4:	2308      	movs	r3, #8
 8001da6:	73fb      	strb	r3, [r7, #15]
		break;
 8001da8:	e014      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 12:
	{
		DLC_code = 0x9;
 8001daa:	2309      	movs	r3, #9
 8001dac:	73fb      	strb	r3, [r7, #15]
		break;
 8001dae:	e011      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 16:
	{
		DLC_code = 0xA;
 8001db0:	230a      	movs	r3, #10
 8001db2:	73fb      	strb	r3, [r7, #15]
		break;
 8001db4:	e00e      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 20:
	{
		DLC_code = 0xB;
 8001db6:	230b      	movs	r3, #11
 8001db8:	73fb      	strb	r3, [r7, #15]
		break;
 8001dba:	e00b      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 24:
	{
		DLC_code = 0xC;
 8001dbc:	230c      	movs	r3, #12
 8001dbe:	73fb      	strb	r3, [r7, #15]
		break;
 8001dc0:	e008      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 32:
	{
		DLC_code = 0xD;
 8001dc2:	230d      	movs	r3, #13
 8001dc4:	73fb      	strb	r3, [r7, #15]
		break;
 8001dc6:	e005      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 48:
	{
		DLC_code = 0xE;
 8001dc8:	230e      	movs	r3, #14
 8001dca:	73fb      	strb	r3, [r7, #15]
		break;
 8001dcc:	e002      	b.n	8001dd4 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 64:
	{
		DLC_code = 0xF;
 8001dce:	230f      	movs	r3, #15
 8001dd0:	73fb      	strb	r3, [r7, #15]
		break;
 8001dd2:	bf00      	nop
	}
	}
	return DLC_code;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop

08001de4 <convert_int_value_to_ascii_hex_char_array>:

void convert_int_value_to_ascii_hex_char_array(uint8_t size_of_array, uint8_t* array, uint32_t value)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size_of_array; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e018      	b.n	8001e2a <convert_int_value_to_ascii_hex_char_array+0x46>
	{
		*(array + (sizeof(uint8_t) * i)) = (value >> ((size_of_array - i - 1) * INT_TO_ASCII_CONVERT_BITWISE_SHIFT)) & 0xF;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	440b      	add	r3, r1
 8001e10:	f002 020f 	and.w	r2, r2, #15
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]
		int_to_char(array + (sizeof(uint8_t) * i));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 f83a 	bl	8001e98 <int_to_char>
	for (int i = 0; i < size_of_array; i++)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	3301      	adds	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	dbe2      	blt.n	8001df8 <convert_int_value_to_ascii_hex_char_array+0x14>
	}
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <set_non_standard_CAN_bitrate>:

void set_non_standard_CAN_bitrate(char* UART_message)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	6078      	str	r0, [r7, #4]
	uint32_t tmp_prescaler = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_PRESCALER_SIZE, &UART_message[NON_STAND_CAN_PRESCALER_INDEX]);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3301      	adds	r3, #1
 8001e48:	4619      	mov	r1, r3
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	f000 f946 	bl	80020dc <convert_hex_char_sequence_to_int_value>
 8001e50:	6178      	str	r0, [r7, #20]
	uint32_t tmp_SJW = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_SJW_SIZE, &UART_message[NON_STAND_CAN_SJW_INDEX]);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3308      	adds	r3, #8
 8001e56:	4619      	mov	r1, r3
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f000 f93f 	bl	80020dc <convert_hex_char_sequence_to_int_value>
 8001e5e:	6138      	str	r0, [r7, #16]
	uint32_t tmp_seg1 = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_SEG1_SIZE, &UART_message[NON_STAND_CAN_SEG1_INDEX]);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3304      	adds	r3, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	2002      	movs	r0, #2
 8001e68:	f000 f938 	bl	80020dc <convert_hex_char_sequence_to_int_value>
 8001e6c:	60f8      	str	r0, [r7, #12]
	uint32_t tmp_seg2 = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_SEG2_SIZE, &UART_message[NON_STAND_CAN_SEG2_INDEX]);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3306      	adds	r3, #6
 8001e72:	4619      	mov	r1, r3
 8001e74:	2002      	movs	r0, #2
 8001e76:	f000 f931 	bl	80020dc <convert_hex_char_sequence_to_int_value>
 8001e7a:	60b8      	str	r0, [r7, #8]
	CAN_baudrate_change(&hfdcan1, tmp_prescaler, tmp_SJW, tmp_seg1, tmp_seg2);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	6979      	ldr	r1, [r7, #20]
 8001e86:	4803      	ldr	r0, [pc, #12]	; (8001e94 <set_non_standard_CAN_bitrate+0x58>)
 8001e88:	f000 fae4 	bl	8002454 <CAN_baudrate_change>
}
 8001e8c:	bf00      	nop
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200009b0 	.word	0x200009b0

08001e98 <int_to_char>:

void int_to_char(uint8_t* variable_pointer)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	if (*variable_pointer <= 9)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b09      	cmp	r3, #9
 8001ea6:	d806      	bhi.n	8001eb6 <int_to_char+0x1e>
	{
		*variable_pointer = *variable_pointer + 0x30;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	3330      	adds	r3, #48	; 0x30
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*variable_pointer = *variable_pointer + 0x40 - 9;
	}
}
 8001eb4:	e005      	b.n	8001ec2 <int_to_char+0x2a>
		*variable_pointer = *variable_pointer + 0x40 - 9;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	3337      	adds	r3, #55	; 0x37
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	701a      	strb	r2, [r3, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <init_CAN_values>:

void init_CAN_values(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
	CAN_RX_put_index = 0;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <init_CAN_values+0x28>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
	CAN_RX_get_index = 0;
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <init_CAN_values+0x2c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
	CAN_TX_put_index = 0;
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <init_CAN_values+0x30>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
	CAN_TX_get_index = 0;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <init_CAN_values+0x34>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	2000024c 	.word	0x2000024c
 8001efc:	2000047c 	.word	0x2000047c
 8001f00:	200009ae 	.word	0x200009ae
 8001f04:	20000144 	.word	0x20000144

08001f08 <set_can_frame_parameters>:

CAN_ParametersSet_StructTypeDef set_can_frame_parameters(uint32_t id_type_set, uint32_t frame_type_set)
{
 8001f08:	b490      	push	{r4, r7}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
	CAN_ParametersSet_StructTypeDef CAN_frame_parameters;
	switch (id_type_set)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <set_can_frame_parameters+0x1a>
 8001f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1e:	d00b      	beq.n	8001f38 <set_can_frame_parameters+0x30>
 8001f20:	e016      	b.n	8001f50 <set_can_frame_parameters+0x48>
	{
	case FDCAN_STANDARD_ID:
	{
		CAN_frame_parameters.id_type = FDCAN_STANDARD_ID;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
		CAN_frame_parameters.id_lenght_in_bytes = STANDARD_CAN_MESSAGE_ID_LENGHT_BYTE;
 8001f26:	2303      	movs	r3, #3
 8001f28:	773b      	strb	r3, [r7, #28]
		CAN_frame_parameters.id_byte_number = STANDARD_CAN_MESSAGE_ID_BYTE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	777b      	strb	r3, [r7, #29]
		CAN_frame_parameters.data_lenght_byte_number = STANDARD_CAN_MESSAGE_DATA_LENGHT_BYTE;
 8001f2e:	2304      	movs	r3, #4
 8001f30:	77bb      	strb	r3, [r7, #30]
		CAN_frame_parameters.data_start_byte_number = STANDARD_CAN_MESSAGE_DATA_START_BYTE;
 8001f32:	2305      	movs	r3, #5
 8001f34:	77fb      	strb	r3, [r7, #31]
		break;
 8001f36:	e00b      	b.n	8001f50 <set_can_frame_parameters+0x48>
	}
	case FDCAN_EXTENDED_ID:
	{
		CAN_frame_parameters.id_type = FDCAN_EXTENDED_ID;
 8001f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f3c:	617b      	str	r3, [r7, #20]
		CAN_frame_parameters.id_lenght_in_bytes = EXTENDED_CAN_MESSAGE_ID_LENGHT_BYTE;
 8001f3e:	2308      	movs	r3, #8
 8001f40:	773b      	strb	r3, [r7, #28]
		CAN_frame_parameters.id_byte_number = EXTENDED_CAN_MESSAGE_ID_BYTE;
 8001f42:	2301      	movs	r3, #1
 8001f44:	777b      	strb	r3, [r7, #29]
		CAN_frame_parameters.data_lenght_byte_number = EXTENDED_CAN_MESSAGE_DATA_LENGHT_BYTE;
 8001f46:	2309      	movs	r3, #9
 8001f48:	77bb      	strb	r3, [r7, #30]
		CAN_frame_parameters.data_start_byte_number = EXTENDED_CAN_MESSAGE_DATA_START_BYTE;
 8001f4a:	230a      	movs	r3, #10
 8001f4c:	77fb      	strb	r3, [r7, #31]
		break;
 8001f4e:	bf00      	nop
	}
	}
	switch (frame_type_set)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <set_can_frame_parameters+0x56>
 8001f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f5a:	d003      	beq.n	8001f64 <set_can_frame_parameters+0x5c>
 8001f5c:	e006      	b.n	8001f6c <set_can_frame_parameters+0x64>
	{
	case FDCAN_DATA_FRAME:
	{
		CAN_frame_parameters.frame_type = FDCAN_DATA_FRAME;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
		break;
 8001f62:	e003      	b.n	8001f6c <set_can_frame_parameters+0x64>
	}
	case FDCAN_REMOTE_FRAME:
	{
		CAN_frame_parameters.frame_type = FDCAN_REMOTE_FRAME;
 8001f64:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f68:	61bb      	str	r3, [r7, #24]
		break;
 8001f6a:	bf00      	nop
	}
	}
	return CAN_frame_parameters;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	461c      	mov	r4, r3
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc90      	pop	{r4, r7}
 8001f84:	4770      	bx	lr

08001f86 <send_CAN_frame>:

void send_CAN_frame(char* can_buffer_to_parse, CAN_ParametersSet_StructTypeDef CAN_frame_parameters_set)
{
 8001f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f88:	b08d      	sub	sp, #52	; 0x34
 8001f8a:	af02      	add	r7, sp, #8
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	4638      	mov	r0, r7
 8001f90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001f94:	466b      	mov	r3, sp
 8001f96:	461e      	mov	r6, r3
	uint32_t identifier = convert_hex_char_sequence_to_int_value(CAN_frame_parameters_set.id_lenght_in_bytes, &can_buffer_to_parse[CAN_frame_parameters_set.id_byte_number]);
 8001f98:	7a3a      	ldrb	r2, [r7, #8]
 8001f9a:	7a7b      	ldrb	r3, [r7, #9]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	440b      	add	r3, r1
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	f000 f899 	bl	80020dc <convert_hex_char_sequence_to_int_value>
 8001faa:	6238      	str	r0, [r7, #32]
	uint32_t data_lenght = CAN_TX_message_DLC_bytes_define(convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_lenght_byte_number]));
 8001fac:	7abb      	ldrb	r3, [r7, #10]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f878 	bl	80020ac <convert_ascii_hex_char_to_int_value>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f958 	bl	8002274 <CAN_TX_message_DLC_bytes_define>
 8001fc4:	61f8      	str	r0, [r7, #28]
	uint8_t can_tx_data_buffer[convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_lenght_byte_number])];
 8001fc6:	7abb      	ldrb	r3, [r7, #10]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4413      	add	r3, r2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 f86b 	bl	80020ac <convert_ascii_hex_char_to_int_value>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461d      	mov	r5, r3
 8001fda:	462b      	mov	r3, r5
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	b2e9      	uxtb	r1, r5
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	f04f 0400 	mov.w	r4, #0
 8001fee:	00d4      	lsls	r4, r2, #3
 8001ff0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ff4:	00cb      	lsls	r3, r1, #3
 8001ff6:	b2e9      	uxtb	r1, r5
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	f04f 0400 	mov.w	r4, #0
 8002004:	00d4      	lsls	r4, r2, #3
 8002006:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800200a:	00cb      	lsls	r3, r1, #3
 800200c:	462b      	mov	r3, r5
 800200e:	3307      	adds	r3, #7
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	ebad 0d03 	sub.w	sp, sp, r3
 8002018:	ab02      	add	r3, sp, #8
 800201a:	3300      	adds	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < (sizeof(can_tx_data_buffer)*2); i++)
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
 8002022:	e031      	b.n	8002088 <send_CAN_frame+0x102>
	{
		if ((i % 2) == 0)
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d129      	bne.n	8002082 <send_CAN_frame+0xfc>
		{
			uint8_t value_array[2];
			value_array[0] = convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_start_byte_number + i]);
 800202e:	7afb      	ldrb	r3, [r7, #11]
 8002030:	461a      	mov	r2, r3
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	4413      	add	r3, r2
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f834 	bl	80020ac <convert_ascii_hex_char_to_int_value>
 8002044:	4603      	mov	r3, r0
 8002046:	743b      	strb	r3, [r7, #16]
			value_array[1] = convert_ascii_hex_char_to_int_value(can_buffer_to_parse[CAN_frame_parameters_set.data_start_byte_number + i + 1]);
 8002048:	7afb      	ldrb	r3, [r7, #11]
 800204a:	461a      	mov	r2, r3
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	4413      	add	r3, r2
 8002050:	3301      	adds	r3, #1
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f827 	bl	80020ac <convert_ascii_hex_char_to_int_value>
 800205e:	4603      	mov	r3, r0
 8002060:	747b      	strb	r3, [r7, #17]
			can_tx_data_buffer[i/2] = unite_digits_sequence(sizeof(value_array), value_array, ASCII_TO_INT_CONVERT_BITWISE_SHIFT);
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	2204      	movs	r2, #4
 8002068:	4619      	mov	r1, r3
 800206a:	2002      	movs	r0, #2
 800206c:	f000 f9b0 	bl	80023d0 <unite_digits_sequence>
 8002070:	4601      	mov	r1, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	0fda      	lsrs	r2, r3, #31
 8002076:	4413      	add	r3, r2
 8002078:	105b      	asrs	r3, r3, #1
 800207a:	461a      	mov	r2, r3
 800207c:	b2c9      	uxtb	r1, r1
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	5499      	strb	r1, [r3, r2]
	for (int i = 0; i < (sizeof(can_tx_data_buffer)*2); i++)
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	3301      	adds	r3, #1
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
 8002088:	462b      	mov	r3, r5
 800208a:	005a      	lsls	r2, r3, #1
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	429a      	cmp	r2, r3
 8002090:	d8c8      	bhi.n	8002024 <send_CAN_frame+0x9e>
		}
	}
	CAN_transmit_message(CAN_frame_parameters_set.id_type, CAN_frame_parameters_set.frame_type, identifier, data_lenght, can_tx_data_buffer);
 8002092:	6838      	ldr	r0, [r7, #0]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	6a3a      	ldr	r2, [r7, #32]
 800209e:	f000 f959 	bl	8002354 <CAN_transmit_message>
 80020a2:	46b5      	mov	sp, r6
}
 80020a4:	bf00      	nop
 80020a6:	372c      	adds	r7, #44	; 0x2c
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020ac <convert_ascii_hex_char_to_int_value>:

uint8_t convert_ascii_hex_char_to_int_value(char char_to_convert)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
	uint8_t int_value = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
	if ((int)char_to_convert <= (int)'9')
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2b39      	cmp	r3, #57	; 0x39
 80020be:	d803      	bhi.n	80020c8 <convert_ascii_hex_char_to_int_value+0x1c>
	{
		int_value = char_to_convert - '0';
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	3b30      	subs	r3, #48	; 0x30
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	e002      	b.n	80020ce <convert_ascii_hex_char_to_int_value+0x22>
	}
	else
	{
		int_value = char_to_convert - 'A' + 10;
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	3b37      	subs	r3, #55	; 0x37
 80020cc:	73fb      	strb	r3, [r7, #15]
	}
	return int_value;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <convert_hex_char_sequence_to_int_value>:

uint32_t convert_hex_char_sequence_to_int_value(uint8_t number_of_chars, char* char_array_pointer)
{
 80020dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	466b      	mov	r3, sp
 80020ea:	461e      	mov	r6, r3
	uint8_t tmp_arr_2[number_of_chars];
 80020ec:	79fd      	ldrb	r5, [r7, #7]
 80020ee:	462b      	mov	r3, r5
 80020f0:	3b01      	subs	r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	b2e9      	uxtb	r1, r5
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	f04f 0400 	mov.w	r4, #0
 8002102:	00d4      	lsls	r4, r2, #3
 8002104:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002108:	00cb      	lsls	r3, r1, #3
 800210a:	b2e9      	uxtb	r1, r5
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	f04f 0400 	mov.w	r4, #0
 8002118:	00d4      	lsls	r4, r2, #3
 800211a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800211e:	00cb      	lsls	r3, r1, #3
 8002120:	462b      	mov	r3, r5
 8002122:	3307      	adds	r3, #7
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	ebad 0d03 	sub.w	sp, sp, r3
 800212c:	466b      	mov	r3, sp
 800212e:	3300      	adds	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(tmp_arr_2); i++)
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	e010      	b.n	800215a <convert_hex_char_sequence_to_int_value+0x7e>
	{
		tmp_arr_2[i] = convert_ascii_hex_char_to_int_value(char_array_pointer[i]);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	4413      	add	r3, r2
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ffb3 	bl	80020ac <convert_ascii_hex_char_to_int_value>
 8002146:	4603      	mov	r3, r0
 8002148:	4619      	mov	r1, r3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	4413      	add	r3, r2
 8002150:	460a      	mov	r2, r1
 8002152:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tmp_arr_2); i++)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	3301      	adds	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	462a      	mov	r2, r5
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	429a      	cmp	r2, r3
 8002160:	d8ea      	bhi.n	8002138 <convert_hex_char_sequence_to_int_value+0x5c>
	}
	uint32_t return_int_value = unite_digits_sequence(sizeof(tmp_arr_2), tmp_arr_2, ASCII_TO_INT_CONVERT_BITWISE_SHIFT);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2204      	movs	r2, #4
 8002166:	4619      	mov	r1, r3
 8002168:	4628      	mov	r0, r5
 800216a:	f000 f931 	bl	80023d0 <unite_digits_sequence>
 800216e:	60b8      	str	r0, [r7, #8]
	return return_int_value;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	46b5      	mov	sp, r6
}
 8002174:	4618      	mov	r0, r3
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800217c <CAN_message_data_lenght_define>:

uint32_t CAN_message_data_lenght_define(uint32_t data_lenght_code)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	uint32_t lenght_bytes;
	switch (data_lenght_code)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800218a:	d051      	beq.n	8002230 <CAN_message_data_lenght_define+0xb4>
 800218c:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8002190:	d818      	bhi.n	80021c4 <CAN_message_data_lenght_define+0x48>
 8002192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002196:	d03f      	beq.n	8002218 <CAN_message_data_lenght_define+0x9c>
 8002198:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800219c:	d808      	bhi.n	80021b0 <CAN_message_data_lenght_define+0x34>
 800219e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a2:	d033      	beq.n	800220c <CAN_message_data_lenght_define+0x90>
 80021a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021a8:	d033      	beq.n	8002212 <CAN_message_data_lenght_define+0x96>
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d02b      	beq.n	8002206 <CAN_message_data_lenght_define+0x8a>
 80021ae:	e05a      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b4:	d036      	beq.n	8002224 <CAN_message_data_lenght_define+0xa8>
 80021b6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80021ba:	d036      	beq.n	800222a <CAN_message_data_lenght_define+0xae>
 80021bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021c0:	d02d      	beq.n	800221e <CAN_message_data_lenght_define+0xa2>
 80021c2:	e050      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
 80021c4:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80021c8:	d03e      	beq.n	8002248 <CAN_message_data_lenght_define+0xcc>
 80021ca:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80021ce:	d809      	bhi.n	80021e4 <CAN_message_data_lenght_define+0x68>
 80021d0:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80021d4:	d032      	beq.n	800223c <CAN_message_data_lenght_define+0xc0>
 80021d6:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80021da:	d032      	beq.n	8002242 <CAN_message_data_lenght_define+0xc6>
 80021dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021e0:	d029      	beq.n	8002236 <CAN_message_data_lenght_define+0xba>
 80021e2:	e040      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
 80021e4:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 80021e8:	d034      	beq.n	8002254 <CAN_message_data_lenght_define+0xd8>
 80021ea:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 80021ee:	d803      	bhi.n	80021f8 <CAN_message_data_lenght_define+0x7c>
 80021f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021f4:	d02b      	beq.n	800224e <CAN_message_data_lenght_define+0xd2>
 80021f6:	e036      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
 80021f8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021fc:	d02d      	beq.n	800225a <CAN_message_data_lenght_define+0xde>
 80021fe:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8002202:	d02d      	beq.n	8002260 <CAN_message_data_lenght_define+0xe4>
 8002204:	e02f      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	{
	case FDCAN_DLC_BYTES_0:
	{
		lenght_bytes = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
		break;
 800220a:	e02c      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_1:
	{
		lenght_bytes = 1;
 800220c:	2301      	movs	r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
		break;
 8002210:	e029      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_2:
	{
		lenght_bytes = 2;
 8002212:	2302      	movs	r3, #2
 8002214:	60fb      	str	r3, [r7, #12]
		break;
 8002216:	e026      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_3:
	{
		lenght_bytes = 3;
 8002218:	2303      	movs	r3, #3
 800221a:	60fb      	str	r3, [r7, #12]
		break;
 800221c:	e023      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_4:
	{
		lenght_bytes = 4;
 800221e:	2304      	movs	r3, #4
 8002220:	60fb      	str	r3, [r7, #12]
		break;
 8002222:	e020      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_5:
	{
		lenght_bytes = 5;
 8002224:	2305      	movs	r3, #5
 8002226:	60fb      	str	r3, [r7, #12]
		break;
 8002228:	e01d      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_6:
	{
		lenght_bytes = 6;
 800222a:	2306      	movs	r3, #6
 800222c:	60fb      	str	r3, [r7, #12]
		break;
 800222e:	e01a      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_7:
	{
		lenght_bytes = 7;
 8002230:	2307      	movs	r3, #7
 8002232:	60fb      	str	r3, [r7, #12]
		break;
 8002234:	e017      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_8:
	{
		lenght_bytes = 8;
 8002236:	2308      	movs	r3, #8
 8002238:	60fb      	str	r3, [r7, #12]
		break;
 800223a:	e014      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_12:
	{
		lenght_bytes = 12;
 800223c:	230c      	movs	r3, #12
 800223e:	60fb      	str	r3, [r7, #12]
		break;
 8002240:	e011      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_16:
	{
		lenght_bytes = 16;
 8002242:	2310      	movs	r3, #16
 8002244:	60fb      	str	r3, [r7, #12]
		break;
 8002246:	e00e      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_20:
	{
		lenght_bytes = 20;
 8002248:	2314      	movs	r3, #20
 800224a:	60fb      	str	r3, [r7, #12]
		break;
 800224c:	e00b      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_24:
	{
		lenght_bytes = 24;
 800224e:	2318      	movs	r3, #24
 8002250:	60fb      	str	r3, [r7, #12]
		break;
 8002252:	e008      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_32:
	{
		lenght_bytes = 32;
 8002254:	2320      	movs	r3, #32
 8002256:	60fb      	str	r3, [r7, #12]
		break;
 8002258:	e005      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_48:
	{
		lenght_bytes = 48;
 800225a:	2330      	movs	r3, #48	; 0x30
 800225c:	60fb      	str	r3, [r7, #12]
		break;
 800225e:	e002      	b.n	8002266 <CAN_message_data_lenght_define+0xea>
	}
	case FDCAN_DLC_BYTES_64:
	{
		lenght_bytes = 64;
 8002260:	2340      	movs	r3, #64	; 0x40
 8002262:	60fb      	str	r3, [r7, #12]
		break;
 8002264:	bf00      	nop
	}
	}
	return lenght_bytes;
 8002266:	68fb      	ldr	r3, [r7, #12]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <CAN_TX_message_DLC_bytes_define>:

uint32_t CAN_TX_message_DLC_bytes_define(uint32_t data_lenght_bytes)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	uint32_t DLC_bytes;
	switch (data_lenght_bytes)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b0f      	cmp	r3, #15
 8002280:	d861      	bhi.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
 8002282:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <CAN_TX_message_DLC_bytes_define+0x14>)
 8002284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002288:	080022c9 	.word	0x080022c9
 800228c:	080022cf 	.word	0x080022cf
 8002290:	080022d7 	.word	0x080022d7
 8002294:	080022df 	.word	0x080022df
 8002298:	080022e7 	.word	0x080022e7
 800229c:	080022ef 	.word	0x080022ef
 80022a0:	080022f7 	.word	0x080022f7
 80022a4:	080022ff 	.word	0x080022ff
 80022a8:	08002307 	.word	0x08002307
 80022ac:	0800230f 	.word	0x0800230f
 80022b0:	08002317 	.word	0x08002317
 80022b4:	0800231f 	.word	0x0800231f
 80022b8:	08002327 	.word	0x08002327
 80022bc:	0800232f 	.word	0x0800232f
 80022c0:	08002337 	.word	0x08002337
 80022c4:	0800233f 	.word	0x0800233f
	{
	case 0x0:
	{
		DLC_bytes = FDCAN_DLC_BYTES_0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
		break;
 80022cc:	e03b      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x1:
	{
		DLC_bytes = FDCAN_DLC_BYTES_1;
 80022ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d2:	60fb      	str	r3, [r7, #12]
		break;
 80022d4:	e037      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x2:
	{
		DLC_bytes = FDCAN_DLC_BYTES_2;
 80022d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022da:	60fb      	str	r3, [r7, #12]
		break;
 80022dc:	e033      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x3:
	{
		DLC_bytes = FDCAN_DLC_BYTES_3;
 80022de:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80022e2:	60fb      	str	r3, [r7, #12]
		break;
 80022e4:	e02f      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x4:
	{
		DLC_bytes = FDCAN_DLC_BYTES_4;
 80022e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022ea:	60fb      	str	r3, [r7, #12]
		break;
 80022ec:	e02b      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x5:
	{
		DLC_bytes = FDCAN_DLC_BYTES_5;
 80022ee:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80022f2:	60fb      	str	r3, [r7, #12]
		break;
 80022f4:	e027      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x6:
	{
		DLC_bytes = FDCAN_DLC_BYTES_6;
 80022f6:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80022fa:	60fb      	str	r3, [r7, #12]
		break;
 80022fc:	e023      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x7:
	{
		DLC_bytes = FDCAN_DLC_BYTES_7;
 80022fe:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8002302:	60fb      	str	r3, [r7, #12]
		break;
 8002304:	e01f      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x8:
	{
		DLC_bytes = FDCAN_DLC_BYTES_8;
 8002306:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800230a:	60fb      	str	r3, [r7, #12]
		break;
 800230c:	e01b      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0x9:
	{
		DLC_bytes = FDCAN_DLC_BYTES_12;
 800230e:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8002312:	60fb      	str	r3, [r7, #12]
		break;
 8002314:	e017      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xA:
	{
		DLC_bytes = FDCAN_DLC_BYTES_16;
 8002316:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800231a:	60fb      	str	r3, [r7, #12]
		break;
 800231c:	e013      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xB:
	{
		DLC_bytes = FDCAN_DLC_BYTES_20;
 800231e:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8002322:	60fb      	str	r3, [r7, #12]
		break;
 8002324:	e00f      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xC:
	{
		DLC_bytes = FDCAN_DLC_BYTES_24;
 8002326:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800232a:	60fb      	str	r3, [r7, #12]
		break;
 800232c:	e00b      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xD:
	{
		DLC_bytes = FDCAN_DLC_BYTES_32;
 800232e:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 8002332:	60fb      	str	r3, [r7, #12]
		break;
 8002334:	e007      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xE:
	{
		DLC_bytes = FDCAN_DLC_BYTES_48;
 8002336:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800233a:	60fb      	str	r3, [r7, #12]
		break;
 800233c:	e003      	b.n	8002346 <CAN_TX_message_DLC_bytes_define+0xd2>
	}
	case 0xF:
	{
		DLC_bytes = FDCAN_DLC_BYTES_64;
 800233e:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8002342:	60fb      	str	r3, [r7, #12]
		break;
 8002344:	bf00      	nop
	}
	}
	return DLC_bytes;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <CAN_transmit_message>:

void CAN_transmit_message(uint32_t id_type, uint32_t frame_type, uint32_t identifier, uint32_t data_lenght, uint8_t* tx_data)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08e      	sub	sp, #56	; 0x38
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
	FDCAN_TxHeaderTypeDef tx_header;
	tx_header.Identifier = identifier;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	617b      	str	r3, [r7, #20]
	tx_header.IdType = id_type;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	61bb      	str	r3, [r7, #24]
	tx_header.TxFrameType = frame_type;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	61fb      	str	r3, [r7, #28]
	tx_header.DataLength = data_lenght;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	623b      	str	r3, [r7, #32]
	tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
	tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002376:	2300      	movs	r3, #0
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
	tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 800237a:	2300      	movs	r3, #0
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
	tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800237e:	2300      	movs	r3, #0
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
	tx_header.MessageMarker = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	637b      	str	r3, [r7, #52]	; 0x34
	add_message_to_CAN_TX_queue(&tx_header, tx_data);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f881 	bl	8002494 <add_message_to_CAN_TX_queue>
}
 8002392:	bf00      	nop
 8002394:	3738      	adds	r7, #56	; 0x38
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <init_char_array_by_zero>:

// инициализируем нулями символьный массив
void init_char_array_by_zero(uint16_t array_size, char* array_pointer)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	6039      	str	r1, [r7, #0]
 80023a4:	80fb      	strh	r3, [r7, #6]
	for (int int_char_counter = 0; int_char_counter < (array_size); int_char_counter++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	e007      	b.n	80023bc <init_char_array_by_zero+0x22>
	{
		*(array_pointer + (int_char_counter*(sizeof(char)))) = '0';
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	2230      	movs	r2, #48	; 0x30
 80023b4:	701a      	strb	r2, [r3, #0]
	for (int int_char_counter = 0; int_char_counter < (array_size); int_char_counter++)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3301      	adds	r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	dbf3      	blt.n	80023ac <init_char_array_by_zero+0x12>
	}
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <unite_digits_sequence>:
		*(array_pointer + int_zero_counter) = 0;
	}
}

uint32_t unite_digits_sequence(uint8_t number_of_values, uint8_t *byte_array_pointer, uint8_t bitwise_shift)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
 80023dc:	4613      	mov	r3, r2
 80023de:	71bb      	strb	r3, [r7, #6]
	uint32_t summary_value = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
	for (int i = number_of_values - 1; i >= 0; i--)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	e014      	b.n	8002416 <unite_digits_sequence+0x46>
	{
		summary_value = summary_value | (byte_array_pointer[i] << ((number_of_values - 1 - i)*bitwise_shift));
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	79ba      	ldrb	r2, [r7, #6]
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	461a      	mov	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
	for (int i = number_of_values - 1; i >= 0; i--)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	3b01      	subs	r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	dae7      	bge.n	80023ec <unite_digits_sequence+0x1c>
	}
	return summary_value;
 800241c:	68fb      	ldr	r3, [r7, #12]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <CAN_mode_change>:

void CAN_mode_change(FDCAN_HandleTypeDef *hfdcan, uint32_t required_mode)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
	HAL_FDCAN_Stop(hfdcan);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fdee 	bl	8003016 <HAL_FDCAN_Stop>
	hfdcan->Init.Mode = required_mode;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	60da      	str	r2, [r3, #12]
	HAL_FDCAN_Init(hfdcan);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fb85 	bl	8002b50 <HAL_FDCAN_Init>
	HAL_FDCAN_Start(hfdcan);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fdbd 	bl	8002fc6 <HAL_FDCAN_Start>
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <CAN_baudrate_change>:

void CAN_baudrate_change(FDCAN_HandleTypeDef *hfdcan, uint32_t prescaler, uint32_t SJW, uint32_t seg1, uint32_t seg2)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
	HAL_FDCAN_Stop(hfdcan);
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fdd7 	bl	8003016 <HAL_FDCAN_Stop>
	hfdcan->Init.NominalPrescaler = prescaler;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	615a      	str	r2, [r3, #20]
	hfdcan->Init.NominalSyncJumpWidth = SJW;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	619a      	str	r2, [r3, #24]
	hfdcan->Init.NominalTimeSeg1 = seg1;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	61da      	str	r2, [r3, #28]
	hfdcan->Init.NominalTimeSeg2 = seg2;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	621a      	str	r2, [r3, #32]
	HAL_FDCAN_Init(hfdcan);
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fb65 	bl	8002b50 <HAL_FDCAN_Init>
	HAL_FDCAN_Start(hfdcan);
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fd9d 	bl	8002fc6 <HAL_FDCAN_Start>
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <add_message_to_CAN_TX_queue>:
	}
}
*/

void add_message_to_CAN_TX_queue(FDCAN_TxHeaderTypeDef *tx_header_pointer, uint8_t *tx_data_pointer)
{
 8002494:	b5b0      	push	{r4, r5, r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
	CAN_TX_queue_buffer[CAN_TX_put_index].message_header = *tx_header_pointer;
 800249e:	4b25      	ldr	r3, [pc, #148]	; (8002534 <add_message_to_CAN_TX_queue+0xa0>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	4619      	mov	r1, r3
 80024a4:	4a24      	ldr	r2, [pc, #144]	; (8002538 <add_message_to_CAN_TX_queue+0xa4>)
 80024a6:	2334      	movs	r3, #52	; 0x34
 80024a8:	fb03 f301 	mul.w	r3, r3, r1
 80024ac:	441a      	add	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4614      	mov	r4, r2
 80024b2:	461d      	mov	r5, r3
 80024b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < CAN_message_data_lenght_define(CAN_TX_queue_buffer[CAN_TX_put_index].message_header.DataLength); i++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	e013      	b.n	80024ee <add_message_to_CAN_TX_queue+0x5a>
	{
		CAN_TX_queue_buffer[CAN_TX_put_index].message_data[i] = tx_data_pointer[i];
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <add_message_to_CAN_TX_queue+0xa0>)
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	4610      	mov	r0, r2
 80024d2:	7819      	ldrb	r1, [r3, #0]
 80024d4:	4a18      	ldr	r2, [pc, #96]	; (8002538 <add_message_to_CAN_TX_queue+0xa4>)
 80024d6:	2334      	movs	r3, #52	; 0x34
 80024d8:	fb03 f300 	mul.w	r3, r3, r0
 80024dc:	441a      	add	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	3324      	adds	r3, #36	; 0x24
 80024e4:	460a      	mov	r2, r1
 80024e6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CAN_message_data_lenght_define(CAN_TX_queue_buffer[CAN_TX_put_index].message_header.DataLength); i++)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3301      	adds	r3, #1
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <add_message_to_CAN_TX_queue+0xa0>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4a10      	ldr	r2, [pc, #64]	; (8002538 <add_message_to_CAN_TX_queue+0xa4>)
 80024f6:	2334      	movs	r3, #52	; 0x34
 80024f8:	fb03 f301 	mul.w	r3, r3, r1
 80024fc:	4413      	add	r3, r2
 80024fe:	330c      	adds	r3, #12
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fe3a 	bl	800217c <CAN_message_data_lenght_define>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	429a      	cmp	r2, r3
 800250e:	d8da      	bhi.n	80024c6 <add_message_to_CAN_TX_queue+0x32>
	}
	CAN_TX_put_index++;
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <add_message_to_CAN_TX_queue+0xa0>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <add_message_to_CAN_TX_queue+0xa0>)
 800251a:	701a      	strb	r2, [r3, #0]
	if (CAN_TX_put_index > CAN_TX_QUEUE_BUFFER_SIZE)
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <add_message_to_CAN_TX_queue+0xa0>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b18      	cmp	r3, #24
 8002522:	d902      	bls.n	800252a <add_message_to_CAN_TX_queue+0x96>
	{
		CAN_TX_put_index = 0;
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <add_message_to_CAN_TX_queue+0xa0>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
	}
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bdb0      	pop	{r4, r5, r7, pc}
 8002532:	bf00      	nop
 8002534:	200009ae 	.word	0x200009ae
 8002538:	200004cc 	.word	0x200004cc

0800253c <send_messages_from_CAN_TX_queue>:

void send_messages_from_CAN_TX_queue(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	if (CAN_TX_get_index != CAN_TX_put_index)
 8002540:	4b15      	ldr	r3, [pc, #84]	; (8002598 <send_messages_from_CAN_TX_queue+0x5c>)
 8002542:	781a      	ldrb	r2, [r3, #0]
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <send_messages_from_CAN_TX_queue+0x60>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d01b      	beq.n	8002584 <send_messages_from_CAN_TX_queue+0x48>
	{
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_TX_queue_buffer[CAN_TX_get_index].message_header, &CAN_TX_queue_buffer[CAN_TX_get_index].message_data[0]);
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <send_messages_from_CAN_TX_queue+0x5c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	2334      	movs	r3, #52	; 0x34
 8002554:	fb03 f302 	mul.w	r3, r3, r2
 8002558:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <send_messages_from_CAN_TX_queue+0x64>)
 800255a:	1899      	adds	r1, r3, r2
 800255c:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <send_messages_from_CAN_TX_queue+0x5c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	2334      	movs	r3, #52	; 0x34
 8002564:	fb03 f302 	mul.w	r3, r3, r2
 8002568:	3320      	adds	r3, #32
 800256a:	4a0d      	ldr	r2, [pc, #52]	; (80025a0 <send_messages_from_CAN_TX_queue+0x64>)
 800256c:	4413      	add	r3, r2
 800256e:	3304      	adds	r3, #4
 8002570:	461a      	mov	r2, r3
 8002572:	480c      	ldr	r0, [pc, #48]	; (80025a4 <send_messages_from_CAN_TX_queue+0x68>)
 8002574:	f000 fdbf 	bl	80030f6 <HAL_FDCAN_AddMessageToTxFifoQ>
		CAN_TX_get_index++;
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <send_messages_from_CAN_TX_queue+0x5c>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <send_messages_from_CAN_TX_queue+0x5c>)
 8002582:	701a      	strb	r2, [r3, #0]
	}
	if (CAN_TX_get_index >= CAN_TX_QUEUE_BUFFER_SIZE)
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <send_messages_from_CAN_TX_queue+0x5c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b17      	cmp	r3, #23
 800258a:	d902      	bls.n	8002592 <send_messages_from_CAN_TX_queue+0x56>
	{
		CAN_TX_get_index = 0;
 800258c:	4b02      	ldr	r3, [pc, #8]	; (8002598 <send_messages_from_CAN_TX_queue+0x5c>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
	}
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000144 	.word	0x20000144
 800259c:	200009ae 	.word	0x200009ae
 80025a0:	200004cc 	.word	0x200004cc
 80025a4:	200009b0 	.word	0x200009b0

080025a8 <count_string_lenght>:

uint8_t count_string_lenght(char* ch_string)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	uint8_t number_of_chars = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
	while (ch_string[number_of_chars] != '\0')
 80025b4:	e005      	b.n	80025c2 <count_string_lenght+0x1a>
	{
		number_of_chars++;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	3301      	adds	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
		if (number_of_chars == UART_STRING_MAX_SIZE)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d006      	beq.n	80025d0 <count_string_lenght+0x28>
	while (ch_string[number_of_chars] != '\0')
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f3      	bne.n	80025b6 <count_string_lenght+0xe>
 80025ce:	e000      	b.n	80025d2 <count_string_lenght+0x2a>
		{
			break;
 80025d0:	bf00      	nop
		}
	}
	return number_of_chars;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <init_CAN_filter>:

void init_CAN_filter(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af02      	add	r7, sp, #8
	filter_config.IdType = FDCAN_STANDARD_ID;	//FDCAN_STANDARD_ID;
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <init_CAN_filter+0x48>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
	filter_config.FilterIndex = 0;
 80025ec:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <init_CAN_filter+0x48>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	605a      	str	r2, [r3, #4]
	filter_config.FilterType = FDCAN_FILTER_MASK;
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <init_CAN_filter+0x48>)
 80025f4:	2202      	movs	r2, #2
 80025f6:	609a      	str	r2, [r3, #8]
	filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <init_CAN_filter+0x48>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	60da      	str	r2, [r3, #12]
	filter_config.FilterID1 = 0x0;
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <init_CAN_filter+0x48>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
	filter_config.FilterID2 = 0x0;
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <init_CAN_filter+0x48>)
 8002606:	2200      	movs	r2, #0
 8002608:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800260a:	4907      	ldr	r1, [pc, #28]	; (8002628 <init_CAN_filter+0x48>)
 800260c:	4807      	ldr	r0, [pc, #28]	; (800262c <init_CAN_filter+0x4c>)
 800260e:	f000 fbf9 	bl	8002e04 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
 8002612:	2300      	movs	r3, #0
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2300      	movs	r3, #0
 8002618:	2202      	movs	r2, #2
 800261a:	2102      	movs	r1, #2
 800261c:	4803      	ldr	r0, [pc, #12]	; (800262c <init_CAN_filter+0x4c>)
 800261e:	f000 fc4b 	bl	8002eb8 <HAL_FDCAN_ConfigGlobalFilter>
	//HAL_FDCAN_ConfigExtendedIdMask(&hfdcan1, 0);
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000464 	.word	0x20000464
 800262c:	200009b0 	.word	0x200009b0

08002630 <update_CAN_acceptance_mask>:

void update_CAN_acceptance_mask(uint8_t string_size, char* string_pointer)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
	switch (string_size)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d002      	beq.n	8002648 <update_CAN_acceptance_mask+0x18>
 8002642:	2b08      	cmp	r3, #8
 8002644:	d00f      	beq.n	8002666 <update_CAN_acceptance_mask+0x36>
		filter_config.FilterID2 = convert_hex_char_sequence_to_int_value(CAN_MASK_LENGHT_EXTENDED, string_pointer);
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
		break;
	}
	}
}
 8002646:	e01e      	b.n	8002686 <update_CAN_acceptance_mask+0x56>
		filter_config.IdType = FDCAN_STANDARD_ID;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <update_CAN_acceptance_mask+0x60>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
		filter_config.FilterID2 = convert_hex_char_sequence_to_int_value(CAN_MASK_LENGHT_STANDARD, string_pointer);
 800264e:	6839      	ldr	r1, [r7, #0]
 8002650:	2003      	movs	r0, #3
 8002652:	f7ff fd43 	bl	80020dc <convert_hex_char_sequence_to_int_value>
 8002656:	4602      	mov	r2, r0
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <update_CAN_acceptance_mask+0x60>)
 800265a:	615a      	str	r2, [r3, #20]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800265c:	490c      	ldr	r1, [pc, #48]	; (8002690 <update_CAN_acceptance_mask+0x60>)
 800265e:	480d      	ldr	r0, [pc, #52]	; (8002694 <update_CAN_acceptance_mask+0x64>)
 8002660:	f000 fbd0 	bl	8002e04 <HAL_FDCAN_ConfigFilter>
		break;
 8002664:	e00f      	b.n	8002686 <update_CAN_acceptance_mask+0x56>
		filter_config.IdType = FDCAN_EXTENDED_ID;
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <update_CAN_acceptance_mask+0x60>)
 8002668:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800266c:	601a      	str	r2, [r3, #0]
		filter_config.FilterID2 = convert_hex_char_sequence_to_int_value(CAN_MASK_LENGHT_EXTENDED, string_pointer);
 800266e:	6839      	ldr	r1, [r7, #0]
 8002670:	2008      	movs	r0, #8
 8002672:	f7ff fd33 	bl	80020dc <convert_hex_char_sequence_to_int_value>
 8002676:	4602      	mov	r2, r0
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <update_CAN_acceptance_mask+0x60>)
 800267a:	615a      	str	r2, [r3, #20]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <update_CAN_acceptance_mask+0x60>)
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <update_CAN_acceptance_mask+0x64>)
 8002680:	f000 fbc0 	bl	8002e04 <HAL_FDCAN_ConfigFilter>
		break;
 8002684:	bf00      	nop
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000464 	.word	0x20000464
 8002694:	200009b0 	.word	0x200009b0

08002698 <update_CAN_acceptance_code>:

void update_CAN_acceptance_code(uint8_t string_size, char* string_pointer)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	71fb      	strb	r3, [r7, #7]
	switch (string_size)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d002      	beq.n	80026b0 <update_CAN_acceptance_code+0x18>
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d00f      	beq.n	80026ce <update_CAN_acceptance_code+0x36>
		filter_config.FilterID1 = convert_hex_char_sequence_to_int_value(CAN_CODE_LENGHT_EXTENDED, string_pointer);
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
		break;
	}
	}
}
 80026ae:	e01e      	b.n	80026ee <update_CAN_acceptance_code+0x56>
		filter_config.IdType = FDCAN_STANDARD_ID;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <update_CAN_acceptance_code+0x60>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
		filter_config.FilterID1 = convert_hex_char_sequence_to_int_value(CAN_CODE_LENGHT_STANDARD, string_pointer);
 80026b6:	6839      	ldr	r1, [r7, #0]
 80026b8:	2003      	movs	r0, #3
 80026ba:	f7ff fd0f 	bl	80020dc <convert_hex_char_sequence_to_int_value>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <update_CAN_acceptance_code+0x60>)
 80026c2:	611a      	str	r2, [r3, #16]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 80026c4:	490c      	ldr	r1, [pc, #48]	; (80026f8 <update_CAN_acceptance_code+0x60>)
 80026c6:	480d      	ldr	r0, [pc, #52]	; (80026fc <update_CAN_acceptance_code+0x64>)
 80026c8:	f000 fb9c 	bl	8002e04 <HAL_FDCAN_ConfigFilter>
		break;
 80026cc:	e00f      	b.n	80026ee <update_CAN_acceptance_code+0x56>
		filter_config.IdType = FDCAN_EXTENDED_ID;
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <update_CAN_acceptance_code+0x60>)
 80026d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026d4:	601a      	str	r2, [r3, #0]
		filter_config.FilterID1 = convert_hex_char_sequence_to_int_value(CAN_CODE_LENGHT_EXTENDED, string_pointer);
 80026d6:	6839      	ldr	r1, [r7, #0]
 80026d8:	2008      	movs	r0, #8
 80026da:	f7ff fcff 	bl	80020dc <convert_hex_char_sequence_to_int_value>
 80026de:	4602      	mov	r2, r0
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <update_CAN_acceptance_code+0x60>)
 80026e2:	611a      	str	r2, [r3, #16]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 80026e4:	4904      	ldr	r1, [pc, #16]	; (80026f8 <update_CAN_acceptance_code+0x60>)
 80026e6:	4805      	ldr	r0, [pc, #20]	; (80026fc <update_CAN_acceptance_code+0x64>)
 80026e8:	f000 fb8c 	bl	8002e04 <HAL_FDCAN_ConfigFilter>
		break;
 80026ec:	bf00      	nop
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000464 	.word	0x20000464
 80026fc:	200009b0 	.word	0x200009b0

08002700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002700:	480d      	ldr	r0, [pc, #52]	; (8002738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002702:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002704:	480d      	ldr	r0, [pc, #52]	; (800273c <LoopForever+0x6>)
  ldr r1, =_edata
 8002706:	490e      	ldr	r1, [pc, #56]	; (8002740 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002708:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <LoopForever+0xe>)
  movs r3, #0
 800270a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800270c:	e002      	b.n	8002714 <LoopCopyDataInit>

0800270e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002712:	3304      	adds	r3, #4

08002714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002718:	d3f9      	bcc.n	800270e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271a:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <LoopForever+0x12>)
  ldr r4, =_ebss
 800271c:	4c0b      	ldr	r4, [pc, #44]	; (800274c <LoopForever+0x16>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002720:	e001      	b.n	8002726 <LoopFillZerobss>

08002722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002724:	3204      	adds	r2, #4

08002726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002728:	d3fb      	bcc.n	8002722 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800272a:	f7fe fc3d 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800272e:	f004 fac3 	bl	8006cb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002732:	f7fd ffe3 	bl	80006fc <main>

08002736 <LoopForever>:

LoopForever:
    b LoopForever
 8002736:	e7fe      	b.n	8002736 <LoopForever>
  ldr   r0, =_estack
 8002738:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800273c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002740:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002744:	08007064 	.word	0x08007064
  ldr r2, =_sbss
 8002748:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800274c:	20000c60 	.word	0x20000c60

08002750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002750:	e7fe      	b.n	8002750 <ADC1_2_IRQHandler>

08002752 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 f94d 	bl	80029fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002762:	2000      	movs	r0, #0
 8002764:	f000 f80e 	bl	8002784 <HAL_InitTick>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	71fb      	strb	r3, [r7, #7]
 8002772:	e001      	b.n	8002778 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002774:	f7fe fabc 	bl	8000cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002778:	79fb      	ldrb	r3, [r7, #7]

}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_InitTick+0x68>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d022      	beq.n	80027de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002798:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_InitTick+0x6c>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_InitTick+0x68>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f95c 	bl	8002a6a <HAL_SYSTICK_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10f      	bne.n	80027d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b0f      	cmp	r3, #15
 80027bc:	d809      	bhi.n	80027d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027be:	2200      	movs	r2, #0
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	f04f 30ff 	mov.w	r0, #4294967295
 80027c6:	f000 f924 	bl	8002a12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <HAL_InitTick+0x70>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	e007      	b.n	80027e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	e004      	b.n	80027e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	e001      	b.n	80027e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000008 	.word	0x20000008
 80027f0:	20000000 	.word	0x20000000
 80027f4:	20000004 	.word	0x20000004

080027f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_IncTick+0x1c>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_IncTick+0x20>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4413      	add	r3, r2
 8002806:	4a03      	ldr	r2, [pc, #12]	; (8002814 <HAL_IncTick+0x1c>)
 8002808:	6013      	str	r3, [r2, #0]
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	20000c5c 	.word	0x20000c5c
 8002818:	20000008 	.word	0x20000008

0800281c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return uwTick;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_GetTick+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000c5c 	.word	0x20000c5c

08002834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800285c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002866:	4a04      	ldr	r2, [pc, #16]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	60d3      	str	r3, [r2, #12]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <__NVIC_GetPriorityGrouping+0x18>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 0307 	and.w	r3, r3, #7
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db0b      	blt.n	80028c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4907      	ldr	r1, [pc, #28]	; (80028d0 <__NVIC_EnableIRQ+0x38>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2001      	movs	r0, #1
 80028ba:	fa00 f202 	lsl.w	r2, r0, r2
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	490c      	ldr	r1, [pc, #48]	; (8002920 <__NVIC_SetPriority+0x4c>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4908      	ldr	r1, [pc, #32]	; (8002924 <__NVIC_SetPriority+0x50>)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3b04      	subs	r3, #4
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf28      	it	cs
 8002946:	2304      	movcs	r3, #4
 8002948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3304      	adds	r3, #4
 800294e:	2b06      	cmp	r3, #6
 8002950:	d902      	bls.n	8002958 <NVIC_EncodePriority+0x30>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b03      	subs	r3, #3
 8002956:	e000      	b.n	800295a <NVIC_EncodePriority+0x32>
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43d9      	mvns	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	4313      	orrs	r3, r2
         );
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	; 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002994:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <__NVIC_SystemReset+0x20>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <__NVIC_SystemReset+0x20>)
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <__NVIC_SystemReset+0x24>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60cb      	str	r3, [r1, #12]
 80029a8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <__NVIC_SystemReset+0x1c>
 80029b0:	e000ed00 	.word	0xe000ed00
 80029b4:	05fa0004 	.word	0x05fa0004

080029b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c8:	d301      	bcc.n	80029ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00f      	b.n	80029ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <SysTick_Config+0x40>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d6:	210f      	movs	r1, #15
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	f7ff ff7a 	bl	80028d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <SysTick_Config+0x40>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e6:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <SysTick_Config+0x40>)
 80029e8:	2207      	movs	r2, #7
 80029ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	e000e010 	.word	0xe000e010

080029fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ff15 	bl	8002834 <__NVIC_SetPriorityGrouping>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a20:	f7ff ff2c 	bl	800287c <__NVIC_GetPriorityGrouping>
 8002a24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7ff ff7c 	bl	8002928 <NVIC_EncodePriority>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff4b 	bl	80028d4 <__NVIC_SetPriority>
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff1f 	bl	8002898 <__NVIC_EnableIRQ>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002a66:	f7ff ff93 	bl	8002990 <__NVIC_SystemReset>

08002a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffa0 	bl	80029b8 <SysTick_Config>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d00d      	beq.n	8002ab6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
 8002ab4:	e047      	b.n	8002b46 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 020e 	bic.w	r2, r2, #14
 8002ac4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f003 021f 	and.w	r2, r3, #31
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b02:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00c      	beq.n	8002b26 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b24:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
    }
  }
  return status;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e147      	b.n	8002df2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe f8de 	bl	8000d38 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0210 	bic.w	r2, r2, #16
 8002b8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b8c:	f7ff fe46 	bl	800281c <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002b92:	e012      	b.n	8002bba <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002b94:	f7ff fe42 	bl	800281c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b0a      	cmp	r3, #10
 8002ba0:	d90b      	bls.n	8002bba <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	f043 0201 	orr.w	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e11b      	b.n	8002df2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d0e5      	beq.n	8002b94 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd8:	f7ff fe20 	bl	800281c <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002bde:	e012      	b.n	8002c06 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002be0:	f7ff fe1c 	bl	800281c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b0a      	cmp	r3, #10
 8002bec:	d90b      	bls.n	8002c06 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0f5      	b.n	8002df2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0e5      	beq.n	8002be0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0202 	orr.w	r2, r2, #2
 8002c22:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a74      	ldr	r2, [pc, #464]	; (8002dfc <HAL_FDCAN_Init+0x2ac>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d103      	bne.n	8002c36 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002c2e:	4a74      	ldr	r2, [pc, #464]	; (8002e00 <HAL_FDCAN_Init+0x2b0>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7c1b      	ldrb	r3, [r3, #16]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d108      	bne.n	8002c50 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4c:	619a      	str	r2, [r3, #24]
 8002c4e:	e007      	b.n	8002c60 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c5e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7c5b      	ldrb	r3, [r3, #17]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d108      	bne.n	8002c7a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c76:	619a      	str	r2, [r3, #24]
 8002c78:	e007      	b.n	8002c8a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c88:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7c9b      	ldrb	r3, [r3, #18]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d108      	bne.n	8002ca4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699a      	ldr	r2, [r3, #24]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ca0:	619a      	str	r2, [r3, #24]
 8002ca2:	e007      	b.n	8002cb4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cb2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002cd8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0210 	bic.w	r2, r2, #16
 8002ce8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d108      	bne.n	8002d04 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699a      	ldr	r2, [r3, #24]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0204 	orr.w	r2, r2, #4
 8002d00:	619a      	str	r2, [r3, #24]
 8002d02:	e02c      	b.n	8002d5e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d028      	beq.n	8002d5e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d01c      	beq.n	8002d4e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d22:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0210 	orr.w	r2, r2, #16
 8002d32:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d110      	bne.n	8002d5e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0220 	orr.w	r2, r2, #32
 8002d4a:	619a      	str	r2, [r3, #24]
 8002d4c:	e007      	b.n	8002d5e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0220 	orr.w	r2, r2, #32
 8002d5c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d6e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d76:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d86:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d88:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d92:	d115      	bne.n	8002dc0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002da2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	3b01      	subs	r3, #1
 8002daa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002dac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	3b01      	subs	r3, #1
 8002db6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002dbc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002dbe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fd40 	bl	800385c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40006400 	.word	0x40006400
 8002e00:	40006500 	.word	0x40006500

08002e04 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e14:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d002      	beq.n	8002e22 <HAL_FDCAN_ConfigFilter+0x1e>
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d13d      	bne.n	8002e9e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d119      	bne.n	8002e5e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e36:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002e3e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e01d      	b.n	8002e9a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	075a      	lsls	r2, r3, #29
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	079a      	lsls	r2, r3, #30
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	3304      	adds	r3, #4
 8002e92:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e006      	b.n	8002eac <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea2:	f043 0202 	orr.w	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
  }
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d116      	bne.n	8002f00 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eda:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	011a      	lsls	r2, r3, #4
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	431a      	orrs	r2, r3
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e006      	b.n	8002f0e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f04:	f043 0204 	orr.w	r2, r3, #4
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_FDCAN_ConfigTimestampCounter>:
  * @param  TimestampPrescaler Timestamp Counter Prescaler.
  *         This parameter can be a value of @arg FDCAN_Timestamp_Prescaler.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTimestampCounter(FDCAN_HandleTypeDef *hfdcan, uint32_t TimestampPrescaler)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TIMESTAMP_PRESCALER(TimestampPrescaler));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d10b      	bne.n	8002f48 <HAL_FDCAN_ConfigTimestampCounter+0x2e>
  {
    /* Configure prescaler */
    MODIFY_REG(hfdcan->Instance->TSCC, FDCAN_TSCC_TCP, TimestampPrescaler);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	621a      	str	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e006      	b.n	8002f56 <HAL_FDCAN_ConfigTimestampCounter+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4c:	f043 0204 	orr.w	r2, r3, #4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_FDCAN_EnableTimestampCounter>:
  * @param  TimestampOperation Timestamp counter operation.
  *         This parameter can be a value of @arg FDCAN_Timestamp.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTimestampCounter(FDCAN_HandleTypeDef *hfdcan, uint32_t TimestampOperation)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TIMESTAMP(TimestampOperation));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d10b      	bne.n	8002f90 <HAL_FDCAN_EnableTimestampCounter+0x2e>
  {
    /* Enable timestamp counter */
    MODIFY_REG(hfdcan->Instance->TSCC, FDCAN_TSCC_TSS, TimestampOperation);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f023 0103 	bic.w	r1, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	621a      	str	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e006      	b.n	8002f9e <HAL_FDCAN_EnableTimestampCounter+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f94:	f043 0204 	orr.w	r2, r3, #4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_FDCAN_GetTimestampCounter>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Timestamp counter value
  */
uint16_t HAL_FDCAN_GetTimestampCounter(FDCAN_HandleTypeDef *hfdcan)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  return (uint16_t)(hfdcan->Instance->TSCV);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	b29b      	uxth	r3, r3
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d110      	bne.n	8002ffc <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e006      	b.n	800300a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003000:	f043 0204 	orr.w	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d156      	bne.n	80030dc <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699a      	ldr	r2, [r3, #24]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800303e:	e011      	b.n	8003064 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b0a      	cmp	r3, #10
 8003044:	d90b      	bls.n	800305e <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2203      	movs	r2, #3
 8003056:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e045      	b.n	80030ea <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3301      	adds	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0e6      	beq.n	8003040 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699a      	ldr	r2, [r3, #24]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0210 	bic.w	r2, r2, #16
 8003084:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003086:	e011      	b.n	80030ac <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b0a      	cmp	r3, #10
 800308c:	d90b      	bls.n	80030a6 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2203      	movs	r2, #3
 800309e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e021      	b.n	80030ea <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3301      	adds	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d0e6      	beq.n	8003088 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699a      	ldr	r2, [r3, #24]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0202 	orr.w	r2, r2, #2
 80030c8:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e006      	b.n	80030ea <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e0:	f043 0208 	orr.w	r2, r3, #8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d12c      	bne.n	8003168 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003122:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e023      	b.n	8003176 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003136:	0c1b      	lsrs	r3, r3, #16
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fbdf 	bl	8003908 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2101      	movs	r1, #1
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	fa01 f202 	lsl.w	r2, r1, r2
 8003156:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800315a:	2201      	movs	r2, #1
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	409a      	lsls	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e006      	b.n	8003176 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316c:	f043 0208 	orr.w	r2, r3, #8
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003180:	b480      	push	{r7}
 8003182:	b08b      	sub	sp, #44	; 0x2c
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003194:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003196:	7efb      	ldrb	r3, [r7, #27]
 8003198:	2b02      	cmp	r3, #2
 800319a:	f040 80bc 	bne.w	8003316 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b40      	cmp	r3, #64	; 0x40
 80031a2:	d121      	bne.n	80031e8 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0af      	b.n	8003324 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	440b      	add	r3, r1
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
 80031e6:	e020      	b.n	800322a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d107      	bne.n	8003208 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e08d      	b.n	8003324 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003210:	0a1b      	lsrs	r3, r3, #8
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	440b      	add	r3, r1
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d107      	bne.n	800324e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	0c9b      	lsrs	r3, r3, #18
 8003244:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e005      	b.n	800325a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	3304      	adds	r3, #4
 8003276:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b29a      	uxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	0e1b      	lsrs	r3, r3, #24
 80032ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	0fda      	lsrs	r2, r3, #31
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	3304      	adds	r3, #4
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	e00a      	b.n	80032e4 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	441a      	add	r2, r3
 80032d4:	6839      	ldr	r1, [r7, #0]
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	440b      	add	r3, r1
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	3301      	adds	r3, #1
 80032e2:	623b      	str	r3, [r7, #32]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	4a11      	ldr	r2, [pc, #68]	; (8003330 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80032ec:	5cd3      	ldrb	r3, [r2, r3]
 80032ee:	461a      	mov	r2, r3
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d3eb      	bcc.n	80032ce <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d105      	bne.n	8003308 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003306:	e004      	b.n	8003312 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e006      	b.n	8003324 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331a:	f043 0208 	orr.w	r2, r3, #8
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	372c      	adds	r7, #44	; 0x2c
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	08007028 	.word	0x08007028

08003334 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003346:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003348:	7dfb      	ldrb	r3, [r7, #23]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d003      	beq.n	8003356 <HAL_FDCAN_ActivateNotification+0x22>
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	2b02      	cmp	r3, #2
 8003352:	f040 80c8 	bne.w	80034e6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d03b      	beq.n	80033ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003378:	2b00      	cmp	r3, #0
 800337a:	d004      	beq.n	8003386 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d031      	beq.n	80033ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800338c:	2b00      	cmp	r3, #0
 800338e:	d004      	beq.n	800339a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d027      	beq.n	80033ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d004      	beq.n	80033ae <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01d      	beq.n	80033ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d013      	beq.n	80033ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00c      	beq.n	80033fa <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d13b      	bne.n	8003486 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d131      	bne.n	8003486 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003428:	2b00      	cmp	r3, #0
 800342a:	d004      	beq.n	8003436 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d127      	bne.n	8003486 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800343c:	2b00      	cmp	r3, #0
 800343e:	d004      	beq.n	800344a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d11d      	bne.n	8003486 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003450:	2b00      	cmp	r3, #0
 8003452:	d004      	beq.n	800345e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	d113      	bne.n	8003486 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003464:	2b00      	cmp	r3, #0
 8003466:	d004      	beq.n	8003472 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00c      	beq.n	8003496 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0202 	orr.w	r2, r2, #2
 8003494:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	430a      	orrs	r2, r1
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e006      	b.n	80034f4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351c:	4013      	ands	r3, r2
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	6a3a      	ldr	r2, [r7, #32]
 8003534:	4013      	ands	r3, r2
 8003536:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003542:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	4013      	ands	r3, r2
 800354e:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003556:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800355a:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003572:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4013      	ands	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00d      	beq.n	80035aa <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2240      	movs	r2, #64	; 0x40
 80035a2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f939 	bl	800381c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01b      	beq.n	80035f0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d014      	beq.n	80035f0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035ce:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80035e8:	6939      	ldr	r1, [r7, #16]
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f8f7 	bl	80037de <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80035fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f8b6 	bl	8003772 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003614:	6a39      	ldr	r1, [r7, #32]
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8b6 	bl	8003788 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800362a:	69f9      	ldr	r1, [r7, #28]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f8b6 	bl	800379e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00e      	beq.n	800365e <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003656:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f8ab 	bl	80037b4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01a      	beq.n	80036a2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	2b00      	cmp	r3, #0
 8003678:	d013      	beq.n	80036a2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003682:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4013      	ands	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2280      	movs	r2, #128	; 0x80
 8003698:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800369a:	68f9      	ldr	r1, [r7, #12]
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f893 	bl	80037c8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036c6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f893 	bl	80037f4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036f2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f887 	bl	8003808 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d011      	beq.n	800372c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800371e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003724:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800373a:	6979      	ldr	r1, [r7, #20]
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f881 	bl	8003844 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d009      	beq.n	800375c <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f863 	bl	8003830 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800376a:	bf00      	nop
 800376c:	3728      	adds	r7, #40	; 0x28
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003864:	4b27      	ldr	r3, [pc, #156]	; (8003904 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003866:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003876:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387e:	041a      	lsls	r2, r3, #16
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800389c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	061a      	lsls	r2, r3, #24
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e005      	b.n	80038ea <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3304      	adds	r3, #4
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d3f3      	bcc.n	80038de <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	4000a400 	.word	0x4000a400

08003908 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	; 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003926:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800392e:	4313      	orrs	r3, r2
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	e00a      	b.n	800394a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800393c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003942:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003948:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003954:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800395a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003960:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	440b      	add	r3, r1
 800397a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	3304      	adds	r3, #4
 8003986:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3304      	adds	r3, #4
 8003992:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e020      	b.n	80039dc <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	3303      	adds	r3, #3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	3302      	adds	r3, #2
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	440b      	add	r3, r1
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80039b2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3301      	adds	r3, #1
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	440b      	add	r3, r1
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80039c0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	440a      	add	r2, r1
 80039c8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80039ca:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	3304      	adds	r3, #4
 80039d4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3304      	adds	r3, #4
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	4a06      	ldr	r2, [pc, #24]	; (80039fc <FDCAN_CopyMessageToRAM+0xf4>)
 80039e4:	5cd3      	ldrb	r3, [r2, r3]
 80039e6:	461a      	mov	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d3d5      	bcc.n	800399a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80039ee:	bf00      	nop
 80039f0:	3724      	adds	r7, #36	; 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	08007028 	.word	0x08007028

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a0e:	e15a      	b.n	8003cc6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2101      	movs	r1, #1
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 814c 	beq.w	8003cc0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d00b      	beq.n	8003a48 <HAL_GPIO_Init+0x48>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d007      	beq.n	8003a48 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a3c:	2b11      	cmp	r3, #17
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b12      	cmp	r3, #18
 8003a46:	d130      	bne.n	8003aaa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a7e:	2201      	movs	r2, #1
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0201 	and.w	r2, r3, #1
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_Init+0xea>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b12      	cmp	r3, #18
 8003ae8:	d123      	bne.n	8003b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	08da      	lsrs	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3208      	adds	r2, #8
 8003af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	220f      	movs	r2, #15
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	08da      	lsrs	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3208      	adds	r2, #8
 8003b2c:	6939      	ldr	r1, [r7, #16]
 8003b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 0203 	and.w	r2, r3, #3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80a6 	beq.w	8003cc0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b74:	4b5b      	ldr	r3, [pc, #364]	; (8003ce4 <HAL_GPIO_Init+0x2e4>)
 8003b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b78:	4a5a      	ldr	r2, [pc, #360]	; (8003ce4 <HAL_GPIO_Init+0x2e4>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6613      	str	r3, [r2, #96]	; 0x60
 8003b80:	4b58      	ldr	r3, [pc, #352]	; (8003ce4 <HAL_GPIO_Init+0x2e4>)
 8003b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8c:	4a56      	ldr	r2, [pc, #344]	; (8003ce8 <HAL_GPIO_Init+0x2e8>)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	220f      	movs	r2, #15
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bb6:	d01f      	beq.n	8003bf8 <HAL_GPIO_Init+0x1f8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a4c      	ldr	r2, [pc, #304]	; (8003cec <HAL_GPIO_Init+0x2ec>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d019      	beq.n	8003bf4 <HAL_GPIO_Init+0x1f4>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a4b      	ldr	r2, [pc, #300]	; (8003cf0 <HAL_GPIO_Init+0x2f0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_GPIO_Init+0x1f0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a4a      	ldr	r2, [pc, #296]	; (8003cf4 <HAL_GPIO_Init+0x2f4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00d      	beq.n	8003bec <HAL_GPIO_Init+0x1ec>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a49      	ldr	r2, [pc, #292]	; (8003cf8 <HAL_GPIO_Init+0x2f8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <HAL_GPIO_Init+0x1e8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a48      	ldr	r2, [pc, #288]	; (8003cfc <HAL_GPIO_Init+0x2fc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_GPIO_Init+0x1e4>
 8003be0:	2305      	movs	r3, #5
 8003be2:	e00a      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003be4:	2306      	movs	r3, #6
 8003be6:	e008      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003be8:	2304      	movs	r3, #4
 8003bea:	e006      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003bec:	2303      	movs	r3, #3
 8003bee:	e004      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e002      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	f002 0203 	and.w	r2, r2, #3
 8003c00:	0092      	lsls	r2, r2, #2
 8003c02:	4093      	lsls	r3, r2
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c0a:	4937      	ldr	r1, [pc, #220]	; (8003ce8 <HAL_GPIO_Init+0x2e8>)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	3302      	adds	r3, #2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c18:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c3c:	4a30      	ldr	r2, [pc, #192]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c42:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c66:	4a26      	ldr	r2, [pc, #152]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c6c:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c90:	4a1b      	ldr	r2, [pc, #108]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c96:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cba:	4a11      	ldr	r2, [pc, #68]	; (8003d00 <HAL_GPIO_Init+0x300>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f47f ae9d 	bne.w	8003a10 <HAL_GPIO_Init+0x10>
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40010000 	.word	0x40010000
 8003cec:	48000400 	.word	0x48000400
 8003cf0:	48000800 	.word	0x48000800
 8003cf4:	48000c00 	.word	0x48000c00
 8003cf8:	48001000 	.word	0x48001000
 8003cfc:	48001400 	.word	0x48001400
 8003d00:	40010400 	.word	0x40010400

08003d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
 8003d10:	4613      	mov	r3, r2
 8003d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d14:	787b      	ldrb	r3, [r7, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d1a:	887a      	ldrh	r2, [r7, #2]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d20:	e002      	b.n	8003d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d141      	bne.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d42:	4b4b      	ldr	r3, [pc, #300]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	d131      	bne.n	8003db4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d50:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d56:	4a46      	ldr	r2, [pc, #280]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d60:	4b43      	ldr	r3, [pc, #268]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d68:	4a41      	ldr	r2, [pc, #260]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d70:	4b40      	ldr	r3, [pc, #256]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2232      	movs	r2, #50	; 0x32
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	4a3f      	ldr	r2, [pc, #252]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	0c9b      	lsrs	r3, r3, #18
 8003d82:	3301      	adds	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d86:	e002      	b.n	8003d8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8e:	4b38      	ldr	r3, [pc, #224]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d102      	bne.n	8003da2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f2      	bne.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003da2:	4b33      	ldr	r3, [pc, #204]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dae:	d158      	bne.n	8003e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e057      	b.n	8003e64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db4:	4b2e      	ldr	r3, [pc, #184]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dba:	4a2d      	ldr	r2, [pc, #180]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dc4:	e04d      	b.n	8003e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dcc:	d141      	bne.n	8003e52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dce:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dda:	d131      	bne.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ddc:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de2:	4a23      	ldr	r2, [pc, #140]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dec:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003df4:	4a1e      	ldr	r2, [pc, #120]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2232      	movs	r2, #50	; 0x32
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	0c9b      	lsrs	r3, r3, #18
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e12:	e002      	b.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d102      	bne.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f2      	bne.n	8003e14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3a:	d112      	bne.n	8003e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e011      	b.n	8003e64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e50:	e007      	b.n	8003e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e52:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e5a:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40007000 	.word	0x40007000
 8003e74:	20000000 	.word	0x20000000
 8003e78:	431bde83 	.word	0x431bde83

08003e7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e8a:	6093      	str	r3, [r2, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40007000 	.word	0x40007000

08003e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e308      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d075      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eba:	4ba3      	ldr	r3, [pc, #652]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec4:	4ba0      	ldr	r3, [pc, #640]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b0c      	cmp	r3, #12
 8003ed2:	d102      	bne.n	8003eda <HAL_RCC_OscConfig+0x3e>
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d002      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x44>
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d10b      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee0:	4b99      	ldr	r3, [pc, #612]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d05b      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x108>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d157      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e2e3      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f00:	d106      	bne.n	8003f10 <HAL_RCC_OscConfig+0x74>
 8003f02:	4b91      	ldr	r3, [pc, #580]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a90      	ldr	r2, [pc, #576]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e01d      	b.n	8003f4c <HAL_RCC_OscConfig+0xb0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x98>
 8003f1a:	4b8b      	ldr	r3, [pc, #556]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a8a      	ldr	r2, [pc, #552]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b88      	ldr	r3, [pc, #544]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a87      	ldr	r2, [pc, #540]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_OscConfig+0xb0>
 8003f34:	4b84      	ldr	r3, [pc, #528]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a83      	ldr	r2, [pc, #524]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4b81      	ldr	r3, [pc, #516]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a80      	ldr	r2, [pc, #512]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d013      	beq.n	8003f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fe fc62 	bl	800281c <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f5c:	f7fe fc5e 	bl	800281c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	; 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e2a8      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6e:	4b76      	ldr	r3, [pc, #472]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0xc0>
 8003f7a:	e014      	b.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fc4e 	bl	800281c <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fe fc4a 	bl	800281c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e294      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f96:	4b6c      	ldr	r3, [pc, #432]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0xe8>
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d075      	beq.n	800409e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb2:	4b65      	ldr	r3, [pc, #404]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fbc:	4b62      	ldr	r3, [pc, #392]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b0c      	cmp	r3, #12
 8003fca:	d102      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x136>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d002      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x13c>
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d11f      	bne.n	8004018 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd8:	4b5b      	ldr	r3, [pc, #364]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x154>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e267      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff0:	4b55      	ldr	r3, [pc, #340]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	061b      	lsls	r3, r3, #24
 8003ffe:	4952      	ldr	r1, [pc, #328]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	4313      	orrs	r3, r2
 8004002:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004004:	4b51      	ldr	r3, [pc, #324]	; (800414c <HAL_RCC_OscConfig+0x2b0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7fe fbbb 	bl	8002784 <HAL_InitTick>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d043      	beq.n	800409c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e253      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d023      	beq.n	8004068 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004020:	4b49      	ldr	r3, [pc, #292]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a48      	ldr	r2, [pc, #288]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fe fbf6 	bl	800281c <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004034:	f7fe fbf2 	bl	800281c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e23c      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004046:	4b40      	ldr	r3, [pc, #256]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004052:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	061b      	lsls	r3, r3, #24
 8004060:	4939      	ldr	r1, [pc, #228]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004062:	4313      	orrs	r3, r2
 8004064:	604b      	str	r3, [r1, #4]
 8004066:	e01a      	b.n	800409e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004068:	4b37      	ldr	r3, [pc, #220]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a36      	ldr	r2, [pc, #216]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 800406e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fe fbd2 	bl	800281c <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407c:	f7fe fbce 	bl	800281c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e218      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800408e:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x1e0>
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800409c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d03c      	beq.n	8004124 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01c      	beq.n	80040ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b2:	4b25      	ldr	r3, [pc, #148]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b8:	4a23      	ldr	r2, [pc, #140]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c2:	f7fe fbab 	bl	800281c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ca:	f7fe fba7 	bl	800281c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e1f1      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040dc:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 80040de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0ef      	beq.n	80040ca <HAL_RCC_OscConfig+0x22e>
 80040ea:	e01b      	b.n	8004124 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ec:	4b16      	ldr	r3, [pc, #88]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f2:	4a15      	ldr	r2, [pc, #84]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fe fb8e 	bl	800281c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004104:	f7fe fb8a 	bl	800281c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e1d4      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ef      	bne.n	8004104 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80ab 	beq.w	8004288 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004132:	2300      	movs	r3, #0
 8004134:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004136:	4b04      	ldr	r3, [pc, #16]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_RCC_OscConfig+0x2b4>
 8004142:	2301      	movs	r3, #1
 8004144:	e005      	b.n	8004152 <HAL_RCC_OscConfig+0x2b6>
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000
 800414c:	20000004 	.word	0x20000004
 8004150:	2300      	movs	r3, #0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00d      	beq.n	8004172 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	4baf      	ldr	r3, [pc, #700]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	4aae      	ldr	r2, [pc, #696]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004160:	6593      	str	r3, [r2, #88]	; 0x58
 8004162:	4bac      	ldr	r3, [pc, #688]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800416e:	2301      	movs	r3, #1
 8004170:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004172:	4ba9      	ldr	r3, [pc, #676]	; (8004418 <HAL_RCC_OscConfig+0x57c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d118      	bne.n	80041b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800417e:	4ba6      	ldr	r3, [pc, #664]	; (8004418 <HAL_RCC_OscConfig+0x57c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4aa5      	ldr	r2, [pc, #660]	; (8004418 <HAL_RCC_OscConfig+0x57c>)
 8004184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418a:	f7fe fb47 	bl	800281c <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004192:	f7fe fb43 	bl	800281c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e18d      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a4:	4b9c      	ldr	r3, [pc, #624]	; (8004418 <HAL_RCC_OscConfig+0x57c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d108      	bne.n	80041ca <HAL_RCC_OscConfig+0x32e>
 80041b8:	4b96      	ldr	r3, [pc, #600]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	4a95      	ldr	r2, [pc, #596]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c8:	e024      	b.n	8004214 <HAL_RCC_OscConfig+0x378>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	d110      	bne.n	80041f4 <HAL_RCC_OscConfig+0x358>
 80041d2:	4b90      	ldr	r3, [pc, #576]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d8:	4a8e      	ldr	r2, [pc, #568]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041da:	f043 0304 	orr.w	r3, r3, #4
 80041de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041e2:	4b8c      	ldr	r3, [pc, #560]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e8:	4a8a      	ldr	r2, [pc, #552]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041f2:	e00f      	b.n	8004214 <HAL_RCC_OscConfig+0x378>
 80041f4:	4b87      	ldr	r3, [pc, #540]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	4a86      	ldr	r2, [pc, #536]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041fc:	f023 0301 	bic.w	r3, r3, #1
 8004200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004204:	4b83      	ldr	r3, [pc, #524]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	4a82      	ldr	r2, [pc, #520]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800420c:	f023 0304 	bic.w	r3, r3, #4
 8004210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d016      	beq.n	800424a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fe fafe 	bl	800281c <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004222:	e00a      	b.n	800423a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004224:	f7fe fafa 	bl	800281c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e142      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423a:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ed      	beq.n	8004224 <HAL_RCC_OscConfig+0x388>
 8004248:	e015      	b.n	8004276 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424a:	f7fe fae7 	bl	800281c <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004250:	e00a      	b.n	8004268 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fe fae3 	bl	800281c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e12b      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004268:	4b6a      	ldr	r3, [pc, #424]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1ed      	bne.n	8004252 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004276:	7ffb      	ldrb	r3, [r7, #31]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d105      	bne.n	8004288 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427c:	4b65      	ldr	r3, [pc, #404]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	4a64      	ldr	r2, [pc, #400]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004286:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d03c      	beq.n	800430e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01c      	beq.n	80042d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800429c:	4b5d      	ldr	r3, [pc, #372]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800429e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a2:	4a5c      	ldr	r2, [pc, #368]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fe fab6 	bl	800281c <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b4:	f7fe fab2 	bl	800281c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0fc      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042c6:	4b53      	ldr	r3, [pc, #332]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80042c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ef      	beq.n	80042b4 <HAL_RCC_OscConfig+0x418>
 80042d4:	e01b      	b.n	800430e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042d6:	4b4f      	ldr	r3, [pc, #316]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80042d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042dc:	4a4d      	ldr	r2, [pc, #308]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80042de:	f023 0301 	bic.w	r3, r3, #1
 80042e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e6:	f7fe fa99 	bl	800281c <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ee:	f7fe fa95 	bl	800281c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e0df      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004300:	4b44      	ldr	r3, [pc, #272]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1ef      	bne.n	80042ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80d3 	beq.w	80044be <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004318:	4b3e      	ldr	r3, [pc, #248]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b0c      	cmp	r3, #12
 8004322:	f000 808d 	beq.w	8004440 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d15a      	bne.n	80043e4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432e:	4b39      	ldr	r3, [pc, #228]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a38      	ldr	r2, [pc, #224]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7fe fa6f 	bl	800281c <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004342:	f7fe fa6b 	bl	800281c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e0b5      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004354:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f0      	bne.n	8004342 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004360:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	4b2d      	ldr	r3, [pc, #180]	; (800441c <HAL_RCC_OscConfig+0x580>)
 8004366:	4013      	ands	r3, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6a11      	ldr	r1, [r2, #32]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004370:	3a01      	subs	r2, #1
 8004372:	0112      	lsls	r2, r2, #4
 8004374:	4311      	orrs	r1, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800437a:	0212      	lsls	r2, r2, #8
 800437c:	4311      	orrs	r1, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004382:	0852      	lsrs	r2, r2, #1
 8004384:	3a01      	subs	r2, #1
 8004386:	0552      	lsls	r2, r2, #21
 8004388:	4311      	orrs	r1, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800438e:	0852      	lsrs	r2, r2, #1
 8004390:	3a01      	subs	r2, #1
 8004392:	0652      	lsls	r2, r2, #25
 8004394:	4311      	orrs	r1, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800439a:	06d2      	lsls	r2, r2, #27
 800439c:	430a      	orrs	r2, r1
 800439e:	491d      	ldr	r1, [pc, #116]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b0:	4b18      	ldr	r3, [pc, #96]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a17      	ldr	r2, [pc, #92]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe fa2e 	bl	800281c <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fe fa2a 	bl	800281c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e074      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d6:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x528>
 80043e2:	e06c      	b.n	80044be <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043f0:	4b08      	ldr	r3, [pc, #32]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a07      	ldr	r2, [pc, #28]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a04      	ldr	r2, [pc, #16]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004402:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fe fa06 	bl	800281c <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004412:	e00e      	b.n	8004432 <HAL_RCC_OscConfig+0x596>
 8004414:	40021000 	.word	0x40021000
 8004418:	40007000 	.word	0x40007000
 800441c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004420:	f7fe f9fc 	bl	800281c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e046      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004432:	4b25      	ldr	r3, [pc, #148]	; (80044c8 <HAL_RCC_OscConfig+0x62c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x584>
 800443e:	e03e      	b.n	80044be <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e039      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800444c:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <HAL_RCC_OscConfig+0x62c>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f003 0203 	and.w	r2, r3, #3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	429a      	cmp	r2, r3
 800445e:	d12c      	bne.n	80044ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	3b01      	subs	r3, #1
 800446c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d123      	bne.n	80044ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d11b      	bne.n	80044ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d113      	bne.n	80044ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	3b01      	subs	r3, #1
 80044a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d109      	bne.n	80044ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b0:	085b      	lsrs	r3, r3, #1
 80044b2:	3b01      	subs	r3, #1
 80044b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d001      	beq.n	80044be <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3720      	adds	r7, #32
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40021000 	.word	0x40021000

080044cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e11e      	b.n	8004722 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e4:	4b91      	ldr	r3, [pc, #580]	; (800472c <HAL_RCC_ClockConfig+0x260>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d910      	bls.n	8004514 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f2:	4b8e      	ldr	r3, [pc, #568]	; (800472c <HAL_RCC_ClockConfig+0x260>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 020f 	bic.w	r2, r3, #15
 80044fa:	498c      	ldr	r1, [pc, #560]	; (800472c <HAL_RCC_ClockConfig+0x260>)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004502:	4b8a      	ldr	r3, [pc, #552]	; (800472c <HAL_RCC_ClockConfig+0x260>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e106      	b.n	8004722 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d073      	beq.n	8004608 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d129      	bne.n	800457c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004528:	4b81      	ldr	r3, [pc, #516]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0f4      	b.n	8004722 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004538:	f000 f99e 	bl	8004878 <RCC_GetSysClockFreqFromPLLSource>
 800453c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4a7c      	ldr	r2, [pc, #496]	; (8004734 <HAL_RCC_ClockConfig+0x268>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d93f      	bls.n	80045c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004546:	4b7a      	ldr	r3, [pc, #488]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800455a:	2b00      	cmp	r3, #0
 800455c:	d033      	beq.n	80045c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004562:	2b00      	cmp	r3, #0
 8004564:	d12f      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004566:	4b72      	ldr	r3, [pc, #456]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800456e:	4a70      	ldr	r2, [pc, #448]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 8004570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004574:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e024      	b.n	80045c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d107      	bne.n	8004594 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004584:	4b6a      	ldr	r3, [pc, #424]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0c6      	b.n	8004722 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004594:	4b66      	ldr	r3, [pc, #408]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0be      	b.n	8004722 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045a4:	f000 f8ce 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4a61      	ldr	r2, [pc, #388]	; (8004734 <HAL_RCC_ClockConfig+0x268>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d909      	bls.n	80045c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045b2:	4b5f      	ldr	r3, [pc, #380]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ba:	4a5d      	ldr	r2, [pc, #372]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 80045bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	4b5a      	ldr	r3, [pc, #360]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4957      	ldr	r1, [pc, #348]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d8:	f7fe f920 	bl	800281c <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7fe f91c 	bl	800281c <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e095      	b.n	8004722 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	4b4e      	ldr	r3, [pc, #312]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 020c 	and.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	429a      	cmp	r2, r3
 8004606:	d1eb      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d023      	beq.n	800465c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004620:	4b43      	ldr	r3, [pc, #268]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4a42      	ldr	r2, [pc, #264]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 8004626:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800462a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004638:	4b3d      	ldr	r3, [pc, #244]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004640:	4a3b      	ldr	r2, [pc, #236]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 8004642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004646:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004648:	4b39      	ldr	r3, [pc, #228]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4936      	ldr	r1, [pc, #216]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
 800465a:	e008      	b.n	800466e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2b80      	cmp	r3, #128	; 0x80
 8004660:	d105      	bne.n	800466e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004662:	4b33      	ldr	r3, [pc, #204]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4a32      	ldr	r2, [pc, #200]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 8004668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800466c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800466e:	4b2f      	ldr	r3, [pc, #188]	; (800472c <HAL_RCC_ClockConfig+0x260>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d21d      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467c:	4b2b      	ldr	r3, [pc, #172]	; (800472c <HAL_RCC_ClockConfig+0x260>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f023 020f 	bic.w	r2, r3, #15
 8004684:	4929      	ldr	r1, [pc, #164]	; (800472c <HAL_RCC_ClockConfig+0x260>)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	4313      	orrs	r3, r2
 800468a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800468c:	f7fe f8c6 	bl	800281c <HAL_GetTick>
 8004690:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	e00a      	b.n	80046aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004694:	f7fe f8c2 	bl	800281c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e03b      	b.n	8004722 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046aa:	4b20      	ldr	r3, [pc, #128]	; (800472c <HAL_RCC_ClockConfig+0x260>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d1ed      	bne.n	8004694 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c4:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4917      	ldr	r1, [pc, #92]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e2:	4b13      	ldr	r3, [pc, #76]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	490f      	ldr	r1, [pc, #60]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046f6:	f000 f825 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 80046fa:	4601      	mov	r1, r0
 80046fc:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <HAL_RCC_ClockConfig+0x264>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	4a0c      	ldr	r2, [pc, #48]	; (8004738 <HAL_RCC_ClockConfig+0x26c>)
 8004708:	5cd3      	ldrb	r3, [r2, r3]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	fa21 f303 	lsr.w	r3, r1, r3
 8004712:	4a0a      	ldr	r2, [pc, #40]	; (800473c <HAL_RCC_ClockConfig+0x270>)
 8004714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_RCC_ClockConfig+0x274>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe f832 	bl	8002784 <HAL_InitTick>
 8004720:	4603      	mov	r3, r0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40022000 	.word	0x40022000
 8004730:	40021000 	.word	0x40021000
 8004734:	04c4b400 	.word	0x04c4b400
 8004738:	08007010 	.word	0x08007010
 800473c:	20000000 	.word	0x20000000
 8004740:	20000004 	.word	0x20000004

08004744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800474a:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b04      	cmp	r3, #4
 8004754:	d102      	bne.n	800475c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004756:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	e047      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800475c:	4b27      	ldr	r3, [pc, #156]	; (80047fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 030c 	and.w	r3, r3, #12
 8004764:	2b08      	cmp	r3, #8
 8004766:	d102      	bne.n	800476e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004768:	4b26      	ldr	r3, [pc, #152]	; (8004804 <HAL_RCC_GetSysClockFreq+0xc0>)
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	e03e      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800476e:	4b23      	ldr	r3, [pc, #140]	; (80047fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b0c      	cmp	r3, #12
 8004778:	d136      	bne.n	80047e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800477a:	4b20      	ldr	r3, [pc, #128]	; (80047fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004784:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	3301      	adds	r3, #1
 8004790:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b03      	cmp	r3, #3
 8004796:	d10c      	bne.n	80047b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004798:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <HAL_RCC_GetSysClockFreq+0xc0>)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	4a16      	ldr	r2, [pc, #88]	; (80047fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80047a2:	68d2      	ldr	r2, [r2, #12]
 80047a4:	0a12      	lsrs	r2, r2, #8
 80047a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	617b      	str	r3, [r7, #20]
      break;
 80047b0:	e00c      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047b2:	4a13      	ldr	r2, [pc, #76]	; (8004800 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	4a10      	ldr	r2, [pc, #64]	; (80047fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80047bc:	68d2      	ldr	r2, [r2, #12]
 80047be:	0a12      	lsrs	r2, r2, #8
 80047c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047c4:	fb02 f303 	mul.w	r3, r2, r3
 80047c8:	617b      	str	r3, [r7, #20]
      break;
 80047ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	0e5b      	lsrs	r3, r3, #25
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	3301      	adds	r3, #1
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	e001      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047ec:	693b      	ldr	r3, [r7, #16]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40021000 	.word	0x40021000
 8004800:	00f42400 	.word	0x00f42400
 8004804:	007a1200 	.word	0x007a1200

08004808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800480c:	4b03      	ldr	r3, [pc, #12]	; (800481c <HAL_RCC_GetHCLKFreq+0x14>)
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000000 	.word	0x20000000

08004820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004824:	f7ff fff0 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004828:	4601      	mov	r1, r0
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0a1b      	lsrs	r3, r3, #8
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4a04      	ldr	r2, [pc, #16]	; (8004848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004836:	5cd3      	ldrb	r3, [r2, r3]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40021000 	.word	0x40021000
 8004848:	08007020 	.word	0x08007020

0800484c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004850:	f7ff ffda 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004854:	4601      	mov	r1, r0
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0adb      	lsrs	r3, r3, #11
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4a04      	ldr	r2, [pc, #16]	; (8004874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004862:	5cd3      	ldrb	r3, [r2, r3]
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	fa21 f303 	lsr.w	r3, r1, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000
 8004874:	08007020 	.word	0x08007020

08004878 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800487e:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004888:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b03      	cmp	r3, #3
 800489a:	d10c      	bne.n	80048b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800489c:	4a17      	ldr	r2, [pc, #92]	; (80048fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048a6:	68d2      	ldr	r2, [r2, #12]
 80048a8:	0a12      	lsrs	r2, r2, #8
 80048aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	617b      	str	r3, [r7, #20]
    break;
 80048b4:	e00c      	b.n	80048d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048b6:	4a12      	ldr	r2, [pc, #72]	; (8004900 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80048be:	4a0e      	ldr	r2, [pc, #56]	; (80048f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048c0:	68d2      	ldr	r2, [r2, #12]
 80048c2:	0a12      	lsrs	r2, r2, #8
 80048c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]
    break;
 80048ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	0e5b      	lsrs	r3, r3, #25
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	3301      	adds	r3, #1
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048ea:	687b      	ldr	r3, [r7, #4]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	40021000 	.word	0x40021000
 80048fc:	007a1200 	.word	0x007a1200
 8004900:	00f42400 	.word	0x00f42400

08004904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800490c:	2300      	movs	r3, #0
 800490e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004910:	2300      	movs	r3, #0
 8004912:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8098 	beq.w	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004922:	2300      	movs	r3, #0
 8004924:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004926:	4b43      	ldr	r3, [pc, #268]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10d      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004932:	4b40      	ldr	r3, [pc, #256]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004936:	4a3f      	ldr	r2, [pc, #252]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493c:	6593      	str	r3, [r2, #88]	; 0x58
 800493e:	4b3d      	ldr	r3, [pc, #244]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494a:	2301      	movs	r3, #1
 800494c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800494e:	4b3a      	ldr	r3, [pc, #232]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a39      	ldr	r2, [pc, #228]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004958:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800495a:	f7fd ff5f 	bl	800281c <HAL_GetTick>
 800495e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004960:	e009      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004962:	f7fd ff5b 	bl	800281c <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d902      	bls.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	74fb      	strb	r3, [r7, #19]
        break;
 8004974:	e005      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004976:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0ef      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004982:	7cfb      	ldrb	r3, [r7, #19]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d159      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004988:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01e      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d019      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049a4:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049b0:	4b20      	ldr	r3, [pc, #128]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049c0:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049d0:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e2:	f7fd ff1b 	bl	800281c <HAL_GetTick>
 80049e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e8:	e00b      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ea:	f7fd ff17 	bl	800281c <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d902      	bls.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004a00:	e006      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0ec      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10b      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a16:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	4903      	ldr	r1, [pc, #12]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a2c:	e008      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a2e:	7cfb      	ldrb	r3, [r7, #19]
 8004a30:	74bb      	strb	r3, [r7, #18]
 8004a32:	e005      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a34:	40021000 	.word	0x40021000
 8004a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3c:	7cfb      	ldrb	r3, [r7, #19]
 8004a3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a40:	7c7b      	ldrb	r3, [r7, #17]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d105      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a46:	4ba6      	ldr	r3, [pc, #664]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4a:	4aa5      	ldr	r2, [pc, #660]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a5e:	4ba0      	ldr	r3, [pc, #640]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a64:	f023 0203 	bic.w	r2, r3, #3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	499c      	ldr	r1, [pc, #624]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a80:	4b97      	ldr	r3, [pc, #604]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f023 020c 	bic.w	r2, r3, #12
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	4994      	ldr	r1, [pc, #592]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aa2:	4b8f      	ldr	r3, [pc, #572]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	498b      	ldr	r1, [pc, #556]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ac4:	4b86      	ldr	r3, [pc, #536]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	4983      	ldr	r1, [pc, #524]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ae6:	4b7e      	ldr	r3, [pc, #504]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	497a      	ldr	r1, [pc, #488]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b08:	4b75      	ldr	r3, [pc, #468]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	4972      	ldr	r1, [pc, #456]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b2a:	4b6d      	ldr	r3, [pc, #436]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	4969      	ldr	r1, [pc, #420]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b4c:	4b64      	ldr	r3, [pc, #400]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	4961      	ldr	r1, [pc, #388]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b6e:	4b5c      	ldr	r3, [pc, #368]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	4958      	ldr	r1, [pc, #352]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d015      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b90:	4b53      	ldr	r3, [pc, #332]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	4950      	ldr	r1, [pc, #320]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bae:	d105      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb0:	4b4b      	ldr	r3, [pc, #300]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a4a      	ldr	r2, [pc, #296]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d015      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bc8:	4b45      	ldr	r3, [pc, #276]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	4942      	ldr	r1, [pc, #264]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be6:	d105      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004be8:	4b3d      	ldr	r3, [pc, #244]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4a3c      	ldr	r2, [pc, #240]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d015      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c00:	4b37      	ldr	r3, [pc, #220]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	4934      	ldr	r1, [pc, #208]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c1e:	d105      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c20:	4b2f      	ldr	r3, [pc, #188]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a2e      	ldr	r2, [pc, #184]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d015      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c38:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c46:	4926      	ldr	r1, [pc, #152]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c56:	d105      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c58:	4b21      	ldr	r3, [pc, #132]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4a20      	ldr	r2, [pc, #128]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d015      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c70:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	4918      	ldr	r1, [pc, #96]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c8e:	d105      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c90:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d015      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	490a      	ldr	r1, [pc, #40]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40021000 	.word	0x40021000

08004ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e049      	b.n	8004d8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc f860 	bl	8000dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f000 fb24 	bl	8005370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d001      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e04a      	b.n	8004e42 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a21      	ldr	r2, [pc, #132]	; (8004e50 <HAL_TIM_Base_Start_IT+0xbc>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d018      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x6c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd6:	d013      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x6c>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1d      	ldr	r2, [pc, #116]	; (8004e54 <HAL_TIM_Base_Start_IT+0xc0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00e      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x6c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <HAL_TIM_Base_Start_IT+0xc4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d009      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x6c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <HAL_TIM_Base_Start_IT+0xc8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x6c>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d115      	bne.n	8004e2c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	4b17      	ldr	r3, [pc, #92]	; (8004e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b06      	cmp	r3, #6
 8004e10:	d015      	beq.n	8004e3e <HAL_TIM_Base_Start_IT+0xaa>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e18:	d011      	beq.n	8004e3e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0201 	orr.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2a:	e008      	b.n	8004e3e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e000      	b.n	8004e40 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40013400 	.word	0x40013400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	00010007 	.word	0x00010007

08004e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d122      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d11b      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0202 	mvn.w	r2, #2
 8004e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa42 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8004eb0:	e005      	b.n	8004ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fa34 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fa45 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d122      	bne.n	8004f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d11b      	bne.n	8004f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0204 	mvn.w	r2, #4
 8004ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fa18 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8004f04:	e005      	b.n	8004f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fa0a 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 fa1b 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d122      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d11b      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0208 	mvn.w	r2, #8
 8004f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2204      	movs	r2, #4
 8004f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f9ee 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f9e0 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f9f1 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b10      	cmp	r3, #16
 8004f78:	d122      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d11b      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0210 	mvn.w	r2, #16
 8004f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2208      	movs	r2, #8
 8004f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f9c4 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8004fac:	e005      	b.n	8004fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f9b6 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f9c7 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10e      	bne.n	8004fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d107      	bne.n	8004fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0201 	mvn.w	r2, #1
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f990 	bl	800530c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	d10e      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005004:	2b80      	cmp	r3, #128	; 0x80
 8005006:	d107      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fb64 	bl	80056e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005026:	d10e      	bne.n	8005046 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005032:	2b80      	cmp	r3, #128	; 0x80
 8005034:	d107      	bne.n	8005046 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800503e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fb57 	bl	80056f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d10e      	bne.n	8005072 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d107      	bne.n	8005072 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f975 	bl	800535c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b20      	cmp	r3, #32
 800507e:	d10e      	bne.n	800509e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b20      	cmp	r3, #32
 800508c:	d107      	bne.n	800509e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f06f 0220 	mvn.w	r2, #32
 8005096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fb17 	bl	80056cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ac:	d10f      	bne.n	80050ce <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050bc:	d107      	bne.n	80050ce <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80050c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fb1d 	bl	8005708 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050dc:	d10f      	bne.n	80050fe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ec:	d107      	bne.n	80050fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80050f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fb0f 	bl	800571c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800510c:	d10f      	bne.n	800512e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800511c:	d107      	bne.n	800512e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fb01 	bl	8005730 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800513c:	d10f      	bne.n	800515e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005148:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800514c:	d107      	bne.n	800515e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 faf3 	bl	8005744 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_TIM_ConfigClockSource+0x18>
 800517c:	2302      	movs	r3, #2
 800517e:	e0b9      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x18c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800519e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b70      	cmp	r3, #112	; 0x70
 80051ba:	d02e      	beq.n	800521a <HAL_TIM_ConfigClockSource+0xb2>
 80051bc:	2b70      	cmp	r3, #112	; 0x70
 80051be:	d812      	bhi.n	80051e6 <HAL_TIM_ConfigClockSource+0x7e>
 80051c0:	2b30      	cmp	r3, #48	; 0x30
 80051c2:	f000 8084 	beq.w	80052ce <HAL_TIM_ConfigClockSource+0x166>
 80051c6:	2b30      	cmp	r3, #48	; 0x30
 80051c8:	d806      	bhi.n	80051d8 <HAL_TIM_ConfigClockSource+0x70>
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d07f      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x166>
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d07d      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x166>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d07b      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80051d6:	e084      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80051d8:	2b50      	cmp	r3, #80	; 0x50
 80051da:	d048      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x106>
 80051dc:	2b60      	cmp	r3, #96	; 0x60
 80051de:	d056      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x126>
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d064      	beq.n	80052ae <HAL_TIM_ConfigClockSource+0x146>
      break;
 80051e4:	e07d      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80051e6:	4a45      	ldr	r2, [pc, #276]	; (80052fc <HAL_TIM_ConfigClockSource+0x194>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d070      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x166>
 80051ec:	4a43      	ldr	r2, [pc, #268]	; (80052fc <HAL_TIM_ConfigClockSource+0x194>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d809      	bhi.n	8005206 <HAL_TIM_ConfigClockSource+0x9e>
 80051f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f6:	d027      	beq.n	8005248 <HAL_TIM_ConfigClockSource+0xe0>
 80051f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80051fc:	d067      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x166>
 80051fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005202:	d06d      	beq.n	80052e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005204:	e06d      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8005206:	4a3e      	ldr	r2, [pc, #248]	; (8005300 <HAL_TIM_ConfigClockSource+0x198>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d060      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x166>
 800520c:	4a3d      	ldr	r2, [pc, #244]	; (8005304 <HAL_TIM_ConfigClockSource+0x19c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d05d      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x166>
 8005212:	4a3d      	ldr	r2, [pc, #244]	; (8005308 <HAL_TIM_ConfigClockSource+0x1a0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d05a      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x166>
      break;
 8005218:	e063      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6899      	ldr	r1, [r3, #8]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f000 f9ad 	bl	8005588 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800523c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	609a      	str	r2, [r3, #8]
      break;
 8005246:	e04c      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6899      	ldr	r1, [r3, #8]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f000 f996 	bl	8005588 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800526a:	609a      	str	r2, [r3, #8]
      break;
 800526c:	e039      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6859      	ldr	r1, [r3, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	461a      	mov	r2, r3
 800527c:	f000 f908 	bl	8005490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2150      	movs	r1, #80	; 0x50
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f961 	bl	800554e <TIM_ITRx_SetConfig>
      break;
 800528c:	e029      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6859      	ldr	r1, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	461a      	mov	r2, r3
 800529c:	f000 f927 	bl	80054ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2160      	movs	r1, #96	; 0x60
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f951 	bl	800554e <TIM_ITRx_SetConfig>
      break;
 80052ac:	e019      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f000 f8e8 	bl	8005490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2140      	movs	r1, #64	; 0x40
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f941 	bl	800554e <TIM_ITRx_SetConfig>
      break;
 80052cc:	e009      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f000 f938 	bl	800554e <TIM_ITRx_SetConfig>
        break;
 80052de:	e000      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80052e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	00100020 	.word	0x00100020
 8005300:	00100040 	.word	0x00100040
 8005304:	00100070 	.word	0x00100070
 8005308:	00100030 	.word	0x00100030

0800530c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a3c      	ldr	r2, [pc, #240]	; (8005474 <TIM_Base_SetConfig+0x104>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00f      	beq.n	80053a8 <TIM_Base_SetConfig+0x38>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538e:	d00b      	beq.n	80053a8 <TIM_Base_SetConfig+0x38>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a39      	ldr	r2, [pc, #228]	; (8005478 <TIM_Base_SetConfig+0x108>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d007      	beq.n	80053a8 <TIM_Base_SetConfig+0x38>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a38      	ldr	r2, [pc, #224]	; (800547c <TIM_Base_SetConfig+0x10c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_Base_SetConfig+0x38>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a37      	ldr	r2, [pc, #220]	; (8005480 <TIM_Base_SetConfig+0x110>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d108      	bne.n	80053ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2d      	ldr	r2, [pc, #180]	; (8005474 <TIM_Base_SetConfig+0x104>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01b      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c8:	d017      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2a      	ldr	r2, [pc, #168]	; (8005478 <TIM_Base_SetConfig+0x108>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a29      	ldr	r2, [pc, #164]	; (800547c <TIM_Base_SetConfig+0x10c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00f      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a28      	ldr	r2, [pc, #160]	; (8005480 <TIM_Base_SetConfig+0x110>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00b      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a27      	ldr	r2, [pc, #156]	; (8005484 <TIM_Base_SetConfig+0x114>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d007      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a26      	ldr	r2, [pc, #152]	; (8005488 <TIM_Base_SetConfig+0x118>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d003      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a25      	ldr	r2, [pc, #148]	; (800548c <TIM_Base_SetConfig+0x11c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d108      	bne.n	800540c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a10      	ldr	r2, [pc, #64]	; (8005474 <TIM_Base_SetConfig+0x104>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00f      	beq.n	8005458 <TIM_Base_SetConfig+0xe8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a11      	ldr	r2, [pc, #68]	; (8005480 <TIM_Base_SetConfig+0x110>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00b      	beq.n	8005458 <TIM_Base_SetConfig+0xe8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a10      	ldr	r2, [pc, #64]	; (8005484 <TIM_Base_SetConfig+0x114>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d007      	beq.n	8005458 <TIM_Base_SetConfig+0xe8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a0f      	ldr	r2, [pc, #60]	; (8005488 <TIM_Base_SetConfig+0x118>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_Base_SetConfig+0xe8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a0e      	ldr	r2, [pc, #56]	; (800548c <TIM_Base_SetConfig+0x11c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d103      	bne.n	8005460 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	615a      	str	r2, [r3, #20]
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40012c00 	.word	0x40012c00
 8005478:	40000400 	.word	0x40000400
 800547c:	40000800 	.word	0x40000800
 8005480:	40013400 	.word	0x40013400
 8005484:	40014000 	.word	0x40014000
 8005488:	40014400 	.word	0x40014400
 800548c:	40014800 	.word	0x40014800

08005490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f023 0201 	bic.w	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f023 030a 	bic.w	r3, r3, #10
 80054cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b087      	sub	sp, #28
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f023 0210 	bic.w	r2, r3, #16
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	031b      	lsls	r3, r3, #12
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800552a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	f043 0307 	orr.w	r3, r3, #7
 8005574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	609a      	str	r2, [r3, #8]
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	021a      	lsls	r2, r3, #8
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	609a      	str	r2, [r3, #8]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055dc:	2302      	movs	r3, #2
 80055de:	e065      	b.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2c      	ldr	r2, [pc, #176]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d004      	beq.n	8005614 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a2b      	ldr	r2, [pc, #172]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d108      	bne.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800561a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800562c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1b      	ldr	r2, [pc, #108]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d018      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005656:	d013      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00e      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d009      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a12      	ldr	r2, [pc, #72]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d10c      	bne.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40013400 	.word	0x40013400
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40014000 	.word	0x40014000

080056cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e042      	b.n	80057f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005770:	2b00      	cmp	r3, #0
 8005772:	d106      	bne.n	8005782 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7fb fb67 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2224      	movs	r2, #36	; 0x24
 8005786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fb38 	bl	8005e10 <UART_SetConfig>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e022      	b.n	80057f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fdd4 	bl	8006360 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fe5b 	bl	80064a4 <UART_CheckIdleState>
 80057ee:	4603      	mov	r3, r0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	4613      	mov	r3, r2
 8005806:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800580e:	2b20      	cmp	r3, #32
 8005810:	f040 8083 	bne.w	800591a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_UART_Transmit+0x28>
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e07b      	b.n	800591c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_UART_Transmit+0x3a>
 800582e:	2302      	movs	r3, #2
 8005830:	e074      	b.n	800591c <HAL_UART_Transmit+0x124>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2221      	movs	r2, #33	; 0x21
 8005846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800584a:	f7fc ffe7 	bl	800281c <HAL_GetTick>
 800584e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005868:	d108      	bne.n	800587c <HAL_UART_Transmit+0x84>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d104      	bne.n	800587c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	e003      	b.n	8005884 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005880:	2300      	movs	r3, #0
 8005882:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800588c:	e02c      	b.n	80058e8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2200      	movs	r2, #0
 8005896:	2180      	movs	r1, #128	; 0x80
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fe4b 	bl	8006534 <UART_WaitOnFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e039      	b.n	800591c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10b      	bne.n	80058c6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	3302      	adds	r3, #2
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	e007      	b.n	80058d6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	781a      	ldrb	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	3301      	adds	r3, #1
 80058d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1cc      	bne.n	800588e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2200      	movs	r2, #0
 80058fc:	2140      	movs	r1, #64	; 0x40
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fe18 	bl	8006534 <UART_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e006      	b.n	800591c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e000      	b.n	800591c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
  }
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	4613      	mov	r3, r2
 8005930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005938:	2b20      	cmp	r3, #32
 800593a:	f040 80bc 	bne.w	8005ab6 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_UART_Receive_IT+0x26>
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e0b4      	b.n	8005ab8 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_UART_Receive_IT+0x38>
 8005958:	2302      	movs	r3, #2
 800595a:	e0ad      	b.n	8005ab8 <HAL_UART_Receive_IT+0x194>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	88fa      	ldrh	r2, [r7, #6]
 8005976:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005988:	d10e      	bne.n	80059a8 <HAL_UART_Receive_IT+0x84>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d105      	bne.n	800599e <HAL_UART_Receive_IT+0x7a>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005998:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800599c:	e02d      	b.n	80059fa <HAL_UART_Receive_IT+0xd6>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	22ff      	movs	r2, #255	; 0xff
 80059a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059a6:	e028      	b.n	80059fa <HAL_UART_Receive_IT+0xd6>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10d      	bne.n	80059cc <HAL_UART_Receive_IT+0xa8>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d104      	bne.n	80059c2 <HAL_UART_Receive_IT+0x9e>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	22ff      	movs	r2, #255	; 0xff
 80059bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059c0:	e01b      	b.n	80059fa <HAL_UART_Receive_IT+0xd6>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	227f      	movs	r2, #127	; 0x7f
 80059c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059ca:	e016      	b.n	80059fa <HAL_UART_Receive_IT+0xd6>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059d4:	d10d      	bne.n	80059f2 <HAL_UART_Receive_IT+0xce>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d104      	bne.n	80059e8 <HAL_UART_Receive_IT+0xc4>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	227f      	movs	r2, #127	; 0x7f
 80059e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059e6:	e008      	b.n	80059fa <HAL_UART_Receive_IT+0xd6>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	223f      	movs	r2, #63	; 0x3f
 80059ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059f0:	e003      	b.n	80059fa <HAL_UART_Receive_IT+0xd6>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2222      	movs	r2, #34	; 0x22
 8005a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0201 	orr.w	r2, r2, #1
 8005a18:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a22:	d12a      	bne.n	8005a7a <HAL_UART_Receive_IT+0x156>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a2a:	88fa      	ldrh	r2, [r7, #6]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d324      	bcc.n	8005a7a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a38:	d107      	bne.n	8005a4a <HAL_UART_Receive_IT+0x126>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <HAL_UART_Receive_IT+0x1a0>)
 8005a46:	66da      	str	r2, [r3, #108]	; 0x6c
 8005a48:	e002      	b.n	8005a50 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a1e      	ldr	r2, [pc, #120]	; (8005ac8 <HAL_UART_Receive_IT+0x1a4>)
 8005a4e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a66:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	e01b      	b.n	8005ab2 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a82:	d107      	bne.n	8005a94 <HAL_UART_Receive_IT+0x170>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4a0f      	ldr	r2, [pc, #60]	; (8005acc <HAL_UART_Receive_IT+0x1a8>)
 8005a90:	66da      	str	r2, [r3, #108]	; 0x6c
 8005a92:	e002      	b.n	8005a9a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4a0e      	ldr	r2, [pc, #56]	; (8005ad0 <HAL_UART_Receive_IT+0x1ac>)
 8005a98:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005ab0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e000      	b.n	8005ab8 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
  }
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	08006939 	.word	0x08006939
 8005ac8:	08006831 	.word	0x08006831
 8005acc:	08006785 	.word	0x08006785
 8005ad0:	080066db 	.word	0x080066db

08005ad4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005afa:	4013      	ands	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d118      	bne.n	8005b36 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d013      	beq.n	8005b36 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8145 	beq.w	8005db6 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	4798      	blx	r3
      }
      return;
 8005b34:	e13f      	b.n	8005db6 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80e8 	beq.w	8005d0e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4ba1      	ldr	r3, [pc, #644]	; (8005dc8 <HAL_UART_IRQHandler+0x2f4>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d105      	bne.n	8005b54 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	4ba0      	ldr	r3, [pc, #640]	; (8005dcc <HAL_UART_IRQHandler+0x2f8>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 80dd 	beq.w	8005d0e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d010      	beq.n	8005b80 <HAL_UART_IRQHandler+0xac>
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00b      	beq.n	8005b80 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f043 0201 	orr.w	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d010      	beq.n	8005bac <HAL_UART_IRQHandler+0xd8>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	f043 0204 	orr.w	r2, r3, #4
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d010      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x104>
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	f043 0202 	orr.w	r2, r3, #2
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d015      	beq.n	8005c0e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4b76      	ldr	r3, [pc, #472]	; (8005dc8 <HAL_UART_IRQHandler+0x2f4>)
 8005bf0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2208      	movs	r2, #8
 8005bfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c04:	f043 0208 	orr.w	r2, r3, #8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d011      	beq.n	8005c3c <HAL_UART_IRQHandler+0x168>
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00c      	beq.n	8005c3c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	f043 0220 	orr.w	r2, r3, #32
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 80b9 	beq.w	8005dba <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d011      	beq.n	8005c76 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	d004      	beq.n	8005c96 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d031      	beq.n	8005cfa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fccc 	bl	8006634 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca6:	2b40      	cmp	r3, #64	; 0x40
 8005ca8:	d123      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d013      	beq.n	8005cea <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc6:	4a42      	ldr	r2, [pc, #264]	; (8005dd0 <HAL_UART_IRQHandler+0x2fc>)
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fc fed7 	bl	8002a82 <HAL_DMA_Abort_IT>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d017      	beq.n	8005d0a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	e00f      	b.n	8005d0a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f886 	bl	8005dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf0:	e00b      	b.n	8005d0a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f882 	bl	8005dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf8:	e007      	b.n	8005d0a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f87e 	bl	8005dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005d08:	e057      	b.n	8005dba <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0a:	bf00      	nop
    return;
 8005d0c:	e055      	b.n	8005dba <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00d      	beq.n	8005d34 <HAL_UART_IRQHandler+0x260>
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d008      	beq.n	8005d34 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fe87 	bl	8006a40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d32:	e045      	b.n	8005dc0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d012      	beq.n	8005d64 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d104      	bne.n	8005d52 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d031      	beq.n	8005dbe <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
    }
    return;
 8005d62:	e02c      	b.n	8005dbe <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_UART_IRQHandler+0x2ac>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fc94 	bl	80066a6 <UART_EndTransmit_IT>
    return;
 8005d7e:	e01f      	b.n	8005dc0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d008      	beq.n	8005d9c <HAL_UART_IRQHandler+0x2c8>
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fe67 	bl	8006a68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d9a:	e011      	b.n	8005dc0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00c      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x2ec>
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da09      	bge.n	8005dc0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fe51 	bl	8006a54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005db2:	bf00      	nop
 8005db4:	e004      	b.n	8005dc0 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005dbe:	bf00      	nop
  }
}
 8005dc0:	3720      	adds	r7, #32
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	10000001 	.word	0x10000001
 8005dcc:	04000120 	.word	0x04000120
 8005dd0:	0800667b 	.word	0x0800667b

08005dd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005e14:	b088      	sub	sp, #32
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4bb0      	ldr	r3, [pc, #704]	; (8006108 <UART_SetConfig+0x2f8>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	69f9      	ldr	r1, [r7, #28]
 8005e50:	430b      	orrs	r3, r1
 8005e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4aa5      	ldr	r2, [pc, #660]	; (800610c <UART_SetConfig+0x2fc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005e8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	69f9      	ldr	r1, [r7, #28]
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	f023 010f 	bic.w	r1, r3, #15
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a96      	ldr	r2, [pc, #600]	; (8006110 <UART_SetConfig+0x300>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d121      	bne.n	8005f00 <UART_SetConfig+0xf0>
 8005ebc:	4b95      	ldr	r3, [pc, #596]	; (8006114 <UART_SetConfig+0x304>)
 8005ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d816      	bhi.n	8005ef8 <UART_SetConfig+0xe8>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0xc0>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ee1 	.word	0x08005ee1
 8005ed4:	08005eed 	.word	0x08005eed
 8005ed8:	08005ee7 	.word	0x08005ee7
 8005edc:	08005ef3 	.word	0x08005ef3
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	76fb      	strb	r3, [r7, #27]
 8005ee4:	e0be      	b.n	8006064 <UART_SetConfig+0x254>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	76fb      	strb	r3, [r7, #27]
 8005eea:	e0bb      	b.n	8006064 <UART_SetConfig+0x254>
 8005eec:	2304      	movs	r3, #4
 8005eee:	76fb      	strb	r3, [r7, #27]
 8005ef0:	e0b8      	b.n	8006064 <UART_SetConfig+0x254>
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	76fb      	strb	r3, [r7, #27]
 8005ef6:	e0b5      	b.n	8006064 <UART_SetConfig+0x254>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	76fb      	strb	r3, [r7, #27]
 8005efc:	bf00      	nop
 8005efe:	e0b1      	b.n	8006064 <UART_SetConfig+0x254>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a84      	ldr	r2, [pc, #528]	; (8006118 <UART_SetConfig+0x308>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d134      	bne.n	8005f74 <UART_SetConfig+0x164>
 8005f0a:	4b82      	ldr	r3, [pc, #520]	; (8006114 <UART_SetConfig+0x304>)
 8005f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f10:	f003 030c 	and.w	r3, r3, #12
 8005f14:	2b0c      	cmp	r3, #12
 8005f16:	d829      	bhi.n	8005f6c <UART_SetConfig+0x15c>
 8005f18:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <UART_SetConfig+0x110>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f55 	.word	0x08005f55
 8005f24:	08005f6d 	.word	0x08005f6d
 8005f28:	08005f6d 	.word	0x08005f6d
 8005f2c:	08005f6d 	.word	0x08005f6d
 8005f30:	08005f61 	.word	0x08005f61
 8005f34:	08005f6d 	.word	0x08005f6d
 8005f38:	08005f6d 	.word	0x08005f6d
 8005f3c:	08005f6d 	.word	0x08005f6d
 8005f40:	08005f5b 	.word	0x08005f5b
 8005f44:	08005f6d 	.word	0x08005f6d
 8005f48:	08005f6d 	.word	0x08005f6d
 8005f4c:	08005f6d 	.word	0x08005f6d
 8005f50:	08005f67 	.word	0x08005f67
 8005f54:	2300      	movs	r3, #0
 8005f56:	76fb      	strb	r3, [r7, #27]
 8005f58:	e084      	b.n	8006064 <UART_SetConfig+0x254>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	76fb      	strb	r3, [r7, #27]
 8005f5e:	e081      	b.n	8006064 <UART_SetConfig+0x254>
 8005f60:	2304      	movs	r3, #4
 8005f62:	76fb      	strb	r3, [r7, #27]
 8005f64:	e07e      	b.n	8006064 <UART_SetConfig+0x254>
 8005f66:	2308      	movs	r3, #8
 8005f68:	76fb      	strb	r3, [r7, #27]
 8005f6a:	e07b      	b.n	8006064 <UART_SetConfig+0x254>
 8005f6c:	2310      	movs	r3, #16
 8005f6e:	76fb      	strb	r3, [r7, #27]
 8005f70:	bf00      	nop
 8005f72:	e077      	b.n	8006064 <UART_SetConfig+0x254>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a68      	ldr	r2, [pc, #416]	; (800611c <UART_SetConfig+0x30c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d120      	bne.n	8005fc0 <UART_SetConfig+0x1b0>
 8005f7e:	4b65      	ldr	r3, [pc, #404]	; (8006114 <UART_SetConfig+0x304>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f88:	2b10      	cmp	r3, #16
 8005f8a:	d00f      	beq.n	8005fac <UART_SetConfig+0x19c>
 8005f8c:	2b10      	cmp	r3, #16
 8005f8e:	d802      	bhi.n	8005f96 <UART_SetConfig+0x186>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <UART_SetConfig+0x190>
 8005f94:	e010      	b.n	8005fb8 <UART_SetConfig+0x1a8>
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d005      	beq.n	8005fa6 <UART_SetConfig+0x196>
 8005f9a:	2b30      	cmp	r3, #48	; 0x30
 8005f9c:	d009      	beq.n	8005fb2 <UART_SetConfig+0x1a2>
 8005f9e:	e00b      	b.n	8005fb8 <UART_SetConfig+0x1a8>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	76fb      	strb	r3, [r7, #27]
 8005fa4:	e05e      	b.n	8006064 <UART_SetConfig+0x254>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	76fb      	strb	r3, [r7, #27]
 8005faa:	e05b      	b.n	8006064 <UART_SetConfig+0x254>
 8005fac:	2304      	movs	r3, #4
 8005fae:	76fb      	strb	r3, [r7, #27]
 8005fb0:	e058      	b.n	8006064 <UART_SetConfig+0x254>
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	76fb      	strb	r3, [r7, #27]
 8005fb6:	e055      	b.n	8006064 <UART_SetConfig+0x254>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	76fb      	strb	r3, [r7, #27]
 8005fbc:	bf00      	nop
 8005fbe:	e051      	b.n	8006064 <UART_SetConfig+0x254>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a56      	ldr	r2, [pc, #344]	; (8006120 <UART_SetConfig+0x310>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d120      	bne.n	800600c <UART_SetConfig+0x1fc>
 8005fca:	4b52      	ldr	r3, [pc, #328]	; (8006114 <UART_SetConfig+0x304>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d00f      	beq.n	8005ff8 <UART_SetConfig+0x1e8>
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	d802      	bhi.n	8005fe2 <UART_SetConfig+0x1d2>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <UART_SetConfig+0x1dc>
 8005fe0:	e010      	b.n	8006004 <UART_SetConfig+0x1f4>
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	d005      	beq.n	8005ff2 <UART_SetConfig+0x1e2>
 8005fe6:	2bc0      	cmp	r3, #192	; 0xc0
 8005fe8:	d009      	beq.n	8005ffe <UART_SetConfig+0x1ee>
 8005fea:	e00b      	b.n	8006004 <UART_SetConfig+0x1f4>
 8005fec:	2300      	movs	r3, #0
 8005fee:	76fb      	strb	r3, [r7, #27]
 8005ff0:	e038      	b.n	8006064 <UART_SetConfig+0x254>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	76fb      	strb	r3, [r7, #27]
 8005ff6:	e035      	b.n	8006064 <UART_SetConfig+0x254>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	76fb      	strb	r3, [r7, #27]
 8005ffc:	e032      	b.n	8006064 <UART_SetConfig+0x254>
 8005ffe:	2308      	movs	r3, #8
 8006000:	76fb      	strb	r3, [r7, #27]
 8006002:	e02f      	b.n	8006064 <UART_SetConfig+0x254>
 8006004:	2310      	movs	r3, #16
 8006006:	76fb      	strb	r3, [r7, #27]
 8006008:	bf00      	nop
 800600a:	e02b      	b.n	8006064 <UART_SetConfig+0x254>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a3e      	ldr	r2, [pc, #248]	; (800610c <UART_SetConfig+0x2fc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d124      	bne.n	8006060 <UART_SetConfig+0x250>
 8006016:	4b3f      	ldr	r3, [pc, #252]	; (8006114 <UART_SetConfig+0x304>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006024:	d012      	beq.n	800604c <UART_SetConfig+0x23c>
 8006026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602a:	d802      	bhi.n	8006032 <UART_SetConfig+0x222>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <UART_SetConfig+0x230>
 8006030:	e012      	b.n	8006058 <UART_SetConfig+0x248>
 8006032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006036:	d006      	beq.n	8006046 <UART_SetConfig+0x236>
 8006038:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800603c:	d009      	beq.n	8006052 <UART_SetConfig+0x242>
 800603e:	e00b      	b.n	8006058 <UART_SetConfig+0x248>
 8006040:	2300      	movs	r3, #0
 8006042:	76fb      	strb	r3, [r7, #27]
 8006044:	e00e      	b.n	8006064 <UART_SetConfig+0x254>
 8006046:	2302      	movs	r3, #2
 8006048:	76fb      	strb	r3, [r7, #27]
 800604a:	e00b      	b.n	8006064 <UART_SetConfig+0x254>
 800604c:	2304      	movs	r3, #4
 800604e:	76fb      	strb	r3, [r7, #27]
 8006050:	e008      	b.n	8006064 <UART_SetConfig+0x254>
 8006052:	2308      	movs	r3, #8
 8006054:	76fb      	strb	r3, [r7, #27]
 8006056:	e005      	b.n	8006064 <UART_SetConfig+0x254>
 8006058:	2310      	movs	r3, #16
 800605a:	76fb      	strb	r3, [r7, #27]
 800605c:	bf00      	nop
 800605e:	e001      	b.n	8006064 <UART_SetConfig+0x254>
 8006060:	2310      	movs	r3, #16
 8006062:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a28      	ldr	r2, [pc, #160]	; (800610c <UART_SetConfig+0x2fc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	f040 80a1 	bne.w	80061b2 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006070:	7efb      	ldrb	r3, [r7, #27]
 8006072:	2b08      	cmp	r3, #8
 8006074:	d823      	bhi.n	80060be <UART_SetConfig+0x2ae>
 8006076:	a201      	add	r2, pc, #4	; (adr r2, 800607c <UART_SetConfig+0x26c>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	080060a1 	.word	0x080060a1
 8006080:	080060bf 	.word	0x080060bf
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060bf 	.word	0x080060bf
 800608c:	080060af 	.word	0x080060af
 8006090:	080060bf 	.word	0x080060bf
 8006094:	080060bf 	.word	0x080060bf
 8006098:	080060bf 	.word	0x080060bf
 800609c:	080060b7 	.word	0x080060b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a0:	f7fe fbbe 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 80060a4:	6178      	str	r0, [r7, #20]
        break;
 80060a6:	e00f      	b.n	80060c8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a8:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <UART_SetConfig+0x314>)
 80060aa:	617b      	str	r3, [r7, #20]
        break;
 80060ac:	e00c      	b.n	80060c8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ae:	f7fe fb49 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 80060b2:	6178      	str	r0, [r7, #20]
        break;
 80060b4:	e008      	b.n	80060c8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ba:	617b      	str	r3, [r7, #20]
        break;
 80060bc:	e004      	b.n	80060c8 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	76bb      	strb	r3, [r7, #26]
        break;
 80060c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 8130 	beq.w	8006330 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	4a14      	ldr	r2, [pc, #80]	; (8006128 <UART_SetConfig+0x318>)
 80060d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060da:	461a      	mov	r2, r3
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	fbb3 f3f2 	udiv	r3, r3, r2
 80060e2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	4613      	mov	r3, r2
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	4413      	add	r3, r2
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d305      	bcc.n	8006100 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d915      	bls.n	800612c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	76bb      	strb	r3, [r7, #26]
 8006104:	e114      	b.n	8006330 <UART_SetConfig+0x520>
 8006106:	bf00      	nop
 8006108:	cfff69f3 	.word	0xcfff69f3
 800610c:	40008000 	.word	0x40008000
 8006110:	40013800 	.word	0x40013800
 8006114:	40021000 	.word	0x40021000
 8006118:	40004400 	.word	0x40004400
 800611c:	40004800 	.word	0x40004800
 8006120:	40004c00 	.word	0x40004c00
 8006124:	00f42400 	.word	0x00f42400
 8006128:	08007038 	.word	0x08007038
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	4618      	mov	r0, r3
 8006130:	f04f 0100 	mov.w	r1, #0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	4a87      	ldr	r2, [pc, #540]	; (8006358 <UART_SetConfig+0x548>)
 800613a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f04f 0400 	mov.w	r4, #0
 8006144:	461a      	mov	r2, r3
 8006146:	4623      	mov	r3, r4
 8006148:	f7fa f870 	bl	800022c <__aeabi_uldivmod>
 800614c:	4603      	mov	r3, r0
 800614e:	460c      	mov	r4, r1
 8006150:	4619      	mov	r1, r3
 8006152:	4622      	mov	r2, r4
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	f04f 0400 	mov.w	r4, #0
 800615c:	0214      	lsls	r4, r2, #8
 800615e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006162:	020b      	lsls	r3, r1, #8
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6852      	ldr	r2, [r2, #4]
 8006168:	0852      	lsrs	r2, r2, #1
 800616a:	4611      	mov	r1, r2
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	eb13 0b01 	adds.w	fp, r3, r1
 8006174:	eb44 0c02 	adc.w	ip, r4, r2
 8006178:	4658      	mov	r0, fp
 800617a:	4661      	mov	r1, ip
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f04f 0400 	mov.w	r4, #0
 8006184:	461a      	mov	r2, r3
 8006186:	4623      	mov	r3, r4
 8006188:	f7fa f850 	bl	800022c <__aeabi_uldivmod>
 800618c:	4603      	mov	r3, r0
 800618e:	460c      	mov	r4, r1
 8006190:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006198:	d308      	bcc.n	80061ac <UART_SetConfig+0x39c>
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a0:	d204      	bcs.n	80061ac <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	e0c1      	b.n	8006330 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	76bb      	strb	r3, [r7, #26]
 80061b0:	e0be      	b.n	8006330 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ba:	d164      	bne.n	8006286 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 80061bc:	7efb      	ldrb	r3, [r7, #27]
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d827      	bhi.n	8006212 <UART_SetConfig+0x402>
 80061c2:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <UART_SetConfig+0x3b8>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	08006213 	.word	0x08006213
 80061d8:	08006203 	.word	0x08006203
 80061dc:	08006213 	.word	0x08006213
 80061e0:	08006213 	.word	0x08006213
 80061e4:	08006213 	.word	0x08006213
 80061e8:	0800620b 	.word	0x0800620b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ec:	f7fe fb18 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 80061f0:	6178      	str	r0, [r7, #20]
        break;
 80061f2:	e013      	b.n	800621c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f4:	f7fe fb2a 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 80061f8:	6178      	str	r0, [r7, #20]
        break;
 80061fa:	e00f      	b.n	800621c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061fc:	4b57      	ldr	r3, [pc, #348]	; (800635c <UART_SetConfig+0x54c>)
 80061fe:	617b      	str	r3, [r7, #20]
        break;
 8006200:	e00c      	b.n	800621c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006202:	f7fe fa9f 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 8006206:	6178      	str	r0, [r7, #20]
        break;
 8006208:	e008      	b.n	800621c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800620a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620e:	617b      	str	r3, [r7, #20]
        break;
 8006210:	e004      	b.n	800621c <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	76bb      	strb	r3, [r7, #26]
        break;
 800621a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 8086 	beq.w	8006330 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	4a4b      	ldr	r2, [pc, #300]	; (8006358 <UART_SetConfig+0x548>)
 800622a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800622e:	461a      	mov	r2, r3
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	fbb3 f3f2 	udiv	r3, r3, r2
 8006236:	005a      	lsls	r2, r3, #1
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	441a      	add	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	fbb2 f3f3 	udiv	r3, r2, r3
 8006248:	b29b      	uxth	r3, r3
 800624a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	2b0f      	cmp	r3, #15
 8006250:	d916      	bls.n	8006280 <UART_SetConfig+0x470>
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006258:	d212      	bcs.n	8006280 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f023 030f 	bic.w	r3, r3, #15
 8006262:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	b29b      	uxth	r3, r3
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	b29a      	uxth	r2, r3
 8006270:	89fb      	ldrh	r3, [r7, #14]
 8006272:	4313      	orrs	r3, r2
 8006274:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	89fa      	ldrh	r2, [r7, #14]
 800627c:	60da      	str	r2, [r3, #12]
 800627e:	e057      	b.n	8006330 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	76bb      	strb	r3, [r7, #26]
 8006284:	e054      	b.n	8006330 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006286:	7efb      	ldrb	r3, [r7, #27]
 8006288:	2b08      	cmp	r3, #8
 800628a:	d828      	bhi.n	80062de <UART_SetConfig+0x4ce>
 800628c:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <UART_SetConfig+0x484>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062c1 	.word	0x080062c1
 800629c:	080062c9 	.word	0x080062c9
 80062a0:	080062df 	.word	0x080062df
 80062a4:	080062cf 	.word	0x080062cf
 80062a8:	080062df 	.word	0x080062df
 80062ac:	080062df 	.word	0x080062df
 80062b0:	080062df 	.word	0x080062df
 80062b4:	080062d7 	.word	0x080062d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b8:	f7fe fab2 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 80062bc:	6178      	str	r0, [r7, #20]
        break;
 80062be:	e013      	b.n	80062e8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062c0:	f7fe fac4 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 80062c4:	6178      	str	r0, [r7, #20]
        break;
 80062c6:	e00f      	b.n	80062e8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c8:	4b24      	ldr	r3, [pc, #144]	; (800635c <UART_SetConfig+0x54c>)
 80062ca:	617b      	str	r3, [r7, #20]
        break;
 80062cc:	e00c      	b.n	80062e8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ce:	f7fe fa39 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 80062d2:	6178      	str	r0, [r7, #20]
        break;
 80062d4:	e008      	b.n	80062e8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062da:	617b      	str	r3, [r7, #20]
        break;
 80062dc:	e004      	b.n	80062e8 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	76bb      	strb	r3, [r7, #26]
        break;
 80062e6:	bf00      	nop
    }

    if (pclk != 0U)
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d020      	beq.n	8006330 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	4a19      	ldr	r2, [pc, #100]	; (8006358 <UART_SetConfig+0x548>)
 80062f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f8:	461a      	mov	r2, r3
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	085b      	lsrs	r3, r3, #1
 8006306:	441a      	add	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006310:	b29b      	uxth	r3, r3
 8006312:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	2b0f      	cmp	r3, #15
 8006318:	d908      	bls.n	800632c <UART_SetConfig+0x51c>
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006320:	d204      	bcs.n	800632c <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	60da      	str	r2, [r3, #12]
 800632a:	e001      	b.n	8006330 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800634c:	7ebb      	ldrb	r3, [r7, #26]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006358:	08007038 	.word	0x08007038
 800635c:	00f42400 	.word	0x00f42400

08006360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01a      	beq.n	8006476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800645e:	d10a      	bne.n	8006476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	605a      	str	r2, [r3, #4]
  }
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064b4:	f7fc f9b2 	bl	800281c <HAL_GetTick>
 80064b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d10e      	bne.n	80064e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f82c 	bl	8006534 <UART_WaitOnFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e022      	b.n	800652c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d10e      	bne.n	8006512 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f816 	bl	8006534 <UART_WaitOnFlagUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e00c      	b.n	800652c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	4613      	mov	r3, r2
 8006542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006544:	e062      	b.n	800660c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654c:	d05e      	beq.n	800660c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654e:	f7fc f965 	bl	800281c <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	429a      	cmp	r2, r3
 800655c:	d302      	bcc.n	8006564 <UART_WaitOnFlagUntilTimeout+0x30>
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11d      	bne.n	80065a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006572:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0201 	bic.w	r2, r2, #1
 8006582:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e045      	b.n	800662c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d02e      	beq.n	800660c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065bc:	d126      	bne.n	800660c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065d6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0201 	bic.w	r2, r2, #1
 80065e6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e00f      	b.n	800662c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69da      	ldr	r2, [r3, #28]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	4013      	ands	r3, r2
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	429a      	cmp	r2, r3
 800661a:	bf0c      	ite	eq
 800661c:	2301      	moveq	r3, #1
 800661e:	2300      	movne	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	461a      	mov	r2, r3
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	429a      	cmp	r2, r3
 8006628:	d08d      	beq.n	8006546 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800664a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6812      	ldr	r2, [r2, #0]
 8006656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff fbaf 	bl	8005dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066bc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff fb81 	bl	8005dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066e8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066f0:	2b22      	cmp	r3, #34	; 0x22
 80066f2:	d13b      	bne.n	800676c <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066fc:	89bb      	ldrh	r3, [r7, #12]
 80066fe:	b2d9      	uxtb	r1, r3
 8006700:	89fb      	ldrh	r3, [r7, #14]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006708:	400a      	ands	r2, r1
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d122      	bne.n	800677c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006744:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0201 	bic.w	r2, r2, #1
 8006754:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff fb3f 	bl	8005de8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800676a:	e007      	b.n	800677c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0208 	orr.w	r2, r2, #8
 800677a:	619a      	str	r2, [r3, #24]
}
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006792:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800679a:	2b22      	cmp	r3, #34	; 0x22
 800679c:	d13b      	bne.n	8006816 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067aa:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80067ac:	89ba      	ldrh	r2, [r7, #12]
 80067ae:	89fb      	ldrh	r3, [r7, #14]
 80067b0:	4013      	ands	r3, r2
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067bc:	1c9a      	adds	r2, r3, #2
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d122      	bne.n	8006826 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067ee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7ff faea 	bl	8005de8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006814:	e007      	b.n	8006826 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699a      	ldr	r2, [r3, #24]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0208 	orr.w	r2, r2, #8
 8006824:	619a      	str	r2, [r3, #24]
}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800683e:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006846:	2b22      	cmp	r3, #34	; 0x22
 8006848:	d168      	bne.n	800691c <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006850:	81fb      	strh	r3, [r7, #14]
 8006852:	e03f      	b.n	80068d4 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800685c:	893b      	ldrh	r3, [r7, #8]
 800685e:	b2d9      	uxtb	r1, r3
 8006860:	89bb      	ldrh	r3, [r7, #12]
 8006862:	b2da      	uxtb	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006868:	400a      	ands	r2, r1
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d11b      	bne.n	80068ce <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068a4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff fa8d 	bl	8005de8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80068ce:	89fb      	ldrh	r3, [r7, #14]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	81fb      	strh	r3, [r7, #14]
 80068d4:	89fb      	ldrh	r3, [r7, #14]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1bc      	bne.n	8006854 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068e0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80068e2:	897b      	ldrh	r3, [r7, #10]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d021      	beq.n	800692c <UART_RxISR_8BIT_FIFOEN+0xfc>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068ee:	897a      	ldrh	r2, [r7, #10]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d21b      	bcs.n	800692c <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006902:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a0b      	ldr	r2, [pc, #44]	; (8006934 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006908:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0220 	orr.w	r2, r2, #32
 8006918:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800691a:	e007      	b.n	800692c <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f042 0208 	orr.w	r2, r2, #8
 800692a:	619a      	str	r2, [r3, #24]
}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	080066db 	.word	0x080066db

08006938 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006946:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800694e:	2b22      	cmp	r3, #34	; 0x22
 8006950:	d168      	bne.n	8006a24 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006958:	82fb      	strh	r3, [r7, #22]
 800695a:	e03f      	b.n	80069dc <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006968:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800696a:	8a3a      	ldrh	r2, [r7, #16]
 800696c:	8abb      	ldrh	r3, [r7, #20]
 800696e:	4013      	ands	r3, r2
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697a:	1c9a      	adds	r2, r3, #2
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d11b      	bne.n	80069d6 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ac:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff fa09 	bl	8005de8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80069d6:	8afb      	ldrh	r3, [r7, #22]
 80069d8:	3b01      	subs	r3, #1
 80069da:	82fb      	strh	r3, [r7, #22]
 80069dc:	8afb      	ldrh	r3, [r7, #22]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1bc      	bne.n	800695c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069e8:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80069ea:	8a7b      	ldrh	r3, [r7, #18]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d021      	beq.n	8006a34 <UART_RxISR_16BIT_FIFOEN+0xfc>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069f6:	8a7a      	ldrh	r2, [r7, #18]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d21b      	bcs.n	8006a34 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a0a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a0b      	ldr	r2, [pc, #44]	; (8006a3c <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006a10:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f042 0220 	orr.w	r2, r2, #32
 8006a20:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a22:	e007      	b.n	8006a34 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0208 	orr.w	r2, r2, #8
 8006a32:	619a      	str	r2, [r3, #24]
}
 8006a34:	bf00      	nop
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	08006785 	.word	0x08006785

08006a40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d101      	bne.n	8006a92 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	e027      	b.n	8006ae2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2224      	movs	r2, #36	; 0x24
 8006a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0201 	bic.w	r2, r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ac0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e02d      	b.n	8006b62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2224      	movs	r2, #36	; 0x24
 8006b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f850 	bl	8006be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e02d      	b.n	8006bde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2224      	movs	r2, #36	; 0x24
 8006b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f812 	bl	8006be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b089      	sub	sp, #36	; 0x24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006bf0:	4a2f      	ldr	r2, [pc, #188]	; (8006cb0 <UARTEx_SetNbDataToProcess+0xc8>)
 8006bf2:	f107 0314 	add.w	r3, r7, #20
 8006bf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bfa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006bfe:	4a2d      	ldr	r2, [pc, #180]	; (8006cb4 <UARTEx_SetNbDataToProcess+0xcc>)
 8006c00:	f107 030c 	add.w	r3, r7, #12
 8006c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c08:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d108      	bne.n	8006c26 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c24:	e03d      	b.n	8006ca2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c26:	2308      	movs	r3, #8
 8006c28:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	0e5b      	lsrs	r3, r3, #25
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	0f5b      	lsrs	r3, r3, #29
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c4e:	7fbb      	ldrb	r3, [r7, #30]
 8006c50:	7f3a      	ldrb	r2, [r7, #28]
 8006c52:	f107 0120 	add.w	r1, r7, #32
 8006c56:	440a      	add	r2, r1
 8006c58:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006c5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c60:	7f3a      	ldrb	r2, [r7, #28]
 8006c62:	f107 0120 	add.w	r1, r7, #32
 8006c66:	440a      	add	r2, r1
 8006c68:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c78:	7ffb      	ldrb	r3, [r7, #31]
 8006c7a:	7f7a      	ldrb	r2, [r7, #29]
 8006c7c:	f107 0120 	add.w	r1, r7, #32
 8006c80:	440a      	add	r2, r1
 8006c82:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006c86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c8a:	7f7a      	ldrb	r2, [r7, #29]
 8006c8c:	f107 0120 	add.w	r1, r7, #32
 8006c90:	440a      	add	r2, r1
 8006c92:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c96:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ca2:	bf00      	nop
 8006ca4:	3724      	adds	r7, #36	; 0x24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	08007000 	.word	0x08007000
 8006cb4:	08007008 	.word	0x08007008

08006cb8 <__libc_init_array>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4e0d      	ldr	r6, [pc, #52]	; (8006cf0 <__libc_init_array+0x38>)
 8006cbc:	4c0d      	ldr	r4, [pc, #52]	; (8006cf4 <__libc_init_array+0x3c>)
 8006cbe:	1ba4      	subs	r4, r4, r6
 8006cc0:	10a4      	asrs	r4, r4, #2
 8006cc2:	2500      	movs	r5, #0
 8006cc4:	42a5      	cmp	r5, r4
 8006cc6:	d109      	bne.n	8006cdc <__libc_init_array+0x24>
 8006cc8:	4e0b      	ldr	r6, [pc, #44]	; (8006cf8 <__libc_init_array+0x40>)
 8006cca:	4c0c      	ldr	r4, [pc, #48]	; (8006cfc <__libc_init_array+0x44>)
 8006ccc:	f000 f820 	bl	8006d10 <_init>
 8006cd0:	1ba4      	subs	r4, r4, r6
 8006cd2:	10a4      	asrs	r4, r4, #2
 8006cd4:	2500      	movs	r5, #0
 8006cd6:	42a5      	cmp	r5, r4
 8006cd8:	d105      	bne.n	8006ce6 <__libc_init_array+0x2e>
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ce0:	4798      	blx	r3
 8006ce2:	3501      	adds	r5, #1
 8006ce4:	e7ee      	b.n	8006cc4 <__libc_init_array+0xc>
 8006ce6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cea:	4798      	blx	r3
 8006cec:	3501      	adds	r5, #1
 8006cee:	e7f2      	b.n	8006cd6 <__libc_init_array+0x1e>
 8006cf0:	08007058 	.word	0x08007058
 8006cf4:	08007058 	.word	0x08007058
 8006cf8:	08007058 	.word	0x08007058
 8006cfc:	08007060 	.word	0x08007060

08006d00 <memset>:
 8006d00:	4402      	add	r2, r0
 8006d02:	4603      	mov	r3, r0
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d100      	bne.n	8006d0a <memset+0xa>
 8006d08:	4770      	bx	lr
 8006d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d0e:	e7f9      	b.n	8006d04 <memset+0x4>

08006d10 <_init>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	bf00      	nop
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr

08006d1c <_fini>:
 8006d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1e:	bf00      	nop
 8006d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d22:	bc08      	pop	{r3}
 8006d24:	469e      	mov	lr, r3
 8006d26:	4770      	bx	lr
