
project_12_CAN_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bfc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e24  08005e24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e2c  08005e2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000117c  2000000c  08005e44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001188  08005e44  00021188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001948a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf0  00000000  00000000  000394c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0003c0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0003d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002026b  00000000  00000000  0003e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148cb  00000000  00000000  0005ea1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce15b  00000000  00000000  000732e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000561c  00000000  00000000  00141494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005dbc 	.word	0x08005dbc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005dbc 	.word	0x08005dbc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <_ZNK5Queue7IsEmptyEv>:
	bool Push(uint8_t* data, uint8_t size, uint8_t priority);
	bool IsFull() const
	{
		return (Count == UART_TX_QUEUE_BUFFER_SIZE);
	}
	bool IsEmpty() const
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	{
		return (Count == 0);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	bf0c      	ite	eq
 8000520:	2301      	moveq	r3, #1
 8000522:	2300      	movne	r3, #0
 8000524:	b2db      	uxtb	r3, r3
	}
 8000526:	4618      	mov	r0, r3
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <_ZN3MSGC1Ev>:
struct MSG
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <_ZN5QueueC1Ev>:
struct Queue
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3304      	adds	r3, #4
 800056a:	2417      	movs	r4, #23
 800056c:	461d      	mov	r5, r3
 800056e:	2c00      	cmp	r4, #0
 8000570:	db05      	blt.n	800057e <_ZN5QueueC1Ev+0x26>
 8000572:	4628      	mov	r0, r5
 8000574:	f7ff ffdd 	bl	8000532 <_ZN3MSGC1Ev>
 8000578:	3542      	adds	r5, #66	; 0x42
 800057a:	3c01      	subs	r4, #1
 800057c:	e7f7      	b.n	800056e <_ZN5QueueC1Ev+0x16>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2200      	movs	r2, #0
 800058a:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bdb0      	pop	{r4, r5, r7, pc}

08000598 <add_message_to_UART_TX_queue>:
Queue UARTQueueTX;

extern "C"
{
	void add_message_to_UART_TX_queue(uint8_t* message_data_pointer, uint8_t message_size, uint8_t message_priority)
	{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08e      	sub	sp, #56	; 0x38
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
 80005a4:	4613      	mov	r3, r2
 80005a6:	70bb      	strb	r3, [r7, #2]
		uint8_t tmp_buff[40];
		for (int i = 0; i < (int)sizeof(tmp_buff); i++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
 80005ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ae:	2b27      	cmp	r3, #39	; 0x27
 80005b0:	dc0d      	bgt.n	80005ce <add_message_to_UART_TX_queue+0x36>
		{
			tmp_buff[i] = message_data_pointer[i];
 80005b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	7819      	ldrb	r1, [r3, #0]
 80005ba:	f107 020c 	add.w	r2, r7, #12
 80005be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005c0:	4413      	add	r3, r2
 80005c2:	460a      	mov	r2, r1
 80005c4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < (int)sizeof(tmp_buff); i++)
 80005c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005c8:	3301      	adds	r3, #1
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
 80005cc:	e7ee      	b.n	80005ac <add_message_to_UART_TX_queue+0x14>
		}

		UARTQueueTX.Push(message_data_pointer, message_size, message_priority);
 80005ce:	78bb      	ldrb	r3, [r7, #2]
 80005d0:	78fa      	ldrb	r2, [r7, #3]
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <add_message_to_UART_TX_queue+0x4c>)
 80005d6:	f000 fb34 	bl	8000c42 <_ZN5Queue4PushEPhhh>
	}
 80005da:	bf00      	nop
 80005dc:	3738      	adds	r7, #56	; 0x38
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028

080005e8 <send_messages_from_UART_TX_queue>:

	void send_messages_from_UART_TX_queue(void)
	{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
		if (!UARTQueueTX.IsEmpty())
 80005ee:	4836      	ldr	r0, [pc, #216]	; (80006c8 <send_messages_from_UART_TX_queue+0xe0>)
 80005f0:	f7ff ff8e 	bl	8000510 <_ZNK5Queue7IsEmptyEv>
 80005f4:	4603      	mov	r3, r0
 80005f6:	f083 0301 	eor.w	r3, r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d05e      	beq.n	80006be <send_messages_from_UART_TX_queue+0xd6>
		{
			for (int i = UARTQueueTX.GetIndex; i != UARTQueueTX.PutIndex; i++)
 8000600:	4b31      	ldr	r3, [pc, #196]	; (80006c8 <send_messages_from_UART_TX_queue+0xe0>)
 8000602:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <send_messages_from_UART_TX_queue+0xe0>)
 800060a:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	429a      	cmp	r2, r3
 8000612:	d054      	beq.n	80006be <send_messages_from_UART_TX_queue+0xd6>
				}
				uint8_t tmp_arr_3[UARTQueueTX.Msgs[i].Size];
				UARTQueueTX.Pop(tmp_arr_3, sizeof(tmp_arr_3));
				send_message_to_UART(sizeof(tmp_arr_3), (uint8_t*)tmp_arr_3);
				UARTQueueTX.Msgs[i].Size = 0;
			}
 8000614:	466b      	mov	r3, sp
 8000616:	461d      	mov	r5, r3
				if (i == UART_TX_QUEUE_BUFFER_SIZE)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b18      	cmp	r3, #24
 800061c:	d101      	bne.n	8000622 <send_messages_from_UART_TX_queue+0x3a>
					i = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
				uint8_t tmp_arr_3[UARTQueueTX.Msgs[i].Size];
 8000622:	4929      	ldr	r1, [pc, #164]	; (80006c8 <send_messages_from_UART_TX_queue+0xe0>)
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	4613      	mov	r3, r2
 8000628:	015b      	lsls	r3, r3, #5
 800062a:	4413      	add	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	440b      	add	r3, r1
 8000630:	3345      	adds	r3, #69	; 0x45
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	1e5c      	subs	r4, r3, #1
 8000636:	60bc      	str	r4, [r7, #8]
 8000638:	4623      	mov	r3, r4
 800063a:	3301      	adds	r3, #1
 800063c:	4618      	mov	r0, r3
 800063e:	f04f 0100 	mov.w	r1, #0
 8000642:	f04f 0200 	mov.w	r2, #0
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	00cb      	lsls	r3, r1, #3
 800064c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000650:	00c2      	lsls	r2, r0, #3
 8000652:	4623      	mov	r3, r4
 8000654:	3301      	adds	r3, #1
 8000656:	4618      	mov	r0, r3
 8000658:	f04f 0100 	mov.w	r1, #0
 800065c:	f04f 0200 	mov.w	r2, #0
 8000660:	f04f 0300 	mov.w	r3, #0
 8000664:	00cb      	lsls	r3, r1, #3
 8000666:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800066a:	00c2      	lsls	r2, r0, #3
 800066c:	4623      	mov	r3, r4
 800066e:	3301      	adds	r3, #1
 8000670:	3307      	adds	r3, #7
 8000672:	08db      	lsrs	r3, r3, #3
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	ebad 0d03 	sub.w	sp, sp, r3
 800067a:	466b      	mov	r3, sp
 800067c:	3300      	adds	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
				UARTQueueTX.Pop(tmp_arr_3, sizeof(tmp_arr_3));
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	b2e3      	uxtb	r3, r4
 8000684:	3301      	adds	r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	480f      	ldr	r0, [pc, #60]	; (80006c8 <send_messages_from_UART_TX_queue+0xe0>)
 800068c:	f000 fa7a 	bl	8000b84 <_ZN5Queue3PopEPhh>
				send_message_to_UART(sizeof(tmp_arr_3), (uint8_t*)tmp_arr_3);
 8000690:	b2a3      	uxth	r3, r4
 8000692:	3301      	adds	r3, #1
 8000694:	b29b      	uxth	r3, r3
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fd0a 	bl	80010b4 <send_message_to_UART>
				UARTQueueTX.Msgs[i].Size = 0;
 80006a0:	4909      	ldr	r1, [pc, #36]	; (80006c8 <send_messages_from_UART_TX_queue+0xe0>)
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	4613      	mov	r3, r2
 80006a6:	015b      	lsls	r3, r3, #5
 80006a8:	4413      	add	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	440b      	add	r3, r1
 80006ae:	3345      	adds	r3, #69	; 0x45
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
 80006b4:	46ad      	mov	sp, r5
			for (int i = UARTQueueTX.GetIndex; i != UARTQueueTX.PutIndex; i++)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	e7a4      	b.n	8000608 <send_messages_from_UART_TX_queue+0x20>
		}
	}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bdb0      	pop	{r4, r5, r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000028 	.word	0x20000028

080006cc <_Z41__static_initialization_and_destruction_0ii>:
}
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d107      	bne.n	80006ec <_Z41__static_initialization_and_destruction_0ii+0x20>
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d102      	bne.n	80006ec <_Z41__static_initialization_and_destruction_0ii+0x20>
Queue UARTQueueTX;
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80006e8:	f7ff ff36 	bl	8000558 <_ZN5QueueC1Ev>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000028 	.word	0x20000028

080006f8 <_GLOBAL__sub_I_UARTQueueTX>:
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff ffe3 	bl	80006cc <_Z41__static_initialization_and_destruction_0ii>
 8000706:	bd80      	pop	{r7, pc}

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_UART_values();
 800070c:	f000 fc42 	bl	8000f94 <init_UART_values>
  init_CAN_values();
 8000710:	f001 f800 	bl	8001714 <init_CAN_values>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f001 f931 	bl	800197a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f836 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f000 f9ce 	bl	8000abc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000720:	f000 f97e 	bl	8000a20 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000724:	f000 f92e 	bl	8000984 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8000728:	f000 f898 	bl	800085c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 800072c:	f000 f8dc 	bl	80008e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000730:	4810      	ldr	r0, [pc, #64]	; (8000774 <main+0x6c>)
 8000732:	f003 fb55 	bl	8003de0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000736:	4810      	ldr	r0, [pc, #64]	; (8000778 <main+0x70>)
 8000738:	f003 fb52 	bl	8003de0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_RX_MESSAGE_SIZE);
 800073c:	2201      	movs	r2, #1
 800073e:	490f      	ldr	r1, [pc, #60]	; (800077c <main+0x74>)
 8000740:	480f      	ldr	r0, [pc, #60]	; (8000780 <main+0x78>)
 8000742:	f003 ff41 	bl	80045c8 <HAL_UART_Receive_IT>
  init_CAN_filter();
 8000746:	f001 f8c7 	bl	80018d8 <init_CAN_filter>
  HAL_FDCAN_ConfigTimestampCounter(&hfdcan1, FDCAN_TIMESTAMP_PRESC_1);
 800074a:	2100      	movs	r1, #0
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <main+0x7c>)
 800074e:	f001 fd3a 	bl	80021c6 <HAL_FDCAN_ConfigTimestampCounter>
  HAL_FDCAN_EnableTimestampCounter(&hfdcan1, FDCAN_TIMESTAMP_INTERNAL);
 8000752:	2101      	movs	r1, #1
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <main+0x7c>)
 8000756:	f001 fd5a 	bl	800220e <HAL_FDCAN_EnableTimestampCounter>
  HAL_FDCAN_Start(&hfdcan1);
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <main+0x7c>)
 800075c:	f001 fd89 	bl	8002272 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, FDCAN_TX_BUFFER0);
 8000760:	2201      	movs	r2, #1
 8000762:	2101      	movs	r1, #1
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <main+0x7c>)
 8000766:	f001 fe87 	bl	8002478 <HAL_FDCAN_ActivateNotification>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CAN_RX_queue_polling();
 800076a:	f000 fd11 	bl	8001190 <CAN_RX_queue_polling>
	  send_messages_from_UART_TX_queue();
 800076e:	f7ff ff3b 	bl	80005e8 <send_messages_from_UART_TX_queue>
	  CAN_RX_queue_polling();
 8000772:	e7fa      	b.n	800076a <main+0x62>
 8000774:	200009a0 	.word	0x200009a0
 8000778:	200010a4 	.word	0x200010a4
 800077c:	20000770 	.word	0x20000770
 8000780:	200010f0 	.word	0x200010f0
 8000784:	20000ed4 	.word	0x20000ed4

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b0a4      	sub	sp, #144	; 0x90
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000792:	2238      	movs	r2, #56	; 0x38
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f005 fb08 	bl	8005dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	2244      	movs	r2, #68	; 0x44
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f005 fafa 	bl	8005dac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007bc:	f002 fae0 	bl	8002d80 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d2:	2302      	movs	r3, #2
 80007d4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007d6:	2306      	movs	r3, #6
 80007d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 48;
 80007da:	2330      	movs	r3, #48	; 0x30
 80007dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fb76 	bl	8002ee8 <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000802:	f000 f9a7 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2303      	movs	r3, #3
 800080c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800081a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800081e:	2101      	movs	r1, #1
 8000820:	4618      	mov	r0, r3
 8000822:	f002 fe79 	bl	8003518 <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800082c:	f000 f992 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_FDCAN;
 8000830:	f241 0302 	movw	r3, #4098	; 0x1002
 8000834:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800083a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	4618      	mov	r0, r3
 8000844:	f003 f884 	bl	8003950 <HAL_RCCEx_PeriphCLKConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800084e:	f000 f981 	bl	8000b54 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3790      	adds	r7, #144	; 0x90
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 8000862:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <MX_FDCAN1_Init+0x88>)
 8000864:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000866:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 800087a:	2200      	movs	r2, #0
 800087c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 8000880:	2200      	movs	r2, #0
 8000882:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 8000886:	2200      	movs	r2, #0
 8000888:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 800088c:	2208      	movs	r2, #8
 800088e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 8000892:	2203      	movs	r2, #3
 8000894:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 8000898:	220d      	movs	r2, #13
 800089a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 800089e:	2202      	movs	r2, #2
 80008a0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 80008a4:	2208      	movs	r2, #8
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 80008aa:	2203      	movs	r2, #3
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 80008b0:	220a      	movs	r2, #10
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 80008bc:	2201      	movs	r2, #1
 80008be:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_FDCAN1_Init+0x84>)
 80008ce:	f001 fa95 	bl	8001dfc <HAL_FDCAN_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80008d8:	f000 f93c 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000ed4 	.word	0x20000ed4
 80008e4:	40006400 	.word	0x40006400

080008e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000906:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <MX_TIM2_Init+0x98>)
 8000908:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800090c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_TIM2_Init+0x98>)
 8000910:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000914:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_TIM2_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_TIM2_Init+0x98>)
 800091e:	2209      	movs	r2, #9
 8000920:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_TIM2_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_TIM2_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800092e:	4814      	ldr	r0, [pc, #80]	; (8000980 <MX_TIM2_Init+0x98>)
 8000930:	f003 f9fe 	bl	8003d30 <HAL_TIM_Base_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800093a:	f000 f90b 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	4619      	mov	r1, r3
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_TIM2_Init+0x98>)
 800094c:	f003 fab2 	bl	8003eb4 <HAL_TIM_ConfigClockSource>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000956:	f000 f8fd 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800095a:	2320      	movs	r3, #32
 800095c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <MX_TIM2_Init+0x98>)
 8000968:	f003 fcc6 	bl	80042f8 <HAL_TIMEx_MasterConfigSynchronization>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000972:	f000 f8ef 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200010a4 	.word	0x200010a4

08000984 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_TIM3_Init+0x94>)
 80009a4:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <MX_TIM3_Init+0x98>)
 80009a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_TIM3_Init+0x94>)
 80009aa:	223f      	movs	r2, #63	; 0x3f
 80009ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_TIM3_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_TIM3_Init+0x94>)
 80009b6:	2263      	movs	r2, #99	; 0x63
 80009b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_TIM3_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_TIM3_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009c6:	4814      	ldr	r0, [pc, #80]	; (8000a18 <MX_TIM3_Init+0x94>)
 80009c8:	f003 f9b2 	bl	8003d30 <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 f8bf 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4619      	mov	r1, r3
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_TIM3_Init+0x94>)
 80009e4:	f003 fa66 	bl	8003eb4 <HAL_TIM_ConfigClockSource>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009ee:	f000 f8b1 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009f2:	2320      	movs	r3, #32
 80009f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <MX_TIM3_Init+0x94>)
 8000a00:	f003 fc7a 	bl	80042f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a0a:	f000 f8a3 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	3720      	adds	r7, #32
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200009a0 	.word	0x200009a0
 8000a1c:	40000400 	.word	0x40000400

08000a20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a26:	4a24      	ldr	r2, [pc, #144]	; (8000ab8 <MX_USART2_UART_Init+0x98>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a56:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6a:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a6c:	f003 fcc6 	bl	80043fc <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000a76:	f000 f86d 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a7e:	f005 f8a6 	bl	8005bce <HAL_UARTEx_SetTxFifoThreshold>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000a88:	f000 f864 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a90:	f005 f8db 	bl	8005c4a <HAL_UARTEx_SetRxFifoThreshold>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000a9a:	f000 f85b 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000aa0:	f005 f85c 	bl	8005b5c <HAL_UARTEx_DisableFifoMode>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000aaa:	f000 f853 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200010f0 	.word	0x200010f0
 8000ab8:	40004400 	.word	0x40004400

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_GPIO_Init+0x90>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <MX_GPIO_Init+0x90>)
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_GPIO_Init+0x90>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_GPIO_Init+0x90>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <MX_GPIO_Init+0x90>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_GPIO_Init+0x90>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_GPIO_Init+0x90>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <MX_GPIO_Init+0x90>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_GPIO_Init+0x90>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <MX_GPIO_Init+0x94>)
 8000b22:	f002 f915 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_GPIO_Init+0x94>)
 8000b40:	f001 ff84 	bl	8002a4c <HAL_GPIO_Init>

}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	48000400 	.word	0x48000400

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_ZNK5Queue6IsFullEv>:
	bool IsFull() const
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
		return (Count == UART_TX_QUEUE_BUFFER_SIZE);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b18      	cmp	r3, #24
 8000b70:	bf0c      	ite	eq
 8000b72:	2301      	moveq	r3, #1
 8000b74:	2300      	movne	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
	}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_ZN5Queue3PopEPhh>:

/*
 * Извлечь сообщение из общей очереди
 */
bool Queue::Pop(uint8_t* data, uint8_t size)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	71fb      	strb	r3, [r7, #7]
	if (size < Msgs[GetIndex].Size)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
 8000b98:	68f9      	ldr	r1, [r7, #12]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	015b      	lsls	r3, r3, #5
 8000b9e:	4413      	add	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	440b      	add	r3, r1
 8000ba4:	3345      	adds	r3, #69	; 0x45
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	79fa      	ldrb	r2, [r7, #7]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d201      	bcs.n	8000bb2 <_ZN5Queue3PopEPhh+0x2e>
	{
		return false;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e043      	b.n	8000c3a <_ZN5Queue3PopEPhh+0xb6>
	}

	if (IsEmpty())
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f7ff fcac 	bl	8000510 <_ZNK5Queue7IsEmptyEv>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <_ZN5Queue3PopEPhh+0x3e>
		return false;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e03b      	b.n	8000c3a <_ZN5Queue3PopEPhh+0xb6>

	for (int i  = 0; i < Msgs[GetIndex].Size; i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	015b      	lsls	r3, r3, #5
 8000bd2:	4413      	add	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3345      	adds	r3, #69	; 0x45
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	4293      	cmp	r3, r2
 8000be2:	da14      	bge.n	8000c0e <_ZN5Queue3PopEPhh+0x8a>
	{
		data[i] = Msgs[GetIndex].Buffer[i];
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	4419      	add	r1, r3
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	015b      	lsls	r3, r3, #5
 8000bf6:	4413      	add	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	18c2      	adds	r2, r0, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	4413      	add	r3, r2
 8000c00:	3304      	adds	r3, #4
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	700b      	strb	r3, [r1, #0]
	for (int i  = 0; i < Msgs[GetIndex].Size; i++)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	e7db      	b.n	8000bc6 <_ZN5Queue3PopEPhh+0x42>
	}

	GetIndex++;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
	if (GetIndex == UART_TX_QUEUE_BUFFER_SIZE)
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 8000c22:	2b18      	cmp	r3, #24
 8000c24:	d103      	bne.n	8000c2e <_ZN5Queue3PopEPhh+0xaa>
		GetIndex = 0;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634

	Count--;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	1e5a      	subs	r2, r3, #1
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	601a      	str	r2, [r3, #0]
	return true;
 8000c38:	2301      	movs	r3, #1
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <_ZN5Queue4PushEPhhh>:

/*
 * Добавить сообщение в очередь на отправку
 */
bool Queue::Push(uint8_t* data, uint8_t size, uint8_t priority)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	461a      	mov	r2, r3
 8000c50:	460b      	mov	r3, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	if (IsFull())
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff ff82 	bl	8000b62 <_ZNK5Queue6IsFullEv>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <_ZN5Queue4PushEPhhh+0x26>
		return false;
 8000c64:	2300      	movs	r3, #0
 8000c66:	e049      	b.n	8000cfc <_ZN5Queue4PushEPhhh+0xba>

	Msgs[PutIndex].Priority = priority;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f8d3 2638 	ldr.w	r2, [r3, #1592]	; 0x638
 8000c6e:	68f9      	ldr	r1, [r7, #12]
 8000c70:	4613      	mov	r3, r2
 8000c72:	015b      	lsls	r3, r3, #5
 8000c74:	4413      	add	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	440b      	add	r3, r1
 8000c7a:	3344      	adds	r3, #68	; 0x44
 8000c7c:	79ba      	ldrb	r2, [r7, #6]
 8000c7e:	701a      	strb	r2, [r3, #0]
	Msgs[PutIndex].Size = size;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f8d3 2638 	ldr.w	r2, [r3, #1592]	; 0x638
 8000c86:	68f9      	ldr	r1, [r7, #12]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	015b      	lsls	r3, r3, #5
 8000c8c:	4413      	add	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	440b      	add	r3, r1
 8000c92:	3345      	adds	r3, #69	; 0x45
 8000c94:	79fa      	ldrb	r2, [r7, #7]
 8000c96:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	da15      	bge.n	8000cd0 <_ZN5Queue4PushEPhhh+0x8e>
		Msgs[PutIndex].Buffer[i] = data[i];
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	4413      	add	r3, r2
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	f8d2 2638 	ldr.w	r2, [r2, #1592]	; 0x638
 8000cb0:	7818      	ldrb	r0, [r3, #0]
 8000cb2:	68f9      	ldr	r1, [r7, #12]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	015b      	lsls	r3, r3, #5
 8000cb8:	4413      	add	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	18ca      	adds	r2, r1, r3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e7e5      	b.n	8000c9c <_ZN5Queue4PushEPhhh+0x5a>

	PutIndex++;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
 8000cd6:	1c5a      	adds	r2, r3, #1
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
	if (PutIndex == UART_TX_QUEUE_BUFFER_SIZE)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
 8000ce4:	2b18      	cmp	r3, #24
 8000ce6:	d103      	bne.n	8000cf0 <_ZN5Queue4PushEPhhh+0xae>
		PutIndex = 0;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638

	Count++;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	601a      	str	r2, [r3, #0]
	return true;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_MspInit+0x44>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_MspInit+0x44>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6613      	str	r3, [r2, #96]	; 0x60
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_MspInit+0x44>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_MspInit+0x44>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d3a:	f002 f8c5 	bl	8002ec8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <HAL_FDCAN_MspInit+0x90>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d131      	bne.n	8000dd2 <HAL_FDCAN_MspInit+0x86>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <HAL_FDCAN_MspInit+0x94>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <HAL_FDCAN_MspInit+0x94>)
 8000d74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d78:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_FDCAN_MspInit+0x94>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_FDCAN_MspInit+0x94>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <HAL_FDCAN_MspInit+0x94>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <HAL_FDCAN_MspInit+0x94>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000db0:	2309      	movs	r3, #9
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbe:	f001 fe45 	bl	8002a4c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	2015      	movs	r0, #21
 8000dc8:	f000 ff23 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000dcc:	2015      	movs	r0, #21
 8000dce:	f000 ff3a 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40006400 	.word	0x40006400
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df4:	d10c      	bne.n	8000e10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_TIM_Base_MspInit+0x5c>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <HAL_TIM_Base_MspInit+0x5c>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_TIM_Base_MspInit+0x5c>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e0e:	e010      	b.n	8000e32 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <HAL_TIM_Base_MspInit+0x60>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d10b      	bne.n	8000e32 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_TIM_Base_MspInit+0x5c>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_TIM_Base_MspInit+0x5c>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6593      	str	r3, [r2, #88]	; 0x58
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_TIM_Base_MspInit+0x5c>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40000400 	.word	0x40000400

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <HAL_UART_MspInit+0x8c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d130      	bne.n	8000ecc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	6593      	str	r3, [r2, #88]	; 0x58
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f001 fdc8 	bl	8002a4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	2026      	movs	r0, #38	; 0x26
 8000ec2:	f000 fea6 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec6:	2026      	movs	r0, #38	; 0x26
 8000ec8:	f000 febd 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40004400 	.word	0x40004400
 8000ed8:	40021000 	.word	0x40021000

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 fd76 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <FDCAN1_IT0_IRQHandler+0x14>)
 8000f3e:	f001 fb81 	bl	8002644 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
  CAN_IT_handler();
 8000f42:	f000 f8d7 	bl	80010f4 <CAN_IT_handler>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000ed4 	.word	0x20000ed4

08000f50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <USART2_IRQHandler+0x14>)
 8000f56:	f003 fb7d 	bl	8004654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  UART_IT_handler();
 8000f5a:	f000 f845 	bl	8000fe8 <UART_IT_handler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200010f0 	.word	0x200010f0

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <SystemInit+0x28>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <SystemInit+0x28>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SystemInit+0x28>)
 8000f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f82:	609a      	str	r2, [r3, #8]
#endif
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <init_UART_values>:

/*
 * стартовая инициализация счётчиков и буферов UART
 */
void init_UART_values(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	uart_error_state = UART_NO_ERROR;									// ошибка отсутствует
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <init_UART_values+0x38>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
	UART_RX_string_buffer_counter = 0;								// счётчик элемента строки-буфера
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <init_UART_values+0x3c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
	UART_RX_put_index = 0;							// обнуляем счётчитк элемента очереди на парсинг, в который ведётся запись
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <init_UART_values+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	UART_RX_get_index = 0;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <init_UART_values+0x44>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
	UART_TX_put_index = 0;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <init_UART_values+0x48>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	UART_TX_get_index = 0;
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <init_UART_values+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
	timestamp_enabled = TRUE;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <init_UART_values+0x50>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	20001182 	.word	0x20001182
 8000fd0:	20000f38 	.word	0x20000f38
 8000fd4:	20001180 	.word	0x20001180
 8000fd8:	20000ece 	.word	0x20000ece
 8000fdc:	20001181 	.word	0x20001181
 8000fe0:	200010a0 	.word	0x200010a0
 8000fe4:	20000ecd 	.word	0x20000ecd

08000fe8 <UART_IT_handler>:

/*
 * Обработчик прерываний UART (вызывается при приёме сообщения)
 */
void UART_IT_handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	add_byte_to_string(UART_rx_buffer[0]);														// добавляем принятый байт в строку в очереди на парсинг
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <UART_IT_handler+0x1c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f80b 	bl	800100c <add_byte_to_string>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)UART_rx_buffer, UART_RX_MESSAGE_SIZE);				// взводим функцию для обработки прерывания
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4902      	ldr	r1, [pc, #8]	; (8001004 <UART_IT_handler+0x1c>)
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <UART_IT_handler+0x20>)
 8000ffc:	f003 fae4 	bl	80045c8 <HAL_UART_Receive_IT>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000770 	.word	0x20000770
 8001008:	200010f0 	.word	0x200010f0

0800100c <add_byte_to_string>:

/*
 * Добавляем принятый байт в строку буфера
 */
void add_byte_to_string(uint8_t byte_to_write)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	if (UART_RX_string_buffer_counter >= UART_STRING_MAX_SIZE)									// если достигли максимальной длины строки
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <add_byte_to_string+0x9c>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b3f      	cmp	r3, #63	; 0x3f
 800101c:	d902      	bls.n	8001024 <add_byte_to_string+0x18>
	{
		UART_RX_string_buffer_counter = 0;														// обнуляем счётчик элемента в строке-буфере
 800101e:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <add_byte_to_string+0x9c>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
	}
	if (byte_to_write == CHAR_CODE_UART_MESSAGE_END)											// если пришёл символ конца сообщения
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b0d      	cmp	r3, #13
 8001028:	d11c      	bne.n	8001064 <add_byte_to_string+0x58>
		if (UART_RX_queue_buffer[UART_RX_put_index].message_size != 0)							// если в данной строке буфера уже содерится сообщение
		{
																								// вызываем обработку ошибки
			// !!! error
		}
		UART_RX_queue_buffer[UART_RX_put_index].message_size = UART_RX_string_buffer_counter;	// записываем размер строки
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <add_byte_to_string+0xa0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4619      	mov	r1, r3
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <add_byte_to_string+0x9c>)
 8001032:	7818      	ldrb	r0, [r3, #0]
 8001034:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <add_byte_to_string+0xa4>)
 8001036:	460b      	mov	r3, r1
 8001038:	019b      	lsls	r3, r3, #6
 800103a:	440b      	add	r3, r1
 800103c:	4413      	add	r3, r2
 800103e:	4602      	mov	r2, r0
 8001040:	701a      	strb	r2, [r3, #0]
		UART_RX_put_index++;																	// инкрементируем счётчик строки в буфере строк
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <add_byte_to_string+0xa0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <add_byte_to_string+0xa0>)
 800104c:	701a      	strb	r2, [r3, #0]
		UART_RX_string_buffer_counter = 0;														// обнуляем счётчик символа в строке
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <add_byte_to_string+0x9c>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
		if (UART_RX_put_index >= UART_RX_QUEUE_BUFFER_SIZE)										// если превысили максимальное количество строк в буфере
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <add_byte_to_string+0xa0>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b03      	cmp	r3, #3
 800105a:	d91f      	bls.n	800109c <add_byte_to_string+0x90>
		{
			UART_RX_put_index = 0;																// обнуляем счётчик строк в буфере
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <add_byte_to_string+0xa0>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
			UART_RX_string_buffer_counter = 0;													// возвращаемся в начало строки
		}
		UART_RX_queue_buffer[UART_RX_put_index].message_data[UART_RX_string_buffer_counter] = byte_to_write;		// записываем символ в строку буфера
		UART_RX_string_buffer_counter++;														// инкрементируем индекс символа в строке
	}
}
 8001062:	e01b      	b.n	800109c <add_byte_to_string+0x90>
		if (UART_RX_string_buffer_counter >= (sizeof(UART_RX_queue_buffer->message_data)))		// если превысили размер строки
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <add_byte_to_string+0x9c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b3f      	cmp	r3, #63	; 0x3f
 800106a:	d902      	bls.n	8001072 <add_byte_to_string+0x66>
			UART_RX_string_buffer_counter = 0;													// возвращаемся в начало строки
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <add_byte_to_string+0x9c>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
		UART_RX_queue_buffer[UART_RX_put_index].message_data[UART_RX_string_buffer_counter] = byte_to_write;		// записываем символ в строку буфера
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <add_byte_to_string+0xa0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <add_byte_to_string+0x9c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <add_byte_to_string+0xa4>)
 8001080:	460b      	mov	r3, r1
 8001082:	019b      	lsls	r3, r3, #6
 8001084:	440b      	add	r3, r1
 8001086:	4413      	add	r3, r2
 8001088:	4403      	add	r3, r0
 800108a:	3301      	adds	r3, #1
 800108c:	79fa      	ldrb	r2, [r7, #7]
 800108e:	701a      	strb	r2, [r3, #0]
		UART_RX_string_buffer_counter++;														// инкрементируем индекс символа в строке
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <add_byte_to_string+0x9c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <add_byte_to_string+0x9c>)
 800109a:	701a      	strb	r2, [r3, #0]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000f38 	.word	0x20000f38
 80010ac:	20001180 	.word	0x20001180
 80010b0:	20000668 	.word	0x20000668

080010b4 <send_message_to_UART>:
	tmp_arr_1[sizeof(tmp_arr_1) - 1] = CARRIAGE_RETURN_CHAR;
	add_message_to_UART_TX_queue(tmp_arr_1, sizeof(tmp_arr_1), message_priority);
}

void send_message_to_UART(uint16_t message_size, uint8_t* message_to_send)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	80fb      	strh	r3, [r7, #6]
	for (int ii = 0; ii < message_size; ii++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	e00a      	b.n	80010dc <send_message_to_UART+0x28>
	{
		HAL_UART_Transmit(&huart2, &message_to_send[ii], UART_TX_MESSAGE_SIZE, UART_TIMEOUT);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	18d1      	adds	r1, r2, r3
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	2201      	movs	r2, #1
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <send_message_to_UART+0x3c>)
 80010d2:	f003 f9e3 	bl	800449c <HAL_UART_Transmit>
	for (int ii = 0; ii < message_size; ii++)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3301      	adds	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbf0      	blt.n	80010c6 <send_message_to_UART+0x12>
	}
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200010f0 	.word	0x200010f0

080010f4 <CAN_IT_handler>:

void CAN_IT_handler(void)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef rx_flag = HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_header_buffer, \
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <CAN_IT_handler+0x88>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	019b      	lsls	r3, r3, #6
 8001100:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <CAN_IT_handler+0x8c>)
 8001102:	441a      	add	r2, r3
							CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_data_buffer);
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <CAN_IT_handler+0x88>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	019b      	lsls	r3, r3, #6
 800110a:	3328      	adds	r3, #40	; 0x28
 800110c:	491c      	ldr	r1, [pc, #112]	; (8001180 <CAN_IT_handler+0x8c>)
 800110e:	440b      	add	r3, r1
	HAL_StatusTypeDef rx_flag = HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_header_buffer, \
 8001110:	2140      	movs	r1, #64	; 0x40
 8001112:	481c      	ldr	r0, [pc, #112]	; (8001184 <CAN_IT_handler+0x90>)
 8001114:	f001 f8d6 	bl	80022c4 <HAL_FDCAN_GetRxMessage>
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]

	if (CAN_RX_success_flag == 0)
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <CAN_IT_handler+0x94>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f083 0301 	eor.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <CAN_IT_handler+0x42>
	{
		if (rx_flag == HAL_OK)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <CAN_IT_handler+0x42>
		{
			CAN_RX_success_flag = 1;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <CAN_IT_handler+0x94>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
		}
	}

	if (timestamp_enabled)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <CAN_IT_handler+0x98>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00d      	beq.n	800115a <CAN_IT_handler+0x66>
	{
		CAN_RX_queue_buffer[CAN_RX_put_index].CAN_RX_timestamp_buffer = HAL_FDCAN_GetTimestampCounter(&hfdcan1);
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <CAN_IT_handler+0x88>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461c      	mov	r4, r3
 8001144:	480f      	ldr	r0, [pc, #60]	; (8001184 <CAN_IT_handler+0x90>)
 8001146:	f001 f886 	bl	8002256 <HAL_FDCAN_GetTimestampCounter>
 800114a:	4603      	mov	r3, r0
 800114c:	4619      	mov	r1, r3
 800114e:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <CAN_IT_handler+0x8c>)
 8001150:	01a3      	lsls	r3, r4, #6
 8001152:	4413      	add	r3, r2
 8001154:	333c      	adds	r3, #60	; 0x3c
 8001156:	460a      	mov	r2, r1
 8001158:	801a      	strh	r2, [r3, #0]
	}

	CAN_RX_put_index++;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <CAN_IT_handler+0x88>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <CAN_IT_handler+0x88>)
 8001164:	701a      	strb	r2, [r3, #0]

	if (CAN_RX_put_index >= CAN_RX_QUEUE_BUFFER_SIZE)
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <CAN_IT_handler+0x88>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d902      	bls.n	8001174 <CAN_IT_handler+0x80>
	{
		CAN_RX_put_index = 0;
 800116e:	4b03      	ldr	r3, [pc, #12]	; (800117c <CAN_IT_handler+0x88>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
	}
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bd90      	pop	{r4, r7, pc}
 800117c:	2000076c 	.word	0x2000076c
 8001180:	20000fa0 	.word	0x20000fa0
 8001184:	20000ed4 	.word	0x20000ed4
 8001188:	20000ecf 	.word	0x20000ecf
 800118c:	20000ecd 	.word	0x20000ecd

08001190 <CAN_RX_queue_polling>:

void CAN_RX_queue_polling(void)
{
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	b08d      	sub	sp, #52	; 0x34
 8001194:	af0c      	add	r7, sp, #48	; 0x30
	if (CAN_RX_get_index != CAN_RX_put_index)
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <CAN_RX_queue_polling+0x5c>)
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <CAN_RX_queue_polling+0x60>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d019      	beq.n	80011d6 <CAN_RX_queue_polling+0x46>
	{
		parse_CAN_message(CAN_RX_queue_buffer[CAN_RX_get_index]);
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <CAN_RX_queue_polling+0x5c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <CAN_RX_queue_polling+0x64>)
 80011a8:	019b      	lsls	r3, r3, #6
 80011aa:	18d6      	adds	r6, r2, r3
 80011ac:	466d      	mov	r5, sp
 80011ae:	f106 0410 	add.w	r4, r6, #16
 80011b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011c2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011c6:	f000 f817 	bl	80011f8 <parse_CAN_message>
		CAN_RX_get_index++;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <CAN_RX_queue_polling+0x5c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <CAN_RX_queue_polling+0x5c>)
 80011d4:	701a      	strb	r2, [r3, #0]
	}
	if (CAN_RX_get_index >= CAN_RX_QUEUE_BUFFER_SIZE)
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <CAN_RX_queue_polling+0x5c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d902      	bls.n	80011e4 <CAN_RX_queue_polling+0x54>
	{
		CAN_RX_get_index = 0;
 80011de:	4b03      	ldr	r3, [pc, #12]	; (80011ec <CAN_RX_queue_polling+0x5c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
	}
}
 80011e4:	bf00      	nop
 80011e6:	3704      	adds	r7, #4
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ec:	2000099c 	.word	0x2000099c
 80011f0:	2000076c 	.word	0x2000076c
 80011f4:	20000fa0 	.word	0x20000fa0

080011f8 <parse_CAN_message>:

/*
 * Парсим CAN-сообщение
 */
void parse_CAN_message(CAN_RX_DataBuffer_StructTypeDef CAN_message_struct_to_parse)
{
 80011f8:	b084      	sub	sp, #16
 80011fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011fe:	b091      	sub	sp, #68	; 0x44
 8001200:	af00      	add	r7, sp, #0
 8001202:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800120a:	466b      	mov	r3, sp
 800120c:	4698      	mov	r8, r3
	uint8_t id_lenght;																		// длина CAN ID
	char message_type_char;																	// символ типа сообщения (стандартное или расширенное)
	char message_end_char = CARRIAGE_RETURN_CHAR;											// символ конца сообщения
 800120e:	230d      	movs	r3, #13
 8001210:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t data_lenght;																	// длина данных в сообщении
	if (CAN_message_struct_to_parse.CAN_RX_header_buffer.IdType == FDCAN_STANDARD_ID)		// если стандартный CAN ID
 8001214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001216:	2b00      	cmp	r3, #0
 8001218:	d106      	bne.n	8001228 <parse_CAN_message+0x30>
	{
		id_lenght = STANDARD_CAN_ID_LENGHT;													// задаём стандартную длину CAN ID
 800121a:	2303      	movs	r3, #3
 800121c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		message_type_char = 't';															// задаём символ стандартного сообщения
 8001220:	2374      	movs	r3, #116	; 0x74
 8001222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001226:	e005      	b.n	8001234 <parse_CAN_message+0x3c>
	}
	else
	{
		id_lenght = EXTENDED_CAN_ID_LENGHT;													// иначе задаём увеличенную длину CAN ID
 8001228:	2308      	movs	r3, #8
 800122a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		message_type_char = 'T';															// задаём символ расширенного сообщения
 800122e:	2354      	movs	r3, #84	; 0x54
 8001230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}
	data_lenght = CAN_message_data_lenght_define(CAN_message_struct_to_parse.CAN_RX_header_buffer.DataLength)*2;									// определяем длину данных
 8001234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fa92 	bl	8001760 <CAN_message_data_lenght_define>
 800123c:	4603      	mov	r3, r0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t id_array[id_lenght];																													// массив, содержащий ID сообщения
 8001246:	f897 502a 	ldrb.w	r5, [r7, #42]	; 0x2a
 800124a:	462b      	mov	r3, r5
 800124c:	3b01      	subs	r3, #1
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
 8001250:	b2e8      	uxtb	r0, r5
 8001252:	f04f 0100 	mov.w	r1, #0
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	00cb      	lsls	r3, r1, #3
 8001260:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001264:	00c2      	lsls	r2, r0, #3
 8001266:	b2e8      	uxtb	r0, r5
 8001268:	f04f 0100 	mov.w	r1, #0
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	00cb      	lsls	r3, r1, #3
 8001276:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800127a:	00c2      	lsls	r2, r0, #3
 800127c:	462b      	mov	r3, r5
 800127e:	3307      	adds	r3, #7
 8001280:	08db      	lsrs	r3, r3, #3
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	ebad 0d03 	sub.w	sp, sp, r3
 8001288:	466b      	mov	r3, sp
 800128a:	3300      	adds	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
	convert_int_value_to_ascii_hex_char_array(sizeof(id_array), id_array, CAN_message_struct_to_parse.CAN_RX_header_buffer.Identifier);				// получаем значени ID
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001292:	4619      	mov	r1, r3
 8001294:	4628      	mov	r0, r5
 8001296:	f000 f9f5 	bl	8001684 <convert_int_value_to_ascii_hex_char_array>
	uint8_t data_array[data_lenght];																												// массив данных
 800129a:	f897 6028 	ldrb.w	r6, [r7, #40]	; 0x28
 800129e:	4633      	mov	r3, r6
 80012a0:	3b01      	subs	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	b2f0      	uxtb	r0, r6
 80012a6:	f04f 0100 	mov.w	r1, #0
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	00cb      	lsls	r3, r1, #3
 80012b4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012b8:	00c2      	lsls	r2, r0, #3
 80012ba:	b2f0      	uxtb	r0, r6
 80012bc:	f04f 0100 	mov.w	r1, #0
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	00cb      	lsls	r3, r1, #3
 80012ca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012ce:	00c2      	lsls	r2, r0, #3
 80012d0:	4633      	mov	r3, r6
 80012d2:	3307      	adds	r3, #7
 80012d4:	08db      	lsrs	r3, r3, #3
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	ebad 0d03 	sub.w	sp, sp, r3
 80012dc:	466b      	mov	r3, sp
 80012de:	3300      	adds	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < sizeof(data_array); i++)																									// проходимся по массиву данных
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e6:	e021      	b.n	800132c <parse_CAN_message+0x134>
	{
		if ((i % 2) == 0)																															// для чётных i
 80012e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d119      	bne.n	8001326 <parse_CAN_message+0x12e>
		{
			uint8_t tmp_arr_2[2];																													// создаём массив из двух элементов
			convert_int_value_to_ascii_hex_char_array(sizeof(tmp_arr_2), tmp_arr_2, CAN_message_struct_to_parse.CAN_RX_data_buffer[i/2]);			// заполняем массив !!!
 80012f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f4:	0fda      	lsrs	r2, r3, #31
 80012f6:	4413      	add	r3, r2
 80012f8:	105b      	asrs	r3, r3, #1
 80012fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012fe:	4413      	add	r3, r2
 8001300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001304:	461a      	mov	r2, r3
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	2002      	movs	r0, #2
 800130c:	f000 f9ba 	bl	8001684 <convert_int_value_to_ascii_hex_char_array>
			data_array[i] = tmp_arr_2[0];
 8001310:	7839      	ldrb	r1, [r7, #0]
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001316:	4413      	add	r3, r2
 8001318:	460a      	mov	r2, r1
 800131a:	701a      	strb	r2, [r3, #0]
			data_array[i + 1] = tmp_arr_2[1];
 800131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131e:	3301      	adds	r3, #1
 8001320:	7879      	ldrb	r1, [r7, #1]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(data_array); i++)																									// проходимся по массиву данных
 8001326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001328:	3301      	adds	r3, #1
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800132c:	4632      	mov	r2, r6
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	429a      	cmp	r2, r3
 8001332:	d8d9      	bhi.n	80012e8 <parse_CAN_message+0xf0>
		}
	}
	uint8_t timestamp_array[CAN_TIMESTAMP_SIZE];
	uint8_t timestamp_size_variable;
	if (timestamp_enabled)
 8001334:	4b6f      	ldr	r3, [pc, #444]	; (80014f4 <parse_CAN_message+0x2fc>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00c      	beq.n	8001356 <parse_CAN_message+0x15e>
	{
		timestamp_size_variable = CAN_TIMESTAMP_SIZE;
 800133c:	2304      	movs	r3, #4
 800133e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		convert_int_value_to_ascii_hex_char_array(sizeof(timestamp_array), timestamp_array, CAN_message_struct_to_parse.CAN_RX_timestamp_buffer);
 8001342:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001346:	461a      	mov	r2, r3
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	4619      	mov	r1, r3
 800134e:	2004      	movs	r0, #4
 8001350:	f000 f998 	bl	8001684 <convert_int_value_to_ascii_hex_char_array>
 8001354:	e002      	b.n	800135c <parse_CAN_message+0x164>
	}
	else
	{
		timestamp_size_variable = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	}
	uint8_t CAN_to_UART_message_buffer[sizeof(message_type_char) + id_lenght + CAN_DATA_LENGHT_BYTE_SIZE + data_lenght + timestamp_size_variable + sizeof(message_end_char)];
 800135c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001360:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001364:	441a      	add	r2, r3
 8001366:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800136a:	4413      	add	r3, r2
 800136c:	1cdc      	adds	r4, r3, #3
 800136e:	466b      	mov	r3, sp
 8001370:	4699      	mov	r9, r3
 8001372:	4623      	mov	r3, r4
 8001374:	3b01      	subs	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	4620      	mov	r0, r4
 800137a:	f04f 0100 	mov.w	r1, #0
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	00cb      	lsls	r3, r1, #3
 8001388:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800138c:	00c2      	lsls	r2, r0, #3
 800138e:	4620      	mov	r0, r4
 8001390:	f04f 0100 	mov.w	r1, #0
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	00cb      	lsls	r3, r1, #3
 800139e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013a2:	00c2      	lsls	r2, r0, #3
 80013a4:	1de3      	adds	r3, r4, #7
 80013a6:	08db      	lsrs	r3, r3, #3
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	ebad 0d03 	sub.w	sp, sp, r3
 80013ae:	466b      	mov	r3, sp
 80013b0:	3300      	adds	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
	uint8_t message_element_counter = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t cycle_start_value_tmp = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
	CAN_to_UART_message_buffer[0] = message_type_char;
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80013c4:	701a      	strb	r2, [r3, #0]
	message_element_counter++;
 80013c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013ca:	3301      	adds	r3, #1
 80013cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	cycle_start_value_tmp = message_element_counter;
 80013d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013d4:	73fb      	strb	r3, [r7, #15]
	for (int i = message_element_counter; i < (sizeof(id_array) + cycle_start_value_tmp); i++)
 80013d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
 80013dc:	e011      	b.n	8001402 <parse_CAN_message+0x20a>
	{
		CAN_to_UART_message_buffer[i] = id_array[i - cycle_start_value_tmp];
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	6a3a      	ldr	r2, [r7, #32]
 80013e6:	5cd1      	ldrb	r1, [r2, r3]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ec:	4413      	add	r3, r2
 80013ee:	460a      	mov	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
		message_element_counter++;
 80013f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013f6:	3301      	adds	r3, #1
 80013f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = message_element_counter; i < (sizeof(id_array) + cycle_start_value_tmp); i++)
 80013fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fe:	3301      	adds	r3, #1
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
 8001402:	462a      	mov	r2, r5
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	441a      	add	r2, r3
 8001408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140a:	429a      	cmp	r2, r3
 800140c:	d8e7      	bhi.n	80013de <parse_CAN_message+0x1e6>
	}
	uint8_t data_lengt_tmp_buff = convert_data_lenght_to_DLC_code(data_lenght/2);
 800140e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001412:	085b      	lsrs	r3, r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f86e 	bl	80014f8 <convert_data_lenght_to_DLC_code>
 800141c:	4603      	mov	r3, r0
 800141e:	73bb      	strb	r3, [r7, #14]
	uint8_t CAN_DLS_char_array[1];
	convert_int_value_to_ascii_hex_char_array(sizeof(CAN_DLS_char_array), CAN_DLS_char_array, data_lengt_tmp_buff);
 8001420:	7bba      	ldrb	r2, [r7, #14]
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	4619      	mov	r1, r3
 8001426:	2001      	movs	r0, #1
 8001428:	f000 f92c 	bl	8001684 <convert_int_value_to_ascii_hex_char_array>
	CAN_to_UART_message_buffer[message_element_counter] = CAN_DLS_char_array[0];
 800142c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001430:	7939      	ldrb	r1, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	54d1      	strb	r1, [r2, r3]
	message_element_counter++;
 8001436:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800143a:	3301      	adds	r3, #1
 800143c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	cycle_start_value_tmp = message_element_counter;
 8001440:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001444:	73fb      	strb	r3, [r7, #15]
	for (int i = message_element_counter; i < (sizeof(data_array) + cycle_start_value_tmp); i++)
 8001446:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
 800144c:	e011      	b.n	8001472 <parse_CAN_message+0x27a>
	{
		CAN_to_UART_message_buffer[i] = data_array[i - cycle_start_value_tmp];
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	5cd1      	ldrb	r1, [r2, r3]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145c:	4413      	add	r3, r2
 800145e:	460a      	mov	r2, r1
 8001460:	701a      	strb	r2, [r3, #0]
		message_element_counter++;
 8001462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001466:	3301      	adds	r3, #1
 8001468:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (int i = message_element_counter; i < (sizeof(data_array) + cycle_start_value_tmp); i++)
 800146c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800146e:	3301      	adds	r3, #1
 8001470:	63bb      	str	r3, [r7, #56]	; 0x38
 8001472:	4632      	mov	r2, r6
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	441a      	add	r2, r3
 8001478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800147a:	429a      	cmp	r2, r3
 800147c:	d8e7      	bhi.n	800144e <parse_CAN_message+0x256>
	}
	if (timestamp_enabled)
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <parse_CAN_message+0x2fc>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d020      	beq.n	80014c8 <parse_CAN_message+0x2d0>
	{
		cycle_start_value_tmp = message_element_counter;
 8001486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800148a:	73fb      	strb	r3, [r7, #15]
		for (int i = message_element_counter; i < (sizeof(timestamp_array) + cycle_start_value_tmp); i++)
 800148c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001492:	e014      	b.n	80014be <parse_CAN_message+0x2c6>
		{
			CAN_to_UART_message_buffer[i] = timestamp_array[i - cycle_start_value_tmp];
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800149e:	4413      	add	r3, r2
 80014a0:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014a8:	4413      	add	r3, r2
 80014aa:	460a      	mov	r2, r1
 80014ac:	701a      	strb	r2, [r3, #0]
			message_element_counter++;
 80014ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014b2:	3301      	adds	r3, #1
 80014b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		for (int i = message_element_counter; i < (sizeof(timestamp_array) + cycle_start_value_tmp); i++)
 80014b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ba:	3301      	adds	r3, #1
 80014bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	1d1a      	adds	r2, r3, #4
 80014c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8e5      	bhi.n	8001494 <parse_CAN_message+0x29c>
		}
	}
	CAN_to_UART_message_buffer[message_element_counter] = message_end_char;
 80014c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 80014d2:	54d1      	strb	r1, [r2, r3]
	add_message_to_UART_TX_queue(CAN_to_UART_message_buffer, sizeof(CAN_to_UART_message_buffer), TX_PRIORITY_3);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	b2e1      	uxtb	r1, r4
 80014d8:	2203      	movs	r2, #3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f85c 	bl	8000598 <add_message_to_UART_TX_queue>
 80014e0:	46cd      	mov	sp, r9
 80014e2:	46c5      	mov	sp, r8
}
 80014e4:	bf00      	nop
 80014e6:	3744      	adds	r7, #68	; 0x44
 80014e8:	46bd      	mov	sp, r7
 80014ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014ee:	b004      	add	sp, #16
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000ecd 	.word	0x20000ecd

080014f8 <convert_data_lenght_to_DLC_code>:

uint8_t convert_data_lenght_to_DLC_code(uint8_t value_to_convert)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	uint8_t DLC_code;
	switch (value_to_convert)
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b40      	cmp	r3, #64	; 0x40
 8001506:	f200 80b5 	bhi.w	8001674 <convert_data_lenght_to_DLC_code+0x17c>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <convert_data_lenght_to_DLC_code+0x18>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	08001615 	.word	0x08001615
 8001514:	0800161b 	.word	0x0800161b
 8001518:	08001621 	.word	0x08001621
 800151c:	08001627 	.word	0x08001627
 8001520:	0800162d 	.word	0x0800162d
 8001524:	08001633 	.word	0x08001633
 8001528:	08001639 	.word	0x08001639
 800152c:	0800163f 	.word	0x0800163f
 8001530:	08001645 	.word	0x08001645
 8001534:	08001675 	.word	0x08001675
 8001538:	08001675 	.word	0x08001675
 800153c:	08001675 	.word	0x08001675
 8001540:	0800164b 	.word	0x0800164b
 8001544:	08001675 	.word	0x08001675
 8001548:	08001675 	.word	0x08001675
 800154c:	08001675 	.word	0x08001675
 8001550:	08001651 	.word	0x08001651
 8001554:	08001675 	.word	0x08001675
 8001558:	08001675 	.word	0x08001675
 800155c:	08001675 	.word	0x08001675
 8001560:	08001657 	.word	0x08001657
 8001564:	08001675 	.word	0x08001675
 8001568:	08001675 	.word	0x08001675
 800156c:	08001675 	.word	0x08001675
 8001570:	0800165d 	.word	0x0800165d
 8001574:	08001675 	.word	0x08001675
 8001578:	08001675 	.word	0x08001675
 800157c:	08001675 	.word	0x08001675
 8001580:	08001675 	.word	0x08001675
 8001584:	08001675 	.word	0x08001675
 8001588:	08001675 	.word	0x08001675
 800158c:	08001675 	.word	0x08001675
 8001590:	08001663 	.word	0x08001663
 8001594:	08001675 	.word	0x08001675
 8001598:	08001675 	.word	0x08001675
 800159c:	08001675 	.word	0x08001675
 80015a0:	08001675 	.word	0x08001675
 80015a4:	08001675 	.word	0x08001675
 80015a8:	08001675 	.word	0x08001675
 80015ac:	08001675 	.word	0x08001675
 80015b0:	08001675 	.word	0x08001675
 80015b4:	08001675 	.word	0x08001675
 80015b8:	08001675 	.word	0x08001675
 80015bc:	08001675 	.word	0x08001675
 80015c0:	08001675 	.word	0x08001675
 80015c4:	08001675 	.word	0x08001675
 80015c8:	08001675 	.word	0x08001675
 80015cc:	08001675 	.word	0x08001675
 80015d0:	08001669 	.word	0x08001669
 80015d4:	08001675 	.word	0x08001675
 80015d8:	08001675 	.word	0x08001675
 80015dc:	08001675 	.word	0x08001675
 80015e0:	08001675 	.word	0x08001675
 80015e4:	08001675 	.word	0x08001675
 80015e8:	08001675 	.word	0x08001675
 80015ec:	08001675 	.word	0x08001675
 80015f0:	08001675 	.word	0x08001675
 80015f4:	08001675 	.word	0x08001675
 80015f8:	08001675 	.word	0x08001675
 80015fc:	08001675 	.word	0x08001675
 8001600:	08001675 	.word	0x08001675
 8001604:	08001675 	.word	0x08001675
 8001608:	08001675 	.word	0x08001675
 800160c:	08001675 	.word	0x08001675
 8001610:	0800166f 	.word	0x0800166f
	{
	case 0:
	{
		DLC_code = 0x0;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
		break;
 8001618:	e02c      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 1:
	{
		DLC_code = 0x1;
 800161a:	2301      	movs	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
		break;
 800161e:	e029      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 2:
	{
		DLC_code = 0x2;
 8001620:	2302      	movs	r3, #2
 8001622:	73fb      	strb	r3, [r7, #15]
		break;
 8001624:	e026      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 3:
	{
		DLC_code = 0x3;
 8001626:	2303      	movs	r3, #3
 8001628:	73fb      	strb	r3, [r7, #15]
		break;
 800162a:	e023      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 4:
	{
		DLC_code = 0x4;
 800162c:	2304      	movs	r3, #4
 800162e:	73fb      	strb	r3, [r7, #15]
		break;
 8001630:	e020      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 5:
	{
		DLC_code = 0x5;
 8001632:	2305      	movs	r3, #5
 8001634:	73fb      	strb	r3, [r7, #15]
		break;
 8001636:	e01d      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 6:
	{
		DLC_code = 0x6;
 8001638:	2306      	movs	r3, #6
 800163a:	73fb      	strb	r3, [r7, #15]
		break;
 800163c:	e01a      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 7:
	{
		DLC_code = 0x7;
 800163e:	2307      	movs	r3, #7
 8001640:	73fb      	strb	r3, [r7, #15]
		break;
 8001642:	e017      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 8:
	{
		DLC_code = 0x8;
 8001644:	2308      	movs	r3, #8
 8001646:	73fb      	strb	r3, [r7, #15]
		break;
 8001648:	e014      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 12:
	{
		DLC_code = 0x9;
 800164a:	2309      	movs	r3, #9
 800164c:	73fb      	strb	r3, [r7, #15]
		break;
 800164e:	e011      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 16:
	{
		DLC_code = 0xA;
 8001650:	230a      	movs	r3, #10
 8001652:	73fb      	strb	r3, [r7, #15]
		break;
 8001654:	e00e      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 20:
	{
		DLC_code = 0xB;
 8001656:	230b      	movs	r3, #11
 8001658:	73fb      	strb	r3, [r7, #15]
		break;
 800165a:	e00b      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 24:
	{
		DLC_code = 0xC;
 800165c:	230c      	movs	r3, #12
 800165e:	73fb      	strb	r3, [r7, #15]
		break;
 8001660:	e008      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 32:
	{
		DLC_code = 0xD;
 8001662:	230d      	movs	r3, #13
 8001664:	73fb      	strb	r3, [r7, #15]
		break;
 8001666:	e005      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 48:
	{
		DLC_code = 0xE;
 8001668:	230e      	movs	r3, #14
 800166a:	73fb      	strb	r3, [r7, #15]
		break;
 800166c:	e002      	b.n	8001674 <convert_data_lenght_to_DLC_code+0x17c>
	}
	case 64:
	{
		DLC_code = 0xF;
 800166e:	230f      	movs	r3, #15
 8001670:	73fb      	strb	r3, [r7, #15]
		break;
 8001672:	bf00      	nop
	}
	}
	return DLC_code;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop

08001684 <convert_int_value_to_ascii_hex_char_array>:

void convert_int_value_to_ascii_hex_char_array(uint8_t size_of_array, uint8_t* array, uint32_t value)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size_of_array; i++)
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e018      	b.n	80016ca <convert_int_value_to_ascii_hex_char_array+0x46>
	{
		*(array + (sizeof(uint8_t) * i)) = (value >> ((size_of_array - i - 1) * INT_TO_ASCII_CONVERT_BITWISE_SHIFT)) & 0xF;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	440b      	add	r3, r1
 80016b0:	f002 020f 	and.w	r2, r2, #15
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	701a      	strb	r2, [r3, #0]
		int_to_char(array + (sizeof(uint8_t) * i));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	4413      	add	r3, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f80c 	bl	80016dc <int_to_char>
	for (int i = 0; i < size_of_array; i++)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	dbe2      	blt.n	8001698 <convert_int_value_to_ascii_hex_char_array+0x14>
	}
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <int_to_char>:
	uint32_t tmp_seg2 = convert_hex_char_sequence_to_int_value(NON_STAND_CAN_SEG2_SIZE, &UART_message[NON_STAND_CAN_SEG2_INDEX]);
	CAN_baudrate_change(&hfdcan1, tmp_prescaler, tmp_SJW, tmp_seg1, tmp_seg2);
}

void int_to_char(uint8_t* variable_pointer)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	if (*variable_pointer <= 9)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b09      	cmp	r3, #9
 80016ea:	d806      	bhi.n	80016fa <int_to_char+0x1e>
	{
		*variable_pointer = *variable_pointer + 0x30;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	3330      	adds	r3, #48	; 0x30
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*variable_pointer = *variable_pointer + 0x40 - 9;
	}
}
 80016f8:	e005      	b.n	8001706 <int_to_char+0x2a>
		*variable_pointer = *variable_pointer + 0x40 - 9;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	3337      	adds	r3, #55	; 0x37
 8001700:	b2da      	uxtb	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	701a      	strb	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <init_CAN_values>:

void init_CAN_values(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
	CAN_RX_put_index = 0;
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <init_CAN_values+0x34>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
	CAN_RX_get_index = 0;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <init_CAN_values+0x38>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
	CAN_TX_put_index = 0;
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <init_CAN_values+0x3c>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
	CAN_TX_get_index = 0;
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <init_CAN_values+0x40>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
	CAN_TX_success_flag = 0;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <init_CAN_values+0x44>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
	CAN_RX_success_flag = 0;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <init_CAN_values+0x48>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000076c 	.word	0x2000076c
 800174c:	2000099c 	.word	0x2000099c
 8001750:	20000ed0 	.word	0x20000ed0
 8001754:	20000664 	.word	0x20000664
 8001758:	20000ecc 	.word	0x20000ecc
 800175c:	20000ecf 	.word	0x20000ecf

08001760 <CAN_message_data_lenght_define>:
	uint32_t return_int_value = unite_digits_sequence(sizeof(tmp_arr_2), tmp_arr_2, ASCII_TO_INT_CONVERT_BITWISE_SHIFT);
	return return_int_value;
}

uint32_t CAN_message_data_lenght_define(uint32_t data_lenght_code)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	uint32_t lenght_bytes;
	switch (data_lenght_code)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800176e:	f000 80a8 	beq.w	80018c2 <CAN_message_data_lenght_define+0x162>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8001778:	f200 80a6 	bhi.w	80018c8 <CAN_message_data_lenght_define+0x168>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001782:	f000 809b 	beq.w	80018bc <CAN_message_data_lenght_define+0x15c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800178c:	f200 809c 	bhi.w	80018c8 <CAN_message_data_lenght_define+0x168>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8001796:	f000 808e 	beq.w	80018b6 <CAN_message_data_lenght_define+0x156>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 80017a0:	f200 8092 	bhi.w	80018c8 <CAN_message_data_lenght_define+0x168>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80017aa:	f000 8081 	beq.w	80018b0 <CAN_message_data_lenght_define+0x150>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80017b4:	f200 8088 	bhi.w	80018c8 <CAN_message_data_lenght_define+0x168>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80017be:	d074      	beq.n	80018aa <CAN_message_data_lenght_define+0x14a>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80017c6:	d87f      	bhi.n	80018c8 <CAN_message_data_lenght_define+0x168>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80017ce:	d069      	beq.n	80018a4 <CAN_message_data_lenght_define+0x144>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80017d6:	d877      	bhi.n	80018c8 <CAN_message_data_lenght_define+0x168>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80017de:	d05e      	beq.n	800189e <CAN_message_data_lenght_define+0x13e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80017e6:	d86f      	bhi.n	80018c8 <CAN_message_data_lenght_define+0x168>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017ee:	d053      	beq.n	8001898 <CAN_message_data_lenght_define+0x138>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017f6:	d867      	bhi.n	80018c8 <CAN_message_data_lenght_define+0x168>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80017fe:	d048      	beq.n	8001892 <CAN_message_data_lenght_define+0x132>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001806:	d85f      	bhi.n	80018c8 <CAN_message_data_lenght_define+0x168>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800180e:	d03d      	beq.n	800188c <CAN_message_data_lenght_define+0x12c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001816:	d857      	bhi.n	80018c8 <CAN_message_data_lenght_define+0x168>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800181e:	d032      	beq.n	8001886 <CAN_message_data_lenght_define+0x126>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001826:	d84f      	bhi.n	80018c8 <CAN_message_data_lenght_define+0x168>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800182e:	d027      	beq.n	8001880 <CAN_message_data_lenght_define+0x120>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001836:	d847      	bhi.n	80018c8 <CAN_message_data_lenght_define+0x168>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800183e:	d01c      	beq.n	800187a <CAN_message_data_lenght_define+0x11a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001846:	d83f      	bhi.n	80018c8 <CAN_message_data_lenght_define+0x168>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800184e:	d011      	beq.n	8001874 <CAN_message_data_lenght_define+0x114>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001856:	d837      	bhi.n	80018c8 <CAN_message_data_lenght_define+0x168>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d004      	beq.n	8001868 <CAN_message_data_lenght_define+0x108>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d003      	beq.n	800186e <CAN_message_data_lenght_define+0x10e>
 8001866:	e02f      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	{
	case FDCAN_DLC_BYTES_0:
	{
		lenght_bytes = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
		break;
 800186c:	e02c      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_1:
	{
		lenght_bytes = 1;
 800186e:	2301      	movs	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
		break;
 8001872:	e029      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_2:
	{
		lenght_bytes = 2;
 8001874:	2302      	movs	r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
		break;
 8001878:	e026      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_3:
	{
		lenght_bytes = 3;
 800187a:	2303      	movs	r3, #3
 800187c:	60fb      	str	r3, [r7, #12]
		break;
 800187e:	e023      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_4:
	{
		lenght_bytes = 4;
 8001880:	2304      	movs	r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
		break;
 8001884:	e020      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_5:
	{
		lenght_bytes = 5;
 8001886:	2305      	movs	r3, #5
 8001888:	60fb      	str	r3, [r7, #12]
		break;
 800188a:	e01d      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_6:
	{
		lenght_bytes = 6;
 800188c:	2306      	movs	r3, #6
 800188e:	60fb      	str	r3, [r7, #12]
		break;
 8001890:	e01a      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_7:
	{
		lenght_bytes = 7;
 8001892:	2307      	movs	r3, #7
 8001894:	60fb      	str	r3, [r7, #12]
		break;
 8001896:	e017      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_8:
	{
		lenght_bytes = 8;
 8001898:	2308      	movs	r3, #8
 800189a:	60fb      	str	r3, [r7, #12]
		break;
 800189c:	e014      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_12:
	{
		lenght_bytes = 12;
 800189e:	230c      	movs	r3, #12
 80018a0:	60fb      	str	r3, [r7, #12]
		break;
 80018a2:	e011      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_16:
	{
		lenght_bytes = 16;
 80018a4:	2310      	movs	r3, #16
 80018a6:	60fb      	str	r3, [r7, #12]
		break;
 80018a8:	e00e      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_20:
	{
		lenght_bytes = 20;
 80018aa:	2314      	movs	r3, #20
 80018ac:	60fb      	str	r3, [r7, #12]
		break;
 80018ae:	e00b      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_24:
	{
		lenght_bytes = 24;
 80018b0:	2318      	movs	r3, #24
 80018b2:	60fb      	str	r3, [r7, #12]
		break;
 80018b4:	e008      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_32:
	{
		lenght_bytes = 32;
 80018b6:	2320      	movs	r3, #32
 80018b8:	60fb      	str	r3, [r7, #12]
		break;
 80018ba:	e005      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_48:
	{
		lenght_bytes = 48;
 80018bc:	2330      	movs	r3, #48	; 0x30
 80018be:	60fb      	str	r3, [r7, #12]
		break;
 80018c0:	e002      	b.n	80018c8 <CAN_message_data_lenght_define+0x168>
	}
	case FDCAN_DLC_BYTES_64:
	{
		lenght_bytes = 64;
 80018c2:	2340      	movs	r3, #64	; 0x40
 80018c4:	60fb      	str	r3, [r7, #12]
		break;
 80018c6:	bf00      	nop
	}
	}
	return lenght_bytes;
 80018c8:	68fb      	ldr	r3, [r7, #12]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <init_CAN_filter>:
	}
	return number_of_chars;
}

void init_CAN_filter(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af02      	add	r7, sp, #8
	filter_config.IdType = FDCAN_STANDARD_ID;	//FDCAN_STANDARD_ID;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <init_CAN_filter+0x48>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
	filter_config.FilterIndex = 0;
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <init_CAN_filter+0x48>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	605a      	str	r2, [r3, #4]
	filter_config.FilterType = FDCAN_FILTER_MASK;
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <init_CAN_filter+0x48>)
 80018ec:	2202      	movs	r2, #2
 80018ee:	609a      	str	r2, [r3, #8]
	filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <init_CAN_filter+0x48>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	60da      	str	r2, [r3, #12]
	filter_config.FilterID1 = 0x0;
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <init_CAN_filter+0x48>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
	filter_config.FilterID2 = 0x0;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <init_CAN_filter+0x48>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 8001902:	4907      	ldr	r1, [pc, #28]	; (8001920 <init_CAN_filter+0x48>)
 8001904:	4807      	ldr	r0, [pc, #28]	; (8001924 <init_CAN_filter+0x4c>)
 8001906:	f000 fbd3 	bl	80020b0 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
 800190a:	2300      	movs	r3, #0
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2300      	movs	r3, #0
 8001910:	2202      	movs	r2, #2
 8001912:	2102      	movs	r1, #2
 8001914:	4803      	ldr	r0, [pc, #12]	; (8001924 <init_CAN_filter+0x4c>)
 8001916:	f000 fc25 	bl	8002164 <HAL_FDCAN_ConfigGlobalFilter>
	//HAL_FDCAN_ConfigExtendedIdMask(&hfdcan1, 0);
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000984 	.word	0x20000984
 8001924:	20000ed4 	.word	0x20000ed4

08001928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800192a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopForever+0x6>)
  ldr r1, =_edata
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <LoopForever+0xe>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001944:	4c0b      	ldr	r4, [pc, #44]	; (8001974 <LoopForever+0x16>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001952:	f7ff fb09 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f004 fa05 	bl	8005d64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800195a:	f7fe fed5 	bl	8000708 <main>

0800195e <LoopForever>:

LoopForever:
    b LoopForever
 800195e:	e7fe      	b.n	800195e <LoopForever>
  ldr   r0, =_estack
 8001960:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800196c:	08005e38 	.word	0x08005e38
  ldr r2, =_sbss
 8001970:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001974:	20001188 	.word	0x20001188

08001978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC1_2_IRQHandler>

0800197a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 f939 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f80e 	bl	80019ac <HAL_InitTick>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	e001      	b.n	80019a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800199c:	f7ff f9b2 	bl	8000d04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019a0:	79fb      	ldrb	r3, [r7, #7]

}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <HAL_InitTick+0x68>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d022      	beq.n	8001a06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_InitTick+0x6c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <HAL_InitTick+0x68>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f944 	bl	8001c62 <HAL_SYSTICK_Config>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10f      	bne.n	8001a00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b0f      	cmp	r3, #15
 80019e4:	d809      	bhi.n	80019fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e6:	2200      	movs	r2, #0
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	f04f 30ff 	mov.w	r0, #4294967295
 80019ee:	f000 f910 	bl	8001c12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <HAL_InitTick+0x70>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e007      	b.n	8001a0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	e004      	b.n	8001a0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e001      	b.n	8001a0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000008 	.word	0x20000008
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_IncTick+0x1c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_IncTick+0x20>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a03      	ldr	r2, [pc, #12]	; (8001a3c <HAL_IncTick+0x1c>)
 8001a30:	6013      	str	r3, [r2, #0]
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	20001184 	.word	0x20001184
 8001a40:	20000008 	.word	0x20000008

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20001184 	.word	0x20001184

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db0b      	blt.n	8001aea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4907      	ldr	r1, [pc, #28]	; (8001af8 <__NVIC_EnableIRQ+0x38>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	; (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc8:	d301      	bcc.n	8001bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00f      	b.n	8001bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <SysTick_Config+0x40>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f7ff ff8e 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <SysTick_Config+0x40>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <SysTick_Config+0x40>)
 8001be8:	2207      	movs	r2, #7
 8001bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000e010 	.word	0xe000e010

08001bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff29 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff40 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff90 	bl	8001b50 <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5f 	bl	8001afc <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff33 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffa4 	bl	8001bb8 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b085      	sub	sp, #20
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d005      	beq.n	8001c9e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e037      	b.n	8001d0e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 020e 	bic.w	r2, r2, #14
 8001cac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cbc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	f003 021f 	and.w	r2, r3, #31
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	2101      	movs	r1, #1
 8001cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00c      	beq.n	8001d0e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d02:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d0c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d00d      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2204      	movs	r2, #4
 8001d48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	e047      	b.n	8001df0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 020e 	bic.w	r2, r2, #14
 8001d6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0201 	bic.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001dce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
    }
  }
  return status;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e147      	b.n	800209e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe ff92 	bl	8000d4c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0210 	bic.w	r2, r2, #16
 8001e36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e38:	f7ff fe04 	bl	8001a44 <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e3e:	e012      	b.n	8001e66 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001e40:	f7ff fe00 	bl	8001a44 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b0a      	cmp	r3, #10
 8001e4c:	d90b      	bls.n	8001e66 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e52:	f043 0201 	orr.w	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e11b      	b.n	800209e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d0e5      	beq.n	8001e40 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e84:	f7ff fdde 	bl	8001a44 <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001e8a:	e012      	b.n	8001eb2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001e8c:	f7ff fdda 	bl	8001a44 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b0a      	cmp	r3, #10
 8001e98:	d90b      	bls.n	8001eb2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9e:	f043 0201 	orr.w	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0f5      	b.n	800209e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0e5      	beq.n	8001e8c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0202 	orr.w	r2, r2, #2
 8001ece:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a74      	ldr	r2, [pc, #464]	; (80020a8 <HAL_FDCAN_Init+0x2ac>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d103      	bne.n	8001ee2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001eda:	4a74      	ldr	r2, [pc, #464]	; (80020ac <HAL_FDCAN_Init+0x2b0>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7c1b      	ldrb	r3, [r3, #16]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d108      	bne.n	8001efc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ef8:	619a      	str	r2, [r3, #24]
 8001efa:	e007      	b.n	8001f0c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f0a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7c5b      	ldrb	r3, [r3, #17]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d108      	bne.n	8001f26 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f22:	619a      	str	r2, [r3, #24]
 8001f24:	e007      	b.n	8001f36 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699a      	ldr	r2, [r3, #24]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f34:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	7c9b      	ldrb	r3, [r3, #18]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d108      	bne.n	8001f50 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699a      	ldr	r2, [r3, #24]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f4c:	619a      	str	r2, [r3, #24]
 8001f4e:	e007      	b.n	8001f60 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f5e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001f84:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0210 	bic.w	r2, r2, #16
 8001f94:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d108      	bne.n	8001fb0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0204 	orr.w	r2, r2, #4
 8001fac:	619a      	str	r2, [r3, #24]
 8001fae:	e02c      	b.n	800200a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d028      	beq.n	800200a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d01c      	beq.n	8001ffa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fce:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0210 	orr.w	r2, r2, #16
 8001fde:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d110      	bne.n	800200a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0220 	orr.w	r2, r2, #32
 8001ff6:	619a      	str	r2, [r3, #24]
 8001ff8:	e007      	b.n	800200a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699a      	ldr	r2, [r3, #24]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0220 	orr.w	r2, r2, #32
 8002008:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	3b01      	subs	r3, #1
 8002010:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	3b01      	subs	r3, #1
 8002018:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800201a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002022:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	3b01      	subs	r3, #1
 800202c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002032:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002034:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800203e:	d115      	bne.n	800206c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	3b01      	subs	r3, #1
 800204c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800204e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	3b01      	subs	r3, #1
 8002056:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002058:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	3b01      	subs	r3, #1
 8002062:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002068:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800206a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fc8c 	bl	80029a0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40006400 	.word	0x40006400
 80020ac:	40006500 	.word	0x40006500

080020b0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80020c0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d002      	beq.n	80020ce <HAL_FDCAN_ConfigFilter+0x1e>
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d13d      	bne.n	800214a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d119      	bne.n	800210a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80020e2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80020ea:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e01d      	b.n	8002146 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	075a      	lsls	r2, r3, #29
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	079a      	lsls	r2, r3, #30
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3304      	adds	r3, #4
 800213e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e006      	b.n	8002158 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214e:	f043 0202 	orr.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
  }
}
 8002158:	4618      	mov	r0, r3
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d116      	bne.n	80021ac <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002186:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	011a      	lsls	r2, r3, #4
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	431a      	orrs	r2, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	431a      	orrs	r2, r3
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	431a      	orrs	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e006      	b.n	80021ba <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b0:	f043 0204 	orr.w	r2, r3, #4
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_FDCAN_ConfigTimestampCounter>:
  * @param  TimestampPrescaler Timestamp Counter Prescaler.
  *         This parameter can be a value of @arg FDCAN_Timestamp_Prescaler.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTimestampCounter(FDCAN_HandleTypeDef *hfdcan, uint32_t TimestampPrescaler)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TIMESTAMP_PRESCALER(TimestampPrescaler));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d10b      	bne.n	80021f4 <HAL_FDCAN_ConfigTimestampCounter+0x2e>
  {
    /* Configure prescaler */
    MODIFY_REG(hfdcan->Instance->TSCC, FDCAN_TSCC_TCP, TimestampPrescaler);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	621a      	str	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e006      	b.n	8002202 <HAL_FDCAN_ConfigTimestampCounter+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f8:	f043 0204 	orr.w	r2, r3, #4
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
  }
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_FDCAN_EnableTimestampCounter>:
  * @param  TimestampOperation Timestamp counter operation.
  *         This parameter can be a value of @arg FDCAN_Timestamp.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTimestampCounter(FDCAN_HandleTypeDef *hfdcan, uint32_t TimestampOperation)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TIMESTAMP(TimestampOperation));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	d10b      	bne.n	800223c <HAL_FDCAN_EnableTimestampCounter+0x2e>
  {
    /* Enable timestamp counter */
    MODIFY_REG(hfdcan->Instance->TSCC, FDCAN_TSCC_TSS, TimestampOperation);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	f023 0103 	bic.w	r1, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	621a      	str	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	e006      	b.n	800224a <HAL_FDCAN_EnableTimestampCounter+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002240:	f043 0204 	orr.w	r2, r3, #4
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_FDCAN_GetTimestampCounter>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Timestamp counter value
  */
uint16_t HAL_FDCAN_GetTimestampCounter(FDCAN_HandleTypeDef *hfdcan)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  return (uint16_t)(hfdcan->Instance->TSCV);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	b29b      	uxth	r3, r3
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d110      	bne.n	80022a8 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0201 	bic.w	r2, r2, #1
 800229c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e006      	b.n	80022b6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ac:	f043 0204 	orr.w	r2, r3, #4
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
  }
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b08b      	sub	sp, #44	; 0x2c
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022d8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80022da:	7efb      	ldrb	r3, [r7, #27]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	f040 80bc 	bne.w	800245a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d121      	bne.n	800232c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0af      	b.n	8002468 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	e020      	b.n	800236e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e08d      	b.n	8002468 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d107      	bne.n	8002392 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	0c9b      	lsrs	r3, r3, #18
 8002388:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	e005      	b.n	800239e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	3304      	adds	r3, #4
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0e1b      	lsrs	r3, r3, #24
 80023f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0fda      	lsrs	r2, r3, #31
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	3304      	adds	r3, #4
 8002406:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
 8002410:	e00a      	b.n	8002428 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	441a      	add	r2, r3
 8002418:	6839      	ldr	r1, [r7, #0]
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	440b      	add	r3, r1
 800241e:	7812      	ldrb	r2, [r2, #0]
 8002420:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	3301      	adds	r3, #1
 8002426:	623b      	str	r3, [r7, #32]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	4a11      	ldr	r2, [pc, #68]	; (8002474 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	461a      	mov	r2, r3
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	4293      	cmp	r3, r2
 8002438:	d3eb      	bcc.n	8002412 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b40      	cmp	r3, #64	; 0x40
 800243e:	d105      	bne.n	800244c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800244a:	e004      	b.n	8002456 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e006      	b.n	8002468 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245e:	f043 0208 	orr.w	r2, r3, #8
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
  }
}
 8002468:	4618      	mov	r0, r3
 800246a:	372c      	adds	r7, #44	; 0x2c
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	08005dec 	.word	0x08005dec

08002478 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800248a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d003      	beq.n	800249a <HAL_FDCAN_ActivateNotification+0x22>
 8002492:	7dfb      	ldrb	r3, [r7, #23]
 8002494:	2b02      	cmp	r3, #2
 8002496:	f040 80c8 	bne.w	800262a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d03b      	beq.n	800252e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d031      	beq.n	800252e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d004      	beq.n	80024de <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d027      	beq.n	800252e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d004      	beq.n	80024f2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01d      	beq.n	800252e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d004      	beq.n	8002506 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d013      	beq.n	800252e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00c      	beq.n	800253e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d13b      	bne.n	80025ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002558:	2b00      	cmp	r3, #0
 800255a:	d004      	beq.n	8002566 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d131      	bne.n	80025ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d127      	bne.n	80025ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d11d      	bne.n	80025ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002594:	2b00      	cmp	r3, #0
 8002596:	d004      	beq.n	80025a2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d113      	bne.n	80025ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00c      	beq.n	80025da <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0202 	orr.w	r2, r2, #2
 80025d8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d009      	beq.n	80025f8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	430a      	orrs	r2, r1
 8002612:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	430a      	orrs	r2, r1
 8002624:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e006      	b.n	8002638 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	f043 0202 	orr.w	r2, r3, #2
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002652:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	4013      	ands	r3, r2
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	6a3a      	ldr	r2, [r7, #32]
 8002678:	4013      	ands	r3, r2
 800267a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002686:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	4013      	ands	r3, r2
 8002692:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800269e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026b6:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4013      	ands	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2240      	movs	r2, #64	; 0x40
 80026e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f939 	bl	8002960 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01b      	beq.n	8002734 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d014      	beq.n	8002734 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002712:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800272a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800272c:	6939      	ldr	r1, [r7, #16]
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8f7 	bl	8002922 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002740:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f8b6 	bl	80028b6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6a3a      	ldr	r2, [r7, #32]
 8002756:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002758:	6a39      	ldr	r1, [r7, #32]
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f8b6 	bl	80028cc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800276e:	69f9      	ldr	r1, [r7, #28]
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f8b6 	bl	80028e2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00e      	beq.n	80027a2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f8ab 	bl	80028f8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01a      	beq.n	80027e6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d013      	beq.n	80027e6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80027c6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4013      	ands	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80027de:	68f9      	ldr	r1, [r7, #12]
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f893 	bl	800290c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800280a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f893 	bl	8002938 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00e      	beq.n	800283e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002836:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f887 	bl	800294c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d011      	beq.n	8002870 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002862:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002868:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800287e:	6979      	ldr	r1, [r7, #20]
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f881 	bl	8002988 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d009      	beq.n	80028a0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f863 	bl	8002974 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80028ae:	bf00      	nop
 80028b0:	3728      	adds	r7, #40	; 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80029a8:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80029aa:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ba:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	041a      	lsls	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	061a      	lsls	r2, r3, #24
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e005      	b.n	8002a2e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d3f3      	bcc.n	8002a22 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	4000a400 	.word	0x4000a400

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a5a:	e15a      	b.n	8002d12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 814c 	beq.w	8002d0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d00b      	beq.n	8002a94 <HAL_GPIO_Init+0x48>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d007      	beq.n	8002a94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a88:	2b11      	cmp	r3, #17
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b12      	cmp	r3, #18
 8002a92:	d130      	bne.n	8002af6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aca:	2201      	movs	r2, #1
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	f003 0201 	and.w	r2, r3, #1
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	2203      	movs	r2, #3
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0xea>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b12      	cmp	r3, #18
 8002b34:	d123      	bne.n	8002b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	6939      	ldr	r1, [r7, #16]
 8002b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4013      	ands	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a6 	beq.w	8002d0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc0:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <HAL_GPIO_Init+0x2e4>)
 8002bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc4:	4a5a      	ldr	r2, [pc, #360]	; (8002d30 <HAL_GPIO_Init+0x2e4>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6613      	str	r3, [r2, #96]	; 0x60
 8002bcc:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <HAL_GPIO_Init+0x2e4>)
 8002bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd8:	4a56      	ldr	r2, [pc, #344]	; (8002d34 <HAL_GPIO_Init+0x2e8>)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	3302      	adds	r3, #2
 8002be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c02:	d01f      	beq.n	8002c44 <HAL_GPIO_Init+0x1f8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a4c      	ldr	r2, [pc, #304]	; (8002d38 <HAL_GPIO_Init+0x2ec>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d019      	beq.n	8002c40 <HAL_GPIO_Init+0x1f4>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a4b      	ldr	r2, [pc, #300]	; (8002d3c <HAL_GPIO_Init+0x2f0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <HAL_GPIO_Init+0x1f0>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a4a      	ldr	r2, [pc, #296]	; (8002d40 <HAL_GPIO_Init+0x2f4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00d      	beq.n	8002c38 <HAL_GPIO_Init+0x1ec>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a49      	ldr	r2, [pc, #292]	; (8002d44 <HAL_GPIO_Init+0x2f8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d007      	beq.n	8002c34 <HAL_GPIO_Init+0x1e8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_GPIO_Init+0x2fc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <HAL_GPIO_Init+0x1e4>
 8002c2c:	2305      	movs	r3, #5
 8002c2e:	e00a      	b.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c30:	2306      	movs	r3, #6
 8002c32:	e008      	b.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c34:	2304      	movs	r3, #4
 8002c36:	e006      	b.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e004      	b.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e002      	b.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c44:	2300      	movs	r3, #0
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	f002 0203 	and.w	r2, r2, #3
 8002c4c:	0092      	lsls	r2, r2, #2
 8002c4e:	4093      	lsls	r3, r2
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c56:	4937      	ldr	r1, [pc, #220]	; (8002d34 <HAL_GPIO_Init+0x2e8>)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c64:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c88:	4a30      	ldr	r2, [pc, #192]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002c8e:	4b2f      	ldr	r3, [pc, #188]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cb2:	4a26      	ldr	r2, [pc, #152]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cb8:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d06:	4a11      	ldr	r2, [pc, #68]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f ae9d 	bne.w	8002a5c <HAL_GPIO_Init+0x10>
  }
}
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40010000 	.word	0x40010000
 8002d38:	48000400 	.word	0x48000400
 8002d3c:	48000800 	.word	0x48000800
 8002d40:	48000c00 	.word	0x48000c00
 8002d44:	48001000 	.word	0x48001000
 8002d48:	48001400 	.word	0x48001400
 8002d4c:	40010400 	.word	0x40010400

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d141      	bne.n	8002e12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d8e:	4b4b      	ldr	r3, [pc, #300]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9a:	d131      	bne.n	8002e00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d9c:	4b47      	ldr	r3, [pc, #284]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da2:	4a46      	ldr	r2, [pc, #280]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dac:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002db4:	4a41      	ldr	r2, [pc, #260]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dbc:	4b40      	ldr	r3, [pc, #256]	; (8002ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2232      	movs	r2, #50	; 0x32
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	4a3f      	ldr	r2, [pc, #252]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	0c9b      	lsrs	r3, r3, #18
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dd2:	e002      	b.n	8002dda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dda:	4b38      	ldr	r3, [pc, #224]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de6:	d102      	bne.n	8002dee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f2      	bne.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dee:	4b33      	ldr	r3, [pc, #204]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfa:	d158      	bne.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e057      	b.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e00:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e06:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e10:	e04d      	b.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e18:	d141      	bne.n	8002e9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e1a:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e26:	d131      	bne.n	8002e8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e2e:	4a23      	ldr	r2, [pc, #140]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e40:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2232      	movs	r2, #50	; 0x32
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	0c9b      	lsrs	r3, r3, #18
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e5e:	e002      	b.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e72:	d102      	bne.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f2      	bne.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e86:	d112      	bne.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e011      	b.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e9c:	e007      	b.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40007000 	.word	0x40007000
 8002ec0:	20000000 	.word	0x20000000
 8002ec4:	431bde83 	.word	0x431bde83

08002ec8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed6:	6093      	str	r3, [r2, #8]
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40007000 	.word	0x40007000

08002ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e308      	b.n	800350c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d075      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f06:	4ba3      	ldr	r3, [pc, #652]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f10:	4ba0      	ldr	r3, [pc, #640]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d102      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3e>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d002      	beq.n	8002f2c <HAL_RCC_OscConfig+0x44>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d10b      	bne.n	8002f44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	4b99      	ldr	r3, [pc, #612]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d05b      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x108>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d157      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e2e3      	b.n	800350c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4c:	d106      	bne.n	8002f5c <HAL_RCC_OscConfig+0x74>
 8002f4e:	4b91      	ldr	r3, [pc, #580]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a90      	ldr	r2, [pc, #576]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e01d      	b.n	8002f98 <HAL_RCC_OscConfig+0xb0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x98>
 8002f66:	4b8b      	ldr	r3, [pc, #556]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a8a      	ldr	r2, [pc, #552]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b88      	ldr	r3, [pc, #544]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a87      	ldr	r2, [pc, #540]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0xb0>
 8002f80:	4b84      	ldr	r3, [pc, #528]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a83      	ldr	r2, [pc, #524]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b81      	ldr	r3, [pc, #516]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a80      	ldr	r2, [pc, #512]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fd50 	bl	8001a44 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fd4c 	bl	8001a44 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e2a8      	b.n	800350c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fba:	4b76      	ldr	r3, [pc, #472]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xc0>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fd3c 	bl	8001a44 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fd38 	bl	8001a44 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e294      	b.n	800350c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe2:	4b6c      	ldr	r3, [pc, #432]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0xe8>
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d075      	beq.n	80030ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffe:	4b65      	ldr	r3, [pc, #404]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003008:	4b62      	ldr	r3, [pc, #392]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b0c      	cmp	r3, #12
 8003016:	d102      	bne.n	800301e <HAL_RCC_OscConfig+0x136>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d002      	beq.n	8003024 <HAL_RCC_OscConfig+0x13c>
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b04      	cmp	r3, #4
 8003022:	d11f      	bne.n	8003064 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003024:	4b5b      	ldr	r3, [pc, #364]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_OscConfig+0x154>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e267      	b.n	800350c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303c:	4b55      	ldr	r3, [pc, #340]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	061b      	lsls	r3, r3, #24
 800304a:	4952      	ldr	r1, [pc, #328]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003050:	4b51      	ldr	r3, [pc, #324]	; (8003198 <HAL_RCC_OscConfig+0x2b0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe fca9 	bl	80019ac <HAL_InitTick>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d043      	beq.n	80030e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e253      	b.n	800350c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d023      	beq.n	80030b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306c:	4b49      	ldr	r3, [pc, #292]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a48      	ldr	r2, [pc, #288]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe fce4 	bl	8001a44 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003080:	f7fe fce0 	bl	8001a44 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e23c      	b.n	800350c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003092:	4b40      	ldr	r3, [pc, #256]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	4939      	ldr	r1, [pc, #228]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
 80030b2:	e01a      	b.n	80030ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b4:	4b37      	ldr	r3, [pc, #220]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a36      	ldr	r2, [pc, #216]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 80030ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe fcc0 	bl	8001a44 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fe fcbc 	bl	8001a44 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e218      	b.n	800350c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030da:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x1e0>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d03c      	beq.n	8003170 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01c      	beq.n	8003138 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fe:	4b25      	ldr	r3, [pc, #148]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003104:	4a23      	ldr	r2, [pc, #140]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7fe fc99 	bl	8001a44 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003116:	f7fe fc95 	bl	8001a44 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e1f1      	b.n	800350c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003128:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 800312a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0ef      	beq.n	8003116 <HAL_RCC_OscConfig+0x22e>
 8003136:	e01b      	b.n	8003170 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003138:	4b16      	ldr	r3, [pc, #88]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 800313a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003140:	f023 0301 	bic.w	r3, r3, #1
 8003144:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe fc7c 	bl	8001a44 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003150:	f7fe fc78 	bl	8001a44 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1d4      	b.n	800350c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ef      	bne.n	8003150 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80ab 	beq.w	80032d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003182:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x2b4>
 800318e:	2301      	movs	r3, #1
 8003190:	e005      	b.n	800319e <HAL_RCC_OscConfig+0x2b6>
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	20000004 	.word	0x20000004
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00d      	beq.n	80031be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4baf      	ldr	r3, [pc, #700]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	4aae      	ldr	r2, [pc, #696]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6593      	str	r3, [r2, #88]	; 0x58
 80031ae:	4bac      	ldr	r3, [pc, #688]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031be:	4ba9      	ldr	r3, [pc, #676]	; (8003464 <HAL_RCC_OscConfig+0x57c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ca:	4ba6      	ldr	r3, [pc, #664]	; (8003464 <HAL_RCC_OscConfig+0x57c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4aa5      	ldr	r2, [pc, #660]	; (8003464 <HAL_RCC_OscConfig+0x57c>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fe fc35 	bl	8001a44 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fe fc31 	bl	8001a44 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e18d      	b.n	800350c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f0:	4b9c      	ldr	r3, [pc, #624]	; (8003464 <HAL_RCC_OscConfig+0x57c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d108      	bne.n	8003216 <HAL_RCC_OscConfig+0x32e>
 8003204:	4b96      	ldr	r3, [pc, #600]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320a:	4a95      	ldr	r2, [pc, #596]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003214:	e024      	b.n	8003260 <HAL_RCC_OscConfig+0x378>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d110      	bne.n	8003240 <HAL_RCC_OscConfig+0x358>
 800321e:	4b90      	ldr	r3, [pc, #576]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	4a8e      	ldr	r2, [pc, #568]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003226:	f043 0304 	orr.w	r3, r3, #4
 800322a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800322e:	4b8c      	ldr	r3, [pc, #560]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003234:	4a8a      	ldr	r2, [pc, #552]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800323e:	e00f      	b.n	8003260 <HAL_RCC_OscConfig+0x378>
 8003240:	4b87      	ldr	r3, [pc, #540]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	4a86      	ldr	r2, [pc, #536]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003250:	4b83      	ldr	r3, [pc, #524]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	4a82      	ldr	r2, [pc, #520]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d016      	beq.n	8003296 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe fbec 	bl	8001a44 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe fbe8 	bl	8001a44 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e142      	b.n	800350c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003286:	4b76      	ldr	r3, [pc, #472]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0ed      	beq.n	8003270 <HAL_RCC_OscConfig+0x388>
 8003294:	e015      	b.n	80032c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003296:	f7fe fbd5 	bl	8001a44 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800329c:	e00a      	b.n	80032b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329e:	f7fe fbd1 	bl	8001a44 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e12b      	b.n	800350c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b4:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ed      	bne.n	800329e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c2:	7ffb      	ldrb	r3, [r7, #31]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c8:	4b65      	ldr	r3, [pc, #404]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	4a64      	ldr	r2, [pc, #400]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80032ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d03c      	beq.n	800335a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01c      	beq.n	8003322 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032e8:	4b5d      	ldr	r3, [pc, #372]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80032ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ee:	4a5c      	ldr	r2, [pc, #368]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fe fba4 	bl	8001a44 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003300:	f7fe fba0 	bl	8001a44 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0fc      	b.n	800350c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003312:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ef      	beq.n	8003300 <HAL_RCC_OscConfig+0x418>
 8003320:	e01b      	b.n	800335a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003322:	4b4f      	ldr	r3, [pc, #316]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003328:	4a4d      	ldr	r2, [pc, #308]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fe fb87 	bl	8001a44 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800333a:	f7fe fb83 	bl	8001a44 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e0df      	b.n	800350c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800334c:	4b44      	ldr	r3, [pc, #272]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 800334e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1ef      	bne.n	800333a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80d3 	beq.w	800350a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003364:	4b3e      	ldr	r3, [pc, #248]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b0c      	cmp	r3, #12
 800336e:	f000 808d 	beq.w	800348c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d15a      	bne.n	8003430 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b39      	ldr	r3, [pc, #228]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a38      	ldr	r2, [pc, #224]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fe fb5d 	bl	8001a44 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fe fb59 	bl	8001a44 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0b5      	b.n	800350c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	4b2f      	ldr	r3, [pc, #188]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ac:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4b2d      	ldr	r3, [pc, #180]	; (8003468 <HAL_RCC_OscConfig+0x580>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6a11      	ldr	r1, [r2, #32]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033bc:	3a01      	subs	r2, #1
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	4311      	orrs	r1, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033c6:	0212      	lsls	r2, r2, #8
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0552      	lsls	r2, r2, #21
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033da:	0852      	lsrs	r2, r2, #1
 80033dc:	3a01      	subs	r2, #1
 80033de:	0652      	lsls	r2, r2, #25
 80033e0:	4311      	orrs	r1, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033e6:	06d2      	lsls	r2, r2, #27
 80033e8:	430a      	orrs	r2, r1
 80033ea:	491d      	ldr	r1, [pc, #116]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f0:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1a      	ldr	r2, [pc, #104]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033fc:	4b18      	ldr	r3, [pc, #96]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a17      	ldr	r2, [pc, #92]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003406:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe fb1c 	bl	8001a44 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fb18 	bl	8001a44 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e074      	b.n	800350c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003422:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x528>
 800342e:	e06c      	b.n	800350a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800343a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a07      	ldr	r2, [pc, #28]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4a04      	ldr	r2, [pc, #16]	; (8003460 <HAL_RCC_OscConfig+0x578>)
 800344e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fe faf4 	bl	8001a44 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345e:	e00e      	b.n	800347e <HAL_RCC_OscConfig+0x596>
 8003460:	40021000 	.word	0x40021000
 8003464:	40007000 	.word	0x40007000
 8003468:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346c:	f7fe faea 	bl	8001a44 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e046      	b.n	800350c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347e:	4b25      	ldr	r3, [pc, #148]	; (8003514 <HAL_RCC_OscConfig+0x62c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x584>
 800348a:	e03e      	b.n	800350a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e039      	b.n	800350c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003498:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <HAL_RCC_OscConfig+0x62c>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f003 0203 	and.w	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d12c      	bne.n	8003506 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	3b01      	subs	r3, #1
 80034b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d123      	bne.n	8003506 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d11b      	bne.n	8003506 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d113      	bne.n	8003506 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	3b01      	subs	r3, #1
 80034ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d109      	bne.n	8003506 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	3b01      	subs	r3, #1
 8003500:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3720      	adds	r7, #32
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40021000 	.word	0x40021000

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e11e      	b.n	800376e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003530:	4b91      	ldr	r3, [pc, #580]	; (8003778 <HAL_RCC_ClockConfig+0x260>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d910      	bls.n	8003560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353e:	4b8e      	ldr	r3, [pc, #568]	; (8003778 <HAL_RCC_ClockConfig+0x260>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 020f 	bic.w	r2, r3, #15
 8003546:	498c      	ldr	r1, [pc, #560]	; (8003778 <HAL_RCC_ClockConfig+0x260>)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354e:	4b8a      	ldr	r3, [pc, #552]	; (8003778 <HAL_RCC_ClockConfig+0x260>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e106      	b.n	800376e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d073      	beq.n	8003654 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d129      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003574:	4b81      	ldr	r3, [pc, #516]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0f4      	b.n	800376e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003584:	f000 f99e 	bl	80038c4 <RCC_GetSysClockFreqFromPLLSource>
 8003588:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4a7c      	ldr	r2, [pc, #496]	; (8003780 <HAL_RCC_ClockConfig+0x268>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d93f      	bls.n	8003612 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003592:	4b7a      	ldr	r3, [pc, #488]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d033      	beq.n	8003612 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d12f      	bne.n	8003612 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035b2:	4b72      	ldr	r3, [pc, #456]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ba:	4a70      	ldr	r2, [pc, #448]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 80035bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	e024      	b.n	8003612 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d109      	bne.n	80035f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0c6      	b.n	800376e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e0:	4b66      	ldr	r3, [pc, #408]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0be      	b.n	800376e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80035f0:	f000 f8ce 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4a61      	ldr	r2, [pc, #388]	; (8003780 <HAL_RCC_ClockConfig+0x268>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d909      	bls.n	8003612 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035fe:	4b5f      	ldr	r3, [pc, #380]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003606:	4a5d      	ldr	r2, [pc, #372]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 8003608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003612:	4b5a      	ldr	r3, [pc, #360]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4957      	ldr	r1, [pc, #348]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 8003620:	4313      	orrs	r3, r2
 8003622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003624:	f7fe fa0e 	bl	8001a44 <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	e00a      	b.n	8003642 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7fe fa0a 	bl	8001a44 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e095      	b.n	800376e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	4b4e      	ldr	r3, [pc, #312]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 020c 	and.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	429a      	cmp	r2, r3
 8003652:	d1eb      	bne.n	800362c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d023      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800366c:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a42      	ldr	r2, [pc, #264]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 8003672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003676:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003684:	4b3d      	ldr	r3, [pc, #244]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800368c:	4a3b      	ldr	r2, [pc, #236]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 800368e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003692:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003694:	4b39      	ldr	r3, [pc, #228]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4936      	ldr	r1, [pc, #216]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
 80036a6:	e008      	b.n	80036ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036ae:	4b33      	ldr	r3, [pc, #204]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	4a32      	ldr	r2, [pc, #200]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 80036b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ba:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <HAL_RCC_ClockConfig+0x260>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d21d      	bcs.n	8003704 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c8:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <HAL_RCC_ClockConfig+0x260>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 020f 	bic.w	r2, r3, #15
 80036d0:	4929      	ldr	r1, [pc, #164]	; (8003778 <HAL_RCC_ClockConfig+0x260>)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036d8:	f7fe f9b4 	bl	8001a44 <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e0:	f7fe f9b0 	bl	8001a44 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e03b      	b.n	800376e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_RCC_ClockConfig+0x260>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d1ed      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003710:	4b1a      	ldr	r3, [pc, #104]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4917      	ldr	r1, [pc, #92]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	490f      	ldr	r1, [pc, #60]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003742:	f000 f825 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8003746:	4602      	mov	r2, r0
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <HAL_RCC_ClockConfig+0x264>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	490c      	ldr	r1, [pc, #48]	; (8003784 <HAL_RCC_ClockConfig+0x26c>)
 8003754:	5ccb      	ldrb	r3, [r1, r3]
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	fa22 f303 	lsr.w	r3, r2, r3
 800375e:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <HAL_RCC_ClockConfig+0x270>)
 8003760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_RCC_ClockConfig+0x274>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fe f920 	bl	80019ac <HAL_InitTick>
 800376c:	4603      	mov	r3, r0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40022000 	.word	0x40022000
 800377c:	40021000 	.word	0x40021000
 8003780:	04c4b400 	.word	0x04c4b400
 8003784:	08005dd4 	.word	0x08005dd4
 8003788:	20000000 	.word	0x20000000
 800378c:	20000004 	.word	0x20000004

08003790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003796:	4b2c      	ldr	r3, [pc, #176]	; (8003848 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d102      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037a2:	4b2a      	ldr	r3, [pc, #168]	; (800384c <HAL_RCC_GetSysClockFreq+0xbc>)
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	e047      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037a8:	4b27      	ldr	r3, [pc, #156]	; (8003848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d102      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037b4:	4b26      	ldr	r3, [pc, #152]	; (8003850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	e03e      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037ba:	4b23      	ldr	r3, [pc, #140]	; (8003848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b0c      	cmp	r3, #12
 80037c4:	d136      	bne.n	8003834 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037c6:	4b20      	ldr	r3, [pc, #128]	; (8003848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	3301      	adds	r3, #1
 80037dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d10c      	bne.n	80037fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037e4:	4a1a      	ldr	r2, [pc, #104]	; (8003850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	4a16      	ldr	r2, [pc, #88]	; (8003848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ee:	68d2      	ldr	r2, [r2, #12]
 80037f0:	0a12      	lsrs	r2, r2, #8
 80037f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	617b      	str	r3, [r7, #20]
      break;
 80037fc:	e00c      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037fe:	4a13      	ldr	r2, [pc, #76]	; (800384c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003808:	68d2      	ldr	r2, [r2, #12]
 800380a:	0a12      	lsrs	r2, r2, #8
 800380c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003810:	fb02 f303 	mul.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]
      break;
 8003816:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_GetSysClockFreq+0xb8>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0e5b      	lsrs	r3, r3, #25
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	e001      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003838:	693b      	ldr	r3, [r7, #16]
}
 800383a:	4618      	mov	r0, r3
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
 800384c:	00f42400 	.word	0x00f42400
 8003850:	007a1200 	.word	0x007a1200

08003854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_RCC_GetHCLKFreq+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000000 	.word	0x20000000

0800386c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003870:	f7ff fff0 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4904      	ldr	r1, [pc, #16]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	08005de4 	.word	0x08005de4

08003898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800389c:	f7ff ffda 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	0adb      	lsrs	r3, r3, #11
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4904      	ldr	r1, [pc, #16]	; (80038c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	08005de4 	.word	0x08005de4

080038c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ca:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038d4:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	3301      	adds	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d10c      	bne.n	8003902 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038e8:	4a17      	ldr	r2, [pc, #92]	; (8003948 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038f2:	68d2      	ldr	r2, [r2, #12]
 80038f4:	0a12      	lsrs	r2, r2, #8
 80038f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	617b      	str	r3, [r7, #20]
    break;
 8003900:	e00c      	b.n	800391c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003902:	4a12      	ldr	r2, [pc, #72]	; (800394c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800390c:	68d2      	ldr	r2, [r2, #12]
 800390e:	0a12      	lsrs	r2, r2, #8
 8003910:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003914:	fb02 f303 	mul.w	r3, r2, r3
 8003918:	617b      	str	r3, [r7, #20]
    break;
 800391a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	0e5b      	lsrs	r3, r3, #25
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	3301      	adds	r3, #1
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003936:	687b      	ldr	r3, [r7, #4]
}
 8003938:	4618      	mov	r0, r3
 800393a:	371c      	adds	r7, #28
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40021000 	.word	0x40021000
 8003948:	007a1200 	.word	0x007a1200
 800394c:	00f42400 	.word	0x00f42400

08003950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003958:	2300      	movs	r3, #0
 800395a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800395c:	2300      	movs	r3, #0
 800395e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8098 	beq.w	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396e:	2300      	movs	r3, #0
 8003970:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003972:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397e:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	4a3f      	ldr	r2, [pc, #252]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003988:	6593      	str	r3, [r2, #88]	; 0x58
 800398a:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003996:	2301      	movs	r3, #1
 8003998:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800399a:	4b3a      	ldr	r3, [pc, #232]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a39      	ldr	r2, [pc, #228]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039a6:	f7fe f84d 	bl	8001a44 <HAL_GetTick>
 80039aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ac:	e009      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ae:	f7fe f849 	bl	8001a44 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d902      	bls.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	74fb      	strb	r3, [r7, #19]
        break;
 80039c0:	e005      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039c2:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0ef      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80039ce:	7cfb      	ldrb	r3, [r7, #19]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d159      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039d4:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01e      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d019      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039f0:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039fc:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	4a1f      	ldr	r2, [pc, #124]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a0c:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a1c:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fe f809 	bl	8001a44 <HAL_GetTick>
 8003a32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a34:	e00b      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fe f805 	bl	8001a44 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d902      	bls.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	74fb      	strb	r3, [r7, #19]
            break;
 8003a4c:	e006      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0ec      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a62:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a78:	e008      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	74bb      	strb	r3, [r7, #18]
 8003a7e:	e005      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a8c:	7c7b      	ldrb	r3, [r7, #17]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d105      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a92:	4ba6      	ldr	r3, [pc, #664]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a96:	4aa5      	ldr	r2, [pc, #660]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aaa:	4ba0      	ldr	r3, [pc, #640]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab0:	f023 0203 	bic.w	r2, r3, #3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	499c      	ldr	r1, [pc, #624]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003acc:	4b97      	ldr	r3, [pc, #604]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f023 020c 	bic.w	r2, r3, #12
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	4994      	ldr	r1, [pc, #592]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aee:	4b8f      	ldr	r3, [pc, #572]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	498b      	ldr	r1, [pc, #556]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b10:	4b86      	ldr	r3, [pc, #536]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	4983      	ldr	r1, [pc, #524]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b32:	4b7e      	ldr	r3, [pc, #504]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	497a      	ldr	r1, [pc, #488]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b54:	4b75      	ldr	r3, [pc, #468]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	4972      	ldr	r1, [pc, #456]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b76:	4b6d      	ldr	r3, [pc, #436]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	4969      	ldr	r1, [pc, #420]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b98:	4b64      	ldr	r3, [pc, #400]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	4961      	ldr	r1, [pc, #388]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bba:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	4958      	ldr	r1, [pc, #352]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d015      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bdc:	4b53      	ldr	r3, [pc, #332]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	4950      	ldr	r1, [pc, #320]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4a4a      	ldr	r2, [pc, #296]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d015      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c14:	4b45      	ldr	r3, [pc, #276]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	4942      	ldr	r1, [pc, #264]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c32:	d105      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c34:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4a3c      	ldr	r2, [pc, #240]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c3e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d015      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c4c:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4934      	ldr	r1, [pc, #208]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c6a:	d105      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c6c:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a2e      	ldr	r2, [pc, #184]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d015      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c84:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c92:	4926      	ldr	r1, [pc, #152]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a20      	ldr	r2, [pc, #128]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d015      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	4918      	ldr	r1, [pc, #96]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cdc:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d015      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	490a      	ldr	r1, [pc, #40]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d12:	d105      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d20:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000

08003d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e049      	b.n	8003dd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd f844 	bl	8000de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f000 f996 	bl	80040a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d001      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e04a      	b.n	8003e8e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a21      	ldr	r2, [pc, #132]	; (8003e9c <HAL_TIM_Base_Start_IT+0xbc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d018      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x6c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e22:	d013      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x6c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1d      	ldr	r2, [pc, #116]	; (8003ea0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00e      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x6c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1c      	ldr	r2, [pc, #112]	; (8003ea4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d009      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x6c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x6c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a19      	ldr	r2, [pc, #100]	; (8003eac <HAL_TIM_Base_Start_IT+0xcc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d115      	bne.n	8003e78 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b06      	cmp	r3, #6
 8003e5c:	d015      	beq.n	8003e8a <HAL_TIM_Base_Start_IT+0xaa>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	d011      	beq.n	8003e8a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0201 	orr.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e76:	e008      	b.n	8003e8a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e000      	b.n	8003e8c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800
 8003ea8:	40013400 	.word	0x40013400
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	00010007 	.word	0x00010007

08003eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_TIM_ConfigClockSource+0x18>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e0dd      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x1d4>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a62      	ldr	r2, [pc, #392]	; (8004090 <HAL_TIM_ConfigClockSource+0x1dc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	f000 80a9 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1aa>
 8003f0c:	4a60      	ldr	r2, [pc, #384]	; (8004090 <HAL_TIM_ConfigClockSource+0x1dc>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	f200 80ae 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f14:	4a5f      	ldr	r2, [pc, #380]	; (8004094 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	f000 80a1 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1aa>
 8003f1c:	4a5d      	ldr	r2, [pc, #372]	; (8004094 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	f200 80a6 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f24:	4a5c      	ldr	r2, [pc, #368]	; (8004098 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	f000 8099 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1aa>
 8003f2c:	4a5a      	ldr	r2, [pc, #360]	; (8004098 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	f200 809e 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f34:	4a59      	ldr	r2, [pc, #356]	; (800409c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	f000 8091 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1aa>
 8003f3c:	4a57      	ldr	r2, [pc, #348]	; (800409c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	f200 8096 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f48:	f000 8089 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1aa>
 8003f4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f50:	f200 808e 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f58:	d03e      	beq.n	8003fd8 <HAL_TIM_ConfigClockSource+0x124>
 8003f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5e:	f200 8087 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	f000 8085 	beq.w	8004074 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6e:	d87f      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f70:	2b70      	cmp	r3, #112	; 0x70
 8003f72:	d01a      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0xf6>
 8003f74:	2b70      	cmp	r3, #112	; 0x70
 8003f76:	d87b      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f78:	2b60      	cmp	r3, #96	; 0x60
 8003f7a:	d050      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x16a>
 8003f7c:	2b60      	cmp	r3, #96	; 0x60
 8003f7e:	d877      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f80:	2b50      	cmp	r3, #80	; 0x50
 8003f82:	d03c      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x14a>
 8003f84:	2b50      	cmp	r3, #80	; 0x50
 8003f86:	d873      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d058      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x18a>
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d86f      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f90:	2b30      	cmp	r3, #48	; 0x30
 8003f92:	d064      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1aa>
 8003f94:	2b30      	cmp	r3, #48	; 0x30
 8003f96:	d86b      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d060      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1aa>
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d867      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d05c      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1aa>
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d05a      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003fa8:	e062      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6899      	ldr	r1, [r3, #8]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f000 f97d 	bl	80042b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	609a      	str	r2, [r3, #8]
      break;
 8003fd6:	e04e      	b.n	8004076 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	6899      	ldr	r1, [r3, #8]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f000 f966 	bl	80042b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ffa:	609a      	str	r2, [r3, #8]
      break;
 8003ffc:	e03b      	b.n	8004076 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	461a      	mov	r2, r3
 800400c:	f000 f8d8 	bl	80041c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2150      	movs	r1, #80	; 0x50
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f931 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 800401c:	e02b      	b.n	8004076 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6859      	ldr	r1, [r3, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	461a      	mov	r2, r3
 800402c:	f000 f8f7 	bl	800421e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2160      	movs	r1, #96	; 0x60
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f921 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 800403c:	e01b      	b.n	8004076 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6859      	ldr	r1, [r3, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	461a      	mov	r2, r3
 800404c:	f000 f8b8 	bl	80041c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2140      	movs	r1, #64	; 0x40
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f911 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 800405c:	e00b      	b.n	8004076 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f000 f908 	bl	800427e <TIM_ITRx_SetConfig>
        break;
 800406e:	e002      	b.n	8004076 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8004070:	bf00      	nop
 8004072:	e000      	b.n	8004076 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8004074:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	00100070 	.word	0x00100070
 8004094:	00100040 	.word	0x00100040
 8004098:	00100030 	.word	0x00100030
 800409c:	00100020 	.word	0x00100020

080040a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a3c      	ldr	r2, [pc, #240]	; (80041a4 <TIM_Base_SetConfig+0x104>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00f      	beq.n	80040d8 <TIM_Base_SetConfig+0x38>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040be:	d00b      	beq.n	80040d8 <TIM_Base_SetConfig+0x38>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a39      	ldr	r2, [pc, #228]	; (80041a8 <TIM_Base_SetConfig+0x108>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d007      	beq.n	80040d8 <TIM_Base_SetConfig+0x38>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a38      	ldr	r2, [pc, #224]	; (80041ac <TIM_Base_SetConfig+0x10c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d003      	beq.n	80040d8 <TIM_Base_SetConfig+0x38>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a37      	ldr	r2, [pc, #220]	; (80041b0 <TIM_Base_SetConfig+0x110>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d108      	bne.n	80040ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <TIM_Base_SetConfig+0x104>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01b      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d017      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2a      	ldr	r2, [pc, #168]	; (80041a8 <TIM_Base_SetConfig+0x108>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a29      	ldr	r2, [pc, #164]	; (80041ac <TIM_Base_SetConfig+0x10c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00f      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a28      	ldr	r2, [pc, #160]	; (80041b0 <TIM_Base_SetConfig+0x110>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00b      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a27      	ldr	r2, [pc, #156]	; (80041b4 <TIM_Base_SetConfig+0x114>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d007      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a26      	ldr	r2, [pc, #152]	; (80041b8 <TIM_Base_SetConfig+0x118>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <TIM_Base_SetConfig+0x8a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a25      	ldr	r2, [pc, #148]	; (80041bc <TIM_Base_SetConfig+0x11c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d108      	bne.n	800413c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a10      	ldr	r2, [pc, #64]	; (80041a4 <TIM_Base_SetConfig+0x104>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00f      	beq.n	8004188 <TIM_Base_SetConfig+0xe8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <TIM_Base_SetConfig+0x110>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00b      	beq.n	8004188 <TIM_Base_SetConfig+0xe8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a10      	ldr	r2, [pc, #64]	; (80041b4 <TIM_Base_SetConfig+0x114>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d007      	beq.n	8004188 <TIM_Base_SetConfig+0xe8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a0f      	ldr	r2, [pc, #60]	; (80041b8 <TIM_Base_SetConfig+0x118>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_Base_SetConfig+0xe8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a0e      	ldr	r2, [pc, #56]	; (80041bc <TIM_Base_SetConfig+0x11c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d103      	bne.n	8004190 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	615a      	str	r2, [r3, #20]
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40013400 	.word	0x40013400
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40014400 	.word	0x40014400
 80041bc:	40014800 	.word	0x40014800

080041c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f023 0201 	bic.w	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f023 030a 	bic.w	r3, r3, #10
 80041fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800421e:	b480      	push	{r7}
 8004220:	b087      	sub	sp, #28
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0210 	bic.w	r2, r3, #16
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	031b      	lsls	r3, r3, #12
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800425a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	f043 0307 	orr.w	r3, r3, #7
 80042a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	021a      	lsls	r2, r3, #8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	431a      	orrs	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4313      	orrs	r3, r2
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	609a      	str	r2, [r3, #8]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800430c:	2302      	movs	r3, #2
 800430e:	e065      	b.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a2c      	ldr	r2, [pc, #176]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d004      	beq.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2b      	ldr	r2, [pc, #172]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d108      	bne.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800434a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800435c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004360:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004386:	d013      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a12      	ldr	r2, [pc, #72]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a13      	ldr	r2, [pc, #76]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d10c      	bne.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	40013400 	.word	0x40013400
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800
 80043f8:	40014000 	.word	0x40014000

080043fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e042      	b.n	8004494 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fc fd11 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2224      	movs	r2, #36	; 0x24
 800442a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fb66 	bl	8004b10 <UART_SetConfig>
 8004444:	4603      	mov	r3, r0
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e022      	b.n	8004494 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fdf8 	bl	800504c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800446a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800447a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fe7f 	bl	8005190 <UART_CheckIdleState>
 8004492:	4603      	mov	r3, r0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	f040 8083 	bne.w	80045be <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_UART_Transmit+0x28>
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e07b      	b.n	80045c0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Transmit+0x3a>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e074      	b.n	80045c0 <HAL_UART_Transmit+0x124>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2221      	movs	r2, #33	; 0x21
 80044ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ee:	f7fd faa9 	bl	8001a44 <HAL_GetTick>
 80044f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450c:	d108      	bne.n	8004520 <HAL_UART_Transmit+0x84>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	e003      	b.n	8004528 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004524:	2300      	movs	r3, #0
 8004526:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004530:	e02c      	b.n	800458c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2200      	movs	r2, #0
 800453a:	2180      	movs	r1, #128	; 0x80
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 fe72 	bl	8005226 <UART_WaitOnFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e039      	b.n	80045c0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004560:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	3302      	adds	r3, #2
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	e007      	b.n	800457a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	781a      	ldrb	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	3301      	adds	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1cc      	bne.n	8004532 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2200      	movs	r2, #0
 80045a0:	2140      	movs	r1, #64	; 0x40
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 fe3f 	bl	8005226 <UART_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e006      	b.n	80045c0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80045be:	2302      	movs	r3, #2
  }
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d131      	bne.n	8004644 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_UART_Receive_IT+0x24>
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e02a      	b.n	8004646 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_UART_Receive_IT+0x36>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e023      	b.n	8004646 <HAL_UART_Receive_IT+0x7e>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a0f      	ldr	r2, [pc, #60]	; (8004650 <HAL_UART_Receive_IT+0x88>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00e      	beq.n	8004634 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004632:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	461a      	mov	r2, r3
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fe74 	bl	8005328 <UART_Start_Receive_IT>
 8004640:	4603      	mov	r3, r0
 8004642:	e000      	b.n	8004646 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004644:	2302      	movs	r3, #2
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40008000 	.word	0x40008000

08004654 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	f640 030f 	movw	r3, #2063	; 0x80f
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d118      	bne.n	80046b6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d013      	beq.n	80046b6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 81fb 	beq.w	8004aa2 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
      }
      return;
 80046b4:	e1f5      	b.n	8004aa2 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80ef 	beq.w	800489c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4b73      	ldr	r3, [pc, #460]	; (8004890 <HAL_UART_IRQHandler+0x23c>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4b72      	ldr	r3, [pc, #456]	; (8004894 <HAL_UART_IRQHandler+0x240>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80e4 	beq.w	800489c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d010      	beq.n	8004700 <HAL_UART_IRQHandler+0xac>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00b      	beq.n	8004700 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2201      	movs	r2, #1
 80046ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f6:	f043 0201 	orr.w	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d010      	beq.n	800472c <HAL_UART_IRQHandler+0xd8>
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00b      	beq.n	800472c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2202      	movs	r2, #2
 800471a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004722:	f043 0204 	orr.w	r2, r3, #4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d010      	beq.n	8004758 <HAL_UART_IRQHandler+0x104>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00b      	beq.n	8004758 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2204      	movs	r2, #4
 8004746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800474e:	f043 0202 	orr.w	r2, r3, #2
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d015      	beq.n	800478e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4b48      	ldr	r3, [pc, #288]	; (8004890 <HAL_UART_IRQHandler+0x23c>)
 8004770:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00b      	beq.n	800478e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2208      	movs	r2, #8
 800477c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004784:	f043 0208 	orr.w	r2, r3, #8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004794:	2b00      	cmp	r3, #0
 8004796:	d011      	beq.n	80047bc <HAL_UART_IRQHandler+0x168>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00c      	beq.n	80047bc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b2:	f043 0220 	orr.w	r2, r3, #32
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 816f 	beq.w	8004aa6 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d011      	beq.n	80047f6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d104      	bne.n	80047e6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b40      	cmp	r3, #64	; 0x40
 800480a:	d004      	beq.n	8004816 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004812:	2b00      	cmp	r3, #0
 8004814:	d031      	beq.n	800487a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fe44 	bl	80054a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004826:	2b40      	cmp	r3, #64	; 0x40
 8004828:	d123      	bne.n	8004872 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004838:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d013      	beq.n	800486a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004846:	4a14      	ldr	r2, [pc, #80]	; (8004898 <HAL_UART_IRQHandler+0x244>)
 8004848:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800484e:	4618      	mov	r0, r3
 8004850:	f7fd fa6c 	bl	8001d2c <HAL_DMA_Abort_IT>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d017      	beq.n	800488a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004864:	4610      	mov	r0, r2
 8004866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004868:	e00f      	b.n	800488a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f93a 	bl	8004ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	e00b      	b.n	800488a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f936 	bl	8004ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	e007      	b.n	800488a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f932 	bl	8004ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004888:	e10d      	b.n	8004aa6 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488a:	bf00      	nop
    return;
 800488c:	e10b      	b.n	8004aa6 <HAL_UART_IRQHandler+0x452>
 800488e:	bf00      	nop
 8004890:	10000001 	.word	0x10000001
 8004894:	04000120 	.word	0x04000120
 8004898:	08005509 	.word	0x08005509

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	f040 80ab 	bne.w	80049fc <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a5 	beq.w	80049fc <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 809f 	beq.w	80049fc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2210      	movs	r2, #16
 80048c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d155      	bne.n	8004980 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80048de:	893b      	ldrh	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80e2 	beq.w	8004aaa <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048ec:	893a      	ldrh	r2, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	f080 80db 	bcs.w	8004aaa <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	893a      	ldrh	r2, [r7, #8]
 80048f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d12b      	bne.n	8004964 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800491a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0210 	bic.w	r2, r2, #16
 8004958:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800495e:	4618      	mov	r0, r3
 8004960:	f7fd f98b 	bl	8001c7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004970:	b29b      	uxth	r3, r3
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	b29b      	uxth	r3, r3
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f8bd 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800497e:	e094      	b.n	8004aaa <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800498c:	b29b      	uxth	r3, r3
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8087 	beq.w	8004aae <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 80049a0:	897b      	ldrh	r3, [r7, #10]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8083 	beq.w	8004aae <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049b6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c6:	f023 0301 	bic.w	r3, r3, #1
 80049ca:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0210 	bic.w	r2, r2, #16
 80049ee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049f0:	897b      	ldrh	r3, [r7, #10]
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f87f 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049fa:	e058      	b.n	8004aae <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00d      	beq.n	8004a22 <HAL_UART_IRQHandler+0x3ce>
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f001 f880 	bl	8005b20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a20:	e048      	b.n	8004ab4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d012      	beq.n	8004a52 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d104      	bne.n	8004a40 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d034      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	4798      	blx	r3
    }
    return;
 8004a50:	e02f      	b.n	8004ab2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_UART_IRQHandler+0x41a>
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fd64 	bl	8005534 <UART_EndTransmit_IT>
    return;
 8004a6c:	e022      	b.n	8004ab4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_UART_IRQHandler+0x436>
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f001 f860 	bl	8005b48 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a88:	e014      	b.n	8004ab4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00f      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x460>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	da0c      	bge.n	8004ab4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f001 f84a 	bl	8005b34 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004aa0:	e008      	b.n	8004ab4 <HAL_UART_IRQHandler+0x460>
      return;
 8004aa2:	bf00      	nop
 8004aa4:	e006      	b.n	8004ab4 <HAL_UART_IRQHandler+0x460>
    return;
 8004aa6:	bf00      	nop
 8004aa8:	e004      	b.n	8004ab4 <HAL_UART_IRQHandler+0x460>
      return;
 8004aaa:	bf00      	nop
 8004aac:	e002      	b.n	8004ab4 <HAL_UART_IRQHandler+0x460>
      return;
 8004aae:	bf00      	nop
 8004ab0:	e000      	b.n	8004ab4 <HAL_UART_IRQHandler+0x460>
    return;
 8004ab2:	bf00      	nop
  }
}
 8004ab4:	3720      	adds	r7, #32
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop

08004abc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b10:	b5b0      	push	{r4, r5, r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4baf      	ldr	r3, [pc, #700]	; (8004df8 <UART_SetConfig+0x2e8>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	69f9      	ldr	r1, [r7, #28]
 8004b44:	430b      	orrs	r3, r1
 8004b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4aa4      	ldr	r2, [pc, #656]	; (8004dfc <UART_SetConfig+0x2ec>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	69f9      	ldr	r1, [r7, #28]
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	f023 010f 	bic.w	r1, r3, #15
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a95      	ldr	r2, [pc, #596]	; (8004e00 <UART_SetConfig+0x2f0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d120      	bne.n	8004bf2 <UART_SetConfig+0xe2>
 8004bb0:	4b94      	ldr	r3, [pc, #592]	; (8004e04 <UART_SetConfig+0x2f4>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d816      	bhi.n	8004bec <UART_SetConfig+0xdc>
 8004bbe:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0xb4>)
 8004bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc4:	08004bd5 	.word	0x08004bd5
 8004bc8:	08004be1 	.word	0x08004be1
 8004bcc:	08004bdb 	.word	0x08004bdb
 8004bd0:	08004be7 	.word	0x08004be7
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	76fb      	strb	r3, [r7, #27]
 8004bd8:	e0bc      	b.n	8004d54 <UART_SetConfig+0x244>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	76fb      	strb	r3, [r7, #27]
 8004bde:	e0b9      	b.n	8004d54 <UART_SetConfig+0x244>
 8004be0:	2304      	movs	r3, #4
 8004be2:	76fb      	strb	r3, [r7, #27]
 8004be4:	e0b6      	b.n	8004d54 <UART_SetConfig+0x244>
 8004be6:	2308      	movs	r3, #8
 8004be8:	76fb      	strb	r3, [r7, #27]
 8004bea:	e0b3      	b.n	8004d54 <UART_SetConfig+0x244>
 8004bec:	2310      	movs	r3, #16
 8004bee:	76fb      	strb	r3, [r7, #27]
 8004bf0:	e0b0      	b.n	8004d54 <UART_SetConfig+0x244>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a84      	ldr	r2, [pc, #528]	; (8004e08 <UART_SetConfig+0x2f8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d132      	bne.n	8004c62 <UART_SetConfig+0x152>
 8004bfc:	4b81      	ldr	r3, [pc, #516]	; (8004e04 <UART_SetConfig+0x2f4>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c02:	f003 030c 	and.w	r3, r3, #12
 8004c06:	2b0c      	cmp	r3, #12
 8004c08:	d828      	bhi.n	8004c5c <UART_SetConfig+0x14c>
 8004c0a:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <UART_SetConfig+0x100>)
 8004c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c10:	08004c45 	.word	0x08004c45
 8004c14:	08004c5d 	.word	0x08004c5d
 8004c18:	08004c5d 	.word	0x08004c5d
 8004c1c:	08004c5d 	.word	0x08004c5d
 8004c20:	08004c51 	.word	0x08004c51
 8004c24:	08004c5d 	.word	0x08004c5d
 8004c28:	08004c5d 	.word	0x08004c5d
 8004c2c:	08004c5d 	.word	0x08004c5d
 8004c30:	08004c4b 	.word	0x08004c4b
 8004c34:	08004c5d 	.word	0x08004c5d
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c5d 	.word	0x08004c5d
 8004c40:	08004c57 	.word	0x08004c57
 8004c44:	2300      	movs	r3, #0
 8004c46:	76fb      	strb	r3, [r7, #27]
 8004c48:	e084      	b.n	8004d54 <UART_SetConfig+0x244>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	76fb      	strb	r3, [r7, #27]
 8004c4e:	e081      	b.n	8004d54 <UART_SetConfig+0x244>
 8004c50:	2304      	movs	r3, #4
 8004c52:	76fb      	strb	r3, [r7, #27]
 8004c54:	e07e      	b.n	8004d54 <UART_SetConfig+0x244>
 8004c56:	2308      	movs	r3, #8
 8004c58:	76fb      	strb	r3, [r7, #27]
 8004c5a:	e07b      	b.n	8004d54 <UART_SetConfig+0x244>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	76fb      	strb	r3, [r7, #27]
 8004c60:	e078      	b.n	8004d54 <UART_SetConfig+0x244>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a69      	ldr	r2, [pc, #420]	; (8004e0c <UART_SetConfig+0x2fc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d120      	bne.n	8004cae <UART_SetConfig+0x19e>
 8004c6c:	4b65      	ldr	r3, [pc, #404]	; (8004e04 <UART_SetConfig+0x2f4>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c76:	2b30      	cmp	r3, #48	; 0x30
 8004c78:	d013      	beq.n	8004ca2 <UART_SetConfig+0x192>
 8004c7a:	2b30      	cmp	r3, #48	; 0x30
 8004c7c:	d814      	bhi.n	8004ca8 <UART_SetConfig+0x198>
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d009      	beq.n	8004c96 <UART_SetConfig+0x186>
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d810      	bhi.n	8004ca8 <UART_SetConfig+0x198>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <UART_SetConfig+0x180>
 8004c8a:	2b10      	cmp	r3, #16
 8004c8c:	d006      	beq.n	8004c9c <UART_SetConfig+0x18c>
 8004c8e:	e00b      	b.n	8004ca8 <UART_SetConfig+0x198>
 8004c90:	2300      	movs	r3, #0
 8004c92:	76fb      	strb	r3, [r7, #27]
 8004c94:	e05e      	b.n	8004d54 <UART_SetConfig+0x244>
 8004c96:	2302      	movs	r3, #2
 8004c98:	76fb      	strb	r3, [r7, #27]
 8004c9a:	e05b      	b.n	8004d54 <UART_SetConfig+0x244>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	76fb      	strb	r3, [r7, #27]
 8004ca0:	e058      	b.n	8004d54 <UART_SetConfig+0x244>
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	76fb      	strb	r3, [r7, #27]
 8004ca6:	e055      	b.n	8004d54 <UART_SetConfig+0x244>
 8004ca8:	2310      	movs	r3, #16
 8004caa:	76fb      	strb	r3, [r7, #27]
 8004cac:	e052      	b.n	8004d54 <UART_SetConfig+0x244>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a57      	ldr	r2, [pc, #348]	; (8004e10 <UART_SetConfig+0x300>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d120      	bne.n	8004cfa <UART_SetConfig+0x1ea>
 8004cb8:	4b52      	ldr	r3, [pc, #328]	; (8004e04 <UART_SetConfig+0x2f4>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc4:	d013      	beq.n	8004cee <UART_SetConfig+0x1de>
 8004cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc8:	d814      	bhi.n	8004cf4 <UART_SetConfig+0x1e4>
 8004cca:	2b80      	cmp	r3, #128	; 0x80
 8004ccc:	d009      	beq.n	8004ce2 <UART_SetConfig+0x1d2>
 8004cce:	2b80      	cmp	r3, #128	; 0x80
 8004cd0:	d810      	bhi.n	8004cf4 <UART_SetConfig+0x1e4>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <UART_SetConfig+0x1cc>
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d006      	beq.n	8004ce8 <UART_SetConfig+0x1d8>
 8004cda:	e00b      	b.n	8004cf4 <UART_SetConfig+0x1e4>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	76fb      	strb	r3, [r7, #27]
 8004ce0:	e038      	b.n	8004d54 <UART_SetConfig+0x244>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	76fb      	strb	r3, [r7, #27]
 8004ce6:	e035      	b.n	8004d54 <UART_SetConfig+0x244>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	76fb      	strb	r3, [r7, #27]
 8004cec:	e032      	b.n	8004d54 <UART_SetConfig+0x244>
 8004cee:	2308      	movs	r3, #8
 8004cf0:	76fb      	strb	r3, [r7, #27]
 8004cf2:	e02f      	b.n	8004d54 <UART_SetConfig+0x244>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	76fb      	strb	r3, [r7, #27]
 8004cf8:	e02c      	b.n	8004d54 <UART_SetConfig+0x244>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a3f      	ldr	r2, [pc, #252]	; (8004dfc <UART_SetConfig+0x2ec>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d125      	bne.n	8004d50 <UART_SetConfig+0x240>
 8004d04:	4b3f      	ldr	r3, [pc, #252]	; (8004e04 <UART_SetConfig+0x2f4>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d12:	d017      	beq.n	8004d44 <UART_SetConfig+0x234>
 8004d14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d18:	d817      	bhi.n	8004d4a <UART_SetConfig+0x23a>
 8004d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1e:	d00b      	beq.n	8004d38 <UART_SetConfig+0x228>
 8004d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d24:	d811      	bhi.n	8004d4a <UART_SetConfig+0x23a>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <UART_SetConfig+0x222>
 8004d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2e:	d006      	beq.n	8004d3e <UART_SetConfig+0x22e>
 8004d30:	e00b      	b.n	8004d4a <UART_SetConfig+0x23a>
 8004d32:	2300      	movs	r3, #0
 8004d34:	76fb      	strb	r3, [r7, #27]
 8004d36:	e00d      	b.n	8004d54 <UART_SetConfig+0x244>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	76fb      	strb	r3, [r7, #27]
 8004d3c:	e00a      	b.n	8004d54 <UART_SetConfig+0x244>
 8004d3e:	2304      	movs	r3, #4
 8004d40:	76fb      	strb	r3, [r7, #27]
 8004d42:	e007      	b.n	8004d54 <UART_SetConfig+0x244>
 8004d44:	2308      	movs	r3, #8
 8004d46:	76fb      	strb	r3, [r7, #27]
 8004d48:	e004      	b.n	8004d54 <UART_SetConfig+0x244>
 8004d4a:	2310      	movs	r3, #16
 8004d4c:	76fb      	strb	r3, [r7, #27]
 8004d4e:	e001      	b.n	8004d54 <UART_SetConfig+0x244>
 8004d50:	2310      	movs	r3, #16
 8004d52:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a28      	ldr	r2, [pc, #160]	; (8004dfc <UART_SetConfig+0x2ec>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	f040 809e 	bne.w	8004e9c <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d60:	7efb      	ldrb	r3, [r7, #27]
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d823      	bhi.n	8004dae <UART_SetConfig+0x29e>
 8004d66:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <UART_SetConfig+0x25c>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004daf 	.word	0x08004daf
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004daf 	.word	0x08004daf
 8004d7c:	08004d9f 	.word	0x08004d9f
 8004d80:	08004daf 	.word	0x08004daf
 8004d84:	08004daf 	.word	0x08004daf
 8004d88:	08004daf 	.word	0x08004daf
 8004d8c:	08004da7 	.word	0x08004da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d90:	f7fe fd6c 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8004d94:	6178      	str	r0, [r7, #20]
        break;
 8004d96:	e00f      	b.n	8004db8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d98:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <UART_SetConfig+0x304>)
 8004d9a:	617b      	str	r3, [r7, #20]
        break;
 8004d9c:	e00c      	b.n	8004db8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d9e:	f7fe fcf7 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8004da2:	6178      	str	r0, [r7, #20]
        break;
 8004da4:	e008      	b.n	8004db8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004daa:	617b      	str	r3, [r7, #20]
        break;
 8004dac:	e004      	b.n	8004db8 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	76bb      	strb	r3, [r7, #26]
        break;
 8004db6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 812e 	beq.w	800501c <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <UART_SetConfig+0x308>)
 8004dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	4413      	add	r3, r2
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d305      	bcc.n	8004df0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d915      	bls.n	8004e1c <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	76bb      	strb	r3, [r7, #26]
 8004df4:	e112      	b.n	800501c <UART_SetConfig+0x50c>
 8004df6:	bf00      	nop
 8004df8:	cfff69f3 	.word	0xcfff69f3
 8004dfc:	40008000 	.word	0x40008000
 8004e00:	40013800 	.word	0x40013800
 8004e04:	40021000 	.word	0x40021000
 8004e08:	40004400 	.word	0x40004400
 8004e0c:	40004800 	.word	0x40004800
 8004e10:	40004c00 	.word	0x40004c00
 8004e14:	00f42400 	.word	0x00f42400
 8004e18:	08005dfc 	.word	0x08005dfc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f04f 0100 	mov.w	r1, #0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	4a86      	ldr	r2, [pc, #536]	; (8005044 <UART_SetConfig+0x534>)
 8004e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	f7fb f9f0 	bl	8000218 <__aeabi_uldivmod>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4619      	mov	r1, r3
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	020b      	lsls	r3, r1, #8
 8004e4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e4e:	0202      	lsls	r2, r0, #8
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	6849      	ldr	r1, [r1, #4]
 8004e54:	0849      	lsrs	r1, r1, #1
 8004e56:	4608      	mov	r0, r1
 8004e58:	f04f 0100 	mov.w	r1, #0
 8004e5c:	1814      	adds	r4, r2, r0
 8004e5e:	eb43 0501 	adc.w	r5, r3, r1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	4629      	mov	r1, r5
 8004e70:	f7fb f9d2 	bl	8000218 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4613      	mov	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e82:	d308      	bcc.n	8004e96 <UART_SetConfig+0x386>
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8a:	d204      	bcs.n	8004e96 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	60da      	str	r2, [r3, #12]
 8004e94:	e0c2      	b.n	800501c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	76bb      	strb	r3, [r7, #26]
 8004e9a:	e0bf      	b.n	800501c <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea4:	d165      	bne.n	8004f72 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8004ea6:	7efb      	ldrb	r3, [r7, #27]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d828      	bhi.n	8004efe <UART_SetConfig+0x3ee>
 8004eac:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <UART_SetConfig+0x3a4>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	08004ee9 	.word	0x08004ee9
 8004ec0:	08004eff 	.word	0x08004eff
 8004ec4:	08004eef 	.word	0x08004eef
 8004ec8:	08004eff 	.word	0x08004eff
 8004ecc:	08004eff 	.word	0x08004eff
 8004ed0:	08004eff 	.word	0x08004eff
 8004ed4:	08004ef7 	.word	0x08004ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed8:	f7fe fcc8 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8004edc:	6178      	str	r0, [r7, #20]
        break;
 8004ede:	e013      	b.n	8004f08 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ee0:	f7fe fcda 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 8004ee4:	6178      	str	r0, [r7, #20]
        break;
 8004ee6:	e00f      	b.n	8004f08 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee8:	4b57      	ldr	r3, [pc, #348]	; (8005048 <UART_SetConfig+0x538>)
 8004eea:	617b      	str	r3, [r7, #20]
        break;
 8004eec:	e00c      	b.n	8004f08 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eee:	f7fe fc4f 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8004ef2:	6178      	str	r0, [r7, #20]
        break;
 8004ef4:	e008      	b.n	8004f08 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efa:	617b      	str	r3, [r7, #20]
        break;
 8004efc:	e004      	b.n	8004f08 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	76bb      	strb	r3, [r7, #26]
        break;
 8004f06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8086 	beq.w	800501c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	4a4b      	ldr	r2, [pc, #300]	; (8005044 <UART_SetConfig+0x534>)
 8004f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f22:	005a      	lsls	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	441a      	add	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	2b0f      	cmp	r3, #15
 8004f3c:	d916      	bls.n	8004f6c <UART_SetConfig+0x45c>
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f44:	d212      	bcs.n	8004f6c <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f023 030f 	bic.w	r3, r3, #15
 8004f4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	89fb      	ldrh	r3, [r7, #14]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	89fa      	ldrh	r2, [r7, #14]
 8004f68:	60da      	str	r2, [r3, #12]
 8004f6a:	e057      	b.n	800501c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	76bb      	strb	r3, [r7, #26]
 8004f70:	e054      	b.n	800501c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f72:	7efb      	ldrb	r3, [r7, #27]
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d828      	bhi.n	8004fca <UART_SetConfig+0x4ba>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x470>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fb5 	.word	0x08004fb5
 8004f8c:	08004fcb 	.word	0x08004fcb
 8004f90:	08004fbb 	.word	0x08004fbb
 8004f94:	08004fcb 	.word	0x08004fcb
 8004f98:	08004fcb 	.word	0x08004fcb
 8004f9c:	08004fcb 	.word	0x08004fcb
 8004fa0:	08004fc3 	.word	0x08004fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa4:	f7fe fc62 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8004fa8:	6178      	str	r0, [r7, #20]
        break;
 8004faa:	e013      	b.n	8004fd4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fac:	f7fe fc74 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 8004fb0:	6178      	str	r0, [r7, #20]
        break;
 8004fb2:	e00f      	b.n	8004fd4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb4:	4b24      	ldr	r3, [pc, #144]	; (8005048 <UART_SetConfig+0x538>)
 8004fb6:	617b      	str	r3, [r7, #20]
        break;
 8004fb8:	e00c      	b.n	8004fd4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fba:	f7fe fbe9 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8004fbe:	6178      	str	r0, [r7, #20]
        break;
 8004fc0:	e008      	b.n	8004fd4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc6:	617b      	str	r3, [r7, #20]
        break;
 8004fc8:	e004      	b.n	8004fd4 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	76bb      	strb	r3, [r7, #26]
        break;
 8004fd2:	bf00      	nop
    }

    if (pclk != 0U)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d020      	beq.n	800501c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	4a19      	ldr	r2, [pc, #100]	; (8005044 <UART_SetConfig+0x534>)
 8004fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	fbb3 f2f2 	udiv	r2, r3, r2
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	441a      	add	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	d908      	bls.n	8005018 <UART_SetConfig+0x508>
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500c:	d204      	bcs.n	8005018 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	e001      	b.n	800501c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005038:	7ebb      	ldrb	r3, [r7, #26]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bdb0      	pop	{r4, r5, r7, pc}
 8005042:	bf00      	nop
 8005044:	08005dfc 	.word	0x08005dfc
 8005048:	00f42400 	.word	0x00f42400

0800504c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01a      	beq.n	8005162 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800514a:	d10a      	bne.n	8005162 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	605a      	str	r2, [r3, #4]
  }
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af02      	add	r7, sp, #8
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051a0:	f7fc fc50 	bl	8001a44 <HAL_GetTick>
 80051a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d10e      	bne.n	80051d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f82f 	bl	8005226 <UART_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e025      	b.n	800521e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d10e      	bne.n	80051fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f819 	bl	8005226 <UART_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e00f      	b.n	800521e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	4613      	mov	r3, r2
 8005234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005236:	e062      	b.n	80052fe <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d05e      	beq.n	80052fe <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005240:	f7fc fc00 	bl	8001a44 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	429a      	cmp	r2, r3
 800524e:	d302      	bcc.n	8005256 <UART_WaitOnFlagUntilTimeout+0x30>
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d11d      	bne.n	8005292 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005264:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e045      	b.n	800531e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d02e      	beq.n	80052fe <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ae:	d126      	bne.n	80052fe <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0201 	bic.w	r2, r2, #1
 80052d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e00f      	b.n	800531e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4013      	ands	r3, r2
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	429a      	cmp	r2, r3
 800531a:	d08d      	beq.n	8005238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	88fa      	ldrh	r2, [r7, #6]
 8005340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	88fa      	ldrh	r2, [r7, #6]
 8005348:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535a:	d10e      	bne.n	800537a <UART_Start_Receive_IT+0x52>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <UART_Start_Receive_IT+0x48>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f240 12ff 	movw	r2, #511	; 0x1ff
 800536a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800536e:	e02d      	b.n	80053cc <UART_Start_Receive_IT+0xa4>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	22ff      	movs	r2, #255	; 0xff
 8005374:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005378:	e028      	b.n	80053cc <UART_Start_Receive_IT+0xa4>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10d      	bne.n	800539e <UART_Start_Receive_IT+0x76>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d104      	bne.n	8005394 <UART_Start_Receive_IT+0x6c>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	22ff      	movs	r2, #255	; 0xff
 800538e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005392:	e01b      	b.n	80053cc <UART_Start_Receive_IT+0xa4>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	227f      	movs	r2, #127	; 0x7f
 8005398:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800539c:	e016      	b.n	80053cc <UART_Start_Receive_IT+0xa4>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053a6:	d10d      	bne.n	80053c4 <UART_Start_Receive_IT+0x9c>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <UART_Start_Receive_IT+0x92>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	227f      	movs	r2, #127	; 0x7f
 80053b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053b8:	e008      	b.n	80053cc <UART_Start_Receive_IT+0xa4>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	223f      	movs	r2, #63	; 0x3f
 80053be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053c2:	e003      	b.n	80053cc <UART_Start_Receive_IT+0xa4>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2222      	movs	r2, #34	; 0x22
 80053d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053f4:	d12a      	bne.n	800544c <UART_Start_Receive_IT+0x124>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80053fc:	88fa      	ldrh	r2, [r7, #6]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d324      	bcc.n	800544c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540a:	d107      	bne.n	800541c <UART_Start_Receive_IT+0xf4>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d103      	bne.n	800541c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4a1f      	ldr	r2, [pc, #124]	; (8005494 <UART_Start_Receive_IT+0x16c>)
 8005418:	671a      	str	r2, [r3, #112]	; 0x70
 800541a:	e002      	b.n	8005422 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <UART_Start_Receive_IT+0x170>)
 8005420:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005438:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005448:	609a      	str	r2, [r3, #8]
 800544a:	e01b      	b.n	8005484 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005454:	d107      	bne.n	8005466 <UART_Start_Receive_IT+0x13e>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a0e      	ldr	r2, [pc, #56]	; (800549c <UART_Start_Receive_IT+0x174>)
 8005462:	671a      	str	r2, [r3, #112]	; 0x70
 8005464:	e002      	b.n	800546c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a0d      	ldr	r2, [pc, #52]	; (80054a0 <UART_Start_Receive_IT+0x178>)
 800546a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005482:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	0800591d 	.word	0x0800591d
 8005498:	08005719 	.word	0x08005719
 800549c:	08005641 	.word	0x08005641
 80054a0:	08005569 	.word	0x08005569

080054a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054ba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d107      	bne.n	80054e8 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0210 	bic.w	r2, r2, #16
 80054e6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff fadc 	bl	8004ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800554a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff faae 	bl	8004abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005576:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	2b22      	cmp	r3, #34	; 0x22
 8005580:	d152      	bne.n	8005628 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800558a:	89bb      	ldrh	r3, [r7, #12]
 800558c:	b2d9      	uxtb	r1, r3
 800558e:	89fb      	ldrh	r3, [r7, #14]
 8005590:	b2da      	uxtb	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005596:	400a      	ands	r2, r1
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d139      	bne.n	8005638 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055d2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d10f      	bne.n	800561a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0210 	bic.w	r2, r2, #16
 8005608:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff fa70 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
 8005618:	e002      	b.n	8005620 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff fa58 	bl	8004ad0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005626:	e007      	b.n	8005638 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0208 	orr.w	r2, r2, #8
 8005636:	619a      	str	r2, [r3, #24]
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800564e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	2b22      	cmp	r3, #34	; 0x22
 8005658:	d152      	bne.n	8005700 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005666:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005668:	89ba      	ldrh	r2, [r7, #12]
 800566a:	89fb      	ldrh	r3, [r7, #14]
 800566c:	4013      	ands	r3, r2
 800566e:	b29a      	uxth	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005678:	1c9a      	adds	r2, r3, #2
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d139      	bne.n	8005710 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056aa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d10f      	bne.n	80056f2 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0210 	bic.w	r2, r2, #16
 80056e0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff fa04 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
 80056f0:	e002      	b.n	80056f8 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff f9ec 	bl	8004ad0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056fe:	e007      	b.n	8005710 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0208 	orr.w	r2, r2, #8
 800570e:	619a      	str	r2, [r3, #24]
}
 8005710:	bf00      	nop
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005726:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	2b22      	cmp	r3, #34	; 0x22
 8005748:	f040 80da 	bne.w	8005900 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005752:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005754:	e0aa      	b.n	80058ac <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800575e:	89bb      	ldrh	r3, [r7, #12]
 8005760:	b2d9      	uxtb	r1, r3
 8005762:	8b7b      	ldrh	r3, [r7, #26]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576a:	400a      	ands	r2, r1
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	2b00      	cmp	r3, #0
 800579c:	d04d      	beq.n	800583a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d010      	beq.n	80057ca <UART_RxISR_8BIT_FIFOEN+0xb2>
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00b      	beq.n	80057ca <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2201      	movs	r2, #1
 80057b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c0:	f043 0201 	orr.w	r2, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d010      	beq.n	80057f6 <UART_RxISR_8BIT_FIFOEN+0xde>
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2202      	movs	r2, #2
 80057e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ec:	f043 0204 	orr.w	r2, r3, #4
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d010      	beq.n	8005822 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00b      	beq.n	8005822 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2204      	movs	r2, #4
 8005810:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005818:	f043 0202 	orr.w	r2, r3, #2
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d006      	beq.n	800583a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff f959 	bl	8004ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d132      	bne.n	80058ac <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005854:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d10f      	bne.n	80058a0 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0210 	bic.w	r2, r2, #16
 800588e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff f92d 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
 800589e:	e002      	b.n	80058a6 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff f915 	bl	8004ad0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058ac:	89fb      	ldrh	r3, [r7, #14]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <UART_RxISR_8BIT_FIFOEN+0x1a6>
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f47f af4c 	bne.w	8005756 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058c4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80058c6:	897b      	ldrh	r3, [r7, #10]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d021      	beq.n	8005910 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80058d2:	897a      	ldrh	r2, [r7, #10]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d21b      	bcs.n	8005910 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80058e6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a0b      	ldr	r2, [pc, #44]	; (8005918 <UART_RxISR_8BIT_FIFOEN+0x200>)
 80058ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0220 	orr.w	r2, r2, #32
 80058fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058fe:	e007      	b.n	8005910 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0208 	orr.w	r2, r2, #8
 800590e:	619a      	str	r2, [r3, #24]
}
 8005910:	bf00      	nop
 8005912:	3720      	adds	r7, #32
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	08005569 	.word	0x08005569

0800591c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08a      	sub	sp, #40	; 0x28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800592a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	2b22      	cmp	r3, #34	; 0x22
 800594c:	f040 80da 	bne.w	8005b04 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005956:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005958:	e0aa      	b.n	8005ab0 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005966:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005968:	8aba      	ldrh	r2, [r7, #20]
 800596a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800596c:	4013      	ands	r3, r2
 800596e:	b29a      	uxth	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005978:	1c9a      	adds	r2, r3, #2
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d04d      	beq.n	8005a3e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d010      	beq.n	80059ce <UART_RxISR_16BIT_FIFOEN+0xb2>
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00b      	beq.n	80059ce <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2201      	movs	r2, #1
 80059bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059c4:	f043 0201 	orr.w	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d010      	beq.n	80059fa <UART_RxISR_16BIT_FIFOEN+0xde>
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2202      	movs	r2, #2
 80059e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059f0:	f043 0204 	orr.w	r2, r3, #4
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d010      	beq.n	8005a26 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2204      	movs	r2, #4
 8005a14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a1c:	f043 0202 	orr.w	r2, r3, #2
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d006      	beq.n	8005a3e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff f857 	bl	8004ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d132      	bne.n	8005ab0 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a58:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a68:	f023 0301 	bic.w	r3, r3, #1
 8005a6c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d10f      	bne.n	8005aa4 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0210 	bic.w	r2, r2, #16
 8005a92:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff f82b 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
 8005aa2:	e002      	b.n	8005aaa <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff f813 	bl	8004ad0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ab0:	8afb      	ldrh	r3, [r7, #22]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f47f af4c 	bne.w	800595a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ac8:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005aca:	89fb      	ldrh	r3, [r7, #14]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d021      	beq.n	8005b14 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ad6:	89fa      	ldrh	r2, [r7, #14]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d21b      	bcs.n	8005b14 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005aea:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a0b      	ldr	r2, [pc, #44]	; (8005b1c <UART_RxISR_16BIT_FIFOEN+0x200>)
 8005af0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0220 	orr.w	r2, r2, #32
 8005b00:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b02:	e007      	b.n	8005b14 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0208 	orr.w	r2, r2, #8
 8005b12:	619a      	str	r2, [r3, #24]
}
 8005b14:	bf00      	nop
 8005b16:	3728      	adds	r7, #40	; 0x28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	08005641 	.word	0x08005641

08005b20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e027      	b.n	8005bc2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2224      	movs	r2, #36	; 0x24
 8005b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0201 	bic.w	r2, r2, #1
 8005b98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ba0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e02d      	b.n	8005c42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2224      	movs	r2, #36	; 0x24
 8005bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f850 	bl	8005cc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e02d      	b.n	8005cbe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2224      	movs	r2, #36	; 0x24
 8005c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0201 	bic.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f812 	bl	8005cc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d108      	bne.n	8005cea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ce8:	e031      	b.n	8005d4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cea:	2308      	movs	r3, #8
 8005cec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cee:	2308      	movs	r3, #8
 8005cf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	0e5b      	lsrs	r3, r3, #25
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	0f5b      	lsrs	r3, r3, #29
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d12:	7bbb      	ldrb	r3, [r7, #14]
 8005d14:	7b3a      	ldrb	r2, [r7, #12]
 8005d16:	4911      	ldr	r1, [pc, #68]	; (8005d5c <UARTEx_SetNbDataToProcess+0x94>)
 8005d18:	5c8a      	ldrb	r2, [r1, r2]
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d1e:	7b3a      	ldrb	r2, [r7, #12]
 8005d20:	490f      	ldr	r1, [pc, #60]	; (8005d60 <UARTEx_SetNbDataToProcess+0x98>)
 8005d22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d24:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	7b7a      	ldrb	r2, [r7, #13]
 8005d34:	4909      	ldr	r1, [pc, #36]	; (8005d5c <UARTEx_SetNbDataToProcess+0x94>)
 8005d36:	5c8a      	ldrb	r2, [r1, r2]
 8005d38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d3c:	7b7a      	ldrb	r2, [r7, #13]
 8005d3e:	4908      	ldr	r1, [pc, #32]	; (8005d60 <UARTEx_SetNbDataToProcess+0x98>)
 8005d40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d42:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	08005e14 	.word	0x08005e14
 8005d60:	08005e1c 	.word	0x08005e1c

08005d64 <__libc_init_array>:
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	4d0d      	ldr	r5, [pc, #52]	; (8005d9c <__libc_init_array+0x38>)
 8005d68:	4c0d      	ldr	r4, [pc, #52]	; (8005da0 <__libc_init_array+0x3c>)
 8005d6a:	1b64      	subs	r4, r4, r5
 8005d6c:	10a4      	asrs	r4, r4, #2
 8005d6e:	2600      	movs	r6, #0
 8005d70:	42a6      	cmp	r6, r4
 8005d72:	d109      	bne.n	8005d88 <__libc_init_array+0x24>
 8005d74:	4d0b      	ldr	r5, [pc, #44]	; (8005da4 <__libc_init_array+0x40>)
 8005d76:	4c0c      	ldr	r4, [pc, #48]	; (8005da8 <__libc_init_array+0x44>)
 8005d78:	f000 f820 	bl	8005dbc <_init>
 8005d7c:	1b64      	subs	r4, r4, r5
 8005d7e:	10a4      	asrs	r4, r4, #2
 8005d80:	2600      	movs	r6, #0
 8005d82:	42a6      	cmp	r6, r4
 8005d84:	d105      	bne.n	8005d92 <__libc_init_array+0x2e>
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8c:	4798      	blx	r3
 8005d8e:	3601      	adds	r6, #1
 8005d90:	e7ee      	b.n	8005d70 <__libc_init_array+0xc>
 8005d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d96:	4798      	blx	r3
 8005d98:	3601      	adds	r6, #1
 8005d9a:	e7f2      	b.n	8005d82 <__libc_init_array+0x1e>
 8005d9c:	08005e2c 	.word	0x08005e2c
 8005da0:	08005e2c 	.word	0x08005e2c
 8005da4:	08005e2c 	.word	0x08005e2c
 8005da8:	08005e34 	.word	0x08005e34

08005dac <memset>:
 8005dac:	4402      	add	r2, r0
 8005dae:	4603      	mov	r3, r0
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d100      	bne.n	8005db6 <memset+0xa>
 8005db4:	4770      	bx	lr
 8005db6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dba:	e7f9      	b.n	8005db0 <memset+0x4>

08005dbc <_init>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	bf00      	nop
 8005dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc2:	bc08      	pop	{r3}
 8005dc4:	469e      	mov	lr, r3
 8005dc6:	4770      	bx	lr

08005dc8 <_fini>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	bf00      	nop
 8005dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dce:	bc08      	pop	{r3}
 8005dd0:	469e      	mov	lr, r3
 8005dd2:	4770      	bx	lr
